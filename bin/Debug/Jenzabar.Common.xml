<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Jenzabar.Common</name>
    </assembly>
    <members>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Configuration.ConfigurationSectionData">
            <summary>
            <para>Represents a configuration section in configuration.</para>
            </summary>
            <remarks>
            <para>The class maps to the <c>configurationSection</c> element in configuration.</para>
            </remarks>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Configuration.ConfigurationSectionData.#ctor">
            <summary>
            <para>Initializes a new instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Configuration.ConfigurationSectionData"/> class.</para>
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Configuration.ConfigurationSectionData.#ctor(System.String)">
            <summary>
            <para>Initializes a new instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Configuration.ConfigurationSectionData"/> class with a name.</para>
            </summary>
            <param name="name">
            <para>The name of the section.</para>
            </param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Configuration.ConfigurationSectionData.#ctor(System.String,System.Boolean)">
            <summary>
            <para>Initializes a new instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Configuration.ConfigurationSectionData"/> class with a name.</para>
            </summary>
            <param name="name">
            <para>The name of the section.</para>
            </param>
            <param name="encrypt">
            <para>Determines if the section is encrypted or not.</para>
            </param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Configuration.ConfigurationSectionData.#ctor(System.String,System.Boolean,Microsoft.Practices.EnterpriseLibrary.Configuration.StorageProviderData,Microsoft.Practices.EnterpriseLibrary.Configuration.TransformerData)">
            <summary>
            <para>Initializes a new instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Configuration.ConfigurationSectionData"/> class with a name, a cache, a storage provider, a data protection provider and a data transformer.</para>
            </summary>
            <param name="name">
            <para>The name of the section.</para>
            </param>
            <param name="encrypt">
            <para>Determines if the section is encrypted or not.</para>
            </param>
            <param name="storageProvider">
            <para>The <see cref="T:Microsoft.Practices.EnterpriseLibrary.Configuration.StorageProviderData"/> used for the configuration section.</para>
            </param>        
            <param name="transformer">
            <para>The <see cref="T:Microsoft.Practices.EnterpriseLibrary.Configuration.TransformerData"/> used for the section.</para>
            </param>                
            <seealso cref="T:Microsoft.Practices.EnterpriseLibrary.Configuration.StorageProviderData"/>        
            <seealso cref="T:Microsoft.Practices.EnterpriseLibrary.Configuration.TransformerData"/>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Configuration.ConfigurationSectionData.StorageProvider">
            <summary>
            <para>Gets or sets the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Configuration.StorageProviderData"/> settings for the section.</para>
            </summary>
            <value>
            <para>The <see cref="T:Microsoft.Practices.EnterpriseLibrary.Configuration.StorageProviderData"/> settings for the section. The default is <see langword="null"/> reference (Nothing in Visual Basic).</para>
            </value>
            <remarks>
            <para>This property maps to the <c>storageProvider</c> attribute in configuration for the configuration section.</para>
            </remarks>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Configuration.ConfigurationSectionData.Transformer">
            <summary>
            <para>Gets or sets the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Configuration.TransformerData"/> settings for the section.</para>
            </summary>
            <value>
            <para>The <see cref="T:Microsoft.Practices.EnterpriseLibrary.Configuration.TransformerData"/> settings for the section. The default is <see langword="null"/> reference (Nothing in Visual Basic).</para>
            </value>
            <remarks>
            <para>This property maps to the <c>dataTransformer</c> attribute in configuration for the configuration section.</para>
            </remarks>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Configuration.ConfigurationSectionData.Name">
            <summary>
            <para>Gets or sets the name of the configuration section.</para>
            </summary>
            <value>
            <para>The name of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Configuration.ConfigurationSectionData"/>. The default is an empty string.</para>
            </value>
            <remarks>
            <para>This property maps to the <c>name</c> attribute in configuration for the configuration section.</para>
            </remarks>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Configuration.ConfigurationSectionData.Encrypt">
            <summary>
            <para>Gets or sets if the section will be encrypted.</para>
            </summary>
            <value>
            <para><see langword="true"/> if the section will be encrypted; otherwise, <see langword="false"/>. The deafult is <see langword="false"/>.</para>
            </value>
            <remarks>
            <para>This property maps to the <c>encrypt</c> attribute in configuration for the configuration section.</para>
            </remarks>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Configuration.Storage.IConfigurationChangeWatcher">
            <summary>
            <para>Provides a way to watch for changes to configuration in storage.</para>
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Configuration.Storage.IConfigurationChangeWatcher.StartWatching">
            <summary>
            When implemented by a subclass, starts the object watching for configuration changes
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Configuration.Storage.IConfigurationChangeWatcher.StopWatching">
            <summary>
            When implemented by a subclass, stops the object from watching for configuration changes
            </summary>
        </member>
        <member name="E:Microsoft.Practices.EnterpriseLibrary.Configuration.Storage.IConfigurationChangeWatcher.ConfigurationChanged">
            <summary>
            Event raised when the underlying persistence mechanism for configuration notices that
            the persistent representation of configuration information has changed.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Configuration.Storage.IConfigurationChangeWatcher.SectionName">
            <summary>
            When implemented by a subclass, returns the section name that is being watched.
            </summary>
        </member>
        <member name="T:Jenzabar.Common.JCUtilities">
            <summary>
            Jenzabar Common Utilities.
            </summary>
        </member>
        <member name="M:Jenzabar.Common.JCUtilities.CreateResourceManager(System.String,System.Reflection.Assembly)">
            <summary>
            Method to initialize the resource manager instance variable.
            Lokks for language in Web.config, if resource file for the language ban not be found - 
            initialize with default (English) resource file
            Will be called in constructors of all Resources classes
            </summary>
            <param name="resInfo">resource information as Namespace.filename (No extension!)</param>
            <param name="assembly">assembly to look resource for</param>
        </member>
        <member name="M:Jenzabar.Common.JCUtilities.ResolveUrl(System.String)">
            <summary>
            resolve relative URL; works like Page.ResolveURL
            useful in classes like AuthenticationModule, where there is no native ResolveURL function
            </summary>
            <param name="relative">relative url</param>
            <returns>valid url for redirection</returns>
        </member>
        <member name="M:Jenzabar.Common.JCUtilities.GetUniqueString(System.String)">
            <summary>
            returns uniques datetime stamped string;
            Can be used in Create ActiveDirectory objects methods for
            generating name (name is not displayed anywhere)
            </summary>
            <param name="prefix">prefix for string</param>
            <returns>string + datetime stamp, smth like "prefix 2000-08-17T16:32:32:10"</returns>
        </member>
        <member name="T:Jenzabar.Common.DateRange">
            <summary>
            Represents all time between a range of dates.
            </summary>
        </member>
        <member name="F:Jenzabar.Common.DateRange.Forever">
            <summary>
            Represents forever.
            </summary>
        </member>
        <member name="F:Jenzabar.Common.DateRange.Never">
            <summary>
            Represents a DateRange that will never be active.
            </summary>
        </member>
        <member name="F:Jenzabar.Common.DateRange.EndOfTime">
            <summary>
            Represents a DateRange that is only active at DateTime.MaxValue.
            </summary>
        </member>
        <member name="F:Jenzabar.Common.DateRange.BeginningOfTime">
            <summary>
            Represents a DateRange that is only active at DateTime.MinValue.
            </summary>
        </member>
        <member name="M:Jenzabar.Common.DateRange.#ctor(System.DateTime,System.TimeSpan)">
            <summary>
            Creates a new instance of the DateRange structure
            </summary>
            <param name="start">The moment that the DateRange begins.</param>
            <param name="length">The amount of time the date range should represent.</param>
        </member>
        <member name="M:Jenzabar.Common.DateRange.#ctor(System.DateTime,System.DateTime)">
            <summary>
            Creates a new instance of the DateRange structure
            </summary>
            <param name="start">The moment that the DateRange begins.</param>
            <param name="end">The moment that the DateRange ends.</param>
        </member>
        <member name="M:Jenzabar.Common.DateRange.Contains(System.DateTime)">
            <summary>
            Returns true if the date specified is between the start and end date.
            </summary>
            <param name="date">The date that will be checked to see if it is within this range of dates.</param>
            <returns>True if the date is in this range of dates, otherwise false.</returns>
        </member>
        <member name="M:Jenzabar.Common.DateRange.ToString">
            <summary>
            Returns this DateRange as a string in the format 'start_date start_time - end_date end_time'.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Jenzabar.Common.DateRange.Equals(System.Object)">
            <summary>
            Determines if this DateRange is equal to an other object
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Jenzabar.Common.DateRange.GetHashCode">
            <summary>
            Gets the hash code for this DateRange
            </summary>
            <returns></returns>
        </member>
        <member name="P:Jenzabar.Common.DateRange.Future">
            <summary>
            Gets a daterange that represents now till the end of time.
            </summary>
        </member>
        <member name="P:Jenzabar.Common.DateRange.Past">
            <summary>
            Gets a DateRange that represents the begining of time till now.
            </summary>
        </member>
        <member name="P:Jenzabar.Common.DateRange.Today">
            <summary>
            Gets a DateRange that represents all of today.
            </summary>
        </member>
        <member name="P:Jenzabar.Common.DateRange.Start">
            <summary>
            Gets the moment that this DateRange becomes valid.
            </summary>
        </member>
        <member name="P:Jenzabar.Common.DateRange.End">
            <summary>
            Gets the moment that this DataRange Becomes invalid
            </summary>
        </member>
        <member name="P:Jenzabar.Common.DateRange.Length">
            <summary>
            Gets the length of this DateRange
            </summary>
        </member>
        <member name="P:Jenzabar.Common.DateRange.IsActiveNow">
            <summary>
            True if the current date and time fall within the Start and End of this DateRange, otherwise false.
            </summary>
        </member>
        <member name="P:Jenzabar.Common.DateRange.IsValid">
            <summary>
            True if the start date is less than the end date, false otherwise.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Configuration.TransformerProvider">
            <summary>
            <para>Represents an object that transforms configuration data from storage.</para>
            </summary>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Configuration.ConfigurationProvider">
            <summary>
            <para>Represents an object that consumes configuration. This class is abstract.</para>
            </summary>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Configuration.IConfigurationProvider">
            <summary>
            <para>
            This interface specifies the contract that providers created through configuration
            must implement to allow them to be properly created and initialized through reflection.
            </para>
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Configuration.IConfigurationProvider.Initialize(Microsoft.Practices.EnterpriseLibrary.Configuration.ConfigurationView)">
            <summary>
            <para>Initializes the provider with a <see cref="T:Microsoft.Practices.EnterpriseLibrary.Configuration.ConfigurationView"/>.</para>
            </summary>
            <param name="configurationView">
            <para>A <see cref="T:Microsoft.Practices.EnterpriseLibrary.Configuration.ConfigurationView"/> object.</para>
            </param>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Configuration.IConfigurationProvider.ConfigurationName">
            <summary>
            <para>Gets or sets the name of the provider.</para>
            </summary>
            <value>
            <para>The name of the provider.</para>
            </value>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Configuration.ConfigurationProvider.#ctor">
            <summary>
            <para>Initialize a new instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Configuration.ConfigurationProvider"/> class.</para>
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Configuration.ConfigurationProvider.Initialize(Microsoft.Practices.EnterpriseLibrary.Configuration.ConfigurationView)">
            <summary>
            <para>When overridden by a class, initializes the provider with a <see cref="T:Microsoft.Practices.EnterpriseLibrary.Configuration.ConfigurationView"/>.</para>
            </summary>
            <param name="configurationView">
            <para>A <see cref="T:Microsoft.Practices.EnterpriseLibrary.Configuration.ConfigurationView"/> object.</para>
            </param>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Configuration.ConfigurationProvider.ConfigurationName">
            <summary>
            <para>Gets or sets the name of the provider.</para>
            </summary>
            <value><para>The name of the provider.</para></value>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Configuration.ITransformer">
            <summary>
            <para>
            Represents a standard interface for transforming configuration data coming from and to storage.
            </para>
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Configuration.ITransformer.Deserialize(System.Object)">
            <summary>
            <para>
            When implemented by a class, deserializes the configuration data coming from storage.
            </para>
            </summary>
            <param name="section">
            <para>The data that came from storage.</para>
            </param>
            <returns>
            <para>An object that can be consumed by the calling assembly that wants configuration data.</para>
            </returns>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Configuration.ITransformer.Serialize(System.Object)">
            <summary>
            <para>
            When implemented by a class, serializes the configuration data coming from the calling assembly and maps it into something that the storage provider can understand.
            </para>
            </summary>
            <param name="value">
            <para>The data to serialize.</para>
            </param>
            <returns>
            <para>The object that can be consumed by the storage provider.</para>
            </returns>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Configuration.ITransformer.CurrentSectionName">
            <summary>
            <para>Gets the name of the configuration section.</para>
            </summary>
            <value>
            <para>The name of the configuration section.</para>
            </value>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Configuration.TransformerProvider.#ctor">
            <summary>
            <para>Initialize a new instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Configuration.TransformerProvider"/> class.</para>
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Configuration.TransformerProvider.Deserialize(System.Object)">
            <summary>
            <para>When overriden by a class, deserializes the configuration section data.</para>
            </summary>
            <param name="section">
            <para>The configuration section data.</para>
            </param>
            <returns>
            <para>The deserialized object.</para>
            </returns>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Configuration.TransformerProvider.Serialize(System.Object)">
            <summary>
            <para>When overriden by a class, serialzies the configuration data so it can be saved to storage.</para>
            </summary>
            <param name="value">
            <para>The configuration data to serialzie.</para>
            </param>
            <returns>
            <para>The serailzied object.</para>
            </returns>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Configuration.TransformerProvider.CurrentSectionName">
            <summary>
            <para>Gets the name of the configuration section.</para>
            </summary>
            <value>
            <para>The name of the configuration section.</para>
            </value>
        </member>
        <member name="T:Jenzabar.Common.RequestValidationException">
            <summary>
            Use this Exception with user friendly messages, 
            already internationalized etc.
            </summary>
        </member>
        <member name="T:Jenzabar.Common.JenzaException">
            <summary>
            The base exception for all custom Jenzabar exceptions
            </summary>
        </member>
        <member name="F:Jenzabar.Common.JenzaException._errorLevel">
            <summary>
            level of exception severity, see Jenzabar.Common.JCConstants for descriptions
            </summary>
        </member>
        <member name="M:Jenzabar.Common.JenzaException.#ctor">
            <summary>
            Constructs the exception
            </summary>
        </member>
        <member name="M:Jenzabar.Common.JenzaException.#ctor(System.String)">
            <summary>
            Constructs the exception
            </summary>
            <param name="message">The message to be stored in the exception</param>
        </member>
        <member name="M:Jenzabar.Common.JenzaException.#ctor(System.String,System.Exception)">
            <summary>
            Constructs the exception
            </summary>
            <param name="message">The message to be stored in the exception</param>
            <param name="innerException">The intial exception to be wrapped by the JenzaException</param>
        </member>
        <member name="M:Jenzabar.Common.JenzaException.#ctor(System.String,System.Exception,Jenzabar.Common.ErrorLevel)">
            <summary>
            Constructs the exception
            </summary>
            <param name="message">The message to be stored in the exception</param>
            <param name="innerException">The intial exception to be wrapped by the JenzaException</param>
            <param name="errorLevel">The severity of the error.</param>
        </member>
        <member name="P:Jenzabar.Common.JenzaException.Category">
            <summary>
            category of exception, see enum for descriptions
            </summary>
        </member>
        <member name="P:Jenzabar.Common.JenzaException.Published">
            <summary>
            property shows if exception of any inner exception of it was published
            get changed in JenzaPublisher
            </summary>
        </member>
        <member name="M:Jenzabar.Common.RequestValidationException.#ctor(System.String)">
            <summary>
            Constructs the exception
            </summary>
            <param name="message">The message to be stored in the exception</param>
        </member>
        <member name="M:Jenzabar.Common.RequestValidationException.#ctor(System.String,System.Exception)">
            <summary>
            Constructs the exception
            </summary>
            <param name="message">The message to be stored in the exception</param>
            <param name="innerException">The intial exception to be wrapped</param>
        </member>
        <member name="M:Jenzabar.Common.RequestValidationException.#ctor(System.String,System.Exception,Jenzabar.Common.ErrorLevel)">
            <summary>
            Constructs the exception
            </summary>
            <param name="message">The message to be stored in the exception</param>
            <param name="innerException">The intial exception to be wrapped</param>
            <param name="errorLevel">error severity level</param>
        </member>
        <member name="P:Jenzabar.Common.RequestValidationException.Category">
            <summary>
            category of exception, see enum for descriptions
            </summary>
        </member>
        <member name="T:Jenzabar.Common.Web.UI.Controls.TextBoxEditor">
            <summary>
            A System.Web.UI.Control that provides rich text editing capabilities 
            through CuteEditor.
            </summary>
        </member>
        <member name="M:Jenzabar.Common.Web.UI.Controls.TextBoxEditor.#ctor">
            <summary>
            The constructor that configures the CuteEditor for the text box 
            and adds it to the list of controls.
            </summary>
        </member>
        <member name="M:Jenzabar.Common.Web.UI.Controls.TextBoxEditor.Render(System.Web.UI.HtmlTextWriter)">
            <summary>
            Renders this control as a System.Web.UI.LiteralControl (HTML, text, strings) 
            or as a System.Web.UI.DataBoundLiteralControl that contains data-binding expressions
            that are processed by the server.
            </summary>
            <param name="writer">The HtmlTextWriter that renders the control.</param>
        </member>
        <member name="P:Jenzabar.Common.Web.UI.Controls.TextBoxEditor.MaxLength">
            <summary>
            Gets and sets the maximum length of all user-entered text, 
            including markup.
            </summary>
        </member>
        <member name="P:Jenzabar.Common.Web.UI.Controls.TextBoxEditor.InnerHtml">
            <summary>
            Gets and sets the text and markup.
            </summary>
        </member>
        <member name="P:Jenzabar.Common.Web.UI.Controls.TextBoxEditor.Value">
            <summary>
            Gets and sets the text and markup.
            </summary>
        </member>
        <member name="P:Jenzabar.Common.Web.UI.Controls.TextBoxEditor.InnerText">
            <summary>
            Gets and sets the text without the mark up.
            </summary>
        </member>
        <member name="P:Jenzabar.Common.Web.UI.Controls.TextBoxEditor.Rows">
            <summary>
            Gets and sets the number of character-height rows to display 
            for the text box.
            </summary>
        </member>
        <member name="P:Jenzabar.Common.Web.UI.Controls.TextBoxEditor.Columns">
            <summary>
            Gets and sets the number of character-length columns to display 
            for the text box.
            </summary>
        </member>
        <member name="P:Jenzabar.Common.Web.UI.Controls.TextBoxEditor.Cols">
            <summary>
            Gets and sets the number of character-length columns to display 
            for the text box.
            </summary>
        </member>
        <member name="P:Jenzabar.Common.Web.UI.Controls.TextBoxEditor.Width">
            <summary>
            Gets and sets the width of the text editor.
            </summary>
        </member>
        <member name="P:Jenzabar.Common.Web.UI.Controls.TextBoxEditor.Height">
            <summary>
            Gets and sets the height of the text editor
            </summary>
        </member>
        <member name="T:Jenzabar.Common.Web.UI.Controls.EmailTemplate">
            <summary>
            This control can be used anywhere that email functionality is needed.
            It was designed to create and edit email templates, but the same control can also 
            be used for generic email use. This custom control comes with default labels and 
            a default look &amp; feel. Individual controls (text boxes, labels, etc.) are customizable through its properties. 
            </summary>
        </member>
        <member name="E:Jenzabar.Common.Web.UI.Controls.EmailTemplate.SaveClick">
            <summary>
            Click event for Save button. The event can be used to implement any custom functionality/action associated with Save button.
            </summary>
        </member>
        <member name="E:Jenzabar.Common.Web.UI.Controls.EmailTemplate.DeleteClick">
            <summary>
            Click event for Delete button. The event can be used to implement any custom functionality/action associated with Delete button.
            </summary>
        </member>
        <member name="E:Jenzabar.Common.Web.UI.Controls.EmailTemplate.CancelClick">
            <summary>
            Click event for Cancel button. The event can be used to implement any custom functionality/action associated with Cancel button.
            </summary>
        </member>
        <member name="E:Jenzabar.Common.Web.UI.Controls.EmailTemplate.SendTestClick">
            <summary>
            Click event for Send test email button. The event can be used to implement any custom functionality/action associated with Send test email button.
            </summary>
        </member>
        <member name="P:Jenzabar.Common.Web.UI.Controls.EmailTemplate.TemplateNameLabel">
            <summary>
            Get or set the <b>Template Name</b> label.
            </summary>
        </member>
        <member name="P:Jenzabar.Common.Web.UI.Controls.EmailTemplate.FromLabel">
            <summary>
            Get or set the <b>To</b> label text
            </summary>
        </member>
        <member name="P:Jenzabar.Common.Web.UI.Controls.EmailTemplate.CCLabel">
            <summary>
            Get or set the <B>CC</B> label text
            </summary>
        </member>
        <member name="P:Jenzabar.Common.Web.UI.Controls.EmailTemplate.BCCLabel">
            <summary>
            Get or set the <B>BCC</B> label text
            </summary>
        </member>
        <member name="P:Jenzabar.Common.Web.UI.Controls.EmailTemplate.SubjectLabel">
            <summary>
            Get or set the <B>Subject</B> label text
            </summary>
        </member>
        <member name="P:Jenzabar.Common.Web.UI.Controls.EmailTemplate.MessageLabel">
            <summary>
            Get or set the <B>Message</B> label text
            </summary>
        </member>
        <member name="P:Jenzabar.Common.Web.UI.Controls.EmailTemplate.HelpTipLabel">
            <summary>
            Get or set the <B>Help Tip</B> label text. 
            This text appears as a hyperlink below the message text area.
            </summary>
        </member>
        <member name="P:Jenzabar.Common.Web.UI.Controls.EmailTemplate.FormatLabel">
            <summary>
            Get or set the <B>Email Format</B> label text
            </summary>
        </member>
        <member name="P:Jenzabar.Common.Web.UI.Controls.EmailTemplate.RoleLabel">
            <summary>
            Get or set the <B>Role</B> label text
            </summary>
        </member>
        <member name="P:Jenzabar.Common.Web.UI.Controls.EmailTemplate.SaveButtonLabel">
            <summary>
            Get or set the <B>Save</B> button label text.
            </summary>
        </member>
        <member name="P:Jenzabar.Common.Web.UI.Controls.EmailTemplate.DeleteButtonLabel">
            <summary>
            Get or set the <B>Delete</B> button label text
            </summary>
        </member>
        <member name="P:Jenzabar.Common.Web.UI.Controls.EmailTemplate.CancelButtonLabel">
            <summary>
            Get or set the <B>Cancel</B> button label text
            </summary>
        </member>
        <member name="P:Jenzabar.Common.Web.UI.Controls.EmailTemplate.SendButtonLabel">
            <summary>
            Get or set the <B>Send</B> button label text
            </summary>
        </member>
        <member name="P:Jenzabar.Common.Web.UI.Controls.EmailTemplate.SendTestLabel">
            <summary>
            Get or set the <B>Send Test</B> label text
            </summary>
        </member>
        <member name="P:Jenzabar.Common.Web.UI.Controls.EmailTemplate.ShowDeleteButton">
            <summary>
            Get or set whether to show the <B>Delete</B> button
            </summary>
        </member>
        <member name="P:Jenzabar.Common.Web.UI.Controls.EmailTemplate.ShowSaveButton">
            <summary>
            Get or set whether to show the <B>Save</B> button
            </summary>
        </member>
        <member name="P:Jenzabar.Common.Web.UI.Controls.EmailTemplate.ShowCancelButton">
            <summary>
            Get or set whether to show the <B>Cancel</B> button
            </summary>
        </member>
        <member name="P:Jenzabar.Common.Web.UI.Controls.EmailTemplate.TemplateNameTextBoxColumns">
            <summary>
            Get or set the width of <B>Template Name</B> textbox control.
            </summary>
        </member>
        <member name="P:Jenzabar.Common.Web.UI.Controls.EmailTemplate.ToEmailAddressTextBoxColumns">
            <summary>
            Get or set the width of <B>To Email Address</B> textbox control.
            </summary>
        </member>
        <member name="P:Jenzabar.Common.Web.UI.Controls.EmailTemplate.CCEmailAddressTextBoxColumns">
            <summary>
            Get or set the width of <B>CC Email Address</B> textbox control.
            </summary>
        </member>
        <member name="P:Jenzabar.Common.Web.UI.Controls.EmailTemplate.BCCEmailAddressTextBoxColumns">
            <summary>
            Get or set the width of <B>BCC Email Address</B> textbox control.
            </summary>
        </member>
        <member name="P:Jenzabar.Common.Web.UI.Controls.EmailTemplate.SubjectTextBoxColumns">
            <summary>
            Get or set the width of <B>Subject</B> textbox control.
            </summary>
        </member>
        <member name="P:Jenzabar.Common.Web.UI.Controls.EmailTemplate.MessageTextBoxColumns">
            <summary>
            Get or set the width of <B>Message</B> text-area control.
            </summary>
        </member>
        <member name="P:Jenzabar.Common.Web.UI.Controls.EmailTemplate.MessageTextBoxRows">
            <summary>
            Get or set the height of <B>Message</B> text-area control.
            </summary>
        </member>
        <member name="P:Jenzabar.Common.Web.UI.Controls.EmailTemplate.SendTestEmailTextBoxColumns">
            <summary>
            Get or set the width of <B>Send Test Email</B> textbox control.
            </summary>
        </member>
        <member name="P:Jenzabar.Common.Web.UI.Controls.EmailTemplate.CSSClassForLabel">
            <summary>
            Get or set the CSS Classes for labels
            </summary>
        </member>
        <member name="P:Jenzabar.Common.Web.UI.Controls.EmailTemplate.CSSClassForTextBox">
            <summary>
            Gets and sets the CSS Classes for the various TextBox controls.
            </summary>
        </member>
        <member name="P:Jenzabar.Common.Web.UI.Controls.EmailTemplate.CSSClassForHyperLink">
            <summary>
            Gets and sets the CSS Class for HyperLink controls
            </summary>
        </member>
        <member name="P:Jenzabar.Common.Web.UI.Controls.EmailTemplate.CSSClassForDropDownList">
            <summary>
            Gets and sets the CSS Class for the DropDownList control.
            </summary>
        </member>
        <member name="P:Jenzabar.Common.Web.UI.Controls.EmailTemplate.CSSClassForRadioButtonList">
            <summary>
            Gets and sets the CSS Class for the RadioButtonList control
            </summary>
        </member>
        <member name="P:Jenzabar.Common.Web.UI.Controls.EmailTemplate.CSSClassForButton">
            <summary>
            Gets and sets the CSS Classes for the button controls
            </summary>
        </member>
        <member name="P:Jenzabar.Common.Web.UI.Controls.EmailTemplate.TemplateName">
            <summary>
            Gets and sets the <B>Email Template Name</B>
            </summary>
        </member>
        <member name="P:Jenzabar.Common.Web.UI.Controls.EmailTemplate.FromAddress">
            <summary>
            Gets and sets the <B>From</B> Email Address
            </summary>
        </member>
        <member name="P:Jenzabar.Common.Web.UI.Controls.EmailTemplate.CCAddress">
            <summary>
            Gets and sets the <B>CC</B> Email Address
            </summary>
        </member>
        <member name="P:Jenzabar.Common.Web.UI.Controls.EmailTemplate.BCCAddress">
            <summary>
            Gets and sets the <B>BCC</B> Email Address
            </summary>
        </member>
        <member name="P:Jenzabar.Common.Web.UI.Controls.EmailTemplate.Subject">
            <summary>
            Gets and sets the email <B>Subject</B>
            </summary>
        </member>
        <member name="P:Jenzabar.Common.Web.UI.Controls.EmailTemplate.Message">
            <summary>
            Gets and sets the Email <B>Message</B>
            </summary>
        </member>
        <member name="P:Jenzabar.Common.Web.UI.Controls.EmailTemplate.EmailFormat">
            <summary>
            Gets and sets the <B>Email Format</B>. 
            </summary>
        </member>
        <member name="P:Jenzabar.Common.Web.UI.Controls.EmailTemplate.Role">
            <summary>
            Gets and sets the <B>Role</B>. 
            </summary>
        </member>
        <member name="P:Jenzabar.Common.Web.UI.Controls.EmailTemplate.SendTestEmailAddress">
            <summary>
            Gets and sets the <B>Send Test Email</B> address
            </summary>
        </member>
        <member name="P:Jenzabar.Common.Web.UI.Controls.EmailTemplate.DataSoruce">
            <summary>
            Gets and sets the DataSoruce for EmailTemplate. If no DataSoruce is provided, control assumes a new template creation.
            </summary>
        </member>
        <member name="P:Jenzabar.Common.Web.UI.Controls.EmailTemplate.RoleDataSoruce">
            <summary>
            Sets and binds the DataSoruce for Role dropdown list
            </summary>
        </member>
        <member name="P:Jenzabar.Common.Web.UI.Controls.EmailTemplate.ShowRoleDropdown">
            <summary>
            Gets and sets whether the role dropdown is visible.
            </summary>
        </member>
        <member name="T:Jenzabar.Common.Web.UI.Controls.DisplayControlBase">
            <summary>
            Provides a markup construct that stylizes the text displayed in portlet forms.
            </summary>
            <remarks>This control extends .NET's System.Web.UI.Control 
            and is extended by the Jenzabar controls, <see cref="T:Jenzabar.Common.Web.UI.Controls.Hint">Hint</see> 
            and <see cref="T:Jenzabar.Common.Web.UI.Controls.Notice">Notice</see>.</remarks>
        </member>
        <member name="M:Jenzabar.Common.Web.UI.Controls.DisplayControlBase.#ctor(System.String)">
            <summary>
            Creates a new instance that marks up the page in the given CSS style (e.g., "hint", "notice").
            
            </summary>
        </member>
        <member name="M:Jenzabar.Common.Web.UI.Controls.DisplayControlBase.AddParsedSubObject(System.Object)">
            <summary>
            Adds a control or text from the inner contents of the control definition to the control tree.
            </summary>
            <param name="obj">An object that is a LiteralControl or text string.</param>
        </member>
        <member name="M:Jenzabar.Common.Web.UI.Controls.DisplayControlBase.SaveViewState">
            <summary>
            Stores the view state information for this control.
            </summary>
            <returns>A System.Web.UI.Pair object representing this control's state:  text is saved with the server control viewstate.</returns>
        </member>
        <member name="M:Jenzabar.Common.Web.UI.Controls.DisplayControlBase.Render(System.Web.UI.HtmlTextWriter)">
            <summary>
            Renders this control in the given style using an HTML paragraph class attribute.
            </summary>
            <param name="writer">The HtmlTextWriter that renders the control.</param>
        </member>
        <member name="M:Jenzabar.Common.Web.UI.Controls.DisplayControlBase.LoadViewState(System.Object)">
            <summary>
            Restores the view state that was saved during the last rendering of the control.
            </summary>
            <param name="savedState">The saved view state object for this control.  The object is cast to a System.Web.UI.Pair.</param>
        </member>
        <member name="P:Jenzabar.Common.Web.UI.Controls.DisplayControlBase.Text">
            <summary>
            Gets and sets the text to be displayed to the user.
            </summary>
        </member>
        <member name="P:Jenzabar.Common.Web.UI.Controls.DisplayControlBase.EnableViewState">
            <summary>
            True if the display text maintains its view state; false, otherwise. 
            The default value is false.
            </summary>
        </member>
        <member name="P:Jenzabar.Common.Web.UI.Controls.DisplayControlBase.TextKey">
            <summary>
            Gets and sets the key for retrieving the globalized text string to display.
            </summary>
        </member>
        <member name="T:Jenzabar.Common.Web.UI.Controls.DayOfWeekSelector">
            <summary>
            Displays a list of checkboxes, one for each day of the week.
            Also globalizes the names of the days of the week.
            </summary>
            <remarks>This control extends <see cref="T:Jenzabar.Common.Web.UI.Controls.CheckBoxList2">CheckBoxList2</see>.</remarks>
        </member>
        <member name="T:Jenzabar.Common.Web.UI.Controls.CheckBoxList2">
            <summary>
            This control creates a multi-select check box group that can be dynamically created by binding the control to a data source.
            </summary>
            <remarks>This control extends System.Web.UI.WebControls.CheckBoxList.</remarks>
        </member>
        <member name="M:Jenzabar.Common.Web.UI.Controls.CheckBoxList2.Render(System.Web.UI.HtmlTextWriter)">
            <summary>
            Renders this control.
            </summary>
            <param name="writer">The HtmlTextWriter that renders the control.</param>
        </member>
        <member name="P:Jenzabar.Common.Web.UI.Controls.CheckBoxList2.EmptyMessage">
            <summary>
            Gets and sets the message displayed if there is nothing in the list.
            </summary>
        </member>
        <member name="M:Jenzabar.Common.Web.UI.Controls.DayOfWeekSelector.#ctor">
            <summary>
            Creates a new instance of the DayOfWeekSelector.
            </summary>
        </member>
        <member name="M:Jenzabar.Common.Web.UI.Controls.DayOfWeekSelector.OnLoad(System.EventArgs)">
            <summary>
            Initializes the globalized text to be loaded with the checkboxes.
            </summary>
            <param name="e">The EventArgs for the load event.</param>
            <remarks>The text for the days is retrieved from the <c>System.Threading.Thread.CurrentThread.CurrentCulture.DateTimeFormat.DayNames</c> string array.</remarks>
        </member>
        <member name="M:Jenzabar.Common.Web.UI.Controls.DayOfWeekSelector.DataBind">
            <summary>
            This control does not support databinding. 
            This method does nothing.
            </summary>
        </member>
        <member name="M:Jenzabar.Common.Web.UI.Controls.DayOfWeekSelector.SetSelected(System.Boolean,System.DayOfWeek)">
            <summary>
            Sets which days are selected in the checkbox group.
            </summary>
            <param name="selected">true to select the day, false to deselect the day</param>
            <param name="day">The DayOfWeek to be selected or deselected</param>
        </member>
        <member name="M:Jenzabar.Common.Web.UI.Controls.DayOfWeekSelector.SetSelected(System.Boolean,System.DayOfWeek[])">
            <summary>
            Sets an array of days to be selected or deselected in the checkbox group.
            </summary>
            <param name="selected">true to select the days, false to deselect them</param>
            <param name="days">The DayOfWeek array of days that will be selected or deselected</param>
        </member>
        <member name="P:Jenzabar.Common.Web.UI.Controls.DayOfWeekSelector.Items">
            <summary>
            Gets the collection of items for this control. 
            Do not access this property directly.
            Instead, use the SelectedDays property.
            </summary>
        </member>
        <member name="P:Jenzabar.Common.Web.UI.Controls.DayOfWeekSelector.DataMember">
            <summary>
            This control does not support databinding.
            This property is not used in rendering the control.
            </summary>
        </member>
        <member name="P:Jenzabar.Common.Web.UI.Controls.DayOfWeekSelector.DataSource">
            <summary>
            This control does not support databinding.
            This property is not used in rendering the control.
            </summary>
        </member>
        <member name="P:Jenzabar.Common.Web.UI.Controls.DayOfWeekSelector.DataTextField">
            <summary>
            This control does not support databinding.
            This property is not used in rendering the control.
            </summary>
        </member>
        <member name="P:Jenzabar.Common.Web.UI.Controls.DayOfWeekSelector.DataTextFormatString">
            <summary>
            This control does not support databinding.
            This property is not used in rendering the control.
            </summary>
        </member>
        <member name="P:Jenzabar.Common.Web.UI.Controls.DayOfWeekSelector.DataValueField">
            <summary>
            This control does not support databinding.
            This property is not used in rendering the control.
            </summary>
        </member>
        <member name="P:Jenzabar.Common.Web.UI.Controls.DayOfWeekSelector.SundaySelected">
            <summary>
            Can be used to get and set the selected status of the day Sunday. True if it is selected, otherwise false.
            </summary>
        </member>
        <member name="P:Jenzabar.Common.Web.UI.Controls.DayOfWeekSelector.MondaySelected">
            <summary>
            Can be used to get and set the selected status of the day Monday. True if it is selected, otherwise false.
            </summary>
        </member>
        <member name="P:Jenzabar.Common.Web.UI.Controls.DayOfWeekSelector.TuesdaySelected">
            <summary>
            Can be used to get and set the selected status of the day Tuesday. True if it is selected, otherwise false.
            </summary>
        </member>
        <member name="P:Jenzabar.Common.Web.UI.Controls.DayOfWeekSelector.WednesdaySelected">
            <summary>
            Can be used to get and set the selected status of the day Wednesday. True if it is selected, otherwise false.
            </summary>
        </member>
        <member name="P:Jenzabar.Common.Web.UI.Controls.DayOfWeekSelector.ThursdaySelected">
            <summary>
            Can be used to get and set the selected status of the day Thursday. True if it is selected, otherwise false.
            </summary>
        </member>
        <member name="P:Jenzabar.Common.Web.UI.Controls.DayOfWeekSelector.FridaySelected">
            <summary>
            Can be used to get and set the selected status of the day Friday. True if it is selected, otherwise false.
            </summary>
        </member>
        <member name="P:Jenzabar.Common.Web.UI.Controls.DayOfWeekSelector.SaturdaySelected">
            <summary>
            Can be used to get and set the selected status of the day Saturday. True if it is selected, otherwise false.
            </summary>
        </member>
        <member name="P:Jenzabar.Common.Web.UI.Controls.DayOfWeekSelector.SelectedDays">
            <summary>
            Gets an array of days that are selected in the checkbox group.
            </summary>
            <remarks></remarks>
        </member>
        <member name="P:Jenzabar.Common.Web.UI.Controls.DayOfWeekSelector.Item(System.DayOfWeek)">
            <summary>
            Gets and sets whether the specified DayOfWeek day is selected.
            </summary>
            <param name="day">The DayOfWeek on which to get or set selection status.</param>
            
        </member>
        <member name="T:Jenzabar.Common.Web.UI.Controls.PortletIconSrc">
            <summary>
            A quick reference to the icons that are commonly used when building a portlet.
            </summary>
        </member>
        <member name="P:Jenzabar.Common.Web.UI.Controls.PortletIconSrc.Edit">
            <summary>
            Gets the URL for the Edit icon.
            </summary>
        </member>
        <member name="P:Jenzabar.Common.Web.UI.Controls.PortletIconSrc.Delete">
            <summary>
            Gets the URL for the Delete icon.
            </summary>
        </member>
        <member name="P:Jenzabar.Common.Web.UI.Controls.PortletIconSrc.Add">
            <summary>
            Gets the URL for the Add icon.
            </summary>
        </member>
        <member name="P:Jenzabar.Common.Web.UI.Controls.PortletIconSrc.Folder">
            <summary>
            Gets the URL for the Folder or Group icon.
            </summary>
        </member>
        <member name="P:Jenzabar.Common.Web.UI.Controls.PortletIconSrc.EditFolder">
            <summary>
            Gets the URL for the icon that informs the user that the action will edit a folder.
            </summary>
        </member>
        <member name="P:Jenzabar.Common.Web.UI.Controls.PortletIconSrc.AddFolder">
            <summary>
            Gets the URL for the icon that informs the user that the action will add a folder or grouping.
            </summary>
        </member>
        <member name="P:Jenzabar.Common.Web.UI.Controls.PortletIconSrc.DeleteFolder">
            <summary>
            Gets the URL for the icon that informs the user that the action will delete a folder.
            </summary>
        </member>
        <member name="P:Jenzabar.Common.Web.UI.Controls.PortletIconSrc.Page">
            <summary>
            Gets the URL for the Page or File icon.
            </summary>
        </member>
        <member name="P:Jenzabar.Common.Web.UI.Controls.PortletIconSrc.PageAdd">
            <summary>
            Gets the URL for the icon that informs the user that the action will add a page or file.
            </summary>
        </member>
        <member name="P:Jenzabar.Common.Web.UI.Controls.PortletIconSrc.PageEdit">
            <summary>
            Gets the URL for the icon that informs the user that the action will edit a page or file.
            </summary>
        </member>
        <member name="P:Jenzabar.Common.Web.UI.Controls.PortletIconSrc.PageDelete">
            <summary>
            Gets the URL for the icon that informs the user that the action will delete a page or file.
            </summary>
        </member>
        <member name="P:Jenzabar.Common.Web.UI.Controls.PortletIconSrc.File">
            <summary>
            Gets the URL for the File or Item icon.
            </summary>
        </member>
        <member name="P:Jenzabar.Common.Web.UI.Controls.PortletIconSrc.UserGroup">
            <summary>
            Gets the URL for the icon that represents a group of users.
            </summary>
        </member>
        <member name="P:Jenzabar.Common.Web.UI.Controls.PortletIconSrc.Excel">
            <summary>
            Gets the URL for the icon for excel exporting.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Configuration.ConfigurationFactory">
            <summary>
            <para>Represents a factory for creating objects from configuration.</para>
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Configuration.ConfigurationFactory.#ctor(System.String,Microsoft.Practices.EnterpriseLibrary.Configuration.ConfigurationContext)">
            <summary>
            <para>Initializes a new instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Configuration.ConfigurationFactory"/> class with the factory name and a <see cref="P:Microsoft.Practices.EnterpriseLibrary.Configuration.ConfigurationFactory.ConfigurationContext"/>.</para>
            </summary>
            <param name="factoryName">
            <para>The name of the factory.</para>
            </param>
            <param name="configurationContext">
            <para>A <see cref="P:Microsoft.Practices.EnterpriseLibrary.Configuration.ConfigurationFactory.ConfigurationContext"/> object</para>
            </param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Configuration.ConfigurationFactory.GetConfigurationType(System.String)">
            <summary>
            <para>When overriden by a derived class, gets the configuration object <see cref="T:System.Type"/> for the factory to create given the <paramref name="configurationName"/>.</para>
            </summary>
            <param name="configurationName">
            <para>The name of the configuration object to create.</para>
            </param>
            <returns>
            <para>The <see cref="T:System.Type"/> of the configuration object.</para>
            </returns>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Configuration.ConfigurationFactory.PublishFailureEvent(System.String,System.Exception)">
            <summary>
            <para>Publish an instrumentation event that indicates there was an error while attempting to create a provider.</para>
            </summary>
            <param name="configurationName"><para>The name of the configuration object.</para></param>
            <param name="e"><para>The <see cref="T:System.Exception"/> to publish.</para></param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Configuration.ConfigurationFactory.CreateInstance(System.String)">
            <summary>
            <para>Creates an instance of the named configuration object.</para>
            </summary>
            <param name="configurationName">
            <para>The name of the configuration object.</para>
            </param>
            <returns>
            <para>An instance of the configuration object.</para>
            </returns>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Configuration.ConfigurationFactory.CreateObject(System.String,System.Type)">
            <summary>
            <para>Construct an instance of a named configuration object by the <paramref name="type"/>.</para>
            </summary>
            <param name="configurationName">
            <para>The name of the configuration object.</para>
            </param>
            <param name="type"><para>The <see cref="T:System.Type"/> to create.</para></param>
            <returns>An instance of the type.</returns>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Configuration.ConfigurationFactory.GetType(System.String)">
            <summary>
            <para>Gets the <see cref="T:System.Type"/> based on a qualified name.</para>
            </summary>
            <param name="typeName">
            <para>The qualified name.</para>
            </param>
            <returns>
            <para>The <see cref="T:System.Type"/> based on the qualified name.</para>
            </returns>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Configuration.ConfigurationFactory.ConfigurationContext">
            <summary>
            <para>Gets the <see cref="P:Microsoft.Practices.EnterpriseLibrary.Configuration.ConfigurationFactory.ConfigurationContext"/> for the factory.</para>
            </summary>
            <value>
            <para>The <see cref="P:Microsoft.Practices.EnterpriseLibrary.Configuration.ConfigurationFactory.ConfigurationContext"/> for the factory.</para>
            </value>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Configuration.ConfigurationFactory.FactoryName">
            <summary>
            <para>Gets the name of the factory.</para>
            </summary>
            <value>
            <para>The name of the factory.</para>
            </value>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Configuration.ProviderData">
            <summary>
            <para>Represents the common configuration data for all providers.</para>
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Configuration.ProviderData.#ctor">
            <summary>
            <para>Initializes a new instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Configuration.ProviderData"/> class.</para>
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Configuration.ProviderData.#ctor(System.String)">
            <summary>
            <para>Intializes a new instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Configuration.ProviderData"/> class with a name and a <see cref="T:System.Type"/> name.</para>
            </summary>
            <param name="name"><para>The name of the provider.</para></param>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Configuration.ProviderData.Name">
            <summary>
            <para>Gets or sets the name of the provider.</para>
            </summary>
            <value><para>The name of the provider.</para></value>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Configuration.ProviderData.TypeName">
            <summary>
            <para>When implemented by a class, Gets or sets the <see cref="T:System.Type"/> name of the provider.</para>
            </summary>
            <value>
            <para>The type name of the provider. The default is an empty string.</para>
            </value>
            <remarks>
            <para><b>Not to implementers:</b> You do not have to implement the set operation.  If you have only one type for your data object you can ignore the set.</para>
            </remarks>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Configuration.Protection.SymmetricAlgorithmKeyCreator">
            <summary>
            <para>Creates keys for a <see cref="T:System.Security.Cryptography.SymmetricAlgorithm"/>.</para>
            </summary>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Configuration.Protection.IKeyCreator">
            <summary>
            <para>Represents the creator of keys for security algorithms.</para>
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Configuration.Protection.IKeyCreator.GenerateKey">
            <summary>
            <para>When implemented by a class, generates a random key.</para>
            </summary>
            <returns><para>A random key.</para></returns>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Configuration.Protection.IKeyCreator.KeyIsValid(System.Byte[])">
            <summary>
            <para>When implemented by a class, determines if the <paramref name="key"/> is valid.</para>
            </summary>
            <param name="key">The key to test.</param>
            <returns><para><see langword="true"/> if the key is valid; otherwise <see langword="false"/>.</para></returns>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Configuration.Protection.IKeyCreator.KeyLength">
            <summary>
            <para>When implemented by a class, gets the length of the key.</para>
            </summary>
            <value>The length of the key.</value>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Configuration.Protection.SymmetricAlgorithmKeyCreator.#ctor(System.String)">
            <summary>
            <para>Initializes an instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Configuration.Protection.SymmetricAlgorithmKeyCreator"/> class for a specific <see cref="T:System.Security.Cryptography.SymmetricAlgorithm"/>.</para>
            </summary>
            <param name="symmetricAlgorithmName">The assembly qualified name of a class which derives from a <see cref="T:System.Security.Cryptography.SymmetricAlgorithm"/>.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Configuration.Protection.SymmetricAlgorithmKeyCreator.GenerateKey">
            <summary>
            <para>Generates a random key.</para>
            </summary>
            <returns><para>A random key.</para></returns>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Configuration.Protection.SymmetricAlgorithmKeyCreator.KeyIsValid(System.Byte[])">
            <summary>
            <para>Determines if the <paramref name="key"/> is valid.</para>
            </summary>
            <param name="key">The key to test.</param>
            <returns><para><see langword="true"/> if the key is valid; otherwise <see langword="false"/>.</para></returns>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Configuration.Protection.SymmetricAlgorithmKeyCreator.KeyLength">
            <summary>
            <para>Gets the length of the key.</para>
            </summary>
            <value>The length of the key.</value>
        </member>
        <member name="T:Jenzabar.Common.RandomPassword">
            <summary>
            This class can generate random passwords, which do not include ambiguous 
            characters, such as I, l, and 1. The generated password will be made of
            7-bit ASCII symbols. Every four characters will include one lower case
            character, one upper case character, one number, and one special symbol
            (such as '%') in a random order. The password will always start with an
            alpha-numeric character; it will not start with a special symbol (we do
            this because some back-end systems do not like certain special
            characters in the first position).
            </summary>
        </member>
        <member name="M:Jenzabar.Common.RandomPassword.Generate">
            <summary>
            Generates a random password.
            </summary>
            <returns>
            Randomly generated password.
            </returns>
            <remarks>
            The length of the generated password will be determined at
            random. It will be no shorter than the minimum default and
            no longer than maximum default.
            </remarks>
        </member>
        <member name="M:Jenzabar.Common.RandomPassword.Generate(System.Int32)">
            <summary>
            Generates a random password of the exact length.
            </summary>
            <param name="length">
            Exact password length.
            </param>
            <returns>
            Randomly generated password.
            </returns>
        </member>
        <member name="M:Jenzabar.Common.RandomPassword.Generate(System.Int32,System.Int32)">
            <summary>
            Generates a random password.
            </summary>
            <param name="minLength">
            Minimum password length.
            </param>
            <param name="maxLength">
            Maximum password length.
            </param>
            <returns>
            Randomly generated password.
            </returns>
            <remarks>
            The length of the generated password will be determined at
            random and it will fall with the range determined by the
            function parameters.
            </remarks>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Configuration.Protection.FileKeyAlgorithmPairStorageProvider">
            <summary>
            <para>Provides file storage for a <see cref="T:Microsoft.Practices.EnterpriseLibrary.Configuration.Protection.KeyAlgorithmPair"/> with optional protection.</para>
            </summary>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Configuration.Protection.IKeyAlgorithmPairStorageProvider">
            <summary>
            <para>Represents storage for a <see cref="T:Microsoft.Practices.EnterpriseLibrary.Configuration.Protection.KeyAlgorithmPair"/>.</para>
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Configuration.Protection.IKeyAlgorithmPairStorageProvider.Load">
            <summary>
            <para>When implemented by a class, loads the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Configuration.Protection.KeyAlgorithmPair"/> from storage.</para>
            </summary>
            <returns>
            <para>Loads the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Configuration.Protection.KeyAlgorithmPair"/> from storage.</para>
            </returns>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Configuration.Protection.IKeyAlgorithmPairStorageProvider.Save(Microsoft.Practices.EnterpriseLibrary.Configuration.Protection.KeyAlgorithmPair)">
            <summary>
            <para>When implemented by a class, saves the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Configuration.Protection.KeyAlgorithmPair"/> to storage.</para>
            </summary>
            <param name="keyAlgorithmPair">
            <para>The <see cref="T:Microsoft.Practices.EnterpriseLibrary.Configuration.Protection.KeyAlgorithmPair"/> to store.</para>
            </param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Configuration.Protection.FileKeyAlgorithmPairStorageProvider.Initialize(Microsoft.Practices.EnterpriseLibrary.Configuration.ConfigurationView)">
            <summary>
            <para>Initializes the provider with a <see cref="T:Microsoft.Practices.EnterpriseLibrary.Configuration.ConfigurationView"/>.</para>
            </summary>
            <param name="configurationView">
            <para>A <see cref="T:Microsoft.Practices.EnterpriseLibrary.Configuration.ConfigurationView"/> object.</para>
            </param>
            <remarks>
            <para>The method expects a <see cref="T:Microsoft.Practices.EnterpriseLibrary.Configuration.RuntimeConfigurationView"/> object for the <paramref name="configurationView"/></para>
            </remarks>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Configuration.Protection.FileKeyAlgorithmPairStorageProvider.Load">
            <summary>
            <para>Loads a <see cref="T:Microsoft.Practices.EnterpriseLibrary.Configuration.Protection.KeyAlgorithmPair"/> from the configured file.</para>
            </summary>
            <returns>
            <para>The deserialized <see cref="T:Microsoft.Practices.EnterpriseLibrary.Configuration.Protection.KeyAlgorithmPair"/>.</para>
            </returns>
            <exception cref="T:System.InvalidCastException">Thrown when a valid object is loaded, but it is not a <see cref="T:Microsoft.Practices.EnterpriseLibrary.Configuration.Protection.KeyAlgorithmPair"></see></exception> 
            <exception cref="T:System.Configuration.ConfigurationException">Thrown when system is unable to deserialize the stored <see cref="T:Microsoft.Practices.EnterpriseLibrary.Configuration.Protection.KeyAlgorithmPair"></see></exception>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Configuration.Protection.FileKeyAlgorithmPairStorageProvider.Save(Microsoft.Practices.EnterpriseLibrary.Configuration.Protection.KeyAlgorithmPair)">
            <summary>
            <para>Saves a <see cref="T:Microsoft.Practices.EnterpriseLibrary.Configuration.Protection.KeyAlgorithmPair"/> to the configured file.</para>
            </summary>
            <param name="keyAlgorithmPair">
            <para>The <see cref="T:Microsoft.Practices.EnterpriseLibrary.Configuration.Protection.KeyAlgorithmPair"/> to store.</para>
            </param>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Configuration.XmlIncludeTypeData">
            <summary>
            <para>Represents a type to include in the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Configuration.XmlSerializerTransformerData"/>.</para>
            </summary>
            <remarks>
            <para>The class maps to the <c>configurationSection</c> element in configuration.</para>
            </remarks>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Configuration.XmlIncludeTypeData.#ctor">
            <summary>
            <para>Initialize a new instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Configuration.XmlIncludeTypeData"/> class.</para>
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Configuration.XmlIncludeTypeData.#ctor(System.String)">
            <summary>
            <para>Initialize a new instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Configuration.XmlIncludeTypeData"/> class with a name and fully qualified type name.</para>
            </summary>
            <param name="name">
            <para>The name of the transformer.</para>
            </param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Configuration.XmlIncludeTypeData.#ctor(System.String,System.String)">
            <summary>
            <para>Initialize a new instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Configuration.XmlIncludeTypeData"/> class with a name and fully qualified type name.</para>
            </summary>
            <param name="name">
            <para>The name of the transformer.</para>
            </param>
            <param name="typeName">
            <para>The fully qualified type name of the transformer.</para>
            </param>      
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Configuration.XmlIncludeTypeData.Name">
            <summary>
            <para>Gets or sets the name of the include types.</para>
            </summary>
            <value>
            <para>The name of the include type. The default is an empty string.</para>
            </value>
            <remarks>
            <para>This property maps to the <c>name</c> attribute in configuration for the type.</para>
            </remarks>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Configuration.XmlIncludeTypeData.TypeName">
            <summary>
            <para>Gets or sets the name of the transformer.</para>
            </summary>
            <value>
            <para>The name of the transformer. The default is an empty string.</para>
            </value>
            <remarks>
            <para>This property maps to the <c>type</c> attribute in configuration for the type.</para>
            </remarks>
        </member>
        <member name="T:Jenzabar.Common.ApplicationBlocks.ExceptionManagement.IExceptionPublisher">
            <summary>
            Interface to publish exception information.  All exception information is passed as the chain of exception objects.
            </summary>
        </member>
        <member name="M:Jenzabar.Common.ApplicationBlocks.ExceptionManagement.IExceptionPublisher.Publish(System.Exception,System.Collections.Specialized.NameValueCollection,System.Collections.Specialized.NameValueCollection)">
            <summary>
            Method used to publish exception information and additional information.
            </summary>
            <param name="exception">The exception object whose information should be published.</param>
            <param name="additionalInfo">A collection of additional data that should be published along with the exception information.</param>
            <param name="configSettings">A collection of name/value attributes specified in the config settings.</param>
        </member>
        <member name="T:Jenzabar.Common.ApplicationBlocks.ExceptionManagement.IExceptionXmlPublisher">
            <summary>
            Interface to publish exception information.  All exception information is passed as XML.
            </summary>
        </member>
        <member name="M:Jenzabar.Common.ApplicationBlocks.ExceptionManagement.IExceptionXmlPublisher.Publish(System.Xml.XmlDocument,System.Collections.Specialized.NameValueCollection)">
            <summary>
            Method used to publish exception information and any additional information in XML.
            </summary>
            <param name="exceptionInfo">An XML Document containing the all exception information.</param>
            <param name="configSettings">A collection of name/value attributes specified in the config settings.</param>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Configuration.FileKeyAlgorithmPairStorageProviderData">
            <summary>
            <para>Represents a storage provider to read and write data for a <see cref="T:Microsoft.Practices.EnterpriseLibrary.Configuration.Protection.KeyAlgorithmPair"/> for a file.</para>
            </summary>
            <remarks>
            <para>The class maps to the <c>keyAlgorithmStorageProvider</c> element in configuration.</para>
            </remarks>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Configuration.KeyAlgorithmPairStorageProviderData">
            <summary>
            <para>Represents a storage provider to read and write data for a <see cref="T:Microsoft.Practices.EnterpriseLibrary.Configuration.Protection.KeyAlgorithmPair"/>.</para>
            </summary>
            <remarks>
            <para>The class maps to the <c>keyAlgorithmStorageProvider</c> element in configuration.</para>
            </remarks>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Configuration.KeyAlgorithmPairStorageProviderData.#ctor(System.String)">
            <summary>
            <para>Initialize a new instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Configuration.KeyAlgorithmPairStorageProviderData"/> class..</para>
            </summary>
            <param name="name">
            <para>The name of the storage provider.</para>
            </param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Configuration.KeyAlgorithmPairStorageProviderData.Clone">
            <summary>
            <para>Creates a new object that is a copy of the current instance.</para>
            </summary>
            <returns>
            <para>A new object that is a copy of this instance.</para>
            </returns>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Configuration.FileKeyAlgorithmPairStorageProviderData.#ctor">
            <summary>
            <para>Initialize a new instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Configuration.FileKeyAlgorithmPairStorageProviderData"/> class.</para>
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Configuration.FileKeyAlgorithmPairStorageProviderData.#ctor(System.String,System.String)">
            <summary>
            <para>Initialize a new instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Configuration.FileKeyAlgorithmPairStorageProviderData"/> class with a name, fully qualified type name and file path.</para>
            </summary>
            <param name="name">
            <para>The name of the storage provider.</para>
            </param>
            <param name="path">
            <para>The path to the file to store the pair.</para>
            </param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Configuration.FileKeyAlgorithmPairStorageProviderData.#ctor(System.String,System.String,Microsoft.Practices.EnterpriseLibrary.Configuration.DpapiSettingsData)">
            <summary>
            <para>Initialize a new instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Configuration.FileKeyAlgorithmPairStorageProviderData"/> class with a name, fully qualified type name, file path and the DPAPI settings.</para>
            </summary>
            <param name="name">
            <para>The name of the storage provider.</para>
            </param>
            <param name="path">
            <para>The path to the file to store the pair.</para>
            </param>
            <param name="dpapiSettings">
            <para>A <see cref="T:Microsoft.Practices.EnterpriseLibrary.Configuration.DpapiSettingsData"/> object.</para>
            </param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Configuration.FileKeyAlgorithmPairStorageProviderData.Clone">
            <summary>
            <para>Creates a new object that is a copy of the current instance.</para>
            </summary>
            <returns>
            <para>A new object that is a copy of this instance.</para>
            </returns>
            <remarks>
            <para>This clone does a deep copy.</para>
            </remarks>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Configuration.FileKeyAlgorithmPairStorageProviderData.Path">
            <summary>
            <para>Gets or sets the path of the file for storage.</para>
            </summary>
            <value>
            <para>The path of the file for storage. The default is an empty string.</para>
            </value>
            <remarks>
            <para>This property maps to the <c>path</c> attribute in configuration for the provider.</para>
            </remarks>        
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Configuration.FileKeyAlgorithmPairStorageProviderData.DpapiSettings">
            <summary>
            <para>Gets the settings for DPAPI protection (optional).</para>
            </summary>
            <value>
            <para>The settings for DPAPI protection (optional).</para>
            </value>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Configuration.FileKeyAlgorithmPairStorageProviderData.TypeName">
            <summary>
            <para>Gets the fully qualified assembly name for a <see cref="T:Microsoft.Practices.EnterpriseLibrary.Configuration.Protection.FileKeyAlgorithmPairStorageProvider"/>.</para>
            </summary>
            <value>
            <para>The fully qualified assembly name for a <see cref="T:Microsoft.Practices.EnterpriseLibrary.Configuration.Protection.FileKeyAlgorithmPairStorageProvider"/>.</para>
            </value>
        </member>
        <member name="T:Jenzabar.Common.Web.UI.Controls.ViewStatePreserver">
            <summary>
            A System.Web.UI.Control that loads and saves the view state of controls.
            </summary>
        </member>
        <member name="P:Jenzabar.Common.Web.UI.Controls.ViewStatePreserver.PreservedViewState">
            <summary>
            Gets and sets the preserved view state of a control.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Common.Resources">
            <devdoc>
            Used for the culture in SR
            </devdoc>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Configuration.Protection.KeyAlgorithmStorageProviderFactory">
            <devdoc>
            The factory that creates IConfigurationStorageProvider objects.
            </devdoc>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Configuration.ProviderFactory">
            <summary>
            <para>Provides base functionality for creating named instances of a particular provider type.</para>
            </summary>  
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Configuration.ProviderFactory.#ctor(System.String,Microsoft.Practices.EnterpriseLibrary.Configuration.ConfigurationContext,System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Configuration.ProviderFactory"/>
            </summary>
            <param name="factoryName"><para>A friendly name that will be included in exception messages.</para></param>
            <param name="configurationContext"><para>The <see cref="T:Microsoft.Practices.EnterpriseLibrary.Configuration.ConfigurationContext"/> to use.</para></param>
            <param name="type"><para>The base type of all providers that this factory will create.</para></param>
            <excpetion cref="T:System.ArgumentNullException">
            <para><paramref name="configurationContext"/> is a <see langword="null"/> reference (Nothing in Visual Basic).</para>
            <para>- or -</para>
            <para><paramref name="factoryName"/> is a <see langword="null"/> reference (Nothing in Visual Basic).</para>
            <para>- or -</para>
            <para><paramref name="type"/> is a <see langword="null"/> reference (Nothing in Visual Basic).</para>
            </excpetion>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Configuration.ProviderFactory.CreateConfigurationView">
            <summary>
            <para>When overriden by a derived class, creates the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Configuration.ConfigurationView"/> for the factory.</para>
            </summary>
            <returns>
            <para>The <see cref="T:Microsoft.Practices.EnterpriseLibrary.Configuration.ConfigurationView"/> for the factory.</para>
            </returns>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Configuration.ProviderFactory.CreateDefaultInstance">
            <summary>
            <para>Create the default insance of the provider object.</para>
            </summary>
            <returns>
            <para>The default provider object instance.</para>
            </returns>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Configuration.ProviderFactory.GetDefaultInstanceName">
            <summary>
            <para>Gets the default provider name.</para>
            </summary>
            <returns>The default provider name.</returns>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Configuration.ProviderFactory.InitializeConfigurationProvider(System.String,Microsoft.Practices.EnterpriseLibrary.Configuration.IConfigurationProvider)">
            <summary>
            <para>Initialize the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Configuration.IConfigurationProvider"/> by invoking the <see cref="M:Microsoft.Practices.EnterpriseLibrary.Configuration.IConfigurationProvider.Initialize(Microsoft.Practices.EnterpriseLibrary.Configuration.ConfigurationView)"/> method.</para>
            </summary>
            <param name="providerName">
            <para>The name of the provider.</para>
            </param>
            <param name="provider">
            <para>The <see cref="T:Microsoft.Practices.EnterpriseLibrary.Configuration.IConfigurationProvider"/> to initialize.</para>
            </param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Configuration.ProviderFactory.CreateObject(System.String,System.Type)">
            <summary>
            <para>Create the named <see cref="T:Microsoft.Practices.EnterpriseLibrary.Configuration.IConfigurationProvider"/> object.</para>
            </summary>
            <param name="providerName">
            <para>The name of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Configuration.IConfigurationProvider"/> to create.</para>
            </param>
            <param name="type"><see cref="T:System.Type"></see> of object to instantiate</param>
            <returns>Instantiated object</returns>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Configuration.ProviderFactory.ProviderType">
            <summary>
            <para>Gets the <see cref="T:System.Type"/> being created.</para>
            </summary>
            <value>
            <para>The <see cref="T:System.Type"/> being created.</para>
            </value>
        </member>
        <member name="T:Jenzabar.Common.Web.UI.Controls.DataListType">
            <summary>
            Indicates the type of list to create.
            </summary>
        </member>
        <member name="F:Jenzabar.Common.Web.UI.Controls.DataListType.Unordered">
            <summary>
            The list is created as an unordered list
            </summary>
        </member>
        <member name="F:Jenzabar.Common.Web.UI.Controls.DataListType.Ordered">
            <summary>
            The list is created as an orderd list.
            </summary>
        </member>
        <member name="T:Jenzabar.Common.Web.UI.Controls.DataList">
            <summary>
            A data bound list control that renders an HTML list (either unordered list (ul) or ordered list (ol)).
            </summary>
            <remarks>This control extends .NET's System.Web.UI.WebControls.DataList.</remarks>
        </member>
        <member name="M:Jenzabar.Common.Web.UI.Controls.DataList.#ctor">
            <summary>
            Creates a new instance of an unordered DataList control.
            </summary>
        </member>
        <member name="M:Jenzabar.Common.Web.UI.Controls.DataList.#ctor(Jenzabar.Common.Web.UI.Controls.DataListType)">
            <summary>
            Creates a new instance of a DataList control to render the specified type of list.
            </summary>
            <param name="listType">The DataListType that this DataList control will render.</param>
        </member>
        <member name="P:Jenzabar.Common.Web.UI.Controls.DataList.ListType">
            <summary>
            Gets and sets the type of list that this control will create.
            </summary>
        </member>
        <member name="T:Jenzabar.Common.Web.UI.Controls.DataListItem">
            <summary>
            Represents an item in a <see cref="T:Jenzabar.Common.Web.UI.Controls.DataList">DataList</see> control.
            </summary>
            <remarks>This control extends .NET's System.Web.UI.WebControls.DataListItem.</remarks>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Common.Instrumentation.EventLogIdentifier">
            <summary>
            <para>
            This type supports the Instrumentation infrastructure and is not intended to be used directly from your code.
            </para>
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Instrumentation.EventLogIdentifier.#ctor(System.Diagnostics.EventLogEntryType,System.Int32)">
            <summary/>
            <param name="logType"/>
            <param name="eventId"/>
            <exclude/>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Instrumentation.EventLogIdentifier.LogType">
            <summary/>
            <exclude/>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Instrumentation.EventLogIdentifier.EventId">
            <summary/>
            <exclude/>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Configuration.NameValueItemCollection">
            <summary>
            <para>Represents a collection of <see cref="T:Microsoft.Practices.EnterpriseLibrary.Configuration.NameValueItem"/> objects.</para>
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Configuration.NameValueItemCollection.#ctor">
            <summary>
            <para>Initialzie a new instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Configuration.NameValueItemCollection"/>.</para>
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Configuration.NameValueItemCollection.GetNameValueItem(System.String)">
            <summary>
            Gets the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Configuration.NameValueItem"/> that is
            keyed by the specified name.
            </summary>
            <param name="name">The name of an item in the list.</param>
            <returns>A <see cref="T:Microsoft.Practices.EnterpriseLibrary.Configuration.NameValueItem"/>.</returns>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Configuration.NameValueItemCollection.Add(System.String,System.String)">
            <summary>
            Adds the specified name and value to the list.
            </summary>
            <param name="name">The name of the item.</param>
            <param name="value">The value of the item.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Configuration.NameValueItemCollection.Add(System.Object)">
            <summary>
            <para>Adds a value into the collection.</para>
            </summary>
            <param name="item">
            <para>The value to add. The value can not be a <see langword="null"/> reference (Nothing in Visual Basic).</para>
            </param>
            <remarks>
            <para>This method exists to support Xml Serialization.</para>
            </remarks>
            <exception cref="T:System.InvalidCastException">
            <para><paramref name="item"/> could not be cast to the correct type.</para>
            </exception>        
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Configuration.NameValueItemCollection.Add(Microsoft.Practices.EnterpriseLibrary.Configuration.NameValueItem)">
            <summary>
            <para>Adds an <see cref="T:Microsoft.Practices.EnterpriseLibrary.Configuration.NameValueItem"/> into the collection.</para>
            </summary>
            <param name="item">
            <para>The <see cref="T:Microsoft.Practices.EnterpriseLibrary.Configuration.NameValueItem"/> to add. The value can not be a <see langword="null"/> reference (Nothing in Visual Basic).</para>
            </param>
            <remarks>
            <para>If a reference already exists in the collection by <seealso cref="P:Microsoft.Practices.EnterpriseLibrary.Configuration.XmlIncludeTypeData.Name"/>, it will be replaced with the new reference.</para>
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            <para><paramref name="item"/> is a <see langword="null"/> reference (Nothing in Visual Basic).</para>
            <para>- or -</para>
            <para><seealso cref="P:Microsoft.Practices.EnterpriseLibrary.Configuration.NameValueItem.Name"/> is a <see langword="null"/> reference (Nothing in Visual Basic).</para>
            </exception>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Configuration.NameValueItemCollection.Insert(System.Int32,Microsoft.Practices.EnterpriseLibrary.Configuration.NameValueItem)">
            <summary>
            <para>Inserts an element into the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Configuration.NameValueItemCollection"/> at the specified index.</para>
            </summary>
            <param name="index">
            <para>The zero-based index at which value should be inserted.</para>
            </param>
            <param name="item">
            <para>The <see cref="T:Microsoft.Practices.EnterpriseLibrary.Configuration.NameValueItem"/> to insert.</para>
            </param>
            <exception name="ArgumentOutOfRangeException">
            <para><paramref name="index"/> is less than zero.</para>
            <para>- or -</para>
            <para><paramref name="index"/> is greater than <seealso cref="P:System.Collections.CollectionBase.Count"/>.</para>
            </exception>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Configuration.NameValueItemCollection.Remove(System.String)">
            <summary>
            Removes the entry with the specified <paramref name="name"/> from the collection.
            </summary>
            <param name="name">
            <para>The name of the item to remove.</para>
            </param>
            <exception cref="T:System.ArgumentNullException">
            <para><paramref name="name"/> is a <see langword="null"/> reference (Nothing in Visual Basic).</para>
            </exception>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Configuration.NameValueItemCollection.IndexOf(Microsoft.Practices.EnterpriseLibrary.Configuration.NameValueItem)">
            <summary>
            <para>Searches for the specified <see cref="T:Microsoft.Practices.EnterpriseLibrary.Configuration.NameValueItem"/> and returns the zero-based index of the first occurrence within the entire <see cref="T:Microsoft.Practices.EnterpriseLibrary.Configuration.NameValueItemCollection"/>.</para>
            </summary>
            <param name="item">
            <para>The <see cref="T:Microsoft.Practices.EnterpriseLibrary.Configuration.NameValueItem"/> to locate in the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Configuration.NameValueItemCollection"/>.</para>
            </param>
            <returns>
            <para>The zero-based index of the first occurrence of value within the entire <see cref="T:Microsoft.Practices.EnterpriseLibrary.Configuration.NameValueItemCollection"/>, if found; otherwise, -1.</para>
            </returns>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Configuration.NameValueItemCollection.Contains(Microsoft.Practices.EnterpriseLibrary.Configuration.NameValueItem)">
            <summary>
            <para>Determines whether the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Configuration.NameValueItemCollection"/> contains a specific element.</para>
            </summary>
            <param name="item">
            <para>The Object to locate in the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Configuration.NameValueItemCollection"/>.</para>
            </param>
            <returns>
            <para><see langword="true"/> if the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Configuration.NameValueItemCollection"/> contains the specified value; otherwise, <see langword="false"/></para>
            </returns>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Configuration.NameValueItemCollection.CopyTo(Microsoft.Practices.EnterpriseLibrary.Configuration.NameValueItem[],System.Int32)">
            <summary>
            Copies the entire NameValueItem list to a 
            compatible one-dimensional array of NameValueItem entries, 
            starting at the specified index of the target array.
            </summary>
            <param name="array">An array of type NameValueItem to which 
            the access control list entries will be copied. The array 
            must have zero-based indexing. </param>
            <param name="index">The index in the array at which to 
            begin copying the NameValueItem list entries.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Configuration.NameValueItemCollection.OnClear">
            <summary>
            Removes the collection reference from each
            NameValueItem in the list.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Configuration.NameValueItemCollection.OnClearComplete">
            <summary>
            Clears all items from the dictionary.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Configuration.NameValueItemCollection.OnInsert(System.Int32,System.Object)">
            <summary>
            Checks if the item already exists in the collection.
            </summary>
            <param name="index">The zero-based index at which to insert <c>value</c>.</param>
            <param name="value">The new value of the element at <c>index</c>.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Configuration.NameValueItemCollection.OnInsertComplete(System.Int32,System.Object)">
            <summary>
            Inserts the specified item into the dictionary.
            </summary>
            <param name="index">The index of the item in the list.</param>
            <param name="value">The value of the item to add to the list.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Configuration.NameValueItemCollection.OnRemoveComplete(System.Int32,System.Object)">
            <summary>
            Removes the item at the specified index 
            from the dictionary.
            </summary>
            <param name="index">The index of the item in the list.</param>
            <param name="value">The value of the item at the specified index.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Configuration.NameValueItemCollection.OnValidate(System.Object)">
            <summary>
            Checks that the argument is of type 
            <see cref="T:Microsoft.Practices.EnterpriseLibrary.Configuration.NameValueItem"/>.
            </summary>
            <param name="value">The value of the item to add.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Configuration.NameValueItemCollection.OnSetComplete(System.Int32,System.Object,System.Object)">
            <summary>
            Updates the value dictionary with the new value.
            </summary>
            <param name="index">The index of the item in the list.</param>
            <param name="oldValue">The old value that is being replaced.</param>
            <param name="newValue">The new value that is being set.</param>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Configuration.NameValueItemCollection.Item(System.Int32)">
            <summary>
            <para>Gets or sets the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Configuration.NameValueItem"/> associated with the specified <paramref name="index"/>.</para>
            </summary>
            <param name="index">
            <para>The index of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Configuration.NameValueItem"/> to get or set.</para>
            </param>
            <value>
            <para>The value associated with the specified <paramref name="index"/>.</para>
            </value>              
            <exception cref="T:System.ArgumentOutOfRangeException">
            <para><paramref name="index"/> is equal to or greater than the length of <c>Count</c>.</para>
            </exception>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Configuration.NameValueItemCollection.Item(System.String)">
            <summary>
            <para>Gets or sets the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Configuration.NameValueItem"/> associated with the specified <paramref name="name"/>.</para>
            </summary>
            <param name="name">
            <para>The name of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Configuration.NameValueItem"/> value to get.</para>
            </param>
            <value>
            <para>The value associated with the specified <paramref name="name"/>. If the specified <paramref name="name"/> is not found, attempting to get it returns a <see langword="null"/> reference (Nothing in Visual Basic).</para>
            </value>              
        </member>
        <member name="T:Jenzabar.Common.Web.UI.Controls.Hint">
            <summary>
            An HTML construct used to provide usage tips and descriptions when marking up hints on portlet forms.
            Hints appear as text in a slightly smaller font with a light grey background.
            </summary>
            <remarks>This control extends <see cref="T:Jenzabar.Common.Web.UI.Controls.DisplayControlBase">DisplayControlBase</see>.</remarks>
        </member>
        <member name="M:Jenzabar.Common.Web.UI.Controls.Hint.#ctor">
            <summary>
            Creates a new instance of Hint to be used to mark up hints on the page.
            </summary>
        </member>
        <member name="T:Jenzabar.Common.Web.UI.Controls.Toolbar">
            <summary>
            A built-in <see cref="T:Jenzabar.Common.Web.UI.Controls.Menu">Menu</see> control that
            renders a blue, windows-style drop-down menu of actions in a portlet's views.  
            This control appears directly below the portlet title-bar and above any other controls
            that are rendered in the portlet view by the framework.
            </summary>
        </member>
        <member name="T:Jenzabar.Common.Web.UI.Controls.Menu">
            <summary>
            Represents a single item in a menu of items.
            </summary>
        </member>
        <member name="T:Jenzabar.Common.Web.UI.Controls.MenuControl">
            <summary>
            A System.Web.UI.WebControls.WebControl that defines a menu of items.
            </summary>
        </member>
        <member name="F:Jenzabar.Common.Web.UI.Controls.MenuControl._items">
            <summary>
            Inner storage for the menu items collection.
            </summary>
        </member>
        <member name="M:Jenzabar.Common.Web.UI.Controls.MenuControl.#ctor(System.String)">
            <summary>
            Creates a new instance of the MenuControl with a <see cref="T:Jenzabar.Common.Web.UI.Controls.MenuItemCollection">MenuItemCollection</see>.
            </summary>
        </member>
        <member name="M:Jenzabar.Common.Web.UI.Controls.MenuControl.CreateControlCollection">
            <summary>
            Creates a specialized control collection that only accepts MenuItems in the collection.
            </summary>
            <returns>The System.Web.UI.ControlCollection for this control.</returns>
        </member>
        <member name="M:Jenzabar.Common.Web.UI.Controls.MenuControl.SaveViewState">
            <summary>
            Saves in the ViewState the number of MenuItems that this control contains.
            </summary>
            <returns>A System.Web.UI.Pair object representing this control's viewstate</returns>
        </member>
        <member name="M:Jenzabar.Common.Web.UI.Controls.MenuControl.LoadViewState(System.Object)">
            <summary>
            Re-creates the menu control as stored in the ViewState.
            </summary>
            <param name="savedState">The saved viewstate object for this control.</param>
        </member>
        <member name="P:Jenzabar.Common.Web.UI.Controls.MenuControl.MenuItems">
            <summary>
            Gets a <see cref="T:Jenzabar.Common.Web.UI.Controls.MenuItemCollection">MenuItemCollection</see> of the <see cref="T:Jenzabar.Common.Web.UI.Controls.MenuItem">MenuItem</see>s that are in this control.
            </summary>
        </member>
        <member name="T:Jenzabar.Common.Web.UI.Controls.MenuControl.MenuItemControlCollection">
            <summary>
            Accepts only controls of type <see cref="T:Jenzabar.Common.Web.UI.Controls.MenuItem">MenuItem</see> in the collection.
            </summary>
        </member>
        <member name="M:Jenzabar.Common.Web.UI.Controls.MenuControl.MenuItemControlCollection.Add(System.Web.UI.Control)">
            <summary>
            Checks to see if the control being added is a <see cref="T:Jenzabar.Common.Web.UI.Controls.MenuItem">MenuItem</see>; if not, throws an ArgumentException.
            </summary>
            <param name="child">A System.Web.UI.Control child.</param>
        </member>
        <member name="M:Jenzabar.Common.Web.UI.Controls.MenuControl.MenuItemControlCollection.AddAt(System.Int32,System.Web.UI.Control)">
            <summary>
            Checks to see if the control being added is a <see cref="T:Jenzabar.Common.Web.UI.Controls.MenuItem">MenuItem</see>; if not, throws an ArgumentException.
            </summary>
            <param name="index">The integer index of the added control.</param>
            <param name="child">A System.Web.UI.Control child.</param>
        </member>
        <member name="M:Jenzabar.Common.Web.UI.Controls.Menu.#ctor">
            <summary>
            Creates a new instance of the Menu class (an unordered list (ul)).
            </summary>
        </member>
        <member name="M:Jenzabar.Common.Web.UI.Controls.Menu.AddAttributesToRender(System.Web.UI.HtmlTextWriter)">
            <summary>
            Passes the menu's cascading style sheet class and id attributes to the renderer.
            </summary>
            <param name="writer">The HtmlTextWriter that renders the control.</param>
        </member>
        <member name="M:Jenzabar.Common.Web.UI.Controls.Menu.OnItemCommand(System.Web.UI.WebControls.CommandEventArgs)">
            <summary>
            Raises the ItemCommand event
            </summary>
            <param name="args">The System.Web.UI.WebControls.CommandEventArgs.</param>
        </member>
        <member name="M:Jenzabar.Common.Web.UI.Controls.Menu.OnBubbleEvent(System.Object,System.EventArgs)">
            <summary>
            Handles commands that bubble up from the child menu item controls. 
            The MenuItem control bubbles up the Command event.
            This means instead of hooking up event handlers to 
            each of the MenuItems in the Menu, the developer need only
            hook up one event handler for the entire menu.
            </summary>
            <param name="source">The MenuItem that raised the event.</param>
            <param name="args">The EventArgs.</param>
            <returns>True, if the event originated from a MenuItem and the command arguments are CommandEventArgs.</returns>
            <remarks>This will raise the command event, if the source is a MenuItem and the arguments are CommandEventArgs. 
            For more information about how event bubbling works, see the MSDN documentation.</remarks>
        </member>
        <member name="E:Jenzabar.Common.Web.UI.Controls.Menu.ItemCommand">
            <summary>
            Raised when a MenuItem in this Menu is clicked.
            </summary>
            <remarks>The ItemCommand event can be used to hook up one event handler 
            to the Menu to handle click events from all of the MenuItems in the menu.</remarks>
            
            <example><b>Creating a Menu and Handling the ItemCommand Event to know what MenuItem was clicked:</b>
            <p>During page load, we create the Menu, if the page is not being posted back. To do this, we create 
            new MenuItems and add them to the MenuItems collection for the menu. It is possible to create more than one level of 
            MenuItems by adding new MenuItems to the items in the menu.</p>
            <code>
            
            // used to display the name of the MenuItem that is clicked
            protected Label lblSelectedCommand;
            
            // the Menu that we will build and handle events for
            protected MenuItem mnu;
            
            // handles the page or control load event
            private void Page_Load(object sender, System.EventArgs e)
            {
            	if( ! this.IsPostBack )
            	{
            		// add items to the root level of the menu
            		MenuItem item1 = mnu.MenuItems.Add( new MenuItem( "Item 1", "Command 1" ) );
            		MenuItem item2 = mnu.MenuItems.Add( new MenuItem( "Item 2", "Command 2" ) );
            		MenuItem item3 = mnu.MenuItems.Add( new MenuItem( "Item 3", "Command 3" ) );
            		// add sub-items to item3 in the menu
            		item3.MenuItems.Add( new MenuItem( "Item 3a", "Command 3a" ) );
            		item3.MenuItems.Add( new MenuItem( "Item 3b", "Command 3b" ) );
            		item3.MenuItems.Add( new MenuItem( "Item 3c", "Command 3c" ) );
            		item3.MenuItems.Add( new MenuItem( "Item 3d", "Command 3d" ) );
            		// continue adding items to the root level of the Menu
            		// *note* sub items do not need to be added to a MenuItem before other items are added at the same level
            		// we could have just as easily added all the root level items, and then added the item3 sub-items
            		MenuItem item4 = mnu.MenuItems.Add( new MenuItem( "Item 4", "Command 4" ) );
            		MenuItem item5 = mnu.MenuItems.Add( new MenuItem( "Item 5", "Command 5" ) );
            		MenuItem item6 = mnu.MenuItems.Add( new MenuItem( "Item 6", "Command 6" ) );
            	}
            	// hook up the event listener for the ItemCommand event
            	mnu.ItemCommand += new CommandEventHandler(mnu_ItemCommand);
            }
            
            // handles the ItemCommand event for the Menu
            private void mnu_ItemCommand(object sender, CommandEventArgs e)
            {
            	// we are just writing the name of the command that was clicked
            	lblSelectedCommand.Text = "CommandName = [" + e.CommandName + "]" );
            }
            
            </code>
            
            </example>
        </member>
        <member name="M:Jenzabar.Common.Web.UI.Controls.Toolbar.#ctor">
            <summary>
            Instantiates a toolbar.
            </summary>
        </member>
        <member name="M:Jenzabar.Common.Web.UI.Controls.Toolbar.RenderBeginTag(System.Web.UI.HtmlTextWriter)">
            <summary>
            Renders the control using an HTML div with class="pToolbar".
            </summary>
            <param name="writer">The HtmlTextWriter that renders the control.</param>
        </member>
        <member name="M:Jenzabar.Common.Web.UI.Controls.Toolbar.RenderEndTag(System.Web.UI.HtmlTextWriter)">
            <summary>
            Renders the end of the control.
            </summary>
            <param name="writer">The HtmlTextWriter that renders the control.</param>
        </member>
        <member name="T:Jenzabar.Common.Web.UI.Controls.MenuItem">
            <summary>
            An item in the menu. 
            Items can have sub-items as well, forming a tree of MenuItems.
            </summary>
            <remarks>Subclass MenuItem if you need to display special data in the menu.</remarks>
        </member>
        <member name="F:Jenzabar.Common.Web.UI.Controls.MenuItem._text">
            <summary>
            Inner storage for the Text property.
            </summary>
        </member>
        <member name="F:Jenzabar.Common.Web.UI.Controls.MenuItem._commandName">
            <summary>
            Inner storage for the name of the command to raise when this item is selected from the menu.
            </summary>
        </member>
        <member name="M:Jenzabar.Common.Web.UI.Controls.MenuItem.#ctor">
            <summary>
            Instantiates MenuItem.
            </summary>
        </member>
        <member name="M:Jenzabar.Common.Web.UI.Controls.MenuItem.#ctor(System.String)">
            <summary>
            Instantiates MenuItem with the specific text string to display to the user.
            </summary>
            <param name="text">The text to display to the user for the MenuItem.</param>
        </member>
        <member name="M:Jenzabar.Common.Web.UI.Controls.MenuItem.#ctor(System.String,System.String)">
            <summary>
            Instantiates MenuItem with the specific text to display to the user 
            and the command to execute on the server when the MenuItem is clicked.
            </summary>
            <param name="text">The text to display to the user for the MenuItem.</param>
            <param name="commandName">The name of the command to be executed on the server when this item is clicked.</param>
        </member>
        <member name="M:Jenzabar.Common.Web.UI.Controls.MenuItem.#ctor(System.String,System.String,System.Object)">
            <summary>
            Instantiates MenuItem with the specific text to display to the user, 
            the command to execute on the server when the MenuItem is clicked, and an argument to pass with the command.
            </summary>
            <param name="text">The text to display to the user for the MenuItem.</param>
            <param name="commandName">The name of the command to be executed on the server when this item is clicked.</param>
            <param name="commandArgument">A command argument object.</param>
        </member>
        <member name="M:Jenzabar.Common.Web.UI.Controls.MenuItem.SaveViewState">
            <summary>
            Saves this MenuItem's properties to ViewState.
            </summary>
            <returns>An object reflecting this control's properties.</returns>
        </member>
        <member name="M:Jenzabar.Common.Web.UI.Controls.MenuItem.LoadViewState(System.Object)">
            <summary>
            Loads the control's properties from the view state.
            </summary>
            <param name="savedState">The saved view state for this control.</param>
        </member>
        <member name="M:Jenzabar.Common.Web.UI.Controls.MenuItem.System#Web#UI#IPostBackEventHandler#RaisePostBackEvent(System.String)">
            <summary>
            Handles the call from the .NET runtime that tells this control to raise an event.
            </summary>
            <param name="eventArgument">The command name that was given to this control. This is stored in the second parameter of the __doPostBack() javascript call.</param>
        </member>
        <member name="M:Jenzabar.Common.Web.UI.Controls.MenuItem.OnClick(System.EventArgs)">
            <summary>
            Raises the Click event.
            </summary>
            <param name="e">The EventArgs for the click event.</param>
        </member>
        <member name="M:Jenzabar.Common.Web.UI.Controls.MenuItem.OnCommand(System.Web.UI.WebControls.CommandEventArgs)">
            <summary>
            Raises the Command event.
            </summary>
            <param name="e">The CommandEventArgs for the command event.</param>
        </member>
        <member name="M:Jenzabar.Common.Web.UI.Controls.MenuItem.RenderBeginTag(System.Web.UI.HtmlTextWriter)">
            <summary>
            Renders the HTML start div and li tags for the toolbar and menu items for this control.
            If a menu item has subitems, a start ul tag is also rendered.
            </summary>
            <param name="writer">The HtmlTextWriter that renders the control.</param>
        </member>
        <member name="M:Jenzabar.Common.Web.UI.Controls.MenuItem.RenderEndTag(System.Web.UI.HtmlTextWriter)">
            <summary>
            Renders the end tags for this MenuItem.
            </summary>
            <param name="writer">The HtmlTextWriter that renders the control.</param>
        </member>
        <member name="P:Jenzabar.Common.Web.UI.Controls.MenuItem.Text">
            <summary>
            Gets and sets the text that will appear in the menu for this item.
            </summary>
        </member>
        <member name="P:Jenzabar.Common.Web.UI.Controls.MenuItem.CommandName">
            <summary>
            Gets and sets the name of the commmand that will be raised 
            when this MenuItem is selected.
            </summary>
        </member>
        <member name="P:Jenzabar.Common.Web.UI.Controls.MenuItem.CommandArgument">
            <summary>
            Gets and sets the argument that is passed with the command when the command event is fired.
            </summary>
            <remarks>The command argument must be serializaable.</remarks>
        </member>
        <member name="P:Jenzabar.Common.Web.UI.Controls.MenuItem.URL">
            <summary>
            Gets and sets the URL for the menu item action. 
            If this is set, the menu item does not raise a click event on the server.
            </summary>
        </member>
        <member name="P:Jenzabar.Common.Web.UI.Controls.MenuItem.URLTarget">
            <summary>
            Gets and sets the target the browser uses when opening a page using the URL
            property.
            </summary>
        </member>
        <member name="E:Jenzabar.Common.Web.UI.Controls.MenuItem.Click">
            <summary>
            Raised when the MenuItem is clicked.
            </summary>
        </member>
        <member name="E:Jenzabar.Common.Web.UI.Controls.MenuItem.Command">
            <summary>
            Raised when the MenuItem is clicked.
            </summary>
        </member>
        <member name="T:Jenzabar.Common.Web.UI.Controls.MenuItemCollection">
            <summary>
            The MenuItem objects in a Menu.
            </summary>
        </member>
        <member name="F:Jenzabar.Common.Web.UI.Controls.MenuItemCollection._owner">
            <summary>
            Inner storage for the owner control of this collection.
            </summary>
        </member>
        <member name="M:Jenzabar.Common.Web.UI.Controls.MenuItemCollection.#ctor(Jenzabar.Common.Web.UI.Controls.MenuControl)">
            <summary>
            Creates a new instance of the MenuItemCollection that is ready to be filled with MenuItems.
            </summary>
        </member>
        <member name="M:Jenzabar.Common.Web.UI.Controls.MenuItemCollection.Add(Jenzabar.Common.Web.UI.Controls.MenuItem)">
            <summary>
            Adds a ManuItem to the collection of MenuItems.
            </summary>
            <param name="item">The MenuItem to add.</param>
            <returns>The index of the newly added MenuItem.</returns>
        </member>
        <member name="M:Jenzabar.Common.Web.UI.Controls.MenuItemCollection.Add(System.String)">
            <summary>
            Creates a new MenuItem, adds it to the MenuItemCollection, 
            and returns the new MenuItem.
            </summary>
            <param name="itemText">The text for the MenuItem.</param>
            <returns>The newly created menu item.</returns>
        </member>
        <member name="M:Jenzabar.Common.Web.UI.Controls.MenuItemCollection.Add(System.String,System.String)">
            <summary>
            Creates a new MenuItem, adds it to the collection of MenuItems, 
            and returns the new MenuItem
            </summary>
            <param name="itemText">The text to be displayed to the user for the menu item.</param>
            <param name="commandName">The command that will be raised when the user selects the menu item.</param>
            <returns>The new menu item</returns>
        </member>
        <member name="M:Jenzabar.Common.Web.UI.Controls.MenuItemCollection.AddAt(System.Int32,Jenzabar.Common.Web.UI.Controls.MenuItem)">
            <summary>
            Adds a MenuItem to the collection at a specific index.
            </summary>
            <param name="index">The zero-based index of the new MenuItem.</param>
            <param name="item">The MenuItem to be added to the collection</param>
        </member>
        <member name="M:Jenzabar.Common.Web.UI.Controls.MenuItemCollection.AddAt(System.Int32,System.String)">
            <summary>
            Creates a new MenuItem, adds it to the collection at the specified index, 
            and returns the new MenuItem.
            </summary>
            <param name="index">The zero-based index of the new MenuItem.</param>
            <param name="itemText">The text for the MenuItem.</param>
            <returns>The newly created MenuItem.</returns>
        </member>
        <member name="M:Jenzabar.Common.Web.UI.Controls.MenuItemCollection.Remove(Jenzabar.Common.Web.UI.Controls.MenuItem)">
            <summary>
            Removes the specified MenuItem from the collection.
            </summary>
            <param name="item">The MenuItem to remove.</param>
        </member>
        <member name="M:Jenzabar.Common.Web.UI.Controls.MenuItemCollection.RemoveAt(System.Int32)">
            <summary>
            Removes a MenuItem at the specified index in the control collection.
            </summary>
            <param name="index">The index of the MenuItem to remove from the collection.</param>
        </member>
        <member name="M:Jenzabar.Common.Web.UI.Controls.MenuItemCollection.CopyTo(System.Array,System.Int32)">
            <summary>
            Copies the child MenuItems stored in the ControlCollection object to 
            a System.Array object, beginning at the specified index location in the Array.
            </summary>
            <param name="array">The System.Array to copy the child controls to.</param>
            <param name="index">The zero-based relative index in the array where copying begins.</param>
        </member>
        <member name="M:Jenzabar.Common.Web.UI.Controls.MenuItemCollection.GetEnumerator">
            <summary>
            Gets an enumerator to loop through all the MenuItems in the collection.
            </summary>
            <returns>A System.Collections.IEnumerator to loop through all of the MenuItems.</returns>
        </member>
        <member name="P:Jenzabar.Common.Web.UI.Controls.MenuItemCollection.Item(System.Int32)">
            <summary>
            Gets the MenuItem at the specified index in the control collection.
            </summary>
        </member>
        <member name="P:Jenzabar.Common.Web.UI.Controls.MenuItemCollection.IsSynchronized">
            <summary>
            Gets whether the MenuItemCollection is synchronized.
            </summary>
        </member>
        <member name="P:Jenzabar.Common.Web.UI.Controls.MenuItemCollection.Count">
            <summary>
            Gets the number of MenuItmes in this collection.
            </summary>
        </member>
        <member name="P:Jenzabar.Common.Web.UI.Controls.MenuItemCollection.SyncRoot">
            <summary>
            Gets an object that can be used to synchronize access to the collection of MenuItems.
            </summary>
        </member>
        <member name="M:Jenzabar.Common.Collections.ReflectoComparer.Create(System.String)">
            <summary>
            Creates a new instance of the ReflectoComparer that will be capable of sorting objects in a list.
            </summary>
            <param name="orderByStatement">The order by statement in the format 'Order By Name desc, AddDate'</param>
            <returns>An implementation of the IComparer interface that can be used to sort an ArrayList, or an Array.</returns>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Configuration.ProjectInstaller">
            <summary>
            Installer for configuration event sources. This class is not meant to be used by any callers.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Configuration.ProjectInstaller.#ctor">
            <summary>
            Initializes a new instance of <see cref="T:Microsoft.Practices.EnterpriseLibrary.Configuration.ProjectInstaller"></see>
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Configuration.ProjectInstaller.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">True if called from Dispose, false if called from finalizer</param>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Configuration.Storage.XmlFileStorageProvider">
            <summary>
            <para>
            Represents a storage provider writer for configuration data that saves the configuration data to an external XML file.
            </para>
            </summary>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Configuration.StorageProvider">
            <summary>
            <para>Represents a provider that reads and writes configuration data to storage.</para>
            </summary>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Configuration.IStorageProviderReader">
            <summary>
            <para>
            Represents a storage provider reader for configuration data.
            </para>
            </summary>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Configuration.IConfigurationChangeWatcherFactory">
            <summary>
            Responsible for defining the interface to be supported by classes that are going to 
            create <see cref="T:Microsoft.Practices.EnterpriseLibrary.Configuration.Storage.IConfigurationChangeWatcher"></see>s
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Configuration.IConfigurationChangeWatcherFactory.CreateConfigurationChangeWatcher">
            <summary>
            <para>
            When implemented by a class, creates an object that is responsible for watching for
            changes in the underlying storage mechanism for configuration persistence. When a change
            occurs, this object must raise its ConfigurationChange event.
            </para>
            </summary>
            <returns>An initialized object that will watch for configuration changes.</returns>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Configuration.IStorageProviderReader.Read">
            <summary>
            <para>When implemented by a class, reads the configuration from storage</para>
            </summary>        
            <returns>
            <para>The configuration data for the sectionName.</para>
            </returns>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Configuration.IStorageProviderReader.CurrentSectionName">
            <summary>
            <para>When implemented by a class, gets the name of the configuration section.</para>
            </summary>
            <value>
            <para>The name of the configuration section.</para>
            </value>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Configuration.StorageProvider.#ctor">
            <summary>
            <para>Initialize a new instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Configuration.StorageProvider"/> class.</para>
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Configuration.StorageProvider.Read">
            <summary>
            <para>When overriden by a derived clas, reads the configuration data from storage.</para>
            </summary>
            <returns>
            <para>The configuration data.</para>
            </returns>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Configuration.StorageProvider.CreateConfigurationChangeWatcher">
            <summary>
            <para>When overriden by a derived class, creates an <see cref="T:Microsoft.Practices.EnterpriseLibrary.Configuration.Storage.IConfigurationChangeWatcher"/> for the storage.</para>
            </summary>
            <returns>
            <para>An <see cref="T:Microsoft.Practices.EnterpriseLibrary.Configuration.Storage.IConfigurationChangeWatcher"/> for the storage.</para>
            </returns>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Configuration.StorageProvider.CurrentSectionName">
            <summary>
            <para>Gets the name of the configuration section.</para>
            </summary>
            <value>
            <para>The name of the configuration section.</para>
            </value>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Configuration.IStorageProviderWriter">
            <summary>
            <para>
            Represents a storage provider writer for configuration data.
            </para>
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Configuration.IStorageProviderWriter.Write(System.Object)">
            <summary>
            When implemented by a class, writes the configuration data to storage.
            </summary>
            <param name="value">
            <para>The value to write to storage.</para>
            </param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Configuration.Storage.XmlFileStorageProvider.#ctor">
            <summary>
            <para>Initialize a new instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Configuration.Storage.XmlFileStorageProvider"/> class.</para>
            </summary>
            <seealso cref="T:Microsoft.Practices.EnterpriseLibrary.Configuration.XmlFileStorageProviderData"/>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Configuration.Storage.XmlFileStorageProvider.Initialize(Microsoft.Practices.EnterpriseLibrary.Configuration.ConfigurationView)">
            <summary>
            <para>Initializes this provider to the correct state and context used by the factory creating it.</para>
            </summary>
            <param name="configurationView">
            <para>The cursor to use to get the data specific for the transformer.</para>
            </param>
            <exception cref="T:System.ArgumentException">
            <para><paramref name="configurationView"/> must be of type <see cref="T:Microsoft.Practices.EnterpriseLibrary.Configuration.RuntimeConfigurationView"/>.</para>
            <para>- or -</para>
            <para>The <see cref="T:Microsoft.Practices.EnterpriseLibrary.Configuration.StorageProviderData"/> from the cursor should be of type <see cref="T:Microsoft.Practices.EnterpriseLibrary.Configuration.XmlFileStorageProviderData"/>.</para>
            </exception>
            <exception cref="T:System.ArgumentNullException">
            <para><paramref name="configurationView"/> is a <see langword="null"/> reference (Nothing in Visual Basic).</para>
            </exception>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Configuration.Storage.XmlFileStorageProvider.CreateConfigurationChangeWatcher">
            <summary>
            <para>Creates a new <see cref="T:Microsoft.Practices.EnterpriseLibrary.Configuration.Storage.IConfigurationChangeWatcher"/> for this configuration storage.</para>
            </summary>
            <returns>
            <para>An <see cref="T:Microsoft.Practices.EnterpriseLibrary.Configuration.Storage.IConfigurationChangeWatcher"/> instance.</para>
            </returns>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Configuration.Storage.XmlFileStorageProvider.Read">
            <summary>
            <para>Reads the configuration from storage. The data will come back as an <see cref="T:System.Xml.XmlNode"/>.</para>
            </summary>        
            <returns>
            <para>The configuration data for the section.</para>
            </returns>
            <exception cref="T:System.Configuration.ConfigurationException">
            <para>The signature check has failed for the section.</para>
            <para>- or -</para>
            <para>The data in the section could not be decrypted.</para>
            </exception>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Configuration.Storage.XmlFileStorageProvider.Write(System.Object)">
            <summary>
            Writes the configuration data to storage.
            </summary>
            <param name="value">
            <para>The value to write to storage. The type must be <see cref="T:System.Xml.XmlNode"/></para>
            </param>
            <exception cref="T:System.Configuration.ConfigurationException">        
            <para>The data in the section could not be encrypted.</para>
            </exception>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Configuration.Storage.XmlFileStorageProvider.LoadXmlFile(System.String)">
            <devdoc>
            Load the xml file storage.
            </devdoc>        
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Configuration.Storage.XmlFileStorageProvider.SetApplicationDocumentPathSetting(Microsoft.Practices.EnterpriseLibrary.Configuration.XmlFileStorageProviderData)">
            <devdoc>
            If no path is specified for the configuration file the default is to use the application configuration file.
            </devdoc>        
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Configuration.Storage.XmlFileStorageProvider.XmlFileName">
            <summary>
            <para>Gets the name of the Xml file used as storage.</para>
            </summary>
            <value>
            <para>The name of the Xml file used as storage.</para>
            </value>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Common.Cryptography.HashCryptographer">
            <summary>
            <para>Represents a basic cryptography services for a <see cref="T:System.Security.Cryptography.HashAlgorithm"/>.</para>
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Cryptography.HashCryptographer.#ctor(System.String)">
            <summary>
            <para>Initialize a new instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Cryptography.HashCryptographer"/> with an algorithm type.</para>
            </summary>
            <param name="algorithmType">A fully qualifed type name derived from <see cref="T:System.Security.Cryptography.HashAlgorithm"/>.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Cryptography.HashCryptographer.#ctor(System.String,System.Byte[])">
            <summary>
            <para>Initialize a new instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Cryptography.HashCryptographer"/> with an algorithm type and key.</para>
            </summary>
            <param name="algorithmType">A fully qualifed type name derived from <see cref="T:System.Security.Cryptography.HashAlgorithm"/>.</param>
            <param name="key"><para>The key for a <see cref="T:System.Security.Cryptography.KeyedHashAlgorithm"/>.</para></param>
            <remarks>
            While this overload will work with a specified <see cref="T:System.Security.Cryptography.HashAlgorithm"/>, the key 
            is only relevant when initializing with a specified <see cref="T:System.Security.Cryptography.KeyedHashAlgorithm"/>.
            </remarks>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Cryptography.HashCryptographer.ComputeHash(System.Byte[])">
            <summary>
            <para>Computes the hash value of the plaintext.</para>
            </summary>
            <param name="plaintext"><para>The plaintext in which you wish to hash.</para></param>
            <returns><para>The resulting hash.</para></returns>
        </member>
        <member name="T:Jenzabar.Common.Reflection.ReflectionUtilities">
            <summary>
            Summary description for ReflectionUtilities.
            </summary>
        </member>
        <member name="M:Jenzabar.Common.Reflection.ReflectionUtilities.ValidateFullTypePath(System.String)">
            <summary>
            Validates a full type path to determine if it is in the format of AssemblyName,TypeName
            </summary>
            <param name="fullTypePath">The type path to validate</param>
            <returns>True if the path is in the correct format</returns>
            <remarks>This method does not attempt to determine if the type or assembly exists, only that it has the correct format</remarks>
        </member>
        <member name="M:Jenzabar.Common.Reflection.ReflectionUtilities.LoadType(System.String)">
            <summary>
            Loads a type from an assembly
            </summary>
            <param name="fullTypePath">The type name in the format: AssemblyName,TypeName</param>
            <returns>The type requested</returns>
        </member>
        <member name="M:Jenzabar.Common.Reflection.ReflectionUtilities.LoadType(System.String,System.String)">
            <summary>
            Loads a type from an assembly
            </summary>
            <param name="assemblyName">The assembly name, not including the extension</param>
            <param name="typeName">The type name, including the namespace</param>
            <returns>The type requested</returns>
        </member>
        <member name="M:Jenzabar.Common.Reflection.ReflectionUtilities.GetTypeName(System.Type)">
            <summary>
            Gets the string representation of the type name including the assembly, without version, culture, and strong name.
            </summary>
            <param name="type">The <see cref="T:System.Type"/> to get the string representation for</param>
            <returns>Gets the string representation of the type</returns>
        </member>
        <member name="T:Jenzabar.Common.Web.UI.Controls.OrderDropDown">
            <summary>
            Allows the user to change the order of a specific item in relation to other items.
            Example:  "Before Item X", "First", "Last", "After Item X". 
            The values for the dropdown list items come from the database.
            </summary>
            <remarks>This control extends .NET's System.Web.UI.WebControls.DropDownList.</remarks>
        </member>
        <member name="P:Jenzabar.Common.Web.UI.Controls.OrderDropDown.DataValueField">
            <summary>
            Gets and sets the field of the data source that provides the value for each list item.  
            </summary>
        </member>
        <member name="T:Jenzabar.Common.Web.UI.Controls.MultiControlValidator">
            <summary>
            This control validates a "list" control (e.g., Repeater) 
            by validating all contained controls by name.
            </summary>
            <remarks>This control extends System.Web.UI.WebControls.CustomValidator.</remarks>
        </member>
        <member name="F:Jenzabar.Common.Web.UI.Controls.MultiControlValidator._listControl">
            <summary>
            The outer "list" control to go through and validate.
            Acceptable controls: Repeater.
            </summary>
        </member>
        <member name="F:Jenzabar.Common.Web.UI.Controls.MultiControlValidator._controlToValidate">
            <summary>
            The control that appears multiple times within the list control.
            Acceptable controls: TextBox
            </summary>
        </member>
        <member name="F:Jenzabar.Common.Web.UI.Controls.MultiControlValidator._validationTrigger">
            <summary>
            The control that must be populated/checked in order to trigger the rest of the validation.
            </summary>
        </member>
        <member name="F:Jenzabar.Common.Web.UI.Controls.MultiControlValidator._listValidation">
            <summary>
            The type of validation that should be done on the list.
            </summary>
        </member>
        <member name="T:Jenzabar.Common.Web.UI.Controls.MultiControlValidator.ListValidationType">
            <summary>
            The type of validation to be done,
            based on the number of valid fields to find (AtLeastOne (default), OnlyOne, All, or None).
            </summary>
        </member>
        <member name="T:Jenzabar.Common.Web.UI.Controls.MultiControlValidator.NullableBoolean">
            <summary>
            Used internally to see what should happen when a row is checked for validity.
            </summary>
        </member>
        <member name="T:Jenzabar.Common.Web.UI.Controls.TabGroup">
            <summary>
            Do not use.  
            Instead, use <see cref="!:ContentTabs">ContentTabs</see> to collapse long sections of a specific view.
            Use <see cref="T:Jenzabar.Common.Web.UI.Controls.SuperTabs">SuperTabs</see> to provide screen navigation.
            
            This is a System.Web.UI.Webcontrols.WebControl that renders a panel with <see cref="P:Jenzabar.Common.Web.UI.Controls.TabGroup.Tabs">Tab</see>s 
            to hide or display content.
            </summary>
        </member>
        <member name="M:Jenzabar.Common.Web.UI.Controls.TabGroup.#ctor">
            <summary>
            Creates a new instance with a <see cref="T:Jenzabar.Common.Web.UI.Controls.TabCollection">TabCollection</see> of <see cref="T:Jenzabar.Common.Web.UI.Controls.Tab">Tab</see>s.
            </summary>
        </member>
        <member name="M:Jenzabar.Common.Web.UI.Controls.TabGroup.Render(System.Web.UI.HtmlTextWriter)">
            <summary>
            Renders HTML using a div tag with class="tabGroup" for the entire tab group, 
            an input tag with type="hidden" for storing the selected tab index,
            an unordered list (ul) tag for the tabHeader, and (li) and (a) tags for each hyperlink-style tab.
            </summary>
            <param name="writer">The HtmlTextWriter that renders the control.</param>
        </member>
        <member name="P:Jenzabar.Common.Web.UI.Controls.TabGroup.Tabs">
            <summary>
            Gets the <see cref="T:Jenzabar.Common.Web.UI.Controls.TabCollection">TabCollection</see> that will be displayed in this control.
            </summary>
        </member>
        <member name="P:Jenzabar.Common.Web.UI.Controls.TabGroup.SelectedIndex">
            <summary>
            Gets and sets the zero-based index for the selected tab.
            </summary>
        </member>
        <member name="T:Jenzabar.Common.Web.UI.Controls.Tab">
            <summary>
            The content and information about a Tab in the TabGroup control
            </summary>
        </member>
        <member name="M:Jenzabar.Common.Web.UI.Controls.Tab.#ctor">
            <summary>
            Creates a new instance.
            </summary>
        </member>
        <member name="M:Jenzabar.Common.Web.UI.Controls.Tab.RenderBeginTag(System.Web.UI.HtmlTextWriter)">
            <summary>
            Renders an HTML div tag with class="tabContent" and display="block" for this control.
            </summary>
            <param name="writer">The HtmlTextWriter that renders the control.</param>
        </member>
        <member name="M:Jenzabar.Common.Web.UI.Controls.Tab.RenderEndTag(System.Web.UI.HtmlTextWriter)">
            <summary>
            Renders the end tag for this control.
            </summary>
            <param name="writer">The HtmlTextWriter that renders the control.</param>
        </member>
        <member name="P:Jenzabar.Common.Web.UI.Controls.Tab.Text">
            <summary>
            Gets and sets the text that will appear at the top of this tab.
            </summary>
        </member>
        <member name="P:Jenzabar.Common.Web.UI.Controls.Tab.Selected">
            <summary>
            Gets and sets whether this tab is selected.
            </summary>
        </member>
        <member name="T:Jenzabar.Common.Web.UI.Controls.TabCollection">
            <summary>
            A collection of Tab controls for use in the <see cref="T:Jenzabar.Common.Web.UI.Controls.TabGroup">TabGroup</see> control to keep track of the many <see cref="T:Jenzabar.Common.Web.UI.Controls.Tab">Tab</see>s within the group.
            </summary>
        </member>
        <member name="M:Jenzabar.Common.Web.UI.Controls.TabCollection.#ctor(Jenzabar.Common.Web.UI.Controls.TabGroup)">
            <summary>
            Creates a new instance.
            </summary>
        </member>
        <member name="M:Jenzabar.Common.Web.UI.Controls.TabCollection.Add(Jenzabar.Common.Web.UI.Controls.Tab)">
            <summary>
            Adds a tab.
            </summary>
            <param name="tab">The <see cref="T:Jenzabar.Common.Web.UI.Controls.Tab">Tab</see> to be added to the <see cref="T:Jenzabar.Common.Web.UI.Controls.TabCollection">TabCollection</see>.</param>
        </member>
        <member name="M:Jenzabar.Common.Web.UI.Controls.TabCollection.AddAt(System.Int32,Jenzabar.Common.Web.UI.Controls.Tab)">
            <summary>
            Adds a tab to the collection of tabs at the specific index.
            </summary>
            <param name="index">The integer index of the added tab.</param>
            <param name="tab">The <see cref="T:Jenzabar.Common.Web.UI.Controls.Tab">Tab</see> to be added to the collection.</param>
        </member>
        <member name="M:Jenzabar.Common.Web.UI.Controls.TabCollection.RemoveAt(System.Int32)">
            <summary>
            Removes a <see cref="T:Jenzabar.Common.Web.UI.Controls.Tab">Tab</see> from the collection of tabs at a specific index.
            </summary>
            <param name="index">The integer index from where to remove the tab.</param>
        </member>
        <member name="P:Jenzabar.Common.Web.UI.Controls.TabCollection.Item(System.Int32)">
            <summary>
            Gets and sets a tab in the collection of tabs by index.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Configuration.ConfigurationManagerSectionHandler">
            <summary>
            Reads the "enterpriselibrary.configurationSettings" section of the configuration file. 
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Configuration.ConfigurationManagerSectionHandler.#ctor">
            <summary>
            <para>
            Initializes a new instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Configuration.ConfigurationManagerSectionHandler"/> class.
            </para>
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Configuration.ConfigurationManagerSectionHandler.Create(System.Object,System.Object,System.Xml.XmlNode)">
            <summary>
            <para>
            Evaluates the given XML section and returns a <see cref="T:Microsoft.Practices.EnterpriseLibrary.Configuration.ConfigurationSettings"/> instance that contains the results of the evaluation.
            </para>
            </summary>
            <param name="parent">
            <para>The configuration settings in a corresponding parent configuration section. </para>
            </param>
            <param name="configContext">
            <para>An HttpConfigurationContext when <see cref="M:Microsoft.Practices.EnterpriseLibrary.Configuration.ConfigurationManagerSectionHandler.Create(System.Object,System.Object,System.Xml.XmlNode)"/> is called from the ASP.NET configuration system. Otherwise, this parameter is reserved and is a null reference (Nothing in Visual Basic). </para>
            </param>
            <param name="section">
            <para>The <see cref="T:System.Xml.XmlNode"/> that contains the configuration information to be handled. Provides direct access to the XML contents of the configuration section. </para>
            </param>
            <returns>
            <para>
            A <see cref="T:Microsoft.Practices.EnterpriseLibrary.Configuration.ConfigurationSettings"/> instance that contains the section's configuration settings.
            </para>
            </returns>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Configuration.StorageProviderData">
            <summary>
            <para>Represents a storage provider to read and write data in configuration.</para>
            </summary>
            <remarks>
            <para>The class maps to the <c>storageProvider</c> element in configuration.</para>
            </remarks>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Configuration.StorageProviderData.#ctor">
            <summary>
            <para>Initialize a new instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Configuration.StorageProviderData"/> class..</para>
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Configuration.StorageProviderData.#ctor(System.String)">
            <summary>
            <para>Initialize a new instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Configuration.StorageProviderData"/> class with a name and fully qualified type name.</para>
            </summary>
            <param name="name">
            <para>The name of the storage provider.</para>
            </param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Configuration.StorageProviderData.#ctor(System.String,System.String)">
            <summary>
            <para>Initialize a new instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Configuration.StorageProviderData"/> class with a name and fully qualified type name.</para>
            </summary>
            <param name="name">
            <para>The name of the storage provider.</para>
            </param>
            <param name="sectionName">
            <para>The section name for the configuration.</para>
            </param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Configuration.StorageProviderData.Clone">
            <summary>
            <para>Creates a new object that is a copy of the current instance.</para>
            </summary>
            <returns>
            <para>A new object that is a copy of this instance.</para>
            </returns>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Configuration.StorageProviderData.SectionName">
            <summary>
            <para>Gets or sets the section name for the configuration.</para>
            </summary>
            <value>
            <para>The section name for the configuration.</para>
            </value>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Common.DataCollection">
            <summary>
            <para>Represents a collection of configuration data items.</para>
            </summary>  
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.DataCollection.#ctor">
            <summary>
            <para>Initializes a new instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.DataCollection"/> class that is empty, has the default initial capacity and uses the default case-insensitive hash code provider and the default case-insensitive comparer.</para>
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.DataCollection.#ctor(System.Int32)">
            <summary>
            <para>Initializes a new instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.DataCollection"/> class that is empty, has the specified initial capacity and uses the default case-insensitive hash code provider and the default case-insensitive comparer.</para>
            </summary>
            <param name="capacity">
            <para>The initial number of entries that the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.DataCollection"/> can contain.</para>
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <para><paramref name="capacity"/> is less than zero.</para>
            </exception>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.DataCollection.#ctor(System.Collections.IHashCodeProvider,System.Collections.IComparer)">
            <summary>
            <para>Initializes a new instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.DataCollection"/> class that is empty, has the default initial capacity and uses the specified hash code provider and the specified comparer.</para>
            </summary>
            <param name="hashCodeProvider">
            <para>The <see cref="T:System.Collections.IHashCodeProvider"/> that will supply the hash codes for all keys in the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.DataCollection"/>.</para>
            </param>
            <param name="comparer">
            <para>The <see cref="T:System.Collections.IComparer"/> to use to determine whether two keys are equal.</para>
            </param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.DataCollection.#ctor(System.Int32,System.Collections.IHashCodeProvider,System.Collections.IComparer)">
            <summary>
            <para>Initializes a new instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.DataCollection"/> class that is empty, and uses the specified capacity, the specified hash code provider and the specified comparer.</para>
            </summary>
            <param name="capacity">
            <para>The initial number of entries that the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.DataCollection"/> can contain.</para>
            </param>
            <param name="hashCodeProvider">
            <para>The <see cref="T:System.Collections.IHashCodeProvider"/> that will supply the hash codes for all keys in the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.DataCollection"/>.</para>
            </param>
            <param name="comparer">
            <para>The <see cref="T:System.Collections.IComparer"/> to use to determine whether two keys are equal.</para>
            </param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.DataCollection.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            <para>Initializes a new instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.DataCollection"/> class that is serializable and uses the specified <see cref="T:System.Runtime.Serialization.SerializationInfo"/> and <see cref="T:System.Runtime.Serialization.StreamingContext"/>.</para>
            </summary>
            <param name="info">
            <para>A <see cref="T:System.Runtime.Serialization.SerializationInfo"/> object that contains the information required to serialize the new <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.DataCollection"/> instance. </para>
            </param>
            <param name="context">
            <para>A <see cref="T:System.Runtime.Serialization.StreamingContext"/> object that contains the source and destination of the serialized stream associated with the new <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.DataCollection"/> instance.</para>
            </param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.DataCollection.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            <para>Implements the <see cref="T:System.Runtime.Serialization.ISerializable"/> interface and returns the data needed to serialize the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.DataCollection"/> instance.</para>
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"></see> to populate with data.</param>
            <param name="context">The destination (see <see cref="T:System.Runtime.Serialization.StreamingContext"></see>) for this serialization.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.DataCollection.OnDeserialization(System.Object)">
            <summary>
            <para>Implements the <see cref="T:System.Runtime.Serialization.ISerializable"/> interface and raises the deserialization event when the deserialization is complete.</para>
            </summary>
            <param name="sender">
            <para>The source of the deserialization event.</para>
            </param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.DataCollection.Remove(System.String)">
            <summary>
            <para>Removes the entry with the specified <paramref name="name"/> from the collection.</para>
            </summary>
            <param name="name">
            <para>The name of the item to remove.</para>
            </param>
            <exception cref="T:System.ArgumentNullException">
            <para><paramref name="name"/> is a <see langword="null"/> reference (Nothing in Visual Basic).</para>
            </exception>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.DataCollection.RemoveAt(System.Int32)">
            <summary>
            <para>Removes the entry at the specified index of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.DataCollection"/> instance.</para>
            </summary>
            <param name="index">
            <para>The zero-based index of the entry to remove.</para>
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <para><paramref name="index"/> is outside the valid range of indexes for the collection.</para>
            </exception>
            <exception cref="T:System.NotSupportedException">
            <para>The collection is read-only. </para>
            <para>- or -</para>
            <para>The collection has a fixed size.</para>
            </exception>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.DataCollection.Contains(System.String)">
            <summary>
            Determines whether the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.DataCollection"/> contains a specific key.
            </summary>
            <param name="name">
            <para>The key to locate in the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.DataCollection"/>.</para>
            </param>
            <returns>
            <para><see langword="true"/> if the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.DataCollection"/> contains an element with the specified key; otherwise, <see langword="false"/>.</para>
            </returns>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.DataCollection.Clear">
            <summary>
            <para>Removes all entries from the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.DataCollection"/>.</para>
            </summary>
            <remarks>
            <para><seealso cref="P:Microsoft.Practices.EnterpriseLibrary.Common.DataCollection.Count"/> is set to zero.</para>
            </remarks>
            <seealso cref="M:System.Collections.IList.Clear"/>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.DataCollection.GetEnumerator">
            <summary>
            <para>Returns an enumerator that can iterate through the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.DataCollection"/>.</para>
            </summary>
            <returns>
            <para>An <see cref="T:System.Collections.IEnumerator"/> for the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.DataCollection"/> instance.</para>
            </returns>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.DataCollection.CopyTo(System.Array,System.Int32)">
            <summary>
            <para>Copies the entire <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.DataCollection"/> to a compatible one-dimensional Array, starting at the specified index of the target array.</para>
            </summary>
            <param name="array">
            <para>The one-dimensional <see cref="T:System.Array"/> that is the destination of the elements copied from <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.DataCollection"/>. The <see cref="T:System.Array"/> must have zero-based indexing.</para>
            </param>
            <param name="index">
            <para>The zero-based index in array at which copying begins.</para>
            </param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.DataCollection.BaseHasKeys">
            <summary>
            <para>Gets a value indicating whether the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.DataCollection"/> instance contains entries whose keys are not a <see langword="null"/> reference (<see langword="Nothing"/> in Visual Basic).</para>
            </summary>
            <returns>
            <para><see langword="true"/> if the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.DataCollection"/> instance contains entries whose keys are not a <see langword="null"/> reference (<see langword="Nothing"/> in Visual Basic); otherwise, <see lagword="false"/>.</para>
            </returns>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.DataCollection.BaseAdd(System.String,System.Object)">
            <summary>
            <para>Adds an entry with the specified key and value into the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.DataCollection"/> instance.</para>
            </summary>
            <param name="name">
            <para>The string key of the entry to add. The key can be a <see langword="null"/> reference (<see langword="Nothing"/> in Visual Basic)</para>.
            </param>
            <param name="value">
            <para>The object value of the entry to add. The value can be a <see langword="null"/> reference (<see langword="Nothing"/> in Visual Basic).</para>
            </param>
            <exception cref="T:System.InvalidOperationException">
            <para>The collection already contains an entry for <paramref name="name"/>.</para>
            </exception>
            <exception cref="T:System.NotSupportedException">
            <para>The collection is read-only.</para>
            <para>- or -</para>
            <para>The collection has a fixed size.</para>
            </exception>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.DataCollection.BaseRemove(System.String)">
            <summary>
            <para>Removes the entries with the specified key from the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.DataCollection"/> instance.</para>
            </summary>
            <param name="name">
            <para>The string key of the entry to add. The key can be a <see langword="null"/> reference (<see langword="Nothing"/> in Visual Basic)</para>.
            </param>
            <exception cref="T:System.NotSupportedException">
            <para>The collection is read-only.</para>
            <para>- or -</para>
            <para>The collection has a fixed size.</para>
            </exception>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.DataCollection.BaseRemoveAt(System.Int32)">
            <summary>
            <para>Removes the entry at the specified index of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.DataCollection"/> instance.</para>
            </summary>
            <param name="index">
            <para>The zero-based index of the entry to remove.</para>
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <para><paramref name="index"/> is outside the valid range of indexes for the collection.</para>
            </exception>
            <exception cref="T:System.NotSupportedException">
            <para>The collection is read-only.</para>
            <para>- or -</para>
            <para>The collection has a fixed size.</para>
            </exception>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.DataCollection.BaseClear">
            <summary>
            Removes all entries from the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.DataCollection"/> instance.
            </summary>
            <exception cref="T:System.NotSupportedException">
            <para>The collection is read-only.</para>
            </exception>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.DataCollection.BaseGet(System.Int32)">
            <summary>
            <para>Gets the value of the entry at the specified index of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.DataCollection"/> instance.</para>
            </summary>
            <param name="index">
            <para>The zero-based index of the value to get.</para>
            </param>
            <returns>
            <para>An object that represents the value of the entry at the specified index.</para>
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <para><paramref name="index"/> is outside the valid range of indexes for the collection.</para>
            </exception>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.DataCollection.BaseGet(System.String)">
            <summary>
            <para>Gets the value of the first entry with the specified key from the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.DataCollection"/> instance.</para>
            </summary>
            <param name="name">
            <para>The string key of the entry to add. The key can be a <see langword="null"/> reference (<see langword="Nothing"/> in Visual Basic)</para>.
            </param>
            <returns>
            <para>An object that represents the value of the first entry with the specified key, if found; otherwise, a <see langword="null"/> reference (<see langword="Nothing"/> in Visual Basic).</para>
            </returns>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.DataCollection.BaseSet(System.Int32,System.Object)">
            <summary>
            <para>Sets the value of the entry at the specified index of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.DataCollection"/> instance.</para>
            </summary>
            <param name="index">
            <para>The zero-based index of the entry to set.</para>
            </param>
            <param name="value">
            <para>The object that represents the new value of the entry to set. The value can be a <see langword="null"/> reference (<see langword="Nothing"/> in Visual Basic).</para>
            </param>
            <exception cref="T:System.NotSupportedException">
            <para>The collection is read-only.</para>
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <para><paramref name="index"/> is outside the valid range of indexes for the collection.</para>
            </exception>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.DataCollection.BaseSet(System.String,System.Object)">
            <summary>
            <para>Sets the value of the first entry with the specified key in the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.DataCollection"/> instance, if found; otherwise, adds an entry with the specified key and value into the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.DataCollection"/> instance.</para>
            </summary>
            <param name="name">
            <para>The string key of the entry to set. The key can be a <see langword="null"/> reference (<see langword="Nothing"/> in Visual Basic)</para>.
            </param>
            <param name="value">
            <para>The object that represents the new value of the entry to set. The value can be a <see langword="null"/> reference (<see langword="Nothing"/> in Visual Basic).</para>
            </param>
            <exception cref="T:System.InvalidOperationException">
            <para>The collection already contains an entry for <paramref name="name"/>.</para>
            </exception>
            <exception cref="T:System.NotSupportedException">
            <para>The collection is read-only.</para>
            </exception>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.DataCollection.BaseGetKey(System.Int32)">
            <summary>
            <para>Gets the key of the entry at the specified index of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.DataCollection"/> instance.</para>
            </summary>
            <param name="index">
            <para>The zero-based index of the key to get.</para>
            </param>
            <returns>
            <para>A string that represents the key of the entry at the specified index.</para>
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <para><paramref name="index"/> is outside the valid range of indexes for the collection.</para>
            </exception>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.DataCollection.BaseGetAllKeys">
            <summary>
            <para>Returns a String array that contains all the keys in the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.DataCollection"/> instance.</para>
            </summary>
            <returns>
            <para>A string array that contains all the keys in the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.DataCollection"/> instance.</para>
            </returns>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.DataCollection.BaseGetAllValues">
            <summary>
            <para>Returns an Object array that contains all the values in the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.DataCollection"/> instance.</para>
            </summary>
            <returns>
            <para>An object array that contains all the values in the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.DataCollection"/> instance.</para>
            </returns>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.DataCollection.BaseGetAllValues(System.Type)">
            <summary>
            <para>Returns an array of the specified type that contains all the values in the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.DataCollection"/> instance.</para>
            </summary>
            <param name="type">
            <para>A <see cref="T:System.Type"/> that represents the type of array to return.</para>
            </param>
            <returns>
            <para>An array of the specified type that contains all the values in the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.DataCollection"/> instance.</para>
            </returns>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.DataCollection.Keys">
            <summary>
            <para>Gets a <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.DataCollection.KeysCollection"/> instance that contains all the keys in the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.DataCollection"/> instance.</para>
            </summary>
            <value>
            <para>A <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.DataCollection.KeysCollection"/> instance that contains all the keys in the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.DataCollection"/> instance.</para>
            </value>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.DataCollection.Count">
            <summary>
            Gets the number of key-and-value pairs contained in the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.DataCollection"/> instance.
            </summary>
            <value>
            <para>The number of key-and-value pairs contained in the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.DataCollection"/> instance.</para>
            </value>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.DataCollection.SyncRoot">
            <summary>
            <para>Gets an object that can be used to synchronize access to the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.DataCollection"/>.</para>
            </summary>
            <value>
            <para>An object that can be used to synchronize access to the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.DataCollection"/>.</para>
            </value>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.DataCollection.IsSynchronized">
            <summary>
            <para>Gets a value indicating whether access to the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.DataCollection"/> is synchronized (thread-safe).</para>
            </summary>
            <value>
            <para><see langword="true"/> if access to the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.DataCollection"/> is synchronized (thread-safe); otherwise, <see langword="false"/>. The default is <see langword="false"/>.</para>
            </value>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.DataCollection.IsReadOnly">
            <summary>
            <para>Gets or sets a value indicating whether the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.DataCollection"/> instance is read-only.</para>
            </summary>
            <value><see langword="true"/> if the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.DataCollection"/> instance is read-only; otherwise, <see langword="false"/>.</value>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Common.DataCollection.KeysCollection">
            <summary>
            <para>Represents a collection of the String keys of a collection.</para>
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.DataCollection.KeysCollection.Get(System.Int32)">
            <summary>
            <para>Gets the key at the specified index of the collection.</para>
            </summary>
            <param name="index"><para>The zero-based index of the key to get from the collection.</para></param>
            <returns><para>A string that contains the key at the specified index of the collection.</para></returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <para><paramref name="index"/> is outside the valid range of indexes for the collection.</para>
            </exception>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.DataCollection.KeysCollection.GetEnumerator">
            <summary>
            <para>Returns an enumerator that can iterate through the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.DataCollection.KeysCollection"/>.</para>
            </summary>
            <returns>
            <para>An <para>IEnumerator</para> for the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.DataCollection.KeysCollection"/>.</para>
            </returns>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.DataCollection.KeysCollection.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
            <summary>
            <para>Copies the entire <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.DataCollection.KeysCollection"/> to a compatible one-dimensional Array, starting at the specified index of the target array.</para>
            </summary>
            <param name="array">
            <para>The one-dimensional Array that is the destination of the elements copied from <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.DataCollection.KeysCollection"/>. The Array must have zero-based indexing.</para>
            </param>
            <param name="index">
            <para>The zero-based index in array at which copying begins. </para>
            </param>
            <excetion cref="T:System.ArgumentNullException">
            <para><paramref name="array"/> is a <see langword="null"/> reference (<see langword="Nothing"/> in Visual Basic).</para>
            </excetion>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <para><paramref name="index"/> is less than zero.</para>
            </exception>
            <exception cref="T:System.ArgumentException">
            <para><paramref name="array"/> is multidimensional</para>
            <para>-or-</para>
            <para><paramref name="index"/> is equal to or greater than the length of array.</para>
            <para>-or-</para>
            <para>The number of elements in the source <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.DataCollection.KeysCollection"/> is greater than the available space from index to the end of the destination array.</para>
            </exception>
            <exception cref="T:System.InvalidCastException">
            <para>The type of the source <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.DataCollection.KeysCollection"/> cannot be cast automatically to the type of the destination array.</para>
            </exception>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.DataCollection.KeysCollection.CopyTo(System.String[],System.Int32)">
            <summary>
            <para>Copies the entire <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.DataCollection.KeysCollection"/> to a compatible one-dimensional Array, starting at the specified index of the target array.</para>
            </summary>
            <param name="array">
            <para>The one-dimensional Array that is the destination of the elements copied from <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.DataCollection.KeysCollection"/>. The Array must have zero-based indexing.</para>
            </param>
            <param name="index">
            <para>The zero-based index in array at which copying begins. </para>
            </param>
            <excetion cref="T:System.ArgumentNullException">
            <para><paramref name="array"/> is a <see langword="null"/> reference (<see langword="Nothing"/> in Visual Basic).</para>
            </excetion>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <para><paramref name="index"/> is less than zero.</para>
            </exception>
            <exception cref="T:System.ArgumentException">
            <para><paramref name="array"/> is multidimensional</para>
            <para>-or-</para>
            <para><paramref name="index"/> is equal to or greater than the length of array.</para>
            <para>-or-</para>
            <para>The number of elements in the source <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.DataCollection.KeysCollection"/> is greater than the available space from index to the end of the destination array.</para>
            </exception>
            <exception cref="T:System.InvalidCastException">
            <para>The type of the source <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.DataCollection.KeysCollection"/> cannot be cast automatically to the type of the destination array.</para>
            </exception>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.DataCollection.KeysCollection.Item(System.Int32)">
            <summary>
            <para>Gets the entry at the specified index of the collection.</para>
            </summary>
            <param name="index">
            <para>The zero-based index of the entry to locate in the collection.</para>
            </param>
            <value>
            <para>The string key of the entry at the specified index of the collection.</para>
            </value>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <para><paramref name="index"/> is outside the valid range of indexes for the collection.</para>
            </exception>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.DataCollection.KeysCollection.Count">
            <summary>
            <para>Gets the number of keys in the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.DataCollection.KeysCollection"/>.</para>
            </summary>
            <value>
            The number of keys in the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.DataCollection.KeysCollection"/>.
            </value>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.DataCollection.KeysCollection.System#Collections#ICollection#SyncRoot">
            <summary>
            <para>Gets an object that can be used to synchronize access to the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.DataCollection.KeysCollection"/>.</para>
            </summary>
            <value>
            <para>An object that can be used to synchronize access to the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.DataCollection.KeysCollection"/>.</para>
            </value>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.DataCollection.KeysCollection.System#Collections#ICollection#IsSynchronized">
            <summary>
            <para>Gets an object that can be used to synchronize access to the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.DataCollection.KeysCollection"/>.</para>
            </summary>
            <value>
            <para>an object that can be used to synchronize access to the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.DataCollection.KeysCollection"/>.</para>
            </value>
        </member>
        <member name="T:Jenzabar.Common.ServerException">
            <summary>
            Use this Exception to log errors on Page.Error event and Application.Error event
            </summary>
        </member>
        <member name="F:Jenzabar.Common.ServerException._url">
            <summary>
            property shows which URL cased the exception
            </summary>
        </member>
        <member name="M:Jenzabar.Common.ServerException.#ctor(System.String)">
            <summary>
            Constructs the exception
            </summary>
            <param name="message">The message to be stored in the exception</param>
        </member>
        <member name="M:Jenzabar.Common.ServerException.#ctor(System.String,System.String)">
            <summary>
            Constructs the exception
            </summary>
            <param name="message">The message to be stored in the exception</param>
            <param name="url">URL of page which throws the exception</param>
        </member>
        <member name="M:Jenzabar.Common.ServerException.#ctor(System.String,System.Exception)">
            <summary>
            Constructs the exception
            </summary>
            <param name="message">The message to be stored in the exception</param>
            <param name="innerException">The intial exception to be wrapped by </param>
        </member>
        <member name="M:Jenzabar.Common.ServerException.#ctor(System.String,System.Exception,System.String)">
            <summary>
            Constructs the exception
            </summary>
            <param name="message">The message to be stored in the exception</param>
            <param name="innerException">The intial exception to be wrapped by</param>
            <param name="url">URL of page which throws the exception</param>
        </member>
        <member name="M:Jenzabar.Common.ServerException.#ctor(System.String,System.Exception,Jenzabar.Common.ErrorLevel,System.String)">
            <summary>
            Constructs the exception
            </summary>
            <param name="message">The message to be stored in the exception</param>
            <param name="innerException">The intial exception to be wrapped by the JenzaException</param>
            <param name="errorLevel">error level (severity)</param>
            <param name="url">URL of page which throws the exception</param>
        </member>
        <member name="P:Jenzabar.Common.ServerException.Category">
            <summary>
            category of exception, see enum for descriptions
            </summary>
        </member>
        <member name="T:Jenzabar.Common.Web.UI.Controls.GlobalizedButton">
            <summary>
            A button control that globalizes the text for a button's label and tooltip.
            </summary>
            <remarks>This control extends the .NET System.Web.UI.WebControls.Button control.</remarks>
        </member>
        <member name="P:Jenzabar.Common.Web.UI.Controls.GlobalizedButton.TextKey">
            <summary>
            Gets and sets the key to use to look up the globalized text for this control.
            </summary>
        </member>
        <member name="P:Jenzabar.Common.Web.UI.Controls.GlobalizedButton.ToolTipKey">
            <summary>
            Gets and sets the key to use to look up the globalized text for this controls tooltip.
            </summary>
        </member>
        <member name="T:Jenzabar.Common.Web.UI.Controls.GlobalizedLinkButton">
            <summary>
            A hyperlink style button control that globalizes the text for the linkbutton's hyperlink and tooltip.
            </summary>
            <remarks>This control extends the .NET System.Web.UI.WebControls.LinkButton control.</remarks>
        </member>
        <member name="P:Jenzabar.Common.Web.UI.Controls.GlobalizedLinkButton.TextKey">
            <summary>
            Gets and sets the key to use to look up the globalized text for this control.
            </summary>
        </member>
        <member name="P:Jenzabar.Common.Web.UI.Controls.GlobalizedLinkButton.ToolTipKey">
            <summary>
            Gets and sets the key to use to look up the globalized text for this control's tooltip.
            </summary>
        </member>
        <member name="T:Jenzabar.Common.Web.UI.Controls.GlobalizedLinkButtonWithIcon">
            <summary>
            A hyperlink style button (with icon) control that globalizes the text for the hyperlink and tooltip.
            The icon can be configured to display either before or after the hyperlink.
            </summary>
            <remarks>This control extends the .NET System.Web.UI.WebControls.LinkButton control.</remarks>
        </member>
        <member name="P:Jenzabar.Common.Web.UI.Controls.GlobalizedLinkButtonWithIcon.IconSrc">
            <summary>
            Gets and sets the url to use for the src attribute of the icon. string.Empty displays no icon (by default)
            </summary>
        </member>
        <member name="P:Jenzabar.Common.Web.UI.Controls.GlobalizedLinkButtonWithIcon.IconLocation">
            <summary>
            Gets and sets the location of the linkbutton's icon (BeforeText or AfterText).
            </summary>
            <returns>AfterText or BeforeText(default).</returns>
        </member>
        <member name="T:Jenzabar.Common.Web.UI.Controls.GlobalizedCheckBox">
            <summary>
            A checkbox control that allows the user to select a true or false condition and globalizes the text for the control's label and tooltip.
            </summary>
        </member>
        <member name="P:Jenzabar.Common.Web.UI.Controls.GlobalizedCheckBox.TextKey">
            <summary>
            Gets and sets the key to use to look up the globalized text for this control.
            </summary>
        </member>
        <member name="P:Jenzabar.Common.Web.UI.Controls.GlobalizedCheckBox.ToolTipKey">
            <summary>
            Gets and sets the key to use to look up the globalized text for this control's tooltip.
            </summary>
        </member>
        <member name="T:Jenzabar.Common.Web.UI.Controls.GlobalizedLiteral">
            <summary>
            A literal control that reserves the location for static text on a web page and
            globalizes the text for the control.
            </summary>
        </member>
        <member name="P:Jenzabar.Common.Web.UI.Controls.GlobalizedLiteral.TextKey">
            <summary>
            Gets and sets the key to use to look up the globalized text for this control.
            </summary>
        </member>
        <member name="T:Jenzabar.Common.Web.UI.Controls.GlobalizedLabel">
            <summary>
            A label control that displays globalized text and tooltips.
            </summary>
            <remarks>This control extends the .NET System.Web.UI.WebControls.Label control.</remarks>
        </member>
        <member name="P:Jenzabar.Common.Web.UI.Controls.GlobalizedLabel.TextKey">
            <summary>
            Gets and sets the key to use to look up the globalized text for this control.
            </summary>
        </member>
        <member name="P:Jenzabar.Common.Web.UI.Controls.GlobalizedLabel.ToolTipKey">
            <summary>
            Gets and sets the key to use to look up the globalized text for this control's tooltip.
            </summary>
        </member>
        <member name="T:Jenzabar.Common.Web.UI.Controls.GlobalizedNote">
            <summary>
            A label control that displays a globalized note.
            </summary>
            <remarks>This control extends the <see cref="T:Jenzabar.Common.Web.UI.Controls.GlobalizedLabel">GlobalizedLabel</see> control.</remarks>
        </member>
        <member name="M:Jenzabar.Common.Web.UI.Controls.GlobalizedNote.RenderBeginTag(System.Web.UI.HtmlTextWriter)">
            <summary>
            Renders the markup to start the note.
            </summary>
            <param name="writer">The HtmlTextWriter that renders the control.</param>
        </member>
        <member name="M:Jenzabar.Common.Web.UI.Controls.GlobalizedNote.RenderEndTag(System.Web.UI.HtmlTextWriter)">
            <summary>
            Renders the markup to end the note.
            </summary>
            <param name="writer">The HtmlTextWriter that renders the control.</param>
        </member>
        <member name="T:Jenzabar.Common.Web.UI.Controls.GlobalizedHyperLink">
            <summary>
            A control that displays a globalized hyperLink to another Web page and a globalized tooltip.
            </summary>
            <remarks>This control extends the .NET System.Web.UI.WebControls.HyperLink control.</remarks>
        </member>
        <member name="P:Jenzabar.Common.Web.UI.Controls.GlobalizedHyperLink.TextKey">
            <summary>
            Gets and sets the key to use to look up the globalized text for this control.
            </summary>
        </member>
        <member name="P:Jenzabar.Common.Web.UI.Controls.GlobalizedHyperLink.ToolTipKey">
            <summary>
            Gets and sets the key to use to look up the globalized text for this control's tooltip.
            </summary>
        </member>
        <member name="T:Jenzabar.Common.Web.UI.Controls.GlobalizedRadioButton">
            <summary>
            A control that represents a radio button with globalized text and tooltip.
            </summary>
            <remarks>This control extends the .NET System.Web.UI.WebControls.RadioButton control.</remarks>
        </member>
        <member name="P:Jenzabar.Common.Web.UI.Controls.GlobalizedRadioButton.TextKey">
            <summary>
            Gets and sets the key to use to look up the globalized text for this control.
            </summary>
        </member>
        <member name="P:Jenzabar.Common.Web.UI.Controls.GlobalizedRadioButton.ToolTipKey">
            <summary>
            Gets and sets the key to use to look up the globalized text for this control's tooltip.
            </summary>
        </member>
        <member name="T:Jenzabar.Common.Web.UI.Controls.GlobalizedRequiredFieldValidator">
            <summary>
            A control that makes its associated field a required one.
            This control globalizes the text and error message for the control.
            </summary>
            <remarks>This control extends the .NET System.Web.UI.WebControls.RequiredFieldValidator control.</remarks>
        </member>
        <member name="P:Jenzabar.Common.Web.UI.Controls.GlobalizedRequiredFieldValidator.TextKey">
            <summary>
            Gets and sets the key to use to look up the globalized text for this control.
            </summary>
        </member>
        <member name="P:Jenzabar.Common.Web.UI.Controls.GlobalizedRequiredFieldValidator.ErrorMessageKey">
            <summary>
            Gets and sets the key to use to look up the globalized text for this control's error message.
            </summary>
        </member>
        <member name="T:Jenzabar.Common.Web.UI.Controls.GlobalizedRangeValidator">
            <summary>
            A control that checks whether the value of an input control is within a specified range of values.
            This control also globalizes the text and error message for the control.
            </summary>
            <remarks>This control extends the .NET System.Web.UI.WebControls.RangeValidator control.</remarks>
        </member>
        <member name="P:Jenzabar.Common.Web.UI.Controls.GlobalizedRangeValidator.TextKey">
            <summary>
            Gets and sets the key to use to look up the globalized text for this control.
            </summary>
        </member>
        <member name="P:Jenzabar.Common.Web.UI.Controls.GlobalizedRangeValidator.ErrorMessageKey">
            <summary>
            Gets and sets the key to use to look up the globalized text for this controls error message.
            </summary>
        </member>
        <member name="T:Jenzabar.Common.Web.UI.Controls.GlobalizedCompareValidator">
            <summary>
            A control that either compares the values entered in input controls 
            or compares a value entered in an input control with a constant value.
            This control globalizes the text and error message for the control.
            </summary>
            <remarks>This control extends .NET's System.Web.UI.WebControls.CompareValidator control.</remarks>
        </member>
        <member name="P:Jenzabar.Common.Web.UI.Controls.GlobalizedCompareValidator.TextKey">
            <summary>
            Gets and sets the key to use to look up the globalized text for this control.
            </summary>
        </member>
        <member name="P:Jenzabar.Common.Web.UI.Controls.GlobalizedCompareValidator.ErrorMessageKey">
            <summary>
            Gets and sets the key to use to look up the globalized text for this control's error message.
            </summary>
        </member>
        <member name="T:Jenzabar.Common.Web.UI.Controls.GlobalizedRegularExpressionValidator">
            <summary>
            A control that validates whether the value of an associated input control 
            matches the patten specified by a regular expression.
            This control globalizes the text and error message for the control.
            </summary>
            <remarks>This control extends .NET's System.Web.UI.WebControls.RegularExpressionValidator control.</remarks>
        </member>
        <member name="P:Jenzabar.Common.Web.UI.Controls.GlobalizedRegularExpressionValidator.TextKey">
            <summary>
            Gets and sets the key to use to look up the globalized text for this control.
            </summary>
        </member>
        <member name="P:Jenzabar.Common.Web.UI.Controls.GlobalizedRegularExpressionValidator.ErrorMessageKey">
            <summary>
            Gets and sets the key to use to look up the globalized text for this control's error message.
            </summary>
        </member>
        <member name="T:Jenzabar.Common.Web.UI.Controls.GlobalizedCustomValidator">
            <summary>
            A control that performs user-defined validation on an input control.
            This control globalizes the text and error message for the control.
            </summary>
            <remarks>This control extends .NET's System.Web.UI.WebControls.CustomValidator control.</remarks>
        </member>
        <member name="P:Jenzabar.Common.Web.UI.Controls.GlobalizedCustomValidator.TextKey">
            <summary>
            Gets and sets the key to use to look up the globalized text for this control.
            </summary>
        </member>
        <member name="P:Jenzabar.Common.Web.UI.Controls.GlobalizedCustomValidator.ErrorMessageKey">
            <summary>
            Gets and sets the key to use to look up the globalized text for this control's error message.
            </summary>
        </member>
        <member name="T:Jenzabar.Common.Web.UI.Controls.GlobalizedValidationSummary">
            <summary>
            Displays a summary of all validation errors inline on a Web page, in a message box, or both.
            This control globalizes the header text.
            </summary>
            <remarks>This control extends .NET's System.Web.UI.WebControls.ValidationSummary control.</remarks>
        </member>
        <member name="P:Jenzabar.Common.Web.UI.Controls.GlobalizedValidationSummary.HeaderTextKey">
            <summary>
            Gets and sets the key to use to look up the globalized text for this control's header text.
            </summary>
        </member>
        <member name="T:Jenzabar.Common.Web.UI.Controls.GlobalizedBoundColumn">
            <summary>
            A column type for the System.Web.UI.WebControls.DataGrid and GroupedGrid controls that is bound to a field in a data source.  
            This control also provides globalization of its header and footer text.
            </summary>
            <remarks>This control extends .NET's System.Web.UI.WebControls.BoundColumn control.</remarks>
        </member>
        <member name="P:Jenzabar.Common.Web.UI.Controls.GlobalizedBoundColumn.HeaderTextKey">
            <summary>
            Gets and sets the key to use to look up the globalized text for this control's header text.
            </summary>
        </member>
        <member name="P:Jenzabar.Common.Web.UI.Controls.GlobalizedBoundColumn.FooterTextKey">
            <summary>
            Gets and sets the key to use to look up the globalized text for this control's footer text.
            </summary>
        </member>
        <member name="T:Jenzabar.Common.Web.UI.Controls.GlobalizedButtonColumn">
            <summary>
            A column type for the System.Web.UI.WebControls.DataGrid and GroupedGrid controls that contains a user-defined command button, such as Add or Remove, that works on each row in the column. 
            This control also globalizes the column's header, footer, and button text.
            </summary>
        </member>
        <member name="P:Jenzabar.Common.Web.UI.Controls.GlobalizedButtonColumn.HeaderTextKey">
            <summary>
            Gets and sets the key to use to look up the globalized text for this control's header text.
            </summary>
        </member>
        <member name="P:Jenzabar.Common.Web.UI.Controls.GlobalizedButtonColumn.FooterTextKey">
            <summary>
            Gets and sets the key to use to look up the globalized text for this control's footer text.
            </summary>
        </member>
        <member name="P:Jenzabar.Common.Web.UI.Controls.GlobalizedButtonColumn.TextKey">
            <summary>
            Gets and sets the key to use to look up the globalized text for this button control.
            </summary>
        </member>
        <member name="T:Jenzabar.Common.Web.UI.Controls.GlobalizedHyperLinkColumn">
            <summary>
            A column type for the System.Web.UI.WebControls.DataGrid and GroupedGrid controls that contains a hyperlink for each item in the column.  
            This control also globalizes the header, footer, and hyperlink text.
            </summary>
        </member>
        <member name="P:Jenzabar.Common.Web.UI.Controls.GlobalizedHyperLinkColumn.HeaderTextKey">
            <summary>
            Gets and sets the key to use to look up the globalized text for this control's header text.
            </summary>
        </member>
        <member name="P:Jenzabar.Common.Web.UI.Controls.GlobalizedHyperLinkColumn.FooterTextKey">
            <summary>
            Gets and sets the key to use to look up the globalized text for this control's footer text.
            </summary>
        </member>
        <member name="P:Jenzabar.Common.Web.UI.Controls.GlobalizedHyperLinkColumn.TextKey">
            <summary>
            Gets and sets the key to use to look up the globalized text for this control.
            </summary>
        </member>
        <member name="T:Jenzabar.Common.Web.UI.Controls.GlobalizedTemplateColumn">
            <summary>
            A column type for the System.Web.UI.WebControls.DataGrid and GroupedGrid controls that allows you to customize the layout of controls in the column. 
            This control also globalizes the header and footer text.
            </summary>
        </member>
        <member name="P:Jenzabar.Common.Web.UI.Controls.GlobalizedTemplateColumn.HeaderTextKey">
            <summary>
            Gets and sets the key to use to look up the globalized text for this control's header text.
            </summary>
        </member>
        <member name="P:Jenzabar.Common.Web.UI.Controls.GlobalizedTemplateColumn.FooterTextKey">
            <summary>
            Gets and sets the key to use to look up the globalized text for this control's footer text.
            </summary>
        </member>
        <member name="T:Jenzabar.Common.Web.UI.Controls.CheckBoxSelectionColumn">
            <summary>
            A column of checkboxes for the .NET DataGrid control. 
            Extends <see cref="T:Jenzabar.Common.Web.UI.Controls.CheckBoxColumn">CheckBoxColumn</see>. 
            </summary>
        </member>
        <member name="T:Jenzabar.Common.Web.UI.Controls.CheckBoxColumn">
            <summary>
            A System.Web.UI.WebControls.DataGridColumn that supports 
            checkboxes and databinding to a data source.
            </summary>
        </member>
        <member name="M:Jenzabar.Common.Web.UI.Controls.CheckBoxSelectionColumn.InitializeCell(System.Web.UI.WebControls.TableCell,System.Int32,System.Web.UI.WebControls.ListItemType)">
            <summary>
            Initializes the checkbox cell, stores the column index, adds a globalized label to the cell, 
            and configures the header checkbox to auto-postback to an event-handler to select or de-select all checkboxes in the column. 
            </summary>
            <param name="cell">A .NET TableCell control that represents a cell in the grid.</param>
            <param name="columnIndex">The integer index of the column.</param>
            <param name="itemType">A .NET ListItemType control that specifies the contents of the cell.</param>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Configuration.Transformer.XmlSerializerTransformer">
            <summary>
            <para>Represents a specific configuration data builder for building Xml serializable objects.</para>
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Configuration.Transformer.XmlSerializerTransformer.#ctor">
            <summary>
            <para>
            Intialize a new instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Configuration.Transformer.XmlSerializerTransformer"/> class. 
            </para>
            </summary>
            <seealso cref="T:Microsoft.Practices.EnterpriseLibrary.Configuration.XmlSerializerTransformerData"/>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Configuration.Transformer.XmlSerializerTransformer.Initialize(Microsoft.Practices.EnterpriseLibrary.Configuration.ConfigurationView)">
            <summary>
            <para>Initializes this provider to the correct state and context used by the factory creating it.</para>
            </summary>
            <param name="configurationView">
            <para>The cursor to use to get the data specific for the transformer.</para>
            </param>
            <exception cref="T:System.ArgumentException">
            <para><paramref name="configurationView"/> must be of type <see cref="T:Microsoft.Practices.EnterpriseLibrary.Configuration.RuntimeConfigurationView"/>.</para>
            </exception>
            <exception cref="T:System.ArgumentNullException">
            <para><paramref name="configurationView"/> is a <see langword="null"/> reference (Nothing in Visual Basic).</para>
            </exception>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Configuration.Transformer.XmlSerializerTransformer.GetTypes">
            <summary>
            <para>Gets the types to use when serializing and deserializing objects to Xml.</para>
            </summary>
            <returns><para>The types to use when serializing and deserializing objects to Xml.</para></returns>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Configuration.Transformer.XmlSerializerTransformer.Deserialize(System.Object)">
            <summary>
            <para>
            Deserializes the configuration data coming from storage.
            </para>
            </summary>
            <param name="section">
            <para>The data that came from storage.</para>
            </param>
            <returns>
            <para>An object that can be consumed by the calling assembly that wants configuration data.</para>
            </returns>		
            <exception cref="T:System.ArgumentNullException">
            <para><paramref name="section"/> can not be <see langword="null"/>.</para>
            </exception>
            <exception cref="T:System.Configuration.ConfigurationException">
            <para>The type could not be read from the serialized object.</para>
            <para>- or -</para>
            <para>The 'xmlSerializationSection' could not be read from the given Xml.</para>
            </exception>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Configuration.Transformer.XmlSerializerTransformer.Serialize(System.Object)">
            <summary>
            <para>
            Serializes the configuration data coming from the calling assembly and maps it into something that the storage provider can understand.
            </para>
            </summary>
            <param name="value">
            <para>The data to serialize.</para>
            </param>
            <returns>
            <para>The object that can be consumed by the storage provider.</para>
            </returns>
            <exception cref="T:System.Xml.XmlException">
            <para>There is a load or parse error in the XML. In this case, the document remains empty.</para>
            </exception>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Configuration.ConfigurationView">
            <summary>
            <para>Represents a view into configuration data.</para>
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Configuration.ConfigurationView.#ctor(Microsoft.Practices.EnterpriseLibrary.Configuration.ConfigurationContext)">
            <summary>
            <para>Initialize a new instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Configuration.ConfigurationView"/> with a <see cref="P:Microsoft.Practices.EnterpriseLibrary.Configuration.ConfigurationView.ConfigurationContext"/>.</para>
            </summary>
            <param name="context">
            <para>A <see cref="P:Microsoft.Practices.EnterpriseLibrary.Configuration.ConfigurationView.ConfigurationContext"/> object.</para>
            </param>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Configuration.ConfigurationView.ConfigurationContext">
            <summary>
            <para>Gets the <see cref="P:Microsoft.Practices.EnterpriseLibrary.Configuration.ConfigurationView.ConfigurationContext"/> for the current view.</para>
            </summary>
            <value>
            <para>The <see cref="P:Microsoft.Practices.EnterpriseLibrary.Configuration.ConfigurationView.ConfigurationContext"/> for the current view.</para>
            </value>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Configuration.Configuration.TransformerDataCollection">
            <summary>
            <para>Represents a collection of <see cref="T:Microsoft.Practices.EnterpriseLibrary.Configuration.TransformerData"/> objects in configuration.</para>
            </summary>       
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Configuration.ProviderDataCollection">
            <summary>
            <para>Represents a strongly-typed collection of <see cref="T:Microsoft.Practices.EnterpriseLibrary.Configuration.ProviderData"/> objects.</para>
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Configuration.ProviderDataCollection.#ctor">
            <summary>
            <para>Initializes a new instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Configuration.ProviderDataCollection"/> class.</para>
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Configuration.ProviderDataCollection.GetProvider(System.String)">
            <summary>
            <para>Gets or sets the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Configuration.ProviderData"/> associated with the specified <paramref name="name"/>.</para>
            </summary>
            <param name="name">
            <para>The name of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Configuration.ProviderData"/> to get or set.</para>
            </param>
            <returns>
            <para>The value associated with the specified <paramref name="name"/>. If the specified <paramref name="name"/> is not found, attempting to get it returns a <see langword="null"/> reference (Nothing in Visual Basic), and attempting to set it creates a new entry using the specified <paramref name="name"/>.</para>
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <para><paramref name="name"/> is a <see langword="null"/> reference (Nothing in Visual Basic).</para>
            </exception>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Configuration.ProviderDataCollection.GetProvider(System.Int32)">
            <summary>
            <para>Gets the value of the entry at the specified index of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Configuration.ProviderDataCollection"/> instance.</para>
            </summary>
            <param name="index">
            <para>The zero-based index of the value to get.</para>
            </param>
            <returns>
            <para>A <see cref="T:Microsoft.Practices.EnterpriseLibrary.Configuration.ProviderData"/> object that represents the value of the entry at the specified index.</para>
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <para><paramref name="index"/> is outside the valid range of indexes for the collection.</para>
            </exception>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Configuration.ProviderDataCollection.SetProvider(System.String,Microsoft.Practices.EnterpriseLibrary.Configuration.ProviderData)">
            <summary>
            <para>Sets the value of the first entry with the specified key in the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Configuration.ProviderDataCollection"/> instance, if found; otherwise, adds an entry with the specified key and value into the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.DataCollection"/> instance.</para>
            </summary>
            <param name="name">
            <para>The string key of the entry to set. The key can be a <see langword="null"/> reference (<see langword="Nothing"/> in Visual Basic)</para>.
            </param>
            <param name="data">
            <para>The <see cref="T:Microsoft.Practices.EnterpriseLibrary.Configuration.ProviderData"/> object that represents the new value of the entry to set. The value can be a <see langword="null"/> reference (<see langword="Nothing"/> in Visual Basic).</para>
            </param>
            <exception cref="T:System.InvalidOperationException">
            <para>The collection already contains an entry for <paramref name="name"/>.</para>
            </exception>
            <exception cref="T:System.NotSupportedException">
            <para>The collection is read-only.</para>
            </exception>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Configuration.ProviderDataCollection.SetProvider(System.Int32,Microsoft.Practices.EnterpriseLibrary.Configuration.ProviderData)">
            <summary>
            <para>Sets the value of the entry at the specified index of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Configuration.ProviderDataCollection"/> instance.</para>
            </summary>
            <param name="index">
            <para>The zero-based index of the entry to set.</para>
            </param>
            <param name="data">
            <para>The <see cref="T:Microsoft.Practices.EnterpriseLibrary.Configuration.ProviderData"/> object that represents the new value of the entry to set. The value can be a <see langword="null"/> reference (<see langword="Nothing"/> in Visual Basic).</para>
            </param>
            <exception cref="T:System.NotSupportedException">
            <para>The collection is read-only.</para>
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <para><paramref name="index"/> is outside the valid range of indexes for the collection.</para>
            </exception>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Configuration.ProviderDataCollection.AddProvider(Microsoft.Practices.EnterpriseLibrary.Configuration.ProviderData)">
            <summary>
            <para>Adds an <see cref="T:Microsoft.Practices.EnterpriseLibrary.Configuration.ProviderData"/> into the collection.</para>
            </summary>
            <param name="providerData">
            <para>The <see cref="T:Microsoft.Practices.EnterpriseLibrary.Configuration.ProviderData"/> to add. The value can not be a <see langword="null"/> reference (Nothing in Visual Basic).</para>
            </param>
            <remarks>
            <para>If a reference already exists in the collection by <seealso cref="P:Microsoft.Practices.EnterpriseLibrary.Configuration.ProviderData.Name"/>, it will be replaced with the new reference.</para>
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            <para><paramref name="providerData"/> is a <see langword="null"/> reference (Nothing in Visual Basic).</para>
            </exception>
            <exception cref="T:System.InvalidOperationException">
            <para><seealso cref="P:Microsoft.Practices.EnterpriseLibrary.Configuration.ProviderData.Name"/> is a <see langword="null"/> reference (Nothing in Visual Basic).</para>
            </exception>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Configuration.ProviderDataCollection.AddProvider(System.String,Microsoft.Practices.EnterpriseLibrary.Configuration.ProviderData)">
            <summary>
            <para>Adds an <see cref="T:Microsoft.Practices.EnterpriseLibrary.Configuration.ProviderData"/> into the collection.</para>
            </summary>
            <param name="name">
            <para>The name of the key for the <parmref name="providerData"/>. The value can not be a <see langword="null"/> reference (Nothing in Visual Basic).</para>
            </param>
            <param name="providerData">
            <para>The <see cref="T:Microsoft.Practices.EnterpriseLibrary.Configuration.ProviderData"/> to add. The value can not be a <see langword="null"/> reference (Nothing in Visual Basic).</para>
            </param>
            <remarks>
            <para>If a reference already exists in the collection by <seealso cref="P:Microsoft.Practices.EnterpriseLibrary.Configuration.ProviderData.Name"/>, it will be replaced with the new reference.</para>
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            <para><paramref name="name"/> is a <see langword="null"/> reference (Nothing in Visual Basic).</para>
            <para>- or -</para>
            <para><paramref name="providerData"/> is a <see langword="null"/> reference (Nothing in Visual Basic).</para>
            </exception>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Configuration.ProviderDataCollection.AddProviders(Microsoft.Practices.EnterpriseLibrary.Configuration.ProviderDataCollection)">
            <summary>
            Adds the items in the specified collection to the current collection.
            </summary>
            <param name="collection">A <see cref="T:Microsoft.Practices.EnterpriseLibrary.Configuration.ProviderDataCollection"/>.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Configuration.Configuration.TransformerDataCollection.#ctor">
            <summary>
            <para>Initialize a new instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Configuration.Configuration.TransformerDataCollection"/> class.</para>
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Configuration.Configuration.TransformerDataCollection.Add(Microsoft.Practices.EnterpriseLibrary.Configuration.TransformerData)">
            <summary>
            <para>Adds an <see cref="T:Microsoft.Practices.EnterpriseLibrary.Configuration.TransformerData"/> into the collection.</para>
            </summary>
            <param name="transformerData">
            <para>The <see cref="T:Microsoft.Practices.EnterpriseLibrary.Configuration.TransformerData"/> to add. The value can not be a <see langword="null"/> reference (Nothing in Visual Basic).</para>
            </param>
            <remarks>
            <para>If a reference already exists in the collection by <seealso cref="P:Microsoft.Practices.EnterpriseLibrary.Configuration.ProviderData.Name"/>, it will be replaced with the new reference.</para>
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            <para><paramref name="transformerData"/> is a <see langword="null"/> reference (Nothing in Visual Basic).</para>
            </exception>
            <exception cref="T:System.InvalidOperationException">
            <para><seealso cref="P:Microsoft.Practices.EnterpriseLibrary.Configuration.ProviderData.Name"/> is a <see langword="null"/> reference (Nothing in Visual Basic).</para>
            </exception>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Configuration.Configuration.TransformerDataCollection.CopyTo(Microsoft.Practices.EnterpriseLibrary.Configuration.TransformerData[],System.Int32)">
            <summary>
            <para>Copies the entire <see cref="T:Microsoft.Practices.EnterpriseLibrary.Configuration.Configuration.TransformerDataCollection"/> to a compatible one-dimensional <see cref="T:Microsoft.Practices.EnterpriseLibrary.Configuration.TransformerData"/> array, starting at the specified index of the target array.</para>
            </summary>
            <param name="array">
            <para>The one-dimensional <see cref="T:Microsoft.Practices.EnterpriseLibrary.Configuration.TransformerData"/> array that is the destination of the elements copied from <see cref="T:Microsoft.Practices.EnterpriseLibrary.Configuration.Configuration.TransformerDataCollection"/>. The <see cref="T:Microsoft.Practices.EnterpriseLibrary.Configuration.TransformerData"/> array must have zero-based indexing.</para>
            </param>
            <param name="index">
            <para>The zero-based index in array at which copying begins.</para>
            </param>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Configuration.Configuration.TransformerDataCollection.Item(System.Int32)">
            <summary>
            <para>Gets or sets the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Configuration.TransformerData"/> at the specified <paramref name="index"/>.</para>
            </summary>
            <param name="index">
            <para>The index of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Configuration.TransformerData"/> to get or set.</para>
            </param>
            <value>
            <para>The value associated with the specified <paramref name="index"/>. If the specified <paramref name="index"/> is not found, attempting to get it returns a <see langword="null"/> reference (Nothing in Visual Basic), and attempting to set it creates a new entry using the specified <paramref name="index"/>.</para>
            </value>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Configuration.Configuration.TransformerDataCollection.Item(System.String)">
            <summary>
            <para>Gets or sets the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Configuration.TransformerData"/> associated with the specified <paramref name="name"/>.</para>
            </summary>
            <param name="name">
            <para>The name of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Configuration.TransformerData"/> to get or set.</para>
            </param>
            <value>
            <para>The value associated with the specified <paramref name="name"/>. If the specified <paramref name="name"/> is not found, attempting to get it returns a <see langword="null"/> reference (Nothing in Visual Basic), and attempting to set it creates a new entry using the specified <paramref name="name"/>.</para>
            </value>
            <exception cref="T:System.ArgumentNullException">
            <para><paramref name="name"/> is a <see langword="null"/> reference (Nothing in Visual Basic).</para>
            </exception>
        </member>
        <member name="T:Jenzabar.Common.Web.UI.Controls.SidewaysTable">
            <summary>
            A System.Web.UI.Control that renders headers in the first column 
            and controls in subsequent columns of an HTML table with class="sidewaysTable". 
            (In a normal table, headers are always in the first row.)
            This control displays with a medium grey background for the headers
            and alternating light grey and white for the data.
            </summary>
        </member>
        <member name="T:Jenzabar.Common.Web.UI.Controls.SidewaysTableRow">
            <summary>
            A row in the sideways table. 
            </summary>
        </member>
        <member name="M:Jenzabar.Common.Web.UI.Controls.SidewaysTableRow.HasLabelableControl">
            <summary>
            Whether one of the child controls for this control can support a label passing focus to the control.
            </summary>
            <returns>True if the control can have a client-side label; false, otherwise.</returns>
        </member>
        <member name="M:Jenzabar.Common.Web.UI.Controls.SidewaysTableRow.GetLabelableControl">
            <summary>
            Looks through all of the child controls of this control for controls 
            that can have a label associated with them that will pass focus through to the control.
            Examples of labelable controls are System.Web.Ui.WebControls.DropDownList, ListBox, TextBox, 
            and System.Web.UI.HtmlControls.HtmlInputFile, HtmlInputText, HtmlSelect, and HtmlTextArea.
            </summary>
            <returns>A System.Web.UI.Control that supports labeling or null, if none are found.</returns>
        </member>
        <member name="T:Jenzabar.Common.Web.UI.Controls.SidewaysTableRowCollection">
            <summary>
            A collection of the rows in a sideways table 
            that can be individually accessed by index.
            </summary>
        </member>
        <member name="M:Jenzabar.Common.Web.UI.Controls.SidewaysTableRowCollection.Add(Jenzabar.Common.Web.UI.Controls.SidewaysTableRow)">
            <summary>
            Adds a row.
            </summary>
            <param name="row">A SidewaysTableRow</param>
            <returns>An integer corresponding to the index of the last row added.</returns>
        </member>
        <member name="M:Jenzabar.Common.Web.UI.Controls.SidewaysTableRowCollection.AddAt(System.Int32,Jenzabar.Common.Web.UI.Controls.SidewaysTableRow)">
            <summary>
            Adds a row at the given position in the collection.
            </summary>
            <param name="index">An integer representing the location at which to add the row.</param>
            <param name="row">A SidewaysTableRow to add.</param>
        </member>
        <member name="M:Jenzabar.Common.Web.UI.Controls.SidewaysTableRowCollection.AddRange(Jenzabar.Common.Web.UI.Controls.SidewaysTableRow[])">
            <summary>
            Adds a collection of rows.
            </summary>
            <param name="rows">An array of SidewaysTableRows to add.</param>
        </member>
        <member name="M:Jenzabar.Common.Web.UI.Controls.SidewaysTableRowCollection.Remove(Jenzabar.Common.Web.UI.Controls.SidewaysTableRow)">
            <summary>
            Removes a row.
            </summary>
            <param name="row">A SidewaysTableRow to remove.</param>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Configuration.Configuration.StorageProviderDataCollection">
            <summary>
            <para>Represents a collection of <see cref="T:Microsoft.Practices.EnterpriseLibrary.Configuration.StorageProviderData"/> objects in configuration.</para>
            </summary>       
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Configuration.Configuration.StorageProviderDataCollection.#ctor">
            <summary>
            <para>Initialize a new instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Configuration.Configuration.StorageProviderDataCollection"/> class.</para>
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Configuration.Configuration.StorageProviderDataCollection.Add(Microsoft.Practices.EnterpriseLibrary.Configuration.StorageProviderData)">
            <summary>
            <para>Adds an <see cref="T:Microsoft.Practices.EnterpriseLibrary.Configuration.StorageProviderData"/> into the collection.</para>
            </summary>
            <param name="storageProviderData">
            <para>The <see cref="T:Microsoft.Practices.EnterpriseLibrary.Configuration.StorageProviderData"/> to add. The value can not be a <see langword="null"/> reference (Nothing in Visual Basic).</para>
            </param>
            <remarks>
            <para>If a reference already exists in the collection by <seealso cref="P:Microsoft.Practices.EnterpriseLibrary.Configuration.ProviderData.Name"/>, it will be replaced with the new reference.</para>
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            <para><paramref name="storageProviderData"/> is a <see langword="null"/> reference (Nothing in Visual Basic).</para>
            </exception>
            <exception cref="T:System.InvalidOperationException">
            <para><seealso cref="P:Microsoft.Practices.EnterpriseLibrary.Configuration.ProviderData.Name"/> is a <see langword="null"/> reference (Nothing in Visual Basic).</para>
            </exception>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Configuration.Configuration.StorageProviderDataCollection.CopyTo(Microsoft.Practices.EnterpriseLibrary.Configuration.StorageProviderData[],System.Int32)">
            <summary>
            <para>Copies the entire <see cref="T:Microsoft.Practices.EnterpriseLibrary.Configuration.Configuration.StorageProviderDataCollection"/> to a compatible one-dimensional <see cref="T:Microsoft.Practices.EnterpriseLibrary.Configuration.StorageProviderData"/> array, starting at the specified index of the target array.</para>
            </summary>
            <param name="array">
            <para>The one-dimensional <see cref="T:Microsoft.Practices.EnterpriseLibrary.Configuration.StorageProviderData"/> array that is the destination of the elements copied from <see cref="T:Microsoft.Practices.EnterpriseLibrary.Configuration.Configuration.StorageProviderDataCollection"/>. The <see cref="T:Microsoft.Practices.EnterpriseLibrary.Configuration.StorageProviderData"/> array must have zero-based indexing.</para>
            </param>
            <param name="index">
            <para>The zero-based index in array at which copying begins.</para>
            </param>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Configuration.Configuration.StorageProviderDataCollection.Item(System.Int32)">
            <summary>
            <para>Gets or sets the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Configuration.StorageProviderData"/> at the specified <paramref name="index"/>.</para>
            </summary>
            <param name="index">
            <para>The index of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Configuration.StorageProviderData"/> to get or set.</para>
            </param>
            <value>
            <para>The value associated with the specified <paramref name="index"/>. If the specified <paramref name="index"/> is not found, attempting to get it returns a <see langword="null"/> reference (Nothing in Visual Basic), and attempting to set it creates a new entry using the specified <paramref name="index"/>.</para>
            </value>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Configuration.Configuration.StorageProviderDataCollection.Item(System.String)">
            <summary>
            <para>Gets or sets the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Configuration.StorageProviderData"/> associated with the specified <paramref name="name"/>.</para>
            </summary>
            <param name="name">
            <para>The name of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Configuration.StorageProviderData"/> to get or set.</para>
            </param>
            <value>
            <para>The value associated with the specified <paramref name="name"/>. If the specified <paramref name="name"/> is not found, attempting to get it returns a <see langword="null"/> reference (Nothing in Visual Basic), and attempting to set it creates a new entry using the specified <paramref name="name"/>.</para>
            </value>
            <exception cref="T:System.ArgumentNullException">
            <para><paramref name="name"/> is a <see langword="null"/> reference (Nothing in Visual Basic).</para>
            </exception>
        </member>
        <member name="T:Jenzabar.Common.Web.UI.Controls.RequiredSelectedValidator">
            <summary>
            Makes the associated selection control (checkbox or radiobutton) a required field 
            and validates the selection.  
            </summary>
            <remarks>This control extends .NET's System.Web.UI.WebControls.RequiredFieldValidator.</remarks>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Configuration.ConfigurationSectionDataCollection">
            <summary>
            <para>Represents a collection of <see cref="T:Microsoft.Practices.EnterpriseLibrary.Configuration.ConfigurationSectionData"/> objectss for the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Configuration.ConfigurationSettings"/> in configuration.</para>
            </summary>       
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Configuration.ConfigurationSectionDataCollection.Add(Microsoft.Practices.EnterpriseLibrary.Configuration.ConfigurationSectionData)">
            <summary>
            <para>Adds an <see cref="T:Microsoft.Practices.EnterpriseLibrary.Configuration.ConfigurationSectionData"/> into the collection.</para>
            </summary>
            <param name="configurationSection">
            <para>The <see cref="T:Microsoft.Practices.EnterpriseLibrary.Configuration.ConfigurationSectionData"/> to add. The value can not be a <see langword="null"/> reference (Nothing in Visual Basic).</para>
            </param>
            <remarks>
            <para>If a reference already exists in the collection by <seealso cref="P:Microsoft.Practices.EnterpriseLibrary.Configuration.ConfigurationSectionData.Name"/>, it will be replaced with the new reference.</para>
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            <para><paramref name="configurationSection"/> is a <see langword="null"/> reference (Nothing in Visual Basic).</para>
            </exception>
            <exception cref="T:System.InvalidOperationException">
            <para><seealso cref="P:Microsoft.Practices.EnterpriseLibrary.Configuration.ConfigurationSectionData.Name"/> is a <see langword="null"/> reference (Nothing in Visual Basic).</para>
            </exception>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Configuration.ConfigurationSectionDataCollection.CopyTo(Microsoft.Practices.EnterpriseLibrary.Configuration.ConfigurationSectionData[],System.Int32)">
            <summary>
            <para>Copies the entire <see cref="T:Microsoft.Practices.EnterpriseLibrary.Configuration.ConfigurationSectionDataCollection"/> to a compatible one-dimensional <see cref="T:Microsoft.Practices.EnterpriseLibrary.Configuration.ConfigurationSectionData"/> array, starting at the specified index of the target array.</para>
            </summary>
            <param name="array">
            <para>The one-dimensional <see cref="T:Microsoft.Practices.EnterpriseLibrary.Configuration.ConfigurationSectionData"/> array that is the destination of the elements copied from <see cref="T:Microsoft.Practices.EnterpriseLibrary.Configuration.ConfigurationSectionDataCollection"/>. The <see cref="T:Microsoft.Practices.EnterpriseLibrary.Configuration.ConfigurationSectionData"/> array must have zero-based indexing.</para>
            </param>
            <param name="index">
            <para>The zero-based index in array at which copying begins.</para>
            </param>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Configuration.ConfigurationSectionDataCollection.Item(System.Int32)">
            <summary>
            <para>Gets or sets the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Configuration.ConfigurationSectionData"/> at the specified <paramref name="index"/>.</para>
            </summary>
            <param name="index">
            <para>The index of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Configuration.ConfigurationSectionData"/> to get or set.</para>
            </param>
            <value>
            <para>The value associated with the specified <paramref name="index"/>. If the specified <paramref name="index"/> is not found, attempting to get it returns a <see langword="null"/> reference (Nothing in Visual Basic), and attempting to set it creates a new entry using the specified <paramref name="index"/>.</para>
            </value>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Configuration.ConfigurationSectionDataCollection.Item(System.String)">
            <summary>
            <para>Gets or sets the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Configuration.ConfigurationSectionData"/> associated with the specified <paramref name="name"/>.</para>
            </summary>
            <param name="name">
            <para>The name of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Configuration.ConfigurationSectionData"/> to get or set.</para>
            </param>
            <value>
            <para>The value associated with the specified <paramref name="name"/>. If the specified <paramref name="name"/> is not found, attempting to get it returns a <see langword="null"/> reference (Nothing in Visual Basic), and attempting to set it creates a new entry using the specified <paramref name="name"/>.</para>
            </value>
            <exception cref="T:System.ArgumentNullException">
            <para><paramref name="name"/> is a <see langword="null"/> reference (Nothing in Visual Basic).</para>
            </exception>
        </member>
        <member name="T:Jenzabar.Common.Web.UI.Controls.SuperBreadcrumbClickEventArgs">
            <summary>
            Event arguments for when a user clicks on a breadcrumb.
            </summary>
        </member>
        <member name="M:Jenzabar.Common.Web.UI.Controls.SuperBreadcrumbClickEventArgs.#ctor(Jenzabar.Common.Web.UI.Controls.SuperBreadcrumb,System.Web.UI.WebControls.CommandEventArgs)">
            <summary>
            Creates a new instance of the 
            </summary>
            <param name="sourceBreadcrumb"></param>
            <param name="innerArgs"></param>
        </member>
        <member name="P:Jenzabar.Common.Web.UI.Controls.SuperBreadcrumbClickEventArgs.ClickedBreadcrumb">
            <summary>
            Gets the breadcrumb the user clicked on.
            </summary>
        </member>
        <member name="T:Jenzabar.Common.Web.UI.Controls.SuperBreadcrumbClickEventHandler">
            <summary>
            Event handler deffinition for when a user clicks on a breadcrumb.
            </summary>
        </member>
        <member name="T:Jenzabar.Common.Web.UI.Controls.SuperBreadcrumbs">
            <summary>
            Provides built-in breadcrumbs for the portlets.
            </summary>
        </member>
        <member name="M:Jenzabar.Common.Web.UI.Controls.SuperBreadcrumbs.#ctor">
            <summary>
            Creates a new instance of the <see cref="T:Jenzabar.Common.Web.UI.Controls.SuperBreadcrumbCollection">SuperBreadcrumbCollection</see>.
            </summary>
        </member>
        <member name="M:Jenzabar.Common.Web.UI.Controls.SuperBreadcrumbs.CreateControlCollection">
            <summary>
            Creates a <see cref="T:Jenzabar.Common.Web.UI.Controls.SuperBreadcrumbs.SuperBreadcrumbControlCollection">SuperBreadcrumbControlCollection</see> that only allows <see cref="T:Jenzabar.Common.Web.UI.Controls.SuperBreadcrumbs">SuperBreadcrumbs</see> to be placed in the breadcrumb collection.
            </summary>
            <returns>A System.Web.UI.ControlCollection.</returns>
        </member>
        <member name="M:Jenzabar.Common.Web.UI.Controls.SuperBreadcrumbs.Render(System.Web.UI.HtmlTextWriter)">
            <summary>
            Renders the div section for the breadcrumb control.
            </summary>
            <param name="writer">The HtmlTextWriter that renders the control.</param>
        </member>
        <member name="P:Jenzabar.Common.Web.UI.Controls.SuperBreadcrumbs.Breadcrumbs">
            <summary>
            Gets the <see cref="T:Jenzabar.Common.Web.UI.Controls.SuperBreadcrumbCollection">SuperBreadcrumbCollection</see> of <see cref="T:Jenzabar.Common.Web.UI.Controls.SuperBreadcrumbs">SuperBreadcrumbs</see>.
            </summary>
        </member>
        <member name="E:Jenzabar.Common.Web.UI.Controls.SuperBreadcrumbs.SuperBreadcrumbClick">
            <summary>
            Raised when the user clicks on a breadcrumb.
            </summary>
        </member>
        <member name="T:Jenzabar.Common.Web.UI.Controls.SuperBreadcrumbs.SuperBreadcrumbControlCollection">
            <summary>
            Ensures that only controls of type <see cref="T:Jenzabar.Common.Web.UI.Controls.SuperBreadcrumbs">SuperBreadcrumbs</see> are added to the breadcrumb collection.
            </summary>
        </member>
        <member name="M:Jenzabar.Common.Web.UI.Controls.SuperBreadcrumbs.SuperBreadcrumbControlCollection.Add(System.Web.UI.Control)">
            <summary>
            Checks to see if the control being added is a <see cref="T:Jenzabar.Common.Web.UI.Controls.SuperBreadcrumb">SuperBreadcrumb</see>; if not, throws an ArgumentException.
            </summary>
            <param name="child">A System.Web.UI.Control breadcrumb.</param>
        </member>
        <member name="M:Jenzabar.Common.Web.UI.Controls.SuperBreadcrumbs.SuperBreadcrumbControlCollection.AddAt(System.Int32,System.Web.UI.Control)">
            <summary>
            Checks to see if the control being added is a <see cref="T:Jenzabar.Common.Web.UI.Controls.SuperBreadcrumb">SuperBreadcrumb</see>; if not, throws an ArgumentException.
            </summary>
            <param name="index">The integer location at which to add the breadcrumb.</param>
            <param name="child">A System.Web.UI.Control breadcrumb.</param>
        </member>
        <member name="T:Jenzabar.Common.Web.UI.Controls.SuperBreadcrumb">
            <summary>
            A single hyperlink-style button control for each breadcrumb in the <see cref="T:Jenzabar.Common.Web.UI.Controls.SuperBreadcrumbCollection">SuperBreadcrumbCollection</see>.
            </summary>
        </member>
        <member name="M:Jenzabar.Common.Web.UI.Controls.SuperBreadcrumb.Render(System.Web.UI.HtmlTextWriter)">
            <summary>
            Renders the anchor tag for the breadcrumb.
            </summary>
            <param name="writer">The HtmlTextWriter that renders the control.</param>
        </member>
        <member name="T:Jenzabar.Common.Web.UI.Controls.SuperBreadcrumbCollection">
            <summary>
            A collection of <see cref="T:Jenzabar.Common.Web.UI.Controls.SuperBreadcrumbs">SuperBreadcrumbs</see>.
            </summary>
        </member>
        <member name="M:Jenzabar.Common.Web.UI.Controls.SuperBreadcrumbCollection.Add(System.String,System.String,System.String)">
            <summary>
            Creates a new <see cref="T:Jenzabar.Common.Web.UI.Controls.SuperBreadcrumb">SuperBreadcrumb</see>, and adds it to the <see cref="T:Jenzabar.Common.Web.UI.Controls.SuperBreadcrumbCollection">SuperBreadcrumbCollection</see>.
            </summary>
            <param name="commandName">The name of the command associated with the new breadcrumb</param>
            <param name="text">The text to be displayed to the user for the new breadcrumb.</param>
            <param name="toolTip">The text to use for the tool tip on the new breadcrumb.</param>
        </member>
        <member name="M:Jenzabar.Common.Web.UI.Controls.SuperBreadcrumbCollection.AddGlobalized(System.String,System.String,System.String)">
            <summary>
            Adds a new breadcrumb, and looks up the textKey and toolTipKey for the breadcrumb in the Globalizer.
            </summary>
            <param name="commandName">The name of the command associated with the new breadcrumb</param>
            <param name="textKey">The key to use to globalize the text for the breadcrumb.</param>
            <param name="toolTipKey">The key to use to globalize the tooltip for the breadcrumb.</param>
        </member>
        <member name="P:Jenzabar.Common.Web.UI.Controls.SuperBreadcrumbCollection.Item(System.Int32)">
            <summary>
            Gets the SuperBreadCrumb at the given index.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Common.ArgumentValidation">
            <summary>
            <para>Common validation routines for argument validation.</para>
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.ArgumentValidation.CheckForEmptyString(System.String,System.String)">
            <summary>
            <para>Check if the <paramref name="variable"/> is an embpty string.</para>
            </summary>
            <param name="variable">
            <para>The value to check.</para>
            </param>
            <param name="variableName">
            <para>The name of the variable being checked.</para>
            </param>
            <remarks>
            <para>Before checking the <paramref name="variable"/>, a call is made to <see cref="M:Microsoft.Practices.EnterpriseLibrary.Common.ArgumentValidation.CheckForNullReference(System.Object,System.String)"/>.</para>
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            <pararef name="variable"/> can not be <see langword="null"/> (Nothing in Visual Basic).
            <para>- or -</para>
            <pararef name="variableName"/> can not be <see langword="null"/> (Nothing in Visual Basic).
            </exception>
            <exception cref="T:System.ArgumentException">
            <pararef name="variable"/> can not be a zero length <see cref="T:System.String"/>.
            </exception>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.ArgumentValidation.CheckForNullReference(System.Object,System.String)">
            <summary>
            <para>Check if the <paramref name="variable"/> is <see langword="null"/> (Nothing in Visual Basic).</para>
            </summary>
            <param name="variable">
            <para>The value to check.</para>
            </param>
            <param name="variableName">
            <para>The name of the variable being checked.</para>
            </param>
            <exception cref="T:System.ArgumentNullException">
            <pararef name="variable"/> can not <see langword="null"/> (Nothing in Visual Basic).
            <para>- or -</para>
            <pararef name="variableName"/> can not <see langword="null"/> (Nothing in Visual Basic).
            </exception>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.ArgumentValidation.CheckForInvalidNullNameReference(System.String,System.String)">
            <summary>
            Validates that the input messageName is neither null nor empty
            </summary>
            <param name="name">Parameter name</param>
            <param name="messageName">Parameter value</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.ArgumentValidation.CheckForZeroBytes(System.Byte[],System.String)">
            <summary>
            <para>Checks <paramref name="bytes"/> for zero length and throw an <see cref="T:System.ArgumentException"/> if the length equals zero.</para>
            </summary>
            <param name="bytes">
            The <see cref="T:System.Byte"/> array to check.
            </param>
            <param name="variableName">
            <para>The name of the variable being checked.</para>
            </param>
            <exception cref="T:System.ArgumentNullException">
            <pararef name="variable"/> can not <see langword="null"/> (Nothing in Visual Basic).
            <para>- or -</para>
            <pararef name="variableName"/> can not <see langword="null"/> (Nothing in Visual Basic).
            </exception>
            <exception cref="T:System.ArgumentException">
            <para><paramref name="bytes"/> can not be zero length.</para>
            </exception>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.ArgumentValidation.CheckExpectedType(System.Object,System.Type)">
            <summary>
            <para>Check <paramref name="variable"/> to determine if it matches the <see cref="T:System.Type"/> of <paramref name="type"/>.</para>
            </summary>
            <param name="variable">
            <para>The value to check.</para>
            </param>
            <param name="type">
            <para>The <see cref="T:System.Type"/> expected type of <paramref name="variable"/>.</para>
            </param>
            <exception cref="T:System.ArgumentNullException">
            <pararef name="variable"/> can not <see langword="null"/> (Nothing in Visual Basic).
            <para>- or -</para>
            <pararef name="typeName"/> can not <see langword="null"/> (Nothing in Visual Basic).
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="variable"/> is not the expected <see cref="T:System.Type"/>.
            </exception>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.ArgumentValidation.CheckEnumeration(System.Type,System.Object,System.String)">
            <summary>
            <para>Check <paramref name="variable"/> to determine if it is a valid defined enumeration for <paramref name="enumType"/>.</para>
            </summary>
            <param name="variable">
            <para>The value to check.</para>
            </param>
            <param name="enumType">
            <para>The <see cref="T:System.Type"/> expected type of <paramref name="variable"/>.</para>
            </param>
            <param name="variableName">
            <para>The name of the variable being checked.</para>
            </param>
            <exception cref="T:System.ArgumentNullException">
            <pararef name="variable"/> can not <see langword="null"/> (Nothing in Visual Basic).
            <para>- or -</para>
            <pararef name="enumType"/> can not <see langword="null"/> (Nothing in Visual Basic).
            <para>- or -</para>
            <pararef name="variableName"/> can not <see langword="null"/> (Nothing in Visual Basic).
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="variable"/> is not the expected <see cref="T:System.Type"/>.
            <para>- or -</para>
            <par><paramref name="enumType"/> is not an <see cref="T:System.Enum"/>. </par>
            </exception>
        </member>
        <member name="T:Jenzabar.Common.Web.UI.Design.GroupedDataGridDesigner">
            <summary>
            Used to provide design time support for the GroupedDataGrid control
            </summary>
            <remarks>Renders HTML to the VisualStudion html designer to display a mock up of what the GroupedGrid will look like at runtime.</remarks>
        </member>
        <member name="M:Jenzabar.Common.Web.UI.Design.GroupedDataGridDesigner.GetDesignTimeHtml">
            <summary>
            Gets html used to render this control in the visual studio html designer.
            </summary>
            <returns>Html represneting this control</returns>
            <remarks>This method is used to generate mockup html that will be rendered by the VisualStudio HTML designer to display a GroupedGrid control to the developer editing a page containing a GroupedGrid.</remarks>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Configuration.ConfigurationFile">
            <devdoc>
            Represents a configuration file according to the schema for Fx 1.1
            </devdoc>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Configuration.ConfigurationFile.AppendSection(System.String,System.String,System.Xml.XmlNode)">
            <devdoc>
            Append a new section to the configSections of the configuration file given the 
            sectionName and typeName.  The objectData is
            </devdoc>        
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Configuration.ConfigurationFile.SectionExists(System.Xml.XmlNode,System.String)">
            <devdoc>
            Determines if a section exist in the config sections given the configSections node and the name of the section.
            </devdoc>        
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Configuration.ConfigurationFile.UnevaluatedSections">
            <devdoc>
            The sections in the config file that has been unevaluated.
            </devdoc>
        </member>
        <member name="T:Jenzabar.Common.JCConstants">
            <summary>
            Jenzabar Common Constants.
            </summary>
        </member>
        <member name="T:Jenzabar.Common.Installer.JenzaExceptionManagerInstaller">
            <summary>
            installer for Jenzabar Exception Management.
            </summary>
        </member>
        <member name="M:Jenzabar.Common.Installer.JenzaExceptionManagerInstaller.#ctor">
            <summary>
            Constructor with no params.
            </summary>
        </member>
        <member name="M:Jenzabar.Common.Installer.JenzaExceptionManagerInstaller.InitializeComponent">
            <summary>
            Initialization function to set internal variables.
            </summary>
        </member>
        <member name="M:Jenzabar.Common.Installer.JenzaExceptionManagerInstaller.JenzaExceptionManagerInstaller_AfterInstall(System.Object,System.Configuration.Install.InstallEventArgs)">
            <summary>
            set up auto clear and size of log
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Common.Instrumentation.InstrumentedEvent">
            <summary>
            <para>
            This type supports the Instrumentation infrastructure and is not intended to be used directly from your code.
            </para>
            </summary>
            <devdoc>
            The is the base class for all the events instrumented by Enterprise Library.
            Types of instrumentation includes: WMI, EventLog, and Performance Counters.
            </devdoc>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Instrumentation.InstrumentedEvent.#ctor(System.String,System.String[],System.Boolean,System.String,Microsoft.Practices.EnterpriseLibrary.Common.Instrumentation.EventLogIdentifier[])">
            <summary/>
            <param name="counterCategory"/>
            <param name="counterNames"/>
            <param name="createNewInstance"/>
            <param name="eventLogSource"/>
            <param name="eventIds"/>
            <exclude/>
            <devdoc>
            This constructor create a object that represents an instrumented event.
            When this event is fired, it increments all its performance counter instances
            and write to event log for all its event id.
            </devdoc>        
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Instrumentation.InstrumentedEvent.#ctor(System.String,System.String[],System.Boolean)">
            <summary/>
            <param name="counterCategory"/>
            <param name="counterNames"/>
            <param name="createNewInstance"/>
            <exclude/>
            <devdoc>
            This constructor create an object that only uses the performance counters.
            </devdoc>                        
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Instrumentation.InstrumentedEvent.FireWmiEvent(System.Management.Instrumentation.BaseEvent)">
            <summary/>
            <param name="baseEvent"/>
            <exclude/>
            <devdoc>
            The reason it wraps the BaseEvent.Fire method is to allow Wmi
            events to be turned on and off in the Instrumentation assembly.
            Otherwise, for all the frameworks, the compiler switch needs to
            be turned on/off for all the Instrumentation.xxx projects.
            </devdoc>        
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Instrumentation.InstrumentedEvent.GetErrorMessage(System.Exception)">
            <summary/>
            <param name="exception"/>
            <returns/>
            <exclude/>
            <devdoc>
            This method builds the error message from an exception object.
            </devdoc> 
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Instrumentation.InstrumentedEvent.FireEvent(System.String)">
            <summary/>
            <param name="message"/>
            <exclude/>
            <devdoc>
            This method increments the performance counters and write to event log.
            </devdoc>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Instrumentation.InstrumentedEvent.FireEvent(System.String,System.Diagnostics.EventLogEntryType)">
            <summary/>
            <param name="message"/>
            <param name="eventLogType"/>
            <exclude/>
            <devdoc>
            This method increments the performance counters and write to event log with the event log type passed in.
            </devdoc>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Instrumentation.InstrumentedEvent.FireEvent(System.String,Microsoft.Practices.EnterpriseLibrary.Common.Instrumentation.PerformanceCounterInstances[],System.Int64[])">
            <summary/>
            <param name="message"/>
            <param name="counterInstancesArray"/>
            <param name="counterValues"/>
            <exclude/>
            <devdoc>
            This method Increment the performance counters, update the timer counter, and write to event logs.
            </devdoc>        
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Instrumentation.InstrumentedEvent.FireEvent(System.String,System.Int64)">
            <summary/>
            <param name="message"/>
            <param name="increment"/>
            <exclude/>
            <devdoc>
            This method Increment the performance counters, update the timer counter, and write to event logs.
            </devdoc>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Instrumentation.InstrumentedEvent.GetPerformanceCounterInstances(System.String)">
            <summary/>
            <param name="counterName"/>
            <returns/>
            <exclude/>
            <devdoc>
            Searches the internal performance counter instances by the counter name.
            </devdoc>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Instrumentation.InstrumentedEvent.FireWmiEventCore(System.Management.Instrumentation.BaseEvent)">
            <devdoc>
            Double wrap it here so that the switch is totally contained in
            this assembly.  The conditional attribute on FireWmiEvent will
            still need the compiler switch on all the individual Instrumentation.xxx 
            projects.
            </devdoc>        
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Instrumentation.InstrumentedEvent.Initialize(System.String,System.String[],System.Boolean,System.String,Microsoft.Practices.EnterpriseLibrary.Common.Instrumentation.EventLogIdentifier[])">
            <devdoc>
            This method initializes the internal performance counters and event loggers.
            </devdoc>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Instrumentation.InstrumentedEvent.AddEventLogger(System.String,Microsoft.Practices.EnterpriseLibrary.Common.Instrumentation.EventLogIdentifier[])">
            <devdoc>
            Add the event loggers to the internal array of event loggers.
            </devdoc>        
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Instrumentation.InstrumentedEvent.AddPerformanceCounter(System.String,System.String[],System.Boolean)">
            <devdoc>
            This method adds the performance counter instances to the internal array.
            </devdoc>        
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Configuration.XmlFileStorageProviderData">
            <summary>
            <para>Represents a storage provider to read and write data in configuration from an Xml file.</para>
            </summary>    	
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Configuration.XmlFileStorageProviderData.#ctor">
            <summary>
            <para>Initialize a new instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Configuration.XmlFileStorageProviderData"/> class.</para>
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Configuration.XmlFileStorageProviderData.#ctor(System.String)">
            <summary>
            <para>Initialize a new instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Configuration.XmlFileStorageProviderData"/> class with a name.</para>
            </summary>
            <param name="name">
            <para>The name of the provider.</para>
            </param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Configuration.XmlFileStorageProviderData.#ctor(System.String,System.String)">
            <summary>
            <para>Initialize a new instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Configuration.XmlFileStorageProviderData"/> class with a name and path to the file.</para>
            </summary>
            <param name="name">
            <para>The name of the provider.</para>
            </param>
            <param name="path">
            <para>The path to the file with the data.</para>
            </param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Configuration.XmlFileStorageProviderData.Clone">
            <summary>
            <para>Creates a new object that is a copy of the current instance.</para>
            </summary>
            <returns>
            <para>A new object that is a copy of this instance.</para>
            </returns>
            <remarks>
            <para>This clone does a deep copy.</para>
            </remarks>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Configuration.XmlFileStorageProviderData.Path">
            <summary>
            <para>Gets or sets the path of the Xml file to store configuration.</para>
            </summary>
            <value>
            <para>The path of the Xml file to store configuration. The default is an empty string.</para>
            </value>
            <remarks>
            <para>This property maps to the <c>path</c> attribute in configuration for the provider.</para>
            </remarks>        
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Configuration.XmlFileStorageProviderData.TypeName">
            <summary>
            <para>Gets the fully qualified assembly name for a <see cref="T:Microsoft.Practices.EnterpriseLibrary.Configuration.Storage.XmlFileStorageProvider"/>.</para>
            </summary>
            <value>
            <para>The fully qualified assembly name for a <see cref="T:Microsoft.Practices.EnterpriseLibrary.Configuration.Storage.XmlFileStorageProvider"/>.</para>
            </value>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Configuration.CustomProviderDataCollection">
            <devdoc>
            Represents a collection of provider objects in configuration. This is used internally when some one only has one provider.
            </devdoc>       
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Configuration.CustomProviderDataCollection.Add(Microsoft.Practices.EnterpriseLibrary.Configuration.ProviderData)">
            <devdoc>
            Adds an ProviderData into the collection.
            </devdoc>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Configuration.CustomProviderDataCollection.Add(System.String,Microsoft.Practices.EnterpriseLibrary.Configuration.ProviderData)">
            <devdoc>
            Adds an ProviderData into the collection with a specific name.
            </devdoc>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Configuration.CustomProviderDataCollection.CopyTo(Microsoft.Practices.EnterpriseLibrary.Configuration.ProviderData[],System.Int32)">
            <summary>
            Copies the entire CustomProviderDataCollection to a compatible one-dimensional ProviderData array, starting at the specified index of the target array.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Configuration.CustomProviderDataCollection.Item(System.Int32)">
            <summary>
            <para>Gets or sets the ProviderData at the specified index.</para>
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Configuration.CustomProviderDataCollection.Item(System.String)">
            <devdoc>
            Gets or sets the ProviderData associated with the specified name
            </devdoc>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Configuration.CustomTransformerData">
            <summary>
            <para>Represents a custom data transformer for configuration data in configuration.</para>
            </summary>
            <remarks>
            <para>The class maps to the <c>dataTransformer</c> element in configuration.</para>
            </remarks>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Configuration.TransformerData">
            <summary>
            <para>Represents a data transformer for configuration data in configuration.</para>
            </summary>
            <remarks>
            <para>The class maps to the <c>dataTransformer</c> element in configuration.</para>
            </remarks>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Configuration.TransformerData.#ctor">
            <summary>
            <para>Initialize a new instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Configuration.TransformerData"/> class..</para>
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Configuration.TransformerData.#ctor(System.String)">
            <summary>
            <para>Initialize a new instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Configuration.TransformerData"/> class with a name and fully qualified type name.</para>
            </summary>
            <param name="name">
            <para>The name of the transformer.</para>
            </param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Configuration.TransformerData.Clone">
            <summary>
            <para>Creates a new object that is a copy of the current instance.</para>
            </summary>
            <returns>
            <para>A new object that is a copy of this instance.</para>
            </returns>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Configuration.CustomTransformerData.#ctor">
            <summary>
            <para>Initialize a new instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Configuration.CustomTransformerData"/> class..</para>
            </summary>  
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Configuration.CustomTransformerData.#ctor(System.String)">
            <summary>
            Initialize a new instance of a <see cref="T:Microsoft.Practices.EnterpriseLibrary.Configuration.CustomTransformerData"/> class.
            </summary>
            <param name="name">
            The name of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Configuration.CustomTransformerData"/>.
            </param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Configuration.CustomTransformerData.#ctor(System.String,System.String)">
            <summary>
            Initialize a new instance of a <see cref="T:Microsoft.Practices.EnterpriseLibrary.Configuration.CustomTransformerData"/> class.
            </summary>
            <param name="name">
            The name of the custom handler.
            </param>
            <param name="typeName">
            The type of the custom handler.
            </param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Configuration.CustomTransformerData.Clone">
            <summary>
            <para>Creates a deep copy of the current instance.</para>
            </summary>
            <returns>
            <para>A deep copy of this instance.</para>
            </returns>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Configuration.CustomTransformerData.TypeName">
            <summary>
            <para>Gets or sets the <see cref="T:System.Type"/> name of the provider.</para>
            </summary>
            <remarks>
            <value>
            <para>The type name of the provider. The default is an empty string.</para>
            </value>
            </remarks>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Configuration.CustomTransformerData.Attributes">
            <summary>
            Gets or sets custom configuration attributes.
            </summary>
        </member>
        <member name="T:Jenzabar.Common.Web.UI.Controls.DisplayIndicatorValidator">
            <summary>
            This control validates the <see cref="T:Jenzabar.Common.Web.UI.Controls.DisplayIndicator">DisplayIndicator</see> date ranges of a control, if a DisplayIndicator has been defined for the control.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Configuration.ConfigurationProtector">
            <summary>
            <para>Provides functionality to encrypt and decrypt configuraiton data with symetric algorithms defined in the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Configuration.Protection.KeyAlgorithmPair"/>.</para>
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Configuration.ConfigurationProtector.#ctor">
            <summary>
            <para>Initialize a new instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Configuration.ConfigurationProtector"/> class with a <see cref="T:Microsoft.Practices.EnterpriseLibrary.Configuration.ConfigurationContext"/>.</para>
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Configuration.ConfigurationProtector.Finalize">
            <summary>
            <para>Allows an the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Configuration.ConfigurationProtector"/> to attempt to free resources and perform other cleanup operations before the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Configuration.ConfigurationProtector"/> is reclaimed by garbage collection. </para>
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Configuration.ConfigurationProtector.Dispose">
            <summary>
            <para>Releases the unmanaged resources used by the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Configuration.ConfigurationBuilder"/> and optionally releases the managed resources.</para>
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Configuration.ConfigurationProtector.Dispose(System.Boolean)">
            <summary>
            <para>Releases the unmanaged resources used by the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Configuration.ConfigurationBuilder"/> and optionally releases the managed resources.</para>
            </summary>
            <param name="disposing">
            <para><see langword="true"/> to release both managed and unmanaged resources; <see langword="false"/> to release only unmanaged resources.</para>
            </param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Configuration.ConfigurationProtector.Load(Microsoft.Practices.EnterpriseLibrary.Configuration.ConfigurationContext,System.String)">
            <summary>
            <para>Load the configured protection mechanism for the section. This is the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Configuration.KeyAlgorithmPairStorageProviderData"/> to load the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Configuration.Protection.KeyAlgorithmPair"/>.</para>
            </summary>
            <param name="sectionName">
            <para>The name of the section to encrypt.</para>
            </param>
            <param name="context">
            <para>A <see cref="T:Microsoft.Practices.EnterpriseLibrary.Configuration.ConfigurationContext"/> object.</para>
            </param>
            <exception cref="T:System.ArgumentNullException">
            <para><paramref name="context"/> is a <see langword="null"/> reference (Nothing in Visual Basic).</para>
            </exception>
            <exception cref="T:System.Configuration.ConfigurationException">
            <para>An error occured in configuration.</para>
            </exception>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Configuration.ConfigurationProtector.Encrypt(System.Byte[])">
            <summary>
            <para>Encrypts bytes with the initialized algorithm and key.</para>
            </summary>
            <param name="plaintext"><para>The plaintext in which you wish to encrypt.</para></param>
            <returns><para>The resulting ciphertext.</para></returns>
            <remarks>
            <para>If no encryption is defined, the bytes passed in are returned.</para>
            </remarks>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Configuration.ConfigurationProtector.Decrypt(System.Byte[])">
            <summary>
            <para>Decrypts bytes with the initialized algorithm and key.</para>
            </summary>
            <param name="ciphertext"><para>The ciphertext in which you wish to decrypt.</para></param>
            <returns><para>The resulting plaintext.</para></returns>
            <remarks>
            <para>If no encryption is defined, the bytes passed in are returned.</para>
            </remarks>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Configuration.ConfigurationProtector.Encrypted">
            <summary>
            <para>Determines if the data is to be encrypted or not.</para>
            </summary>
            <value>
            <para><see langword="true"/> if the data is to be encrypted; otherwise <see langword="false"/>.</para>
            </value>
        </member>
        <member name="T:Jenzabar.Common.ValidationUtilities">
            <summary>
            A utility class with methods that perform validation of various types of data
            </summary>
        </member>
        <member name="M:Jenzabar.Common.ValidationUtilities.IsStringAGuid(System.String)">
            <summary>
            Gets whether or not a string is a valid GUID
            </summary>
            <param name="guid">The string to check</param>
            <returns>True if the string is a GUID, false otherwise</returns>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Common.Cryptography.CryptographyUtility">
            <summary>
            <para>Common Cryptography methods.</para>
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Cryptography.CryptographyUtility.LogCryptographyException(System.Exception)">
            <summary>
            <para>Logs an exception that occurs during a cryptography operation to the event log.</para>
            </summary>
            <param name="ex">
            <para>The <see cref="T:System.Exception"/> to log.</para>
            </param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Cryptography.CryptographyUtility.CompareBytes(System.Byte[],System.Byte[])">
            <summary>
            <para>Determine if two byte arrays are equal.</para>
            </summary>
            <param name="byte1">
            <para>The first byte array to compare.</para>
            </param>
            <param name="byte2">
            <para>The byte array to compare to the first.</para>
            </param>
            <returns>
            <para><see langword="true"/> if the two byte arrays are equal; otherwise <see langword="false"/>.</para>
            </returns>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Cryptography.CryptographyUtility.GetBytesFromHexString(System.String)">
            <summary>
            <para>Returns a byte array from a string representing a hexidecimal number.</para>
            </summary>
            <param name="hexidecimalNumber">
            <para>The string containing a valid hexidecimal number.</para>
            </param>
            <returns><para>The byte array representing the hexidecimal.</para></returns>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Cryptography.CryptographyUtility.GetHexStringFromBytes(System.Byte[])">
            <summary>
            <para>Returns a string from a byte array represented as a hexidecimal number (eg: 0F351A).</para>
            </summary>
            <param name="bytes">
            <para>The byte array to convert to forat as a hexidecimal number.</para>
            </param>
            <returns>
            <para>The formatted representation of the bytes as a hexidcimal number.</para>
            </returns>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Cryptography.CryptographyUtility.CombineBytes(System.Byte[],System.Byte[])">
            <summary>
            <para>Combines two byte arrays into one.</para>
            </summary>
            <param name="buffer1"><para>The prefixed bytes.</para></param>
            <param name="buffer2"><para>The suffixed bytes.</para></param>
            <returns><para>The combined byte arrays.</para></returns>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Cryptography.CryptographyUtility.GetRandomBytes(System.Int32)">
            <summary>
            Creates a cryptographically strong random set of bytes.
            </summary>
            <param name="size">The size of the byte array to generate.</param>
            <returns>The computed bytes.</returns>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Cryptography.CryptographyUtility.GetRandomBytes(System.Byte[])">
            <summary>
            <para>Fills a byte array with a cryptographically strong random set of bytes.</para>
            </summary>
            <param name="bytes"><para>The byte array to fill.</para></param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Cryptography.CryptographyUtility.ZeroOutBytes(System.Byte[])">
            <summary>
            <para>Fills <paramref name="bytes"/> zeros.</para>
            </summary>
            <param name="bytes">
            <para>The byte array to fill.</para>
            </param>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Common.Instrumentation.ProjectInstaller">
            <summary>
            Installer for common event sources. This class is not meant to be used by any callers.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Instrumentation.ProjectInstaller.#ctor">
            <summary>
            Initializes a new instance of <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Instrumentation.ProjectInstaller"></see>
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Instrumentation.ProjectInstaller.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">True if called from Dispose, false if called from finalizer</param>
        </member>
        <member name="T:Jenzabar.Common.Mail.EmailPriority">
            <summary>
            Provides enumerated values for email priority.
            </summary>
        </member>
        <member name="F:Jenzabar.Common.Mail.EmailPriority.High">
            <summary>
            Specifies that the email message has high priority.
            </summary>
        </member>
        <member name="F:Jenzabar.Common.Mail.EmailPriority.Low">
            <summary>
            Specifies that the email message has low priority.
            </summary>
        </member>
        <member name="F:Jenzabar.Common.Mail.EmailPriority.Normal">
            <summary>
            Specifies that the email message has normal priority.
            </summary>
        </member>
        <member name="T:Jenzabar.Common.Mail.Email">
            <summary>
            Provides properties and methods for constructing an email message.
            </summary>
        </member>
        <member name="M:Jenzabar.Common.Mail.Email.#ctor">
            <summary>
            Default Constructor
            </summary>
        </member>
        <member name="M:Jenzabar.Common.Mail.Email.CreateAndSendMailMessage(System.String,System.String,System.String,System.String)">
            <summary>
            Creates a new email message, and sends it.
            </summary>
            <param name="from">The email address to use in the "From" field</param>
            <param name="to">A comma-separated list of email addresses to send to</param>
            <param name="subject">The subject of the message.</param>
            <param name="message">The body of the message.</param>
        </member>
        <member name="M:Jenzabar.Common.Mail.Email.CreateAndSendMailMessage(System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Creates a new email message, and sends it.
            </summary>
            <param name="from">The email address to use in the "From" field</param>
            <param name="to">A comma-separated list of email addresses to send to</param>
            <param name="cc">A comma separated list of addresses to send a cc to.</param>
            <param name="subject">The subject of the message.</param>
            <param name="message">The body of the message.</param>
        </member>
        <member name="M:Jenzabar.Common.Mail.Email.CreateAndSendMailMessage(System.String,System.String,System.String,System.String,System.String,System.Web.HttpFileCollection)">
            <summary>
            Creates a new email message, and sends it.
            </summary>
            <param name="from">The email address to use in the "From" field</param>
            <param name="to">A comma-separated list of email addresses to send to</param>
            <param name="cc">A comma separated list of addresses to send a cc to.</param>
            <param name="subject">The subject of the message.</param>
            <param name="message">The body of the message.</param>
            <param name="attachments">An HttpFileCollection containing files to send ass attachments with the messge or null to send no attachments.</param>
        </member>
        <member name="M:Jenzabar.Common.Mail.Email.CreateAndSendMailMessage(System.String,System.String,System.String,System.String,System.String,System.String,System.Web.Mail.MailFormat,System.Web.HttpFileCollection)">
            <summary>
            Creates a new email message, and sends it.
            </summary>
            <param name="from">The email address to use in the "From" field</param>
            <param name="to">A comma-separated list of email addresses to send to</param>
            <param name="cc">A comma separated list of addresses to send a cc to.</param>
            <param name="bcc">A comma separated list of addresses to send a bcc to.</param>
            <param name="subject">The subject of the message.</param>
            <param name="format">Email body format; Text or HTML</param>
            <param name="message">The body of the message.</param>
            <param name="attachments">An HttpFileCollection containing files to send ass attachments with the messge or null to send no attachments.</param>
        </member>
        <member name="M:Jenzabar.Common.Mail.Email.GetFromAddress(System.String)">
            <summary>
            Compares the passed "from" address and the default smtp address to see if they're from the
            same domain.  If so, then we'll use the passed from address.  If not, we need to use the
            default smtp address used in the config file to prevent the smtp server from rejecting a
            forwarded address. We'll also set the reply-to address to the "from" address.
            </summary>
            <param name="strFrom">The "from" address of the person sending the email</param>
            <returns>True if we should continue sending email message, false if we should abort</returns>
        </member>
        <member name="M:Jenzabar.Common.Mail.Email.Send">
            <summary>
            Sends an email message and waits for the SMTP server to process the request.
            </summary>
        </member>
        <member name="M:Jenzabar.Common.Mail.Email.SendAsync">
            <summary>
            Sends an email message without waiting for the SMTP server to process the request.
            </summary>
        </member>
        <member name="T:Jenzabar.Common.Web.UI.Controls.SuperTabClickEventArgs">
            <summary>
            Event data for when a user clicks on a tab.
            </summary>
        </member>
        <member name="M:Jenzabar.Common.Web.UI.Controls.SuperTabClickEventArgs.#ctor(Jenzabar.Common.Web.UI.Controls.SuperTab,System.Web.UI.WebControls.CommandEventArgs)">
            <summary>
            Creates a new instance of the tab click event args.
            </summary>
            <param name="sourceTab">A <see cref="T:Jenzabar.Common.Web.UI.Controls.SuperTab">SuperTab</see> that is clicked.</param>
            <param name="innerArgs">System.Web.UI.WebControls.CommandEventArgs for the click event.</param>
        </member>
        <member name="P:Jenzabar.Common.Web.UI.Controls.SuperTabClickEventArgs.ClickedTab">
            <summary>
            Gets the <see cref="T:Jenzabar.Common.Web.UI.Controls.SuperTab">SuperTab</see> the user clicked on.
            </summary>
        </member>
        <member name="T:Jenzabar.Common.Web.UI.Controls.SuperTabClickEventHandler">
            <summary>
            Event handler definition for when a user clicks on a tab.
            </summary>
        </member>
        <member name="T:Jenzabar.Common.Web.UI.Controls.SuperTabs">
            <summary>
            A System.Web.UI.Control that provides high-level built-in tabs 
            for changing screens or switching portlet views.
            The tabs appear as medium-grey sections below the portlet's toolbar.
            The selected tab appears white.
            In the portlet view, override PortletBase.PopulateTabs() 
            and build up the tabs by calling either <see cref="T:Jenzabar.Common.Web.UI.Controls.SuperTabCollection">SuperTabCollection</see>.Add() 
            or <see cref="T:Jenzabar.Common.Web.UI.Controls.SuperTabCollection">SuperTabCollection</see>.AddGlobalized().
            
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Jenzabar.Common.Web.UI.Controls.SuperTabs.#ctor" -->
        <member name="M:Jenzabar.Common.Web.UI.Controls.SuperTabs.CreateControlCollection">
            <summary>
            Creates a specialized control collection that only allows SuperTabs to be placed in the control collection
            </summary>
            <returns>The System.Web.UI.ControlCollection for this control.</returns>
        </member>
        <member name="M:Jenzabar.Common.Web.UI.Controls.SuperTabs.Render(System.Web.UI.HtmlTextWriter)">
            <summary>
            Renders an HTML definition list (dl) and a definition topic (dt) 
            to begin the display of this tab control.  
            Renders each child tab within a definition definition (dd) tag.
            </summary>
            <param name="writer">An HtmlTextWriter that renders the control.</param>
        </member>
        <member name="P:Jenzabar.Common.Web.UI.Controls.SuperTabs.SelectedIndex">
            <summary>
            Gets and sets the index of the selected tab.
            </summary>
        </member>
        <member name="P:Jenzabar.Common.Web.UI.Controls.SuperTabs.Tabs">
            <summary>
            Gets the <see cref="T:Jenzabar.Common.Web.UI.Controls.SuperTabCollection">SuperTabCollection</see> of <see cref="T:Jenzabar.Common.Web.UI.Controls.SuperTab">SuperTab</see>s for this control.
            </summary>
        </member>
        <member name="P:Jenzabar.Common.Web.UI.Controls.SuperTabs.SelectedTab">
            <summary>
            Gets the selected tab.
            </summary>
        </member>
        <member name="E:Jenzabar.Common.Web.UI.Controls.SuperTabs.TabClick">
            <summary>
            Raised when the user clicks on a tab.
            </summary>
        </member>
        <member name="T:Jenzabar.Common.Web.UI.Controls.SuperTabs.SuperTabControlCollection">
            <summary>
            Used to make sure that only controls of type SuperTab are added to the control collection.
            </summary>
        </member>
        <member name="M:Jenzabar.Common.Web.UI.Controls.SuperTabs.SuperTabControlCollection.Add(System.Web.UI.Control)">
            <summary>
            Checks to see if the control being added is a SuperTab. 
            If not, throws an ArgumentException.
            </summary>
            <param name="child"></param>
            
        </member>
        <member name="M:Jenzabar.Common.Web.UI.Controls.SuperTabs.SuperTabControlCollection.AddAt(System.Int32,System.Web.UI.Control)">
            <summary>
            Checks to see if the control being added is a <see cref="T:Jenzabar.Common.Web.UI.Controls.SuperTab">SuperTab</see>.
            If not, throws an ArgumentException.
            </summary>
            <param name="index">Integer position in the collection of the added the control. </param>
            <param name="child">A System.Web.UI.Control to be added.</param>
        </member>
        <member name="T:Jenzabar.Common.Web.UI.Controls.SuperTab">
            <summary>
            A single tab for use in the supertabs control.
            </summary>
        </member>
        <member name="M:Jenzabar.Common.Web.UI.Controls.SuperTab.Render(System.Web.UI.HtmlTextWriter)">
            <summary>
            Renders the HTML definition (dd) link for the tab.
            The links are rendered horizontally to look like notebook tabs.
            </summary>
            <param name="writer">An HtmlTextWriter that renders the control.</param>
        </member>
        <member name="P:Jenzabar.Common.Web.UI.Controls.SuperTab.Selected">
            <summary>
            Gets and sets whether this is the selected tab.
            </summary>
            <remarks>
            There can only be one selected tab in a group of tabs. 
            Setting this will de-select any other tabs that might be selected.
            </remarks>
        </member>
        <member name="T:Jenzabar.Common.Web.UI.Controls.SuperTabCollection">
            <summary>
            A collection of SuperTab objects, used in the SuperTabs control.
            </summary>
        </member>
        <member name="M:Jenzabar.Common.Web.UI.Controls.SuperTabCollection.Add(System.String,System.String,System.String)">
            <summary>
            Creates a new tab, and adds it to the collection of tabs.
            </summary>
            <param name="commandName">The name of the command associated with the new tab.</param>
            <param name="text">The text to be displayed to the user for the new tab.</param>
            <param name="toolTip">The text to use for the tooltip on the new tab.</param>
        </member>
        <member name="M:Jenzabar.Common.Web.UI.Controls.SuperTabCollection.AddGlobalized(System.String,System.String,System.String)">
            <summary>
            Adds a new tab, and looks up the globalized textKey and toolTipKey for the tab.
            </summary>
            <param name="commandName">The name of the command associated with the new tab.</param>
            <param name="textKey">The key to globalize the text for the tab.</param>
            <param name="toolTipKey">The key to globalize the tooltip for the tab.</param>
        </member>
        <member name="P:Jenzabar.Common.Web.UI.Controls.SuperTabCollection.Item(System.Int32)">
            <summary>
            Gets the tab at the specified index.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Configuration.ConfigurationChangingEventHandler">
            <summary>
            <para>Represents the method that will handle the <seealso cref="E:Microsoft.Practices.EnterpriseLibrary.Configuration.ConfigurationManager.ConfigurationChanging"/> and <see cref="E:Microsoft.Practices.EnterpriseLibrary.Configuration.ConfigurationContext.ConfigurationChanging"/> events.</para>
            </summary>
            <param name="sender">
            <para>The source of the event.</para>
            </param>
            <param name="e">
            <para>A <see cref="T:Microsoft.Practices.EnterpriseLibrary.Configuration.ConfigurationChangingEventArgs"/> that contains the event data.</para>
            </param>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Configuration.ConfigurationChangingEventArgs">
            <summary>
            <para>Provides data for the <seealso cref="E:Microsoft.Practices.EnterpriseLibrary.Configuration.ConfigurationManager.ConfigurationChanging"/> and <see cref="E:Microsoft.Practices.EnterpriseLibrary.Configuration.ConfigurationContext.ConfigurationChanging"/> event which occur after configuration is changed and committed to storage.</para>
            </summary>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Configuration.ConfigurationChangedEventArgs">
            <summary>
            <para>Provides data for the <seealso cref="E:Microsoft.Practices.EnterpriseLibrary.Configuration.ConfigurationManager.ConfigurationChanged"/> and <see cref="E:Microsoft.Practices.EnterpriseLibrary.Configuration.ConfigurationContext.ConfigurationChanged"/> event which occur before configuration is changed and committed to storage.</para>
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Configuration.ConfigurationChangedEventArgs.#ctor(System.String,System.String)">
            <summary>
            <para>Initialize a new instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Configuration.ConfigurationChangingEventArgs"/> class with the configuration file, the section name, the old value, and the new value of the changes.</para>
            </summary>
            <param name="configurationFile"><para>The configuration file where the change occured.</para></param>
            <param name="sectionName"><para>The section name of the changes.</para></param>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Configuration.ConfigurationChangedEventArgs.ConfigurationFile">
            <summary>
            <para>Gets the configuration file of the data that is changing.</para>
            </summary>
            <value>
            <para>The configuration file of the data that is changing.</para>
            </value>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Configuration.ConfigurationChangedEventArgs.SectionName">
            <summary>
            <para>Gets the section name where the changes occurred.</para>
            </summary>
            <value>
            <para>The section name where the changes occurred.</para>
            </value>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Configuration.ConfigurationChangingEventArgs.#ctor(System.String,System.String,System.Object,System.Object)">
            <summary>
            <para>Initialize a new instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Configuration.ConfigurationChangingEventArgs"/> class with the configuration file, the section name, the old value, and the new value of the changes.</para>
            </summary>
            <param name="configurationFile"><para>The configuration file where the change occured.</para></param>
            <param name="sectionName"><para>The section name of the changes.</para></param>
            <param name="oldValue"><para>The old value.</para></param>
            <param name="newValue"><para>The new value.</para></param>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Configuration.ConfigurationChangingEventArgs.OldValue">
            <summary>
            <para>Gets the old value.</para>
            </summary>
            <value>
            <para>The old value.</para>
            </value>
            <remarks>
            <value>If no old value existed this value will be <see langword="null"/>.</value>
            </remarks>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Configuration.ConfigurationChangingEventArgs.NewValue">
            <summary>
            <para>Gets the new value.</para>
            </summary>
            <value>
            <para>The new value.</para>
            </value>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Configuration.ConfigurationChangingEventArgs.Cancel">
            <summary>
            <para>Determines if the changes should be cancled.</para>
            </summary>
            <value>
            <para><see langword="true"/> if the changes should be cancled; otherwise, <see langword="false"/>.</para>
            </value>
        </member>
        <member name="T:Jenzabar.Common.JenzaExceptionPublisher">
            <summary>
            Component used as the default publishing component for ICSNET application.
            Settings in Web.Config:
            &lt;publisher	mode="on"
            	assembly="Jenzabar.Common"
            	type="Jenzabar.Common.JenzaExceptionPublisher" 
            	logName="ICSNET"
            	applicationName="ICSNETApp"
            	errorLevel="1|2|3" (by default all)
            	publishAll="true|false"/&gt; (by default true)
            </summary>
        </member>
        <member name="F:Jenzabar.Common.JenzaExceptionPublisher.ExceptionErrorLevel">
            <summary>
            stores exception error level from config file
            </summary>
        </member>
        <member name="F:Jenzabar.Common.JenzaExceptionPublisher.PublishDuplicated">
            <summary>
            stores propert if duplicated exceptions should be published from config file
            </summary>
        </member>
        <member name="M:Jenzabar.Common.JenzaExceptionPublisher.#ctor">
            <summary>
            Default Constructor.
            </summary>
        </member>
        <member name="M:Jenzabar.Common.JenzaExceptionPublisher.#ctor(System.String,System.String)">
            <summary>
            Constructor allowing the log name and application names to be set.
            </summary>
            <param name="logName">The name of the log for the JenzaPublisher to use.</param>
            <param name="applicationName">The name of the application.  This is used as the Source name in the event log.</param>
        </member>
        <member name="M:Jenzabar.Common.JenzaExceptionPublisher.Publish(System.Exception,System.Collections.Specialized.NameValueCollection,System.Collections.Specialized.NameValueCollection)">
            <summary>
            Method used to publish exception information and additional information.
            </summary>
            <param name="exception">The exception object whose information should be published.</param>
            <param name="additionalInfo">A collection of additional data that should be published along with the exception information.</param>
            <param name="configSettings">A collection of any additional attributes provided in the config settings for the custom publisher.</param>
        </member>
        <member name="M:Jenzabar.Common.JenzaExceptionPublisher.WriteToLog(System.String,System.Diagnostics.EventLogEntryType)">
            <summary>
            Helper function to write an entry to the Event Log.
            </summary>
            <param name="entry">The entry to enter into the Event Log.</param>
            <param name="type">The EventLogEntryType to be used when the entry is logged to the Event Log.</param>
        </member>
        <member name="M:Jenzabar.Common.JenzaExceptionPublisher.WriteToLog(System.String,System.Diagnostics.EventLogEntryType,System.Int16,System.Boolean)">
            <summary>
            Helper function to write an entry to the Event Log.
            </summary>
            <param name="entry">The entry to enter into the Event Log.</param>
            <param name="type">The EventLogEntryType to be used when the entry is logged to the Event Log.</param>
            <param name="category">exception category level</param>
            <param name="wasPublished">True if the log entry has been published.</param>
        </member>
        <member name="T:Jenzabar.Common.Web.UI.Controls.ContentTabGroup">
            <summary>
            Renders a panel with tabs to hide or display possibly long sections 
            of information in a portlet view.
            </summary>
            <remarks>This control extends .NET's System.Web.UI.WebControls.WebControl.</remarks>
        </member>
        <member name="M:Jenzabar.Common.Web.UI.Controls.ContentTabGroup.#ctor">
            <summary>
            Creates a new instance of the ContentTabGroup class.
            </summary>
        </member>
        <member name="M:Jenzabar.Common.Web.UI.Controls.ContentTabGroup.Render(System.Web.UI.HtmlTextWriter)">
            <summary>
            Renders the ContentTabGroup control.
            </summary>
            <param name="writer">The HtmlTextWriter that renders the control.</param>
        </member>
        <member name="P:Jenzabar.Common.Web.UI.Controls.ContentTabGroup.ContentTabs">
            <summary>
            Gets a collection of the tabs that will be displayed for this ContentTabGroup.
            </summary>
        </member>
        <member name="P:Jenzabar.Common.Web.UI.Controls.ContentTabGroup.SelectedIndex">
            <summary>
            Gets and sets the zero-based index of the selected tab in the ContentTabCollection.
            </summary>
        </member>
        <member name="T:Jenzabar.Common.Web.UI.Controls.ContentTab">
            <summary>
            A control that defines the content and information for a tab in the ContentTabGroup control.
            </summary>
            <remarks>This control extends .NET's System.Web.UI.WebControls.WebControl.</remarks>
        </member>
        <member name="M:Jenzabar.Common.Web.UI.Controls.ContentTab.#ctor">
            <summary>
            Creates a new instance of the ContentTab class.
            </summary>
        </member>
        <member name="M:Jenzabar.Common.Web.UI.Controls.ContentTab.RenderBeginTag(System.Web.UI.HtmlTextWriter)">
            <summary>
            Renders the beginning tag of the control.
            </summary>
            <param name="writer">The HtmlTextWriter that renders the control.</param>
        </member>
        <member name="M:Jenzabar.Common.Web.UI.Controls.ContentTab.RenderEndTag(System.Web.UI.HtmlTextWriter)">
            <summary>
            Renders the end tag of the control.
            </summary>
            <param name="writer">The HtmlTextWriter that renders the control.</param>
        </member>
        <member name="P:Jenzabar.Common.Web.UI.Controls.ContentTab.Text">
            <summary>
            Gets and sets the text that will appear at the top of this tab.
            </summary>
        </member>
        <member name="P:Jenzabar.Common.Web.UI.Controls.ContentTab.Selected">
            <summary>
            Gets and sets whether this ContentTab is selected.
            </summary>
        </member>
        <member name="T:Jenzabar.Common.Web.UI.Controls.ContentTabCollection">
            <summary>
            A grouping of ContentTab controls in the ContentTabGroup control;
            Used to manage the many ContentTabs within the group.
            </summary>
        </member>
        <member name="M:Jenzabar.Common.Web.UI.Controls.ContentTabCollection.#ctor(Jenzabar.Common.Web.UI.Controls.ContentTabGroup)">
            <summary>
            Creates a new instance of the ContentTabCollection class.
            </summary>
            <param name="owner">The ContentTabGroup that this collection constitutes.</param>
        </member>
        <member name="M:Jenzabar.Common.Web.UI.Controls.ContentTabCollection.Add(Jenzabar.Common.Web.UI.Controls.ContentTab)">
            <summary>
            Adds a ContentTab to the collection of ContentTabs.
            </summary>
            <param name="contentTab">The tab to be added to the collection.</param>
        </member>
        <member name="M:Jenzabar.Common.Web.UI.Controls.ContentTabCollection.AddAt(System.Int32,Jenzabar.Common.Web.UI.Controls.ContentTab)">
            <summary>
            Adds a ContentTab to the collection of ContentTabs at a specific index.
            </summary>
            <param name="index">The ContentTab's integer order of insertion in the notebook.</param>
            <param name="contentTab">The ContentTab to be added to the collection.</param>
        </member>
        <member name="M:Jenzabar.Common.Web.UI.Controls.ContentTabCollection.RemoveAt(System.Int32)">
            <summary>
            Removes a ContentTab from the collection of ContentTabs at a specific index.
            </summary>
            <param name="index">The integer index of the ContentTab to remove.</param>
        </member>
        <member name="P:Jenzabar.Common.Web.UI.Controls.ContentTabCollection.Item(System.Int32)">
            <summary>
            Gets and sets a tab in the collection of tabs by it's index.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Configuration.NameValueItem">
            <summary>
            <para>The name value pair used in the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Configuration.NameValueItemCollection"/>.</para>
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Configuration.NameValueItem.#ctor">
            <summary>
            <para>Initialize a new instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Configuration.NameValueItem"/> class.</para>
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Configuration.NameValueItem.#ctor(System.String,System.String)">
            <summary>
            <para>Initialize a new instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Configuration.NameValueItem"/> class with a name and value.</para>
            </summary>
            <param name="name">
            <para>
            <para>The name of the item.</para>
            </para>
            </param>
            <param name="value">
            <para>The value of the item.</para>
            </param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Configuration.NameValueItem.ToString">
            <summary>
            <para>Returns a <see cref="T:System.String"/> that represents the current <see cref="T:Microsoft.Practices.EnterpriseLibrary.Configuration.NameValueItem"/>.</para>
            </summary>
            <returns>
            <para>The <seealso cref="P:Microsoft.Practices.EnterpriseLibrary.Configuration.NameValueItem.Name"/> of the item.</para>
            </returns>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Configuration.NameValueItem.Name">
            <summary>
            <para>Gets or sets the name of the item.</para>
            </summary>
            <value>
            <para>The name of the item.</para>
            </value>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Configuration.NameValueItem.Value">
            <summary>
            <para>Gets or sets the value of the item.</para>
            </summary>
            <value>
            <para>The value of the item.</para>
            </value>
        </member>
        <member name="T:Jenzabar.Common.Web.UI.Controls.GroupedGrid">
            <summary>
            A data bound list control that displays items from a data source 
            in a table (grid) layout (columns and rows). 
            This control allows you to select, sort, and edit grid items.
            It also provides rendering functionality for 3 levels of hierarchical data.
            </summary>
            <remarks>This control extends ASP.NET's System.Web.UI.WebControls.DataGrid control. 
            </remarks>
        </member>
        <member name="M:Jenzabar.Common.Web.UI.Controls.GroupedGrid.#ctor">
            <summary>
            Creates a new instance of a GroupedGrid.
            </summary>
        </member>
        <member name="M:Jenzabar.Common.Web.UI.Controls.GroupedGrid.FillGridSectionWithRows(Jenzabar.Common.Web.UI.Controls.GroupedGridSection,System.Collections.IEnumerator,System.Boolean)">
            <summary>
            Reads all the objects in and creates rows for them in the table.
            </summary>
            <param name="section">A <see cref="T:Jenzabar.Common.Web.UI.Controls.GroupedGridSection">GroupedGridSection</see></param>.
            <param name="src">An IEnumerator list.</param>
            <param name="dataBind">True, to bind data; false, otherwise.</param>
            <returns>An int count of the items.</returns>
        </member>
        <member name="M:Jenzabar.Common.Web.UI.Controls.GroupedGrid.CreateTableHeaderSection(System.Boolean)">
            <summary>
            Creates a header section and populates it with controls 
            from a tableheader template, if one exists.
            </summary>
            <param name="dataBind">True to bind data; false, otherwise</param>
            <returns>A <see cref="T:Jenzabar.Common.Web.UI.Controls.GroupedGridSection">GroupedGridSection</see>.</returns>
        </member>
        <member name="M:Jenzabar.Common.Web.UI.Controls.GroupedGrid.CreateTableFooterSection(System.Boolean)">
            <summary>
            Creates a table footer section and populates it with controls 
            from a table footer template, if one exists.
            </summary>
            <param name="dataBind">True to bind data; false, otherwise</param>
            <returns>A <see cref="T:Jenzabar.Common.Web.UI.Controls.GroupedGridSection">GroupedGridSection</see>.</returns>
        </member>
        <member name="M:Jenzabar.Common.Web.UI.Controls.GroupedGrid.CreateGroupHeaderSection(System.Boolean,System.Object)">
            <summary>
            Creates a tbody section with class="ghead" and fills it with headers 
            for the columns and a header for the group based on a template, if one exists.
            </summary>
            <param name="dataBind">True to bind data; false, otherwise</param>
            <param name="dataItem">The object to bind; null if no databinding.</param>
            <returns>A <see cref="T:Jenzabar.Common.Web.UI.Controls.GroupedGridSection">GroupedGridSection</see>.</returns>
        </member>
        <member name="M:Jenzabar.Common.Web.UI.Controls.GroupedGrid.CreateGroupSubHeaderSection(System.Boolean,System.Object)">
            <summary>
            Creates a sub-header tbody section with class="gsubhead" 
            and fills it with sub-headers from the sub-header template, if one exists.
            </summary>
            <param name="dataBind">True to bind data; false otherwise</param>
            <param name="dataItem">The object to bind; null if no databinding.</param>
            <returns>A <see cref="T:Jenzabar.Common.Web.UI.Controls.GroupedGridSection">GroupedGridSection</see>.</returns>
        </member>
        <member name="M:Jenzabar.Common.Web.UI.Controls.GroupedGrid.CreateGroupDataSection(System.Boolean)">
            <summary>
            Creates tbody section with class="gbody" and fills it with group header 
            and data.
            </summary>
            <param name="dataBind">True if databinding; false, otherwise</param>
            <returns>A <see cref="T:Jenzabar.Common.Web.UI.Controls.GroupedGridSection">GroupedGridSection</see>.</returns>
        </member>
        <member name="M:Jenzabar.Common.Web.UI.Controls.GroupedGrid.CreateGroupFooterSection(System.Boolean,System.Object)">
            <summary>
            Creates a tbody section with class="gfoot" and fills it with footers 
            for the columns and a footer for the group based on a template, if one exists.
            </summary>
            <param name="dataBind">True to bind data; false, otherwise.</param>
            <param name="dataItem">The object to bind; null if no databinding.</param>
            <returns>A <see cref="T:Jenzabar.Common.Web.UI.Controls.GroupedGridSection">GroupedGridSection</see>.</returns>
        </member>
        <member name="M:Jenzabar.Common.Web.UI.Controls.GroupedGrid.CreateEmptyTableSection">
            <summary>
            Creates an empty tbody section with class="gbody" to be used when the 
            grid contains no items.
            </summary>
            <returns>A <see cref="T:Jenzabar.Common.Web.UI.Controls.GroupedGridSection">GroupedGridSection</see>.</returns>
        </member>
        <member name="M:Jenzabar.Common.Web.UI.Controls.GroupedGrid.CreateEmptyGroupSection(System.Boolean,System.Object)">
            <summary>
            Creates an empty tbody section with class="gbody" to be used when a section 
            contains no items.
            </summary>
            <param name="dataBind">True to bind data; false, otherwise</param>
            <param name="dataItem">The object to bind; null if no databinding.</param>
            <returns>A <see cref="T:Jenzabar.Common.Web.UI.Controls.GroupedGridSection">GroupedGridSection</see>.</returns>
        </member>
        <member name="M:Jenzabar.Common.Web.UI.Controls.GroupedGrid.CreateSection(Jenzabar.Common.Web.UI.Controls.GridSectionType,System.String)">
            <summary>
            Creates a new grouped grid section and initializes it.
            </summary>
            <param name="sectionType">A <see cref="T:Jenzabar.Common.Web.UI.Controls.GridSectionType">GridSectionType</see> to create.</param>
            <param name="className">The CSS class name for the section.</param>
            <returns>A <see cref="T:Jenzabar.Common.Web.UI.Controls.GroupedGridSection">GroupedGridSection</see>.</returns>
        </member>
        <member name="M:Jenzabar.Common.Web.UI.Controls.GroupedGrid.CreateColumnBasedItem(Jenzabar.Common.Web.UI.Controls.GroupedGridItemLevel,System.Web.UI.WebControls.ListItemType,System.Boolean,System.Boolean,System.Object)">
            <summary>
            Creates and initializes a column-based item.
            </summary>
            <param name="dataBind">True to bind data; false, otherwise.</param>
            <param name="dataItem">The object to bind; null, if no databinding.</param>
            <param name="itemLevel">The <see cref="T:Jenzabar.Common.Web.UI.Controls.GroupedGridItemLevel">GroupedGridItemLevel</see> of the item in the tree of items being bound.</param>
            <param name="itemType">The System.Web.UI.WebControls.ListItemType of the item to bind (header, footer, item, or separator).</param>
            <param name="makeTH">True to create table header (th) tags instead of td tags.</param>
            <returns>A GroupedGridItem.</returns>
        </member>
        <member name="M:Jenzabar.Common.Web.UI.Controls.GroupedGrid.CreateSingleCellItem(Jenzabar.Common.Web.UI.Controls.GroupedGridItemLevel,System.Web.UI.WebControls.ListItemType,System.Web.UI.ITemplate,System.Boolean,System.Boolean,System.Object)">
            <summary>
            Creates and initalizes a row that contains only one column that is driven by a template.
            </summary>
            <param name="dataBind">True to bind data; false, otherwise.</param>
            <param name="dataItem">The object to bind; null, if no databinding.</param>
            <param name="itemLevel">The <see cref="T:Jenzabar.Common.Web.UI.Controls.GroupedGridItemLevel">GroupedGridItemLevel</see> of the item in the tree of items being bound.</param>
            <param name="itemType">The System.Web.UI.WebControls.ListItemType of the item to bind (header, footer, item, or separator).</param>
            <param name="makeTH">True to create table header (th) tags instead of td tags.</param>
            <param name="template">The System.Web.UI.ITemplate to use to initialize the cell.</param>
            <returns>A GroupedGridItem.</returns>
        </member>
        <member name="M:Jenzabar.Common.Web.UI.Controls.GroupedGrid.CreateLEftAndRightItem(Jenzabar.Common.Web.UI.Controls.GroupedGridItemLevel,System.Web.UI.WebControls.ListItemType,System.Web.UI.ITemplate,System.Boolean,System.Object)">
            <summary>
            Creates and initalizes a row that contains only one column that 
            has right and left container spans.
            </summary>
            <param name="dataBind">True to bind data; false, otherwise.</param>
            <param name="dataItem">The object to bind; null, if no databinding.</param>
            <param name="itemLevel">The <see cref="T:Jenzabar.Common.Web.UI.Controls.GroupedGridItemLevel">GroupedGridItemLevel</see> of the item in the tree of items being bound.</param>
            <param name="itemType">The System.Web.UI.WebControls.ListItemType of the item to bind (header, footer, item, or separator).</param>
            <param name="template">the template to use to initialize the right and left sides of the cell.</param>
            <returns></returns>
        </member>
        <member name="M:Jenzabar.Common.Web.UI.Controls.GroupedGrid.DoDataBindAndRaiseEvents(Jenzabar.Common.Web.UI.Controls.GroupedGridItem,System.Boolean,System.Object)">
            <summary>
            Performs data binding and raises events for item creation and binding.
            </summary>
            <param name="itm">The <see cref="T:Jenzabar.Common.Web.UI.Controls.GroupedGridItem">GroupedGridItem</see> to process.</param>
            <param name="dataBind">True to bind data; false, otherwise.</param>
            <param name="dataItem">The object to bind; null if no databinding.</param>
        </member>
        <member name="M:Jenzabar.Common.Web.UI.Controls.GroupedGrid.InitColumnBasedItem(Jenzabar.Common.Web.UI.Controls.GroupedGridItem,System.Boolean)">
            <summary>
            Populates cells for a row based on the columns in the grid.
            </summary>
            <param name="itm">The GroupedGridItem row in which the cells will be created.</param>
            <param name="makeTH">if true, a th cell is created; otherwise, a td is created.</param>
        </member>
        <member name="M:Jenzabar.Common.Web.UI.Controls.GroupedGrid.InitSingleCellItem(Jenzabar.Common.Web.UI.Controls.GroupedGridItem,System.Web.UI.WebControls.TableCell,System.Web.UI.ITemplate)">
            <summary>
            Creates a row that contains a single cell (th or td).
            </summary>
            <param name="itm">The <see cref="T:Jenzabar.Common.Web.UI.Controls.GroupedGridItem">GroupedGridItem</see> row in which to create the cell.</param>
            <param name="cell">The lone System.Web.UI.WebControls.TableCell of the grouped grid row</param>
            <param name="template">The System.Web.UI.ITemplate to be used for the contents of the cell.</param>
        </member>
        <member name="M:Jenzabar.Common.Web.UI.Controls.GroupedGrid.Render(System.Web.UI.HtmlTextWriter)">
            <summary>
            Renders this control.
            </summary>
            <param name="writer">The HtmlTextWriter that renders the control.</param>
        </member>
        <member name="M:Jenzabar.Common.Web.UI.Controls.GroupedGrid.SetGlobalImageColumnPath(System.String)">
            <summary>
            Sets the path for the source of a column image.
            </summary>
            <param name="path">A string containing the URL for the image.</param>
        </member>
        <member name="M:Jenzabar.Common.Web.UI.Controls.GroupedGrid.FindColumnTypeIndex(System.Type)">
            <summary>
            Finds a column by type.
            </summary>
            <param name="columnType">The System.Type of column to find.</param>
            <returns></returns>
        </member>
        <member name="P:Jenzabar.Common.Web.UI.Controls.GroupedGrid.CollapseSubItems">
            <summary>
            True to hide all the sub-items in this grid (if there are any).
            </summary>
        </member>
        <member name="P:Jenzabar.Common.Web.UI.Controls.GroupedGrid.SmallFonts">
            <summary>
            True to render this grid with smaller fonts.
            </summary>
        </member>
        <member name="P:Jenzabar.Common.Web.UI.Controls.GroupedGrid.GroupKeyField">
            <summary>
            Gets and sets the name of the field corresponding to the DataKey 
            for the items being displayed in the group.
            </summary>
            <example>Using the GroupKeyField property to store the ID of each object databound at the group level:
            <code>
            myGroupedGrid.GroupKeyField = "ID";
            </code>
            This forces the GroupedGrid to evaluate the contents of the ID property 
            on the object being bound and store the value in the viewstate 
            for the control. 
            This value is then accessible when the page is posted back and can be 
            read from the DataKeys collection as shown below.
            <code>
            // event handler for a save button click
            private void BookmarkGrid_ItemCommand(object source, System.Web.UI.WebControls.DataGridCommandEventArgs e)
            {
            	if( e.CommandName == "Delete" )
            	{
            		// retrieve the key for the object from the keys
            		object id = myGroupedGrid.DataKeys[e.ItemIndex];
            		
            		// use the id to retrieve the desired instance of the fictional MyDomainObject class (ignoring cast errors from casting to guid)
            		MyDomainObject myObj = MyDomainObject.FindById( (Guid) id );
            		
            		// delete the object and commit the changes
            		myObj.Delete();
            		myObj.Commit();
            	}
            }
            </code>
            </example>
        </member>
        <member name="P:Jenzabar.Common.Web.UI.Controls.GroupedGrid.EnableAutoConfirmation">
            <summary>
            Gets and sets whether a confirmation message should automatically appear 
            when the user clicks on a delete image.
            </summary>
        </member>
        <member name="P:Jenzabar.Common.Web.UI.Controls.GroupedGrid.Items">
            <summary>
            Gets the collection of items that are being displayed by this GroupedGrid. 
            This collection includes headers and footers for all levels of the data.
            </summary>
        </member>
        <member name="P:Jenzabar.Common.Web.UI.Controls.GroupedGrid.AllowChecking">
            <summary>
            True to render checkboxes so that the user can select rows.
            </summary>
        </member>
        <member name="P:Jenzabar.Common.Web.UI.Controls.GroupedGrid.GroupHeaderColumns">
            <summary>
            Gets a collection of columns to be added to the right side of the group headers.
            </summary>
        </member>
        <member name="P:Jenzabar.Common.Web.UI.Controls.GroupedGrid.TableHeaderTemplate">
            <summary>
            Gets and sets the template to be used for the header of the table.
            </summary>
        </member>
        <member name="P:Jenzabar.Common.Web.UI.Controls.GroupedGrid.TableFooterTemplate">
            <summary>
            Gets and sets the template to be used for the footer of the table.
            </summary>
        </member>
        <member name="P:Jenzabar.Common.Web.UI.Controls.GroupedGrid.GroupHeaderTemplate">
            <summary>
            Gets and sets the template to be used for the header of each group.
            </summary>
        </member>
        <member name="P:Jenzabar.Common.Web.UI.Controls.GroupedGrid.GroupFooterTemplate">
            <summary>
            Gets and sets the template to be used for the footer of each group.
            </summary>
        </member>
        <member name="P:Jenzabar.Common.Web.UI.Controls.GroupedGrid.SubGroupHeaderTemplate">
            <summary>
            Gets and sets the template to be used for the header of each sub-group within the main groups.
            </summary>
        </member>
        <member name="P:Jenzabar.Common.Web.UI.Controls.GroupedGrid.SubGroupFooterTemplate">
            <summary>
            Gets and sets the template to be used for the footer of each sub-group within the main groups.
            </summary>
        </member>
        <member name="P:Jenzabar.Common.Web.UI.Controls.GroupedGrid.SubItemTemplate">
            <summary>
            Gets and sets the template to be used to generate additional content 
            below each item in the grid.
            </summary>
        </member>
        <member name="P:Jenzabar.Common.Web.UI.Controls.GroupedGrid.EmptyTableTemplate">
            <summary>
            Gets and sets the template to be used for separating each of the grids.
            If this is null, nothing is inserted between the grids.
            </summary>
        </member>
        <member name="P:Jenzabar.Common.Web.UI.Controls.GroupedGrid.EmptyGroupTemplate">
            <summary>
            Gets and sets the template to be used for separating each of the groups.
            If this is null, nothing is inserted between the groups.
            </summary>
        </member>
        <member name="P:Jenzabar.Common.Web.UI.Controls.GroupedGrid.GroupSubHeaderTemplate">
            <summary>
            Gets and sets the template to be used for the sub-header of each GroupHeader.
            </summary>
        </member>
        <member name="P:Jenzabar.Common.Web.UI.Controls.GroupedGrid.HideTableHeadersWhenGridIsEmpty">
            <summary>
            Indicates whether headers for the table are hidden 
            when there is nothing in the DataSource.
            </summary>
        </member>
        <member name="P:Jenzabar.Common.Web.UI.Controls.GroupedGrid.HideTableFootersWhenGridIsEmpty">
            <summary>
            Indicates whether footers for the table are hidden 
            when there is nothing in the DataSource.
            </summary>
        </member>
        <member name="P:Jenzabar.Common.Web.UI.Controls.GroupedGrid.RenderTableHeaders">
            <summary>
            True to render column headers at the top of the table.
            </summary>
        </member>
        <member name="P:Jenzabar.Common.Web.UI.Controls.GroupedGrid.RenderGroupHeaders">
            <summary>
            True to render column headers at the top of each main group.
            </summary>
        </member>
        <member name="P:Jenzabar.Common.Web.UI.Controls.GroupedGrid.RenderGroupFooters">
            <summary>
            True to render column footers at the bottom of each main group.
            </summary>
        </member>
        <member name="P:Jenzabar.Common.Web.UI.Controls.GroupedGrid.RenderTableFooters">
            <summary>
            True to render column footers at the bottom of the table.
            </summary>
        </member>
        <member name="P:Jenzabar.Common.Web.UI.Controls.GroupedGrid.HeaderRightColumns">
            <summary>
            Gets the collection of header right columns.
            </summary>
        </member>
        <member name="T:Jenzabar.Common.Web.UI.Controls.GroupedGridTableCell">
            <summary>
            A table cell that lowers the weight of the HTML by not rendering the ID attribute.
            </summary>
        </member>
        <member name="M:Jenzabar.Common.Web.UI.Controls.GroupedGridTableCell.AddAttributesToRender(System.Web.UI.HtmlTextWriter)">
            <summary>
            Adds all of the attributes to render for the control, specifically ignoring the id attribute. 
            Not rendering the id attribute should decrease the size of the pages a bit.
            </summary>
            <param name="writer">The HtmlTextWriter that renders the control.</param>
        </member>
        <member name="P:Jenzabar.Common.Web.UI.Controls.GroupedGridTableCell.TagKey">
            <summary>
            Gets the HTML tag used for this cell (td or th).
            </summary>
        </member>
        <member name="P:Jenzabar.Common.Web.UI.Controls.GroupedGridTableCell.TagName">
            <summary>
            Gets the name of the tag that will be rendered for this cell.
            </summary>
        </member>
        <member name="T:Jenzabar.Common.Collections.IGrouping">
            <summary>
            Provides functions that can be used to access a collection of items and the object that they are being grouped by.
            </summary>
        </member>
        <member name="P:Jenzabar.Common.Collections.IGrouping.GroupedBy">
            <summary>
            Gets the object that the child items have in common, and are being grouped by.
            </summary>
        </member>
        <member name="T:Jenzabar.Common.Web.UI.Controls.LeftAndRightAlignTableCell">
            <summary>
            A table cell that contains left and right container spans.
            This control extends the <see cref="T:Jenzabar.Common.Web.UI.Controls.GroupedGridTableCell">GroupedGridTableCell</see>.
            </summary>
        </member>
        <member name="T:Jenzabar.Common.Web.UI.Controls.GridSectionType">
            <summary>
            Defines the sections that can exist in a grouped grid (Header, Body, Footer, Separator).
            </summary>
        </member>
        <member name="F:Jenzabar.Common.Web.UI.Controls.GridSectionType.Header">
            <summary>
            A thead section.
            </summary>
        </member>
        <member name="F:Jenzabar.Common.Web.UI.Controls.GridSectionType.Body">
            <summary>
            A tbody section. 
            </summary>
        </member>
        <member name="F:Jenzabar.Common.Web.UI.Controls.GridSectionType.Footer">
            <summary>
            A tfoot section.
            </summary>
        </member>
        <member name="F:Jenzabar.Common.Web.UI.Controls.GridSectionType.Separator">
            <summary>
            A separator section.
            </summary>
        </member>
        <member name="T:Jenzabar.Common.Web.UI.Controls.GroupedGridSection">
            <summary>
            The grouped grid sections that are of <see cref="T:Jenzabar.Common.Web.UI.Controls.GridSectionType">GridSectionType</see>.
            </summary>
        </member>
        <member name="M:Jenzabar.Common.Web.UI.Controls.GroupedGridSection.#ctor(Jenzabar.Common.Web.UI.Controls.GridSectionType,System.String)">
            <summary>
            Creates a new instance of a GroupedGridSection.
            </summary>
            <param name="sectionType">The <see class="GridSectionType">GridSectionType</see> to create.</param>
            <param name="className">The name of the CSS class or classes separated by a space to use for this section of the grouped grid.</param>
        </member>
        <member name="P:Jenzabar.Common.Web.UI.Controls.GroupedGridSection.SectionType">
            <summary>
            Gets the <see cref="T:Jenzabar.Common.Web.UI.Controls.GridSectionType">GridSectionType</see> of grid section that this control renders.
            </summary>
        </member>
        <member name="P:Jenzabar.Common.Web.UI.Controls.GroupedGridSection.ClassName">
            <summary>
            Gets and sets the CSS class for rendering the section.
            </summary>
        </member>
        <member name="P:Jenzabar.Common.Web.UI.Controls.GroupedGridSection.Rows">
            <summary>
            Gets the <see cref="T:System.Web.UI.WebControls.DataGridItemCollection">DataGridItemCollection</see> of rows in this section.
            </summary>
        </member>
        <member name="T:Jenzabar.Common.Web.UI.Controls.HeaderItemType">
            <summary>
            The type of header.
            </summary>
        </member>
        <member name="F:Jenzabar.Common.Web.UI.Controls.HeaderItemType.Header">
            <summary>
            The highest level of items in the group.
            </summary>
        </member>
        <member name="F:Jenzabar.Common.Web.UI.Controls.HeaderItemType.SubHeader">
            <summary>
            The second level of items in the group.
            </summary>
        </member>
        <member name="T:Jenzabar.Common.Web.UI.Controls.GroupedGridItem">
            <summary>
             An item (row) in a System.Web.UI.WebControls.DataGrid control.  
            </summary>
        </member>
        <member name="M:Jenzabar.Common.Web.UI.Controls.GroupedGridItem.GetCheckbox">
            <summary>
            Finds a checkbox in the row. 
            The checkbox can be defined by the developer in a separate template, 
            so you can not find it by name.
            </summary>
            <returns>The first System.Web.UI.WebControls.CheckBox control in this row, or null if there are no checkboxes in this row.</returns>
        </member>
        <member name="M:Jenzabar.Common.Web.UI.Controls.GroupedGridItem.GetControl(System.String)">
            <summary>
            Finds and returns the first control with the given ID.
            </summary>
            <param name="ctlID">A string ID for the control.</param>
            <returns>A System.Web.UI.Control or null.</returns>
        </member>
        <member name="M:Jenzabar.Common.Web.UI.Controls.GroupedGridItem.AddAttributesToRender(System.Web.UI.HtmlTextWriter)">
            <summary>
            Prevents the ID attribute from being rendered, 
            saving a small anmount of bandwidth.
            </summary>
            <param name="writer">The HtmlTextWriter that renders the control.</param>
        </member>
        <member name="P:Jenzabar.Common.Web.UI.Controls.GroupedGridItem.Checked">
            <summary>
            True if the row has a checkbox and is checked; false, otherwise.
            </summary>
        </member>
        <member name="P:Jenzabar.Common.Web.UI.Controls.GroupedGridItem.Highlighted">
            <summary>
            Gets and sets whether to highlight the row.
            </summary>
        </member>
        <member name="P:Jenzabar.Common.Web.UI.Controls.GroupedGridItem.ItemDisabled">
            <summary>
            Gets and sets whether to grey out the row.
            </summary>
        </member>
        <member name="P:Jenzabar.Common.Web.UI.Controls.GroupedGridItem.Owner">
            <summary>
            Gets the GroupedGrid that this row is a member of.
            </summary>
        </member>
        <member name="T:Jenzabar.Common.Web.UI.Controls.GroupedGridItemLevel">
            <summary>
            The level of the item displayed in the grouped grid. 
            (Table=0, Group=1, SubGroup=2, Item=3, SubItem=4, GroupSubHeader=5)
            </summary>
        </member>
        <member name="T:Jenzabar.Common.Web.UI.Controls.GroupedGridItemType">
            <summary>
            The type of item in the grouped grid (Header, Footer, Item, Spacer).
            </summary>
        </member>
        <member name="T:Jenzabar.Common.Web.UI.Controls.GroupedGridCell">
            <summary>
            A cell in a System.Web.UI.WebControls.Table control.
            A cell is effectively a column in a grid row.
            </summary>
        </member>
        <member name="T:Jenzabar.Common.Web.UI.Controls.GroupedGridColumn">
            <summary>
            The base class for all columns that are displayed in the headers and footers 
            of groups, tables, and sub-groups.
            This class supports view state management.
            </summary>
        </member>
        <member name="M:Jenzabar.Common.Web.UI.Controls.GroupedGridColumn.#ctor">
            <summary>
            Creates a new instance of a GroupedGridColumn.
            </summary>
        </member>
        <member name="M:Jenzabar.Common.Web.UI.Controls.GroupedGridColumn.InitializeSection(Jenzabar.Common.Web.UI.Controls.GroupedGridCell,Jenzabar.Common.Web.UI.Controls.GroupedGridItemLevel,Jenzabar.Common.Web.UI.Controls.GroupedGridItemType)">
            <summary>
            Creates any controls needed to display content in a grid section.
            </summary>
            <param name="section">The <see cref="T:Jenzabar.Common.Web.UI.Controls.GroupedGridCell">GroupedGridCell</see> or column of the row that will be populated with content.</param>
            <param name="itemLevel">The <see cref="T:Jenzabar.Common.Web.UI.Controls.GroupedGridItemLevel">GroupedGridItemLevel</see> of the item in the grouping.</param>
            <param name="itemType">The <see cref="T:Jenzabar.Common.Web.UI.Controls.GroupedGridItemType">GroupedGridItemType</see> of the item in the grouping.</param>
        </member>
        <member name="M:Jenzabar.Common.Web.UI.Controls.GroupedGridColumn.TrackViewState">
            <summary>
            Tells the control to start tracking view state.
            </summary>
        </member>
        <member name="M:Jenzabar.Common.Web.UI.Controls.GroupedGridColumn.SaveViewState">
            <summary>
            Returns the view state of this column as an object.
            </summary>
            <returns>The viewstate object for this column</returns>
            <remarks>This method is called by the ASP.NET runtime to persist information about the column between page views.</remarks>
        </member>
        <member name="M:Jenzabar.Common.Web.UI.Controls.GroupedGridColumn.LoadViewState(System.Object)">
            <summary>
            Restores the view state of this column.
            </summary>
            <param name="state">The persisted view state information that this control created in the call to the SaveViewState method.</param>
            <remarks>This method is alled by the ASP.NET runtime to load information about the column.</remarks>
        </member>
        <member name="P:Jenzabar.Common.Web.UI.Controls.GroupedGridColumn.SeparatorAfter">
            <summary>
            Whether to display a separator (usually a white line) after this cell in the header or footer.
            </summary>
        </member>
        <member name="P:Jenzabar.Common.Web.UI.Controls.GroupedGridColumn.SeparatorBefore">
            <summary>
            Whether to display a separator (usually a white line) before this cell in the header.
            </summary>
        </member>
        <member name="P:Jenzabar.Common.Web.UI.Controls.GroupedGridColumn.TableHeaderText">
            <summary>
            Gets and sets the text that will be displayed at the table header level.
            </summary>
        </member>
        <member name="P:Jenzabar.Common.Web.UI.Controls.GroupedGridColumn.GroupHeaderText">
            <summary>
            Gets and sets the text that will be displayed at the group header level.
            </summary>
        </member>
        <member name="P:Jenzabar.Common.Web.UI.Controls.GroupedGridColumn.SubGroupHeaderText">
            <summary>
            Gets and sets the text that will be displayed at the sub-group header level.
            </summary>
        </member>
        <member name="P:Jenzabar.Common.Web.UI.Controls.GroupedGridColumn.TableFooterText">
            <summary>
            Gets and sets the text that will be displayed at the table footer level.
            </summary>
        </member>
        <member name="P:Jenzabar.Common.Web.UI.Controls.GroupedGridColumn.GroupFooterText">
            <summary>
            Gets and sets the text that will be displayed at the group footer level.
            </summary>
        </member>
        <member name="P:Jenzabar.Common.Web.UI.Controls.GroupedGridColumn.SubGroupFooterText">
            <summary>
            Gets and sets the text that will be displayed at the sub-group footer level.
            </summary>
        </member>
        <member name="P:Jenzabar.Common.Web.UI.Controls.GroupedGridColumn.ViewState">
            <summary>
            Gets the view state for this control.
            Used to set and retrieve information related to the display of this control.
            </summary>
        </member>
        <member name="P:Jenzabar.Common.Web.UI.Controls.GroupedGridColumn.IsTrackingViewState">
            <summary>
            Whether the control is tracking view state.
            </summary>
        </member>
        <member name="T:Jenzabar.Common.Web.UI.Controls.ExpandCollapseGroupedGridColumn">
            <summary>
            A column for use in the group level header of the GroupedGrid 
            that provides expand and collapse functionality to groups of items via a button.
            </summary>
        </member>
        <member name="M:Jenzabar.Common.Web.UI.Controls.ExpandCollapseGroupedGridColumn.InitializeSection(Jenzabar.Common.Web.UI.Controls.GroupedGridCell,Jenzabar.Common.Web.UI.Controls.GroupedGridItemLevel,Jenzabar.Common.Web.UI.Controls.GroupedGridItemType)">
            <summary>
            Sets up a section to expand and collapse content.
            </summary>
            <param name="section">A <see cref="T:Jenzabar.Common.Web.UI.Controls.GroupedGridCell">GroupedGridCell</see>.</param>
            <param name="itemLevel">A <see cref="T:Jenzabar.Common.Web.UI.Controls.GroupedGridItemLevel">GroupedGridItemLevel</see></param>
            <param name="itemType">A <see cref="T:Jenzabar.Common.Web.UI.Controls.GroupedGridItemType">GroupedGridItemType</see></param>
        </member>
        <member name="T:Jenzabar.Common.Web.UI.Controls.GroupedGridColumnCollection">
            <summary>
            A collection of columns used for the header and footer at the Group and SubGroup levels.
            </summary>
        </member>
        <member name="M:Jenzabar.Common.Web.UI.Controls.GroupedGridColumnCollection.#ctor">
            <summary>
            Creates a new instance of GroupedGridColumnCollection.
            </summary>
        </member>
        <member name="M:Jenzabar.Common.Web.UI.Controls.GroupedGridColumnCollection.Add(Jenzabar.Common.Web.UI.Controls.GroupedGridColumn)">
            <summary>
            Adds a column to the collection of columns.
            </summary>
            <param name="column">The <see cref="T:Jenzabar.Common.Web.UI.Controls.GroupedGridColumn">GroupedGridColumn</see> to add to the columns.</param>
            <returns>The integer index of the column that was added.</returns>
        </member>
        <member name="M:Jenzabar.Common.Web.UI.Controls.GroupedGridColumnCollection.AddAt(System.Int32,Jenzabar.Common.Web.UI.Controls.GroupedGridColumn)">
            <summary>
            Adds a column to the collection of columns at the specified index.
            </summary>
            <param name="index">The zero-based index at which to insert the column in the collection. </param>
            <param name="column">The <see cref="T:Jenzabar.Common.Web.UI.Controls.GroupedGridColumn">GroupedGridColumn</see> to add to the columns.</param>
        </member>
        <member name="T:Jenzabar.Common.Web.UI.Controls.GroupedGridImageButtonColumn">
            <summary>
            A <see cref="!:GoupdGridColumn">GroupedGridColumn</see> that provides the user 
            with an image that executes server-side when clicked.
            </summary>
        </member>
        <member name="M:Jenzabar.Common.Web.UI.Controls.GroupedGridImageButtonColumn.InitializeSection(Jenzabar.Common.Web.UI.Controls.GroupedGridCell,Jenzabar.Common.Web.UI.Controls.GroupedGridItemLevel,Jenzabar.Common.Web.UI.Controls.GroupedGridItemType)">
            <summary>
            Sets up the section to allow the user to click on an image to execute code on the server.
            </summary>
            <param name="section">The <see cref="T:Jenzabar.Common.Web.UI.Controls.GroupedGridCell">GroupedGridCell</see> section where the controls reside.</param>
            <param name="itemLevel">The <see cref="T:Jenzabar.Common.Web.UI.Controls.GroupedGridItemLevel">GroupedGridItemLevel</see> of item (table, group, sub-group, item).</param>
            <param name="itemType">The <see cref="T:Jenzabar.Common.Web.UI.Controls.GroupedGridItemType">GroupedGridItemType</see> of item that this is being created for (header, footer, etc.).</param>
        </member>
        <member name="P:Jenzabar.Common.Web.UI.Controls.GroupedGridImageButtonColumn.ImageUrl">
            <summary>
            Gets and sets the URL to be used for the src of the image.
            </summary>
        </member>
        <member name="P:Jenzabar.Common.Web.UI.Controls.GroupedGridImageButtonColumn.AlternateText">
            <summary>
            Gets and sets the string of text to be used for the alt text of the image.
            </summary>
        </member>
        <member name="P:Jenzabar.Common.Web.UI.Controls.GroupedGridImageButtonColumn.CommandName">
            <summary>
            Gets and sets the name of the command that will be triggered on the server side when the image is clicked.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Common.Instrumentation.ProjectInstallerBase">
            <summary>
            <para>This type supports the Instrumentation infrastructure and is not intended to be used directly from your code.</para>
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Instrumentation.ProjectInstallerBase.#ctor(System.String,System.String,System.String,System.Diagnostics.CounterCreationData[])">
            <summary/>
            <param name="eventSource"/>
            <param name="counterCategory"/>
            <param name="counterCategoryHelp"/>
            <param name="counterData"/>
            <exclude/>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Instrumentation.ProjectInstallerBase.Install(System.Collections.IDictionary)">
            <summary/>
            <param name="stateSaver"/>
            <exclude/>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Instrumentation.ProjectInstallerBase.Uninstall(System.Collections.IDictionary)">
            <summary/>
            <param name="savedState"/>
            <exclude/>
        </member>
        <member name="T:Jenzabar.Common.Web.UI.Controls.FormLabel">
            <summary>
            This control provides semantic labeling of form elements 
            such as input controls, textareas, and select elements. 
            When the user clicks on the label, focus transfers to the control 
            being labeled (defined in the ForControl property).
            </summary>
            <remarks>
            The FormLabel control renders a "label" html element. 
            This element works in all browsers to set focus on the html form element that 
            has an id that matches the value of the label's "for" attribute. 
            Use this element instead of ASP.NET's label element 
            in forms where you are labeling input boxes, drop down lists, 
            list boxes, and similar elements.
            <para>This control extends .NET's System.Web.UI.WebControls.WebControl.</para>
            </remarks>
        </member>
        <member name="F:Jenzabar.Common.Web.UI.Controls.FormLabel._forCtrl">
            <summary>
            Inner storage for the id of the control that this label is "for"
            </summary>
        </member>
        <member name="F:Jenzabar.Common.Web.UI.Controls.FormLabel._txt">
            <summary>
            Inner storage for the text to be displayed for this label
            </summary>
        </member>
        <member name="M:Jenzabar.Common.Web.UI.Controls.FormLabel.#ctor">
            <summary>
            Creates a new instance of the FormLabel control.
            </summary>
        </member>
        <member name="M:Jenzabar.Common.Web.UI.Controls.FormLabel.SaveViewState">
            <summary>
            Saves the view state for this control.
            </summary>
            <returns>A System.Web.UI.Triplet that describes the saved view state.  
            Three objects, (the Text, the control id, and the base class's viewstate), can be add.</returns>
        </member>
        <member name="M:Jenzabar.Common.Web.UI.Controls.FormLabel.LoadViewState(System.Object)">
            <summary>
            Loads the saved view state
            </summary>
            <param name="savedState"></param>
        </member>
        <member name="M:Jenzabar.Common.Web.UI.Controls.FormLabel.AddAttributesToRender(System.Web.UI.HtmlTextWriter)">
            <summary>
            Adds the "for" attribute only to the renderer, 
            if this control is being used to pass focus to a form element.
            </summary>
            <param name="writer">The HtmlTextWriter that renders the control.</param>
        </member>
        <member name="M:Jenzabar.Common.Web.UI.Controls.FormLabel.RenderContents(System.Web.UI.HtmlTextWriter)">
            <summary>
            Renders child controls, if any, for this control.
            Otherwise it renders the value of the Text property.
            </summary>
            <param name="writer">The HtmlTextWriter that renders the control.</param>
        </member>
        <member name="P:Jenzabar.Common.Web.UI.Controls.FormLabel.Text">
            <summary>
            Gets and sets the text for this label.
            </summary>
        </member>
        <member name="P:Jenzabar.Common.Web.UI.Controls.FormLabel.ForControl">
            <summary>
            Gets and sets the id of the control for which this FormLabel exists.
            </summary>
        </member>
        <member name="P:Jenzabar.Common.Web.UI.Controls.FormLabel.TextKey">
            <summary>
            Gets and sets the key for retrieving the globalized text string to use as the text for this control.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Common.Cryptography.DpapiCryptographer">
            <summary>
            <para>Represents a managed wrapper over the DPAPI win32 apis.</para>
            </summary>
            <remarks>
            This is a DPAPI wrapper.  It is heavily based on the reference application on the Microsoft whitepaper at:
            http://msdn.microsoft.com/library/default.asp?url=/library/en-us/dnnetsec/html/SecNetHT07.asp?frame=true
            There have been some improvements, notably in the stricter cleanup of unmanaged global handles in Finally blocks.
            </remarks>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Cryptography.DpapiCryptographer.#ctor">
            <summary>
            <para>Initializes a new instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Cryptography.DpapiCryptographer"/> class with the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Cryptography.DpapiStorageMode"/> set to <see cref="F:Microsoft.Practices.EnterpriseLibrary.Common.Cryptography.DpapiStorageMode.Machine"/>.</para>
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Cryptography.DpapiCryptographer.#ctor(Microsoft.Practices.EnterpriseLibrary.Common.Cryptography.DpapiStorageMode)">
            <summary>
            <para>Initializes a new instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Cryptography.DpapiCryptographer"/> class with a <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Cryptography.DpapiStorageMode"/>.</para>
            </summary>
            <param name="storageMode"><para>One of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Cryptography.DpapiStorageMode"/> values.</para></param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Cryptography.DpapiCryptographer.Encrypt(System.Byte[])">
            <summary>
            <para>
            Encrypt given data; this overload can be used ONLY when storage mode is "User", since when storage mode 
            is "Machine" we MUST have optional entropy to "salt" the phrase.
            This will throw an Invalid Operation Exception if used in Machine mode.
            </para>
            </summary>
            <param name="plaintext"><para>The plain text that will be encrypted.</para></param>
            <returns><para>The resulting cipher text.</para></returns>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Cryptography.DpapiCryptographer.Decrypt(System.Byte[])">
            <summary>
            <para>
            Decrypts the given ciphertext.  Can be used only when in "User" mode, otherwise this will throw 
            an InvalidOperationException because entropy is required when using Machine mode.
            </para>
            </summary>
            <param name="cipherText">
            <para>The cipher text that will be decrypted.</para>
            </param>
            <returns>
            <para>The resulting plain text.</para>
            </returns>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Cryptography.DpapiCryptographer.Encrypt(System.Byte[],System.Byte[])">
            <summary>
            <para>
            Encrypt given data; this overload should be used when storage mode is "Machine", since when storage mode 
            is "Machine" you must define entropy to "salt" the phrase.
            </para>
            </summary>
            <param name="plaintext"><para>The plain text that will be encrypted.</para></param>
            <param name="entropy"><para>The entropy to salt the phrase.</para></param>
            <returns><para>The resulting cipher text.</para></returns>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Cryptography.DpapiCryptographer.Decrypt(System.Byte[],System.Byte[])">
            <summary>
            <para>Decrypt the given data.</para>
            </summary>
            <param name="cipherText"><para>The cipher text that will be decrypted.</para></param>
            <param name="entropy"><para>The entropy that was used to salt the phrase.</para></param>
            <returns><para>The resulting plain text.</para></returns>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Cryptography.DpapiCryptographer.StorageMode">
            <summary>
            <para>Gets the storage mode for this instance.</para>
            </summary>
            <value>One of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Cryptography.DpapiStorageMode"/> values.</value>
        </member>
        <member name="T:Jenzabar.Common.Web.UI.Controls.Subheader">
            <summary>
            Portlet subheader that can be configured to collapse, edit, or delete content content below it.
            </summary>
        </member>
        <member name="M:Jenzabar.Common.Web.UI.Controls.Subheader.OnItemCommand(System.Web.UI.WebControls.CommandEventArgs)">
            <summary>
            Raises the <see cref="E:Jenzabar.Common.Web.UI.Controls.Subheader.ItemCommand">ItemCommand</see> event.
            </summary>
            <param name="args">The System.Web.UI.WebControls.CommandEventArgs for the ItemCommand event.</param>
        </member>
        <member name="M:Jenzabar.Common.Web.UI.Controls.Subheader.RenderBeginTag(System.Web.UI.HtmlTextWriter)">
            <summary>
            Renders the HTML subheader (H4) begin tag.
            </summary>
            <param name="writer">An HtmlTextWriter that renders the control.</param>
        </member>
        <member name="M:Jenzabar.Common.Web.UI.Controls.Subheader.RenderEndTag(System.Web.UI.HtmlTextWriter)">
            <summary>
            Renders the HTML subheader (H4) end tag.
            </summary>
            <param name="writer">An HtmlTextWriter that renders the control.</param>
        </member>
        <member name="M:Jenzabar.Common.Web.UI.Controls.Subheader.System#Web#UI#IPostBackEventHandler#RaisePostBackEvent(System.String)">
            <summary>
            Handles the call from the .NET runtime to raise an event.
            </summary>
            <param name="eventArgument">The command name that was given to this control. This is stored in the second parameter of the __doPostBack() javascript call.</param>
        </member>
        <member name="P:Jenzabar.Common.Web.UI.Controls.Subheader.Text">
            <summary>
            The text to be displayed for the header.
            </summary>
        </member>
        <member name="P:Jenzabar.Common.Web.UI.Controls.Subheader.TextKey">
            <summary>
            Gets and sets the key to use to look up the globalized text for this control.
            </summary>
        </member>
        <member name="P:Jenzabar.Common.Web.UI.Controls.Subheader.CanCollapse">
            <summary>
            Gets and sets whether to render this header's contents to be collapsible. 
            If true, all the content between this header and the end of the portlet or the next header is collapsible.
            </summary>
        </member>
        <member name="P:Jenzabar.Common.Web.UI.Controls.Subheader.CanEdit">
            <summary>
            Gets and sets whether to render this header with an Edit Button that will post back.
            </summary>
        </member>
        <member name="P:Jenzabar.Common.Web.UI.Controls.Subheader.CanDelete">
            <summary>
            Gets and sets whether to render this header with a Delete Button that will post back.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Configuration.ConfigurationDictionary">
            <summary>
            <para>Represents a strongly-typed dictionary of section name and configuration data entries.</para>
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Configuration.ConfigurationDictionary.#ctor">
            <summary>
            <para>Initializes a new instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Configuration.ConfigurationDictionary"/> class.</para>
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Configuration.ConfigurationDictionary.Add(System.String,System.Object)">
            <summary>
            <para>Adds the specified configuration data for the specified configuration section name.</para>
            </summary>
            <param name="sectionName"><para>The name of a configuration section.</para></param>
            <param name="configurationData"><para>A configuration data object.</para></param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Configuration.ConfigurationDictionary.Contains(System.String)">
            <summary>
            <para>determines whether the section already exists..</para>
            </summary>
            <param name="sectionName"><para>The configuration section to locate.</para></param>
            <returns><para><see langword="true"/> if the element with the key exists; otherwise, <see langword="false"/>.</para></returns>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Configuration.ConfigurationDictionary.Remove(System.String)">
            <summary>
            <para>Removes the configuration data from the dictionary forthe specified configuration section.</para>
            </summary>
            <param name="sectionName"><para>The configuration section name to remove.</para></param>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Configuration.ConfigurationDictionary.Keys">
            <summary>
            <para>Gets an <see cref="T:System.Collections.ICollection"/> containing the configuraiton section names.</para>
            </summary>
            <value>
            <para>An <see cref="T:System.Collections.ICollection"/> containing the configuraiton section names.</para>
            </value>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Configuration.ConfigurationDictionary.Values">
            <summary>
            <para>Gets an <see cref="T:System.Collections.ICollection"/> containing the configuration section values.</para>
            </summary>
            <value>
            <para>An <see cref="T:System.Collections.ICollection"/> containing the configuration section values.</para>
            </value>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Configuration.ConfigurationDictionary.Item(System.String)">
            <summary>
            <para>Gets or sets the configuration data for the specified configuration section name.</para>
            </summary>
            <param name="sectionName">
            <para>The name of the configuration section.</para>
            </param>
            <value>
            <para>The configuration data for the specified configuration section name.</para>
            </value>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Configuration.NullTransformer">
            <devdoc>
            Represents a null transformer object. Introduces the null object pattern since transformers are not required.
            </devdoc>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Configuration.NullTransformer.Initialize(Microsoft.Practices.EnterpriseLibrary.Configuration.ConfigurationView)">
            <devdoc>
            This method does nothing by default.
            </devdoc>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Configuration.NullTransformer.Deserialize(System.Object)">
            <devdoc>
            This method does nothing by default.
            </devdoc>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Configuration.NullTransformer.Serialize(System.Object)">
            <devdoc>
            This method does nothing by default.
            </devdoc>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Common.Cryptography.DpapiStorageMode">
            <summary>
            <para>Specifies the key store used by DPAPI.</para>
            </summary>
        </member>
        <member name="F:Microsoft.Practices.EnterpriseLibrary.Common.Cryptography.DpapiStorageMode.None">
            <summary>
            No storage mode specified. Should never happen or be used
            </summary>
        </member>
        <member name="F:Microsoft.Practices.EnterpriseLibrary.Common.Cryptography.DpapiStorageMode.Machine">
            <summary>
            <para>Store the key  using the machine account.</para>
            </summary>
        </member>
        <member name="F:Microsoft.Practices.EnterpriseLibrary.Common.Cryptography.DpapiStorageMode.User">
            <summary>
            <para>No storage selected. This value represents that we are not using DPAPI.</para>
            </summary>
        </member>
        <member name="T:Jenzabar.Common.ApplicationBlocks.ExceptionManagement.CustomPublisherException">
            <summary>
            Summary description for ExceptionManagerExceptions.
            </summary>
        </member>
        <member name="T:Jenzabar.Common.ApplicationBlocks.ExceptionManagement.BaseApplicationException">
            <summary>
            Base Application Exception Class. You can use this as the base exception object from
            which to derive your applications exception hierarchy.
            </summary>
        </member>
        <member name="M:Jenzabar.Common.ApplicationBlocks.ExceptionManagement.BaseApplicationException.#ctor">
            <summary>
            Constructor with no params.
            </summary>
        </member>
        <member name="M:Jenzabar.Common.ApplicationBlocks.ExceptionManagement.BaseApplicationException.#ctor(System.String)">
            <summary>
            Constructor allowing the Message property to be set.
            </summary>
            <param name="message">String setting the message of the exception.</param>
        </member>
        <member name="M:Jenzabar.Common.ApplicationBlocks.ExceptionManagement.BaseApplicationException.#ctor(System.String,System.Exception)">
            <summary>
            Constructor allowing the Message and InnerException property to be set.
            </summary>
            <param name="message">String setting the message of the exception.</param>
            <param name="inner">Sets a reference to the InnerException.</param>
        </member>
        <member name="M:Jenzabar.Common.ApplicationBlocks.ExceptionManagement.BaseApplicationException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructor used for deserialization of the exception class.
            </summary>
            <param name="info">Represents the SerializationInfo of the exception.</param>
            <param name="context">Represents the context information of the exception.</param>
        </member>
        <member name="M:Jenzabar.Common.ApplicationBlocks.ExceptionManagement.BaseApplicationException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Override the GetObjectData method to serialize custom values.
            </summary>
            <param name="info">Represents the SerializationInfo of the exception.</param>
            <param name="context">Represents the context information of the exception.</param>
        </member>
        <member name="M:Jenzabar.Common.ApplicationBlocks.ExceptionManagement.BaseApplicationException.InitializeEnvironmentInformation">
            <summary>
            Initialization function that gathers environment information safely.
            </summary>
        </member>
        <member name="P:Jenzabar.Common.ApplicationBlocks.ExceptionManagement.BaseApplicationException.MachineName">
            <summary>
            Machine name where the exception occurred.
            </summary>
        </member>
        <member name="P:Jenzabar.Common.ApplicationBlocks.ExceptionManagement.BaseApplicationException.CreatedDateTime">
            <summary>
            Date and Time the exception was created.
            </summary>
        </member>
        <member name="P:Jenzabar.Common.ApplicationBlocks.ExceptionManagement.BaseApplicationException.AppDomainName">
            <summary>
            AppDomain name where the exception occurred.
            </summary>
        </member>
        <member name="P:Jenzabar.Common.ApplicationBlocks.ExceptionManagement.BaseApplicationException.ThreadIdentityName">
            <summary>
            Identity of the executing thread on which the exception was created.
            </summary>
        </member>
        <member name="P:Jenzabar.Common.ApplicationBlocks.ExceptionManagement.BaseApplicationException.WindowsIdentityName">
            <summary>
            Windows identity under which the code was running.
            </summary>
        </member>
        <member name="P:Jenzabar.Common.ApplicationBlocks.ExceptionManagement.BaseApplicationException.AdditionalInformation">
            <summary>
            Collection allowing additional information to be added to the exception.
            </summary>
        </member>
        <member name="M:Jenzabar.Common.ApplicationBlocks.ExceptionManagement.CustomPublisherException.#ctor">
            <summary>
            Constructor with no params.
            </summary>
        </member>
        <member name="M:Jenzabar.Common.ApplicationBlocks.ExceptionManagement.CustomPublisherException.#ctor(System.String)">
            <summary>
            Constructor allowing the Message property to be set.
            </summary>
            <param name="message">String setting the message of the exception.</param>
        </member>
        <member name="M:Jenzabar.Common.ApplicationBlocks.ExceptionManagement.CustomPublisherException.#ctor(System.String,System.Exception)">
            <summary>
            Constructor allowing the Message and InnerException property to be set.
            </summary>
            <param name="message">String setting the message of the exception.</param>
            <param name="inner">Sets a reference to the InnerException.</param>
        </member>
        <member name="M:Jenzabar.Common.ApplicationBlocks.ExceptionManagement.CustomPublisherException.#ctor(System.String,System.String,System.String,Jenzabar.Common.ApplicationBlocks.ExceptionManagement.PublisherFormat)">
            <summary>
            Constructor allowing the message, assembly name, type name, and publisher format to be set.
            </summary>
            <param name="message">String setting the message of the exception.</param>
            <param name="assemblyName">String setting the assembly name of the exception.</param>
            <param name="typeName">String setting the type name of the exception.</param>
            <param name="publisherFormat">String setting the publisher format of the exception.</param>
        </member>
        <member name="M:Jenzabar.Common.ApplicationBlocks.ExceptionManagement.CustomPublisherException.#ctor(System.String,System.String,System.String,Jenzabar.Common.ApplicationBlocks.ExceptionManagement.PublisherFormat,System.Exception)">
            <summary>
            Constructor allowing the Message and InnerException property to be set.
            </summary>
            <param name="message">String setting the message of the exception.</param>
            <param name="assemblyName">String setting the assembly name of the exception.</param>
            <param name="typeName">String setting the type name of the exception.</param>
            <param name="publisherFormat">String setting the publisher format of the exception.</param>
            <param name="inner">Sets a reference to the InnerException.</param>
        </member>
        <member name="M:Jenzabar.Common.ApplicationBlocks.ExceptionManagement.CustomPublisherException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructor used for deserialization of the exception class.
            </summary>
            <param name="info">Represents the SerializationInfo of the exception.</param>
            <param name="context">Represents the context information of the exception.</param>
        </member>
        <member name="M:Jenzabar.Common.ApplicationBlocks.ExceptionManagement.CustomPublisherException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Override the GetObjectData method to serialize custom values.
            </summary>
            <param name="info">Represents the SerializationInfo of the exception.</param>
            <param name="context">Represents the context information of the exception.</param>
        </member>
        <member name="P:Jenzabar.Common.ApplicationBlocks.ExceptionManagement.CustomPublisherException.PublisherFormat">
            <summary>
            The exception format configured for the publisher that threw an exception.
            </summary>
        </member>
        <member name="P:Jenzabar.Common.ApplicationBlocks.ExceptionManagement.CustomPublisherException.PublisherAssemblyName">
            <summary>
            The Assembly name of the publisher that threw an exception.
            </summary>
        </member>
        <member name="P:Jenzabar.Common.ApplicationBlocks.ExceptionManagement.CustomPublisherException.PublisherTypeName">
            <summary>
            The Type name of the publisher that threw an exception.
            </summary>
        </member>
        <member name="T:Jenzabar.Common.ApplicationBlocks.ExceptionManagement.ExceptionManagerInstaller">
            <summary>
            Installer class used to create two event sources for the 
            Exception Management Application Block to function correctly.
            </summary>
        </member>
        <member name="M:Jenzabar.Common.ApplicationBlocks.ExceptionManagement.ExceptionManagerInstaller.#ctor">
            <summary>
            Constructor with no params.
            </summary>
        </member>
        <member name="M:Jenzabar.Common.ApplicationBlocks.ExceptionManagement.ExceptionManagerInstaller.InitializeComponent">
            <summary>
            Initialization function to set internal variables.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Configuration.ConfigurationContext">
            <summary>
            Represents a read-only set of configuration data
            indexed by configuration section name.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Configuration.ConfigurationContext.#ctor(Microsoft.Practices.EnterpriseLibrary.Configuration.IDisposableWrapper)">
            <summary>
            <para>Initializes a new instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Configuration.ConfigurationContext"/> class with the specified <see cref="T:Microsoft.Practices.EnterpriseLibrary.Configuration.ConfigurationManager"/></para>
            </summary>
            <param name="disposableWrapper">
            <para>The <see cref="T:Microsoft.Practices.EnterpriseLibrary.Configuration.IDisposableWrapper"/> used to create the context.</para>
            </param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Configuration.ConfigurationContext.#ctor">
            <summary>
            <para>Initialize a new instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Configuration.ConfigurationContext"/> class.</para>
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Configuration.ConfigurationContext.#ctor(System.String)">
            <summary>
            <para>Initialize a new instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Configuration.ConfigurationContext"/> class from a configuration file.</para>
            </summary>
            <param name="configurationFile">
            <para>The configuration file containing the meta data.</para>
            </param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Configuration.ConfigurationContext.#ctor(Microsoft.Practices.EnterpriseLibrary.Configuration.ConfigurationDictionary)">
            <summary>
            <para>Initializes a new instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Configuration.ConfigurationContext"/> class with the specified <see cref="T:Microsoft.Practices.EnterpriseLibrary.Configuration.ConfigurationDictionary"/>.</para>
            </summary>
            <param name="dictionary">
            <para>A <see cref="T:Microsoft.Practices.EnterpriseLibrary.Configuration.ConfigurationDictionary"/> to intialize the context.</para>
            </param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Configuration.ConfigurationContext.Dispose">
            <summary>
            <para>Releases the unmanaged resources used by the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Configuration.ConfigurationBuilder"/> and optionally releases the managed resources.</para>
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Configuration.ConfigurationContext.Dispose(System.Boolean)">
            <summary>
            <para>Releases the unmanaged resources used by the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Configuration.ConfigurationBuilder"/> and optionally releases the managed resources.</para>
            </summary>
            <param name="disposing">
            <para><see langword="true"/> to release both managed and unmanaged resources; <see langword="false"/> to release only unmanaged resources.</para>
            </param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Configuration.ConfigurationContext.GetConfiguration(System.String)">
            <summary>
            <para>
            Gets the configuration settings for a configuration section.
            </para>
            </summary>
            <param name="sectionName">
            <para>The configuration section to read.</para>
            </param>
            <returns>
            <para>The configuration settings for <paramref name="sectionName"/>.</para>
            </returns>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Configuration.ConfigurationContext.GetMetaConfiguration">
            <summary>
            <para>
            Gets the meta configuration for the configuration manager.
            </para>
            </summary>
            <returns>
            <para>
            The meta configuration for the configuration manager or null if no entries exists.
            </para>
            </returns>
            <exception cref="T:System.Configuration.ConfigurationException">
            <para>An error occured while reading the meta configuration.</para>
            </exception>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Configuration.ConfigurationContext.GetMetaConfiguration(System.String)">
            <summary>
            <para>
            Gets the meta configuration for the configuration manager.
            </para>
            </summary>
            <param name="sectionName">
            <para>The name of the configuration section to retrieve.    </para>
            </param>
            <returns>
            <para>
            The meta configuration for the configuration manager or null if no entries exists.
            </para>
            </returns>
            <exception cref="T:System.Configuration.ConfigurationException">
            <para>An error occured while reading the meta configuration.</para>
            </exception>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Configuration.ConfigurationContext.WriteMetaConfiguration(Microsoft.Practices.EnterpriseLibrary.Configuration.ConfigurationSettings)">
            <summary>
            <para>
            Write the meta configuration for the configuration manager to the configuration file.
            </para>
            </summary>
            <param name="configurationSettings">
            The meta configuration to write to configuration.
            </param>
            <exception cref="T:System.Configuration.ConfigurationException">
            <para>An error occured while reading the configuration to save the data.</para>
            </exception>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Configuration.ConfigurationContext.WriteMetaConfiguration(Microsoft.Practices.EnterpriseLibrary.Configuration.ConfigurationSectionData)">
            <summary>
            <para>
            Write the meta configuration for the configuration manager to the configuration file.
            </para>
            </summary>
            <param name="configurationSectionData">
            The meta configuration to write to configuration.
            </param>
            <exception cref="T:System.Configuration.ConfigurationException">
            <para>An error occured while reading the configuration to save the data.</para>
            </exception>
            <exception cref="T:System.InvalidOperationException">
            <para>The configuration section already exists.</para>
            </exception>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Configuration.ConfigurationContext.WriteConfiguration(System.String,System.Object)">
            <summary>
            <para>
            Write configuration for a section to storage.
            </para>
            </summary>
            <param name="sectionName">
            <para>The name of the section for the configuration data.</para>
            </param>
            <param name="configValue">
            <para>The configuration value to store.</para>
            </param>
            <exception cref="T:System.Configuration.ConfigurationException">
            <para><paramref name="sectionName"/> is not valid section for this configuration.</para>
            <para>- or -</para>
            <para>The section data is read only.</para>
            <para>- or -</para>
            <para>An error occured while reading the configuration to save the data.</para>
            </exception>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Configuration.ConfigurationContext.ClearSectionCache">
            <summary>
            <para>Removes all sections from the internal cache.</para>
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Configuration.ConfigurationContext.ClearSectionCache(System.String)">
            <summary>
            <para>Removes a section from the internal cache.</para>
            </summary>
            <param name="sectionName">
            <para>The section name to remove.</para>
            </param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Configuration.ConfigurationContext.IsValidSection(System.String)">
            <summary>
            <para>Determines if a section name is valid in the current configuration file.</para>
            </summary>
            <param name="sectionName">
            <para>The name of the section to validate.</para>
            </param>
            <returns><see langword="true"/> if the section name is valid; otherwise, <see langword="false"/></returns>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Configuration.ConfigurationContext.IsReadOnly(System.String)">
            <summary>
            <para>
            Gets a value indicating whether a section in configuration is read-only.
            </para>
            </summary>
            <param name="sectionName">
            <para>
            The section in the configuration.
            </para>
            </param>
            <returns>
            <see langword="true"/> if the configuration section is read-only; otherwise <see langword="false"/>.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <para><paramref name="sectionName"/> can not be <see langword="null"/>.</para>
            </exception>		
        </member>
        <member name="E:Microsoft.Practices.EnterpriseLibrary.Configuration.ConfigurationContext.ConfigurationChanging">
            <summary>
            <para>Occurs before configuration is changed.</para>
            </summary>
        </member>
        <member name="E:Microsoft.Practices.EnterpriseLibrary.Configuration.ConfigurationContext.ConfigurationChanged">
            <summary>
            <para>Occurs after configuration is changed.</para>
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Configuration.ConfigurationContext.ConfigurationFile">
            <summary>
            <para>Gets the configuration file used by the current context where the meta data is stored.</para>
            </summary>
            <value>
            <para>The configuration file used by the current context where the meta data is stored.</para>
            </value>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Configuration.XmlIncludeTypeDataCollection">
            <summary>
            <para>Represents a collection of <see cref="T:Microsoft.Practices.EnterpriseLibrary.Configuration.XmlIncludeTypeData"/>s for the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Configuration.XmlSerializerTransformerData"/> in configuration.</para>
            </summary>       
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Configuration.XmlIncludeTypeDataCollection.Add(Microsoft.Practices.EnterpriseLibrary.Configuration.XmlIncludeTypeData)">
            <summary>
            <para>Adds an <see cref="T:Microsoft.Practices.EnterpriseLibrary.Configuration.XmlIncludeTypeData"/> into the collection.</para>
            </summary>
            <param name="xmlIncludeType">
            <para>The <see cref="T:Microsoft.Practices.EnterpriseLibrary.Configuration.XmlIncludeTypeData"/> to add. The value can not be a <see langword="null"/> reference (Nothing in Visual Basic).</para>
            </param>
            <remarks>
            <para>If a reference already exists in the collection by <seealso cref="P:Microsoft.Practices.EnterpriseLibrary.Configuration.XmlIncludeTypeData.Name"/>, it will be replaced with the new reference.</para>
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            <para><paramref name="xmlIncludeType"/> is a <see langword="null"/> reference (Nothing in Visual Basic).</para>
            <para>- or -</para>
            <para><seealso cref="P:Microsoft.Practices.EnterpriseLibrary.Configuration.XmlIncludeTypeData.Name"/> is a <see langword="null"/> reference (Nothing in Visual Basic).</para>
            </exception>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Configuration.XmlIncludeTypeDataCollection.CopyTo(Microsoft.Practices.EnterpriseLibrary.Configuration.XmlIncludeTypeData[],System.Int32)">
            <summary>
            <para>Copies the entire <see cref="T:Microsoft.Practices.EnterpriseLibrary.Configuration.XmlIncludeTypeDataCollection"/> to a compatible one-dimensional Array, starting at the specified index of the target array.</para>
            </summary>
            <param name="array">
            <para>The one-dimensional <see cref="T:Microsoft.Practices.EnterpriseLibrary.Configuration.XmlIncludeTypeData"/> array that is the destination of the elements copied from <see cref="T:Microsoft.Practices.EnterpriseLibrary.Configuration.XmlIncludeTypeDataCollection"/>. The <see cref="T:Microsoft.Practices.EnterpriseLibrary.Configuration.XmlIncludeTypeData"/> array must have zero-based indexing.</para>
            </param>
            <param name="index">
            <para>The zero-based index in array at which copying begins.</para>
            </param>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Configuration.XmlIncludeTypeDataCollection.Item(System.Int32)">
            <summary>
            <para>Gets or sets the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Configuration.XmlIncludeTypeData"/> at the specified <paramref name="index"/>.</para>
            </summary>
            <param name="index">
            <para>The index of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Configuration.XmlIncludeTypeData"/> to get or set.</para>
            </param>
            <value>
            <para>The value associated with the specified <paramref name="index"/>. If the specified <paramref name="index"/> is not found, attempting to get it returns a <see langword="null"/> reference (Nothing in Visual Basic), and attempting to set it creates a new entry using the specified <paramref name="index"/>.</para>
            </value>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Configuration.XmlIncludeTypeDataCollection.Item(System.String)">
            <summary>
            <para>Gets or sets the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Configuration.XmlIncludeTypeData"/> associated with the specified <paramref name="name"/>.</para>
            </summary>
            <param name="name">
            <para>The name of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Configuration.XmlIncludeTypeData"/> to get or set.</para>
            </param>
            <value>
            <para>The value associated with the specified <paramref name="name"/>. If the specified <paramref name="name"/> is not found, attempting to get it returns a <see langword="null"/> reference (Nothing in Visual Basic), and attempting to set it creates a new entry using the specified <paramref name="name"/>.</para>
            </value>
            <exception cref="T:System.ArgumentNullException">
            <para><paramref name="name"/> is a <see langword="null"/> reference (Nothing in Visual Basic).</para>
            </exception>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Configuration.ConfigurationManager">
            <summary>
            <para>
            Provides a facade to configuration settings from defined storage in a specified configuration section. 
            </para>
            </summary> 
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Configuration.ConfigurationManager.Finalize">
            <summary>
            Finalizer for ConfigurationManager
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Configuration.ConfigurationManager.Dispose">
            <summary>
            Dispose method for ConfigurationManager
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Configuration.ConfigurationManager.Dispose(System.Boolean)">
            <summary>
            Disposes of unmanaged resources held by this class
            </summary>
            <param name="disposing">True if called from Dispose() method. False otherwise </param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Configuration.ConfigurationManager.GetConfiguration(System.String)">
            <summary>
            <para>
            Returns configuration settings for a user-defined configuration section.
            </para>
            </summary>
            <param name="sectionName">
            <para>The configuration section to read.</para>
            </param>
            <returns>
            <para>The configuration settings for <paramref name="sectionName"/>.</para>
            </returns>
            <remarks>
            <para>Once a section is read, the data for that section is cached and it will always return the same data.</para>
            </remarks>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Configuration.ConfigurationManager.WriteConfiguration(System.String,System.Object)">
            <summary>
            <para>
            Write configuration for a section to storage.
            </para>
            </summary>
            <param name="sectionName">
            <para>The name of the section for the configuration data.</para>
            </param>
            <param name="configValue">
            <para>The configuration value to store.</para>
            </param>
            <exception cref="T:System.Configuration.ConfigurationException">
            <para><paramref name="sectionName"/> is not valid section for this configuration.</para>
            <para>- or -</para>
            <para>The section data is read only.</para>
            <para>- or -</para>
            <para>An error occured while reading the configuration to save the data.</para>
            </exception>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Configuration.ConfigurationManager.GetCurrentContext">
            <summary>
            <para>Gets the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Configuration.ConfigurationContext"/> for the current <see cref="T:Microsoft.Practices.EnterpriseLibrary.Configuration.ConfigurationManager"/>.</para>
            </summary>
            <returns><para>A <see cref="T:Microsoft.Practices.EnterpriseLibrary.Configuration.ConfigurationContext"/> object.</para></returns>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Configuration.ConfigurationManager.CreateContext(Microsoft.Practices.EnterpriseLibrary.Configuration.ConfigurationDictionary)">
            <summary>
            <para>Creates a new instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Configuration.ConfigurationContext"/> class with the specified <see cref="T:Microsoft.Practices.EnterpriseLibrary.Configuration.ConfigurationDictionary"/>.</para>
            </summary>
            <param name="dictionary"><para>A <see cref="T:Microsoft.Practices.EnterpriseLibrary.Configuration.ConfigurationDictionary"/>.</para></param>
            <returns>
            <para>A <see cref="T:Microsoft.Practices.EnterpriseLibrary.Configuration.ConfigurationContext"/> object.</para>
            </returns>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Configuration.ConfigurationManager.CreateContext">
            <summary>
            <para>Creates a new instance of a <see cref="T:Microsoft.Practices.EnterpriseLibrary.Configuration.ConfigurationContext"/> object.</para>
            </summary>
            <returns>
            <para>A <see cref="T:Microsoft.Practices.EnterpriseLibrary.Configuration.ConfigurationContext"/> object.</para>
            </returns>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Configuration.ConfigurationManager.CreateContext(System.String)">
            <summary>
            <para>Creates a new instance of a <see cref="T:Microsoft.Practices.EnterpriseLibrary.Configuration.ConfigurationContext"/> object for the given <paraname ref="configurationFile"/>.</para>
            </summary>
            <param name="configurationFile">
            <para>The configuration file that contains the meta configuration.</para>
            </param>
            <returns>
            <para>A <see cref="T:Microsoft.Practices.EnterpriseLibrary.Configuration.ConfigurationContext"/> object.</para>
            </returns>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Configuration.ConfigurationManager.ClearSingletonSectionCache(System.String)">
            <summary>
            <para>Removes a section from the internal cache.</para>
            </summary>
            <param name="section">
            <para>The section name to remove.</para>
            </param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Configuration.ConfigurationManager.ClearSingletonSectionCache">
            <summary>
            <para>Removes all sections from the internal cache.</para>
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Configuration.ConfigurationManager.OnConfigurationChanged(System.Object,Microsoft.Practices.EnterpriseLibrary.Configuration.ConfigurationChangedEventArgs)">
            <devdoc>
            Raises the ConfigurationChanged event.
            </devdoc>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Configuration.ConfigurationManager.OnConfigurationChanging(System.Object,Microsoft.Practices.EnterpriseLibrary.Configuration.ConfigurationChangingEventArgs)">
            <devdoc>
            Raises the ConfigurationChanging event.
            </devdoc>
        </member>
        <member name="E:Microsoft.Practices.EnterpriseLibrary.Configuration.ConfigurationManager.ConfigurationChanging">
            <summary>
            <para>Occurs before configuration is changed.</para>
            </summary>
        </member>
        <member name="E:Microsoft.Practices.EnterpriseLibrary.Configuration.ConfigurationManager.ConfigurationChanged">
            <summary>
            <para>Occurs after configuration is changed.</para>
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Configuration.ConfigurationManager.Current">
            <devdoc>
            The singleton instance to use with static methods.
            </devdoc>
        </member>
        <member name="M:Jenzabar.Common.Globalization.Globalizer.GetGlobalizedString(System.String)">
            <summary>
            Gets a globalized string in the language that the site is in from the globalized strings.
            </summary>
            <param name="key">The key for the piece of text to get the globalised string for.</param>
            <returns>The globalized string.</returns>
        </member>
        <member name="M:Jenzabar.Common.Globalization.Globalizer.Eval(System.Object,System.String,System.String)">
            <summary>
            Evaluates the expression provided on the object passed in and formats it using the formating expression found by looking up the format key.
            </summary>
            <param name="container">The object to evauate the expression on.</param>
            <param name="expression">An expression in the format "Property.AnotherProperty" </param>
            <param name="formatKey">The key to use to look up the globalized format string.</param>
            <returns>The result of the evaluation, formated with te globalized format specified.</returns>
        </member>
        <member name="M:Jenzabar.Common.Globalization.Globalizer.Format(System.String,System.Object[])">
            <summary>
            Formats the arguments based on a globalized format string.
            </summary>
            <param name="formatKey">The key to use to look up the globalized format string.</param>
            <param name="args">Arguments for the format string.</param>
            <returns>A globalized formated string.</returns>
        </member>
        <member name="M:Jenzabar.Common.Globalization.Globalizer.GetJavascriptSafeString(System.String)">
            <summary>
            Gets a string from the Globalization tables and returns it in a Javascript-safe format (with no single quotes).
            </summary>
            <param name="key">The key for the piece of text to get the globalised string for.</param>
            <returns>The globalized string.</returns>
        </member>
        <member name="M:Jenzabar.Common.Globalization.Globalizer.DisplayTimeSpan(System.TimeSpan)">
            <summary>
            Displays a TimeSpan in a specific globalized format.
            </summary>
            <param name="span">The TimeSpan to display.</param>
            <returns>Formatted TimeSpan in the form "[d] days, [h] hours, [m] minutes, [s] seconds"</returns>
        </member>
        <member name="M:Jenzabar.Common.Globalization.Globalizer.DisplayTimeSpan(System.TimeSpan,System.Boolean)">
            <summary>
            Displays a TimeSpan in a specific globalized format.
            </summary>
            <param name="span">The TimeSpan to display.</param>
            <param name="includeSeconds">If set to false and the span is more than one minute, the seconds will not display.</param>
            <returns>Formatted TimeSpan in the form "[d] days, [h] hours, [m] minutes, [s] seconds"</returns>
        </member>
        <member name="T:Jenzabar.Common.Web.Mail.EmailFormat">
            <summary>
            Provides enumerated values for the email format.
            </summary>
        </member>
        <member name="F:Jenzabar.Common.Web.Mail.EmailFormat.Html">
            <summary>
            Specifies that the email format is HTML.
            </summary>
        </member>
        <member name="F:Jenzabar.Common.Web.Mail.EmailFormat.Text">
            <summary>
            Specifies that the email format is text.
            </summary>
        </member>
        <member name="T:Jenzabar.Common.Web.Mail.AttachmentEncoding">
            <summary>
            Provides enumerated values for email encoding.
            </summary>
        </member>
        <member name="F:Jenzabar.Common.Web.Mail.AttachmentEncoding.Base64">
            <summary>
            Specifies that the email message uses Base64 encoding
            </summary>
        </member>
        <member name="F:Jenzabar.Common.Web.Mail.AttachmentEncoding.UUEncode">
            <summary>
            Specifies that the email message uses UUEncode encoding
            </summary>
        </member>
        <member name="T:Jenzabar.Common.Web.Mail.EmailPriority">
            <summary>
            Provides enumerated values for email priority.
            </summary>
        </member>
        <member name="F:Jenzabar.Common.Web.Mail.EmailPriority.High">
            <summary>
            Specifies that the email message has high priority.
            </summary>
        </member>
        <member name="F:Jenzabar.Common.Web.Mail.EmailPriority.Low">
            <summary>
            Specifies that the email message has low priority.
            </summary>
        </member>
        <member name="F:Jenzabar.Common.Web.Mail.EmailPriority.Normal">
            <summary>
            Specifies that the email message has normal priority.
            </summary>
        </member>
        <member name="T:Jenzabar.Common.Web.Mail.Email">
            <summary>
            Provides properties and methods for constructing an email message.
            </summary>
        </member>
        <member name="M:Jenzabar.Common.Web.Mail.Email.#ctor">
            <summary>
            Default Constructor
            </summary>
        </member>
        <member name="M:Jenzabar.Common.Web.Mail.Email.Send">
            <summary>
            Sends an email message and waits for the SMTP server to process the request.
            </summary>
        </member>
        <member name="M:Jenzabar.Common.Web.Mail.Email.Send(System.String,System.String,System.String,System.String,System.String)">
            <summary>
             Sends an email message and waits for the SMTP server to process the request.
            </summary>
            <param name="server">The name of the SMTP mail server.</param>
            <param name="from">The email address of the sender.</param>
            <param name="to">A semicolon-delimited list of email address recipients.</param>
            <param name="subject">The subject line of the email message.</param>
            <param name="body">The body of the email message.</param>
        </member>
        <member name="M:Jenzabar.Common.Web.Mail.Email.SendAsync">
            <summary>
            Sends an email message without waiting for the SMTP server to process the request.
            </summary>
        </member>
        <member name="M:Jenzabar.Common.Web.Mail.Email.SendAsync(System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Sends an email message without waiting for the SMTP server to process the request.
            </summary>
            <param name="server">The name of the SMTP mail server.</param>
            <param name="from">The email address of the sender.</param>
            <param name="to">A semicolon-delimited list of email address recipients.</param>
            <param name="subject">The subject line of the email message.</param>
            <param name="body">The body of the email message.</param>
        </member>
        <member name="M:Jenzabar.Common.Web.Mail.Email.AddAttachment(System.String)">
            <summary>
            Adds an attachment to be transmitted with the email message.
            </summary>
            <param name="fileName">The file to be added as an attachment.</param>
        </member>
        <member name="M:Jenzabar.Common.Web.Mail.Email.AddAttachment(System.String,Jenzabar.Common.Web.Mail.AttachmentEncoding)">
            <summary>
            Adds an attachment to be transmitted with the email message.
            </summary>
            <param name="fileName">The file to be added as an attachment.</param>
            <param name="encoding">The encoding format for the attachment.</param>
        </member>
        <member name="M:Jenzabar.Common.Web.Mail.Email.SetMailMessageValues">
            <summary>
            Sets values to be used by the System.Web.Mail.MailMessage object.
            </summary>
        </member>
        <member name="P:Jenzabar.Common.Web.Mail.Email.Server">
            <summary>
            Gets or sets the name of the SMTP mail server.
            </summary>
        </member>
        <member name="P:Jenzabar.Common.Web.Mail.Email.From">
            <summary>
            Gets or sets the email address of the sender.
            </summary>
        </member>
        <member name="P:Jenzabar.Common.Web.Mail.Email.To">
            <summary>
            Gets or sets a semicolon-delimited list of email address recipients.  
            </summary>
        </member>
        <member name="P:Jenzabar.Common.Web.Mail.Email.Subject">
            <summary>
            Gets or sets the subject line of the email message.
            </summary>
        </member>
        <member name="P:Jenzabar.Common.Web.Mail.Email.Body">
            <summary>
            Gets or sets the body of the email message.
            </summary>
        </member>
        <member name="P:Jenzabar.Common.Web.Mail.Email.Cc">
            <summary>
            Gets or sets a semicolon-delimited list of email addresses that receive 
            a carbon copy(Cc) of the email message. 
            </summary>
        </member>
        <member name="P:Jenzabar.Common.Web.Mail.Email.Bcc">
            <summary>
            Gets or sets a semicolon-delimited list of email addresses that receive 
            a blind carbon copy(Bcc) of the email message. 
            </summary>
        </member>
        <member name="P:Jenzabar.Common.Web.Mail.Email.BodyFormat">
            <summary>
            Gets or sets the content type of the body of the email message.
            </summary>
        </member>
        <member name="P:Jenzabar.Common.Web.Mail.Email.BodyEncoding">
            <summary>
            Gets or sets the encoding type of the body of the email message.
            </summary>
        </member>
        <member name="P:Jenzabar.Common.Web.Mail.Email.Priority">
            <summary>
            Gets or sets the priority of the email message.
            </summary>
        </member>
        <member name="P:Jenzabar.Common.Web.Mail.Email.MaximumRetries">
            <summary>
            Gets or sets the maximum retry value for sending an email.
            </summary>
        </member>
        <member name="P:Jenzabar.Common.Web.Mail.Email.DeleteAttachments">
            <summary>
            Gets or sets the value to delete attachments
            </summary>
        </member>
        <member name="P:Jenzabar.Common.Web.Mail.Email.DisableLogging">
            <summary>
            Gets and sets the value to determine if logging is disabled.
            </summary>
        </member>
        <member name="T:Jenzabar.Common.Web.UI.Controls.DateTimeFormat">
            <summary>
            Stores the types of date and time formatting. 
            </summary>
            <remarks>
            Select DateTimeFormat.None to prevent the date or time from being shown.
            </remarks>
            
        </member>
        <member name="F:Jenzabar.Common.Web.UI.Controls.DateTimeFormat.Short">
            <summary>
            The date or time is displayed in short format.
            </summary>
        </member>
        <member name="F:Jenzabar.Common.Web.UI.Controls.DateTimeFormat.Long">
            <summary>
            The data or time is displayed in long format.
            </summary>
        </member>
        <member name="F:Jenzabar.Common.Web.UI.Controls.DateTimeFormat.None">
            <summary>
            The data or time is not shown.
            </summary>
        </member>
        <member name="T:Jenzabar.Common.Web.UI.Controls.DatePicker">
            <summary>
            This control renders a text box for the date, a pop up calendar,
            and drop-downs for time.
            </summary>
            <remarks>
            In read-only mode, this control displays teh date as text.
            In edit mode this control renders a div containing text input elements 
            and a pop-up (in an iframe) calendar from which the user can select the date. 
            In display mode this control applies the given formatting.
            This control extends .NET's System.Web.UI.WebControls.WebControl.
            </remarks>
        </member>
        <member name="F:Jenzabar.Common.Web.UI.Controls.DatePicker.CALENDAR_HTML_FILE_VIRTUAL_LOCATION">
            <summary>
            Stores the location of the HTML file that loads into the IFRAME and displays the calendar.
            </summary>
        </member>
        <member name="F:Jenzabar.Common.Web.UI.Controls.DatePicker.CALENDAR_ICON_LOCATION">
            <summary>
            Stores the location of the calendar icon file.
            </summary>
        </member>
        <member name="M:Jenzabar.Common.Web.UI.Controls.DatePicker.#ctor">
            <summary>
            Creates a new instance of the DatePicker class using today's date.
            </summary>
        </member>
        <member name="M:Jenzabar.Common.Web.UI.Controls.DatePicker.#ctor(System.DateTime)">
            <summary>
            Creates a new instance of the DatePicker class using the specified date.
            </summary>
            <param name="date">A DateTime object specifying a date on which to load the calendar.</param>
        </member>
        <member name="M:Jenzabar.Common.Web.UI.Controls.DatePicker.OnChange(System.EventArgs)">
            <summary>
            Raises the DateChanged event when the user changes the date.
            </summary>
            <param name="e">The event arguments (usually EventArgs.Empty)</param>
        </member>
        <member name="M:Jenzabar.Common.Web.UI.Controls.DatePicker.UpdateTimeInfo">
            <summary>
            Updates the time drop-downs to reflect the correct time.
            </summary>
        </member>
        <member name="M:Jenzabar.Common.Web.UI.Controls.DatePicker.Render(System.Web.UI.HtmlTextWriter)">
            <summary> 
            Renders the control.
            </summary>
            <param name="output"> The HtmlTextWriter that renders the control. </param>
        </member>
        <member name="P:Jenzabar.Common.Web.UI.Controls.DatePicker.DateIsValid">
            <summary>
            Returns true if the date selected/entered by the user is valid, false otherwise.
            </summary>
            
        </member>
        <member name="P:Jenzabar.Common.Web.UI.Controls.DatePicker.DateIsEmpty">
            <summary>
            Returns true if there was no date selected by the user.
            </summary>
        </member>
        <member name="P:Jenzabar.Common.Web.UI.Controls.DatePicker.Disabled">
            <summary>
            Gets and sets a value indicating whether the input and select elements rendered by this control should be disabled.
            </summary>
        </member>
        <member name="E:Jenzabar.Common.Web.UI.Controls.DatePicker.DateChanged">
            <summary>
            Raised when the user changes the date.
            </summary>
        </member>
        <member name="P:Jenzabar.Common.Web.UI.Controls.DatePicker.DateDisplayFormat">
            <summary>
            Gets and sets the format used to display the date when the control is rendered.
            </summary>
        </member>
        <member name="P:Jenzabar.Common.Web.UI.Controls.DatePicker.TimeDisplayFormat">
            <summary>
            Gets and sets the format that will be used to display the time when the control is rendered.
            </summary>
        </member>
        <member name="P:Jenzabar.Common.Web.UI.Controls.DatePicker.AllowEdit">
            <summary>
            Gets and sets whether this control's value can be edited.
            </summary>
        </member>
        <member name="P:Jenzabar.Common.Web.UI.Controls.DatePicker.SelectedDate">
            <summary>
            Gets and sets the date that the control will display.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Configuration.CustomStorageProviderData">
            <summary>
            <para>Represents a custom storage provider to read and write data in configuration.</para>
            </summary>
            <remarks>
            <para>The class maps to the <c>storageProvider</c> element in configuration.</para>
            </remarks>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Configuration.CustomStorageProviderData.#ctor">
            <summary>
            <para>Initialize a new instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Configuration.CustomStorageProviderData"/> class..</para>
            </summary>  
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Configuration.CustomStorageProviderData.#ctor(System.String)">
            <summary>
            Initialize a new instance of a <see cref="T:Microsoft.Practices.EnterpriseLibrary.Configuration.CustomStorageProviderData"/> class.
            </summary>
            <param name="name">
            The name of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Configuration.CustomStorageProviderData"/>.
            </param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Configuration.CustomStorageProviderData.#ctor(System.String,System.String)">
            <summary>
            Initialize a new instance of a <see cref="T:Microsoft.Practices.EnterpriseLibrary.Configuration.CustomStorageProviderData"/> class.
            </summary>
            <param name="name">
            The name of the custom handler.
            </param>
            <param name="typeName">
            The type of the custom handler.
            </param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Configuration.CustomStorageProviderData.Clone">
            <summary>
            <para>Creates a deep copy of the current instance.</para>
            </summary>
            <returns>
            <para>A deep copy of this instance.</para>
            </returns>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Configuration.CustomStorageProviderData.TypeName">
            <summary>
            <para>Gets or sets the <see cref="T:System.Type"/> name of the provider.</para>
            </summary>
            <remarks>
            <value>
            <para>The type name of the provider. The default is an empty string.</para>
            </value>
            </remarks>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Configuration.CustomStorageProviderData.Attributes">
            <summary>
            Gets or sets custom configuration attributes.
            </summary>
        </member>
        <member name="T:Jenzabar.Common.ErrorLevel">
            <summary>
            enum used to specify severity level of error for JenzaException and all children
            </summary>
        </member>
        <member name="F:Jenzabar.Common.ErrorLevel.Error">
            <summary>
            Error - used by default, shown in log as error
            </summary>
        </member>
        <member name="F:Jenzabar.Common.ErrorLevel.Warning">
            <summary>
            Warning, can be used for UserFrindly ecxeptions, shown in log as warning
            </summary>
        </member>
        <member name="F:Jenzabar.Common.ErrorLevel.Information">
            <summary>
            Shown in log as Information
            </summary>
        </member>
        <member name="T:Jenzabar.Common.ExceptionCategory">
            <summary>
            Category of exception
            </summary>
        </member>
        <member name="F:Jenzabar.Common.ExceptionCategory.Unknown">
            <summary>
            All Ecxeptions not inherited from JenzaException
            </summary>
        </member>
        <member name="F:Jenzabar.Common.ExceptionCategory.Common">
            <summary>
            JenzaException
            </summary>
        </member>
        <member name="F:Jenzabar.Common.ExceptionCategory.Data">
            <summary>
            All Ecxeptions inherited from JenzaException and dealing with data
            </summary>
        </member>
        <member name="F:Jenzabar.Common.ExceptionCategory.Server">
            <summary>
            All Ecxeptions inherited from JenzaException and dealing with server errors
            </summary>
        </member>
        <member name="F:Jenzabar.Common.ExceptionCategory.ADAM">
            <summary>
            All Ecxeptions inherited from JenzaException and dealing with ADAM
            </summary>
        </member>
        <member name="F:Jenzabar.Common.ExceptionCategory.UserFriendly">
            <summary>
            All Ecxeptions inherited from JenzaException and having messages which will be shown to users
            </summary>
        </member>
        <member name="F:Jenzabar.Common.ExceptionCategory.RequestValidation">
            <summary>
            exception thrown when script is entered in text fields
            </summary>
        </member>
        <member name="T:Jenzabar.Common.Web.UI.Controls.ViewStatePreservationContainer">
            <summary>
            A System.Web.UI.Control that stores control <see cref="T:Jenzabar.Common.Web.UI.Controls.ViewStatePreserver">ViewStatePreserver</see>s.
            </summary>
        </member>
        <member name="M:Jenzabar.Common.Web.UI.Controls.ViewStatePreservationContainer.CreateChildControls">
            <summary>
            Allows the container to automatically
            load the ViewStatePreserver control when necessary.
            </summary>
        </member>
        <member name="M:Jenzabar.Common.Web.UI.Controls.ViewStatePreservationContainer.OnInit(System.EventArgs)">
            <summary>
            Ensures that the child controls are created.
            There are certain circumstances under which CreateChildControls()
            is never called, so it must be called explicitly so that
            the viewstate is preserved.
            </summary>
            <param name="e">The EventArgs.</param>
        </member>
        <member name="M:Jenzabar.Common.Web.UI.Controls.ViewStatePreservationContainer.UnLoadControl">
            <summary>
            Unloads a child control and replaces it with the 
            ViewStatePreserver control.
            
            Notice it stores the pre-removal viewstate of the
            container, and stores that inside the 
            ViewStatePreserver control.
            </summary>
        </member>
        <member name="M:Jenzabar.Common.Web.UI.Controls.ViewStatePreservationContainer.ReLoadControl(System.Web.UI.Control)">
            <summary>
            Reloads the original control and repopulates its viewstate.
            
            It also forces the control to catch up to the current state of
            the page. If the page has made it to a Postback event, such as a button click,
            the reloaded control catches up all
            the way to the OnLoad stage.  It catches up only that far, because it is impossible
            for the child control to have had any events beyond that stage.
            </summary>
            <param name="control">The original System.Web.UI.Control.</param>
        </member>
        <member name="M:Jenzabar.Common.Web.UI.Controls.ViewStatePreservationContainer.ForceLoadViewStateRecursive(System.Object)">
            <summary>
            Uses reflection to call the internal method, "LoadViewStateRecursive".
            </summary>
            <param name="savedState">The state to load</param>
        </member>
        <member name="M:Jenzabar.Common.Web.UI.Controls.ViewStatePreservationContainer.ForceLoadRecursive">
            <summary>
            Uses reflection to call the internal method, "LoadRecursive".
            </summary>
        </member>
        <member name="M:Jenzabar.Common.Web.UI.Controls.ViewStatePreservationContainer.ForcePreRenderRecursiveInternal">
            <summary>
            Uses reflection to call the internal method, "PreRenderRecursiveInternal".
            </summary>
        </member>
        <member name="M:Jenzabar.Common.Web.UI.Controls.ViewStatePreservationContainer.MarkState">
            <summary>
            Tells the container to remember at what stage of the
            control execution lifecycle it was before the 
            reloading of the preserved child control.
            
            This is important, because after the internal LoadViewStateRecursive
            method is called, the state will be reset to "Viewstate Loaded".
            </summary>
        </member>
        <member name="M:Jenzabar.Common.Web.UI.Controls.ViewStatePreservationContainer.SetStateInitialized">
            <summary>
            Sets the state to "Initialized".
            </summary>
        </member>
        <member name="M:Jenzabar.Common.Web.UI.Controls.ViewStatePreservationContainer.ResetState">
            <summary>
            Resets the state of the container control back to 
            what it was when MarkState() was called and makes
            sure to manually force the control to catch up with
            the parent control's previous execution state.
            </summary>
        </member>
        <member name="P:Jenzabar.Common.Web.UI.Controls.ViewStatePreservationContainer.AutoLoadPreserver">
            <summary>
            Gets and sets whether to automatically load the ViewStatePreserver.
            Must be set appropriately before the child controls of
            the container are created, that is, before
            the OnInit() method is called on the container.
            
            Set this in the OnInit() method of the parent page.
            </summary>
        </member>
        <member name="P:Jenzabar.Common.Web.UI.Controls.ViewStatePreservationContainer.ChildControlViewState">
            <summary>
            Gets the viewstate of the child control by using reflection to call
            the internal method, "SaveViewStateRecursive".
            </summary>
        </member>
        <member name="P:Jenzabar.Common.Web.UI.Controls.ViewStatePreservationContainer.ExecutionStateField">
            <summary>
            Gets the private member variable that stores execution state.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Configuration.ReadOnlyConfigurationSectionData">
            <summary>
            <para>Represents a configuration section in configuration.</para>
            </summary>
            <remarks>
            <para>The class maps to the <c>configurationSection</c> element in configuration.</para>
            </remarks>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Configuration.ReadOnlyConfigurationSectionData.#ctor">
            <summary>
            <para>Initializes a new instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Configuration.ConfigurationSectionData"/> class.</para>
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Configuration.ReadOnlyConfigurationSectionData.#ctor(System.String)">
            <summary>
            <para>Initializes a new instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Configuration.ConfigurationSectionData"/> class with a name.</para>
            </summary>
            <param name="name">
            <para>The name of the section.</para>
            </param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Configuration.ReadOnlyConfigurationSectionData.#ctor(System.String,System.Boolean)">
            <summary>
            <para>Initializes a new instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Configuration.ConfigurationSectionData"/> class with a name.</para>
            </summary>
            <param name="name">
            <para>The name of the section.</para>
            </param>
            <param name="encrypt">
            <para>Determines if the section is encrypted or not.</para>
            </param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Configuration.ReadOnlyConfigurationSectionData.#ctor(System.String,System.Boolean,Microsoft.Practices.EnterpriseLibrary.Configuration.StorageProviderData,Microsoft.Practices.EnterpriseLibrary.Configuration.TransformerData)">
            <summary>
            <para>Initializes a new instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Configuration.ConfigurationSectionData"/> class with a name, a cache, a storage provider, a data protection provider and a data transformer.</para>
            </summary>
            <param name="name">
            <para>The name of the section.</para>
            </param>
            <param name="encrypt">
            <para>Determines if the section is encrypted or not.</para>
            </param>
            <param name="storageProvider">
            <para>The <see cref="T:Microsoft.Practices.EnterpriseLibrary.Configuration.StorageProviderData"/> used for the configuration section.</para>
            </param>        
            <param name="transformer">
            <para>The <see cref="T:Microsoft.Practices.EnterpriseLibrary.Configuration.TransformerData"/> used for the section.</para>
            </param>                
            <seealso cref="T:Microsoft.Practices.EnterpriseLibrary.Configuration.StorageProviderData"/>        
            <seealso cref="T:Microsoft.Practices.EnterpriseLibrary.Configuration.TransformerData"/>
        </member>
        <member name="T:Jenzabar.Common.Web.UI.Controls.GroupedGridButtonType">
            <summary>
            The type of button control to be created in the column.
            </summary>
        </member>
        <member name="F:Jenzabar.Common.Web.UI.Controls.GroupedGridButtonType.Link">
            <summary>
            A hyperlink-style button.
            </summary>
        </member>
        <member name="F:Jenzabar.Common.Web.UI.Controls.GroupedGridButtonType.Button">
            <summary>
            An HTML button.
            </summary>
        </member>
        <member name="F:Jenzabar.Common.Web.UI.Controls.GroupedGridButtonType.Image">
            <summary>
            An image button.
            </summary>
        </member>
        <member name="T:Jenzabar.Common.Web.UI.Controls.RadioButtonColumn">
            <summary>
            A radio button column type for the System.Web.UI.WebControls.DataGrid control. 
            </summary>
            <remarks>This control extends System.Web.UI.WebControls.DataGridColumn.</remarks>
        </member>
        <member name="M:Jenzabar.Common.Web.UI.Controls.RadioButtonColumn.InitializeCell(System.Web.UI.WebControls.TableCell,System.Int32,System.Web.UI.WebControls.ListItemType)">
            <summary>
            Initializes a control and adds it to the controls list for the table cell.
            </summary>
            <param name="cell">A System.Web.UI.WebControls.TableCell.</param>
            <param name="columnIndex">An integer representing the column index.</param>
            <param name="itemType">If specified, a System.Web.UI.WebControls.ListItemType (Footer, Header, Pager, Separator).  
            If null, a <see cref="T:Jenzabar.Common.Web.UI.Controls.RadioButtonColumn.GroupedGridRadioButton">GroupedGridRadioButton</see> is initialized and added to the controls list for the column.</param>
        </member>
        <member name="P:Jenzabar.Common.Web.UI.Controls.RadioButtonColumn.GroupName">
            <summary>
            Gets and sets the name for the group of radio buttons to be created.
            </summary>
        </member>
        <member name="T:Jenzabar.Common.Web.UI.Controls.GroupedGridButtonColumn">
            <summary>
            A column that contains Buttons, LinkButtons, or ImageButtons. 
            Supports databinding the text, alternateText, and tooltip to the datasource.
            </summary>
        </member>
        <member name="M:Jenzabar.Common.Web.UI.Controls.GroupedGridButtonColumn.FormatDataValue(System.Object,System.String)">
            <summary>
            Formats a data object value and returns the string representation with formatting.
            </summary>
            <param name="val">The value to format.</param>
            <param name="format">The formatting string to use to format the value (can be null or string.Empty)</param>
            <returns>The value formatted as a string in the format specified.</returns>
        </member>
        <member name="M:Jenzabar.Common.Web.UI.Controls.GroupedGridButtonColumn.BuildControlInCell(System.Web.UI.WebControls.TableCell)">
            <summary>
            Creates the correct type of control in the cell as determined by the <see cref="T:Jenzabar.Common.Web.UI.Controls.GroupedGridButtonType">GroupedGridButtonType</see> property.
            </summary>
            <param name="cell">The System.Web.UI.WebControls.TableCell to create the control in.</param>
        </member>
        <member name="M:Jenzabar.Common.Web.UI.Controls.GroupedGridButtonColumn.ControlDataBinding(System.Object,System.EventArgs)">
            <summary>
            Evaluates the text and tooltip and populates the control with them.
            </summary>
            <param name="sender">The control object that is raising the databind event.</param>
            <param name="e">EventArgs for databinding.</param>
        </member>
        <member name="P:Jenzabar.Common.Web.UI.Controls.GroupedGridButtonColumn.DataTextField">
            <summary>
            Gets and sets the name of the field or expression to evaluate on the data item. 
            The value is the label for the button.
            </summary>
        </member>
        <member name="P:Jenzabar.Common.Web.UI.Controls.GroupedGridButtonColumn.DataTextFormatString">
            <summary>
            Gets and sets the string that is used to format the label of the button.
            </summary>
        </member>
        <member name="P:Jenzabar.Common.Web.UI.Controls.GroupedGridButtonColumn.DataToolTipField">
            <summary>
            Gets and sets the name of the field or expression to evaluate on the data item.
            The value is the tooltip text.
            </summary>
        </member>
        <member name="P:Jenzabar.Common.Web.UI.Controls.GroupedGridButtonColumn.DataToolTipFormatString">
            <summary>
            Gets and sets the string that is used to format the tooltip text of the button.
            </summary>
        </member>
        <member name="P:Jenzabar.Common.Web.UI.Controls.GroupedGridButtonColumn.CommandName">
            <summary>
            Gets and sets the name of the command that is executed on the server when the button is clicked.
            </summary>
        </member>
        <member name="P:Jenzabar.Common.Web.UI.Controls.GroupedGridButtonColumn.ButtonType">
            <summary>
            Gets and sets the type of button that this column renders.
            </summary>
        </member>
        <member name="P:Jenzabar.Common.Web.UI.Controls.GroupedGridButtonColumn.ImageUrl">
            <summary>
            Gets and sets the URL to the image for this button. 
            The URL can be in relative format ("~/icons/add.gif").
            </summary>
        </member>
        <member name="P:Jenzabar.Common.Web.UI.Controls.GroupedGridButtonColumn.Text">
            <summary>
            Gets and sets the text for a button or link and the alternate text for an image column.
            </summary>
        </member>
        <member name="P:Jenzabar.Common.Web.UI.Controls.GroupedGridButtonColumn.TextKey">
            <summary>
            Gets and sets the key for globalizing the text for this column.
            </summary>
        </member>
        <member name="P:Jenzabar.Common.Web.UI.Controls.GroupedGridButtonColumn.ToolTip">
            <summary>
            Gets and sets the text that will be used for the tooltip of the button.
            </summary>
        </member>
        <member name="P:Jenzabar.Common.Web.UI.Controls.GroupedGridButtonColumn.ToolTipKey">
            <summary>
            Gets and sets the key for globalizing the tooltip of the button.
            </summary>
        </member>
        <member name="P:Jenzabar.Common.Web.UI.Controls.GroupedGridButtonColumn.ClickConfirmMessage">
            <summary>
            Gets and sets the confirmation message that appears when the user clicks on the column.
            </summary>
        </member>
        <member name="T:Jenzabar.Common.Web.UI.Controls.ImageCommandColumn">
            <summary>
            A column that supports image buttons for GroupedGrid and DataGrid controls.
            </summary>
        </member>
        <member name="M:Jenzabar.Common.Web.UI.Controls.ImageCommandColumn.InitializeCell(System.Web.UI.WebControls.TableCell,System.Int32,System.Web.UI.WebControls.ListItemType)">
            <summary>
            Creates the contents of the cell.
            </summary>
            <param name="cell">A TableCell.</param>
            <param name="columnIndex">An integer for the column's index.</param>
            <param name="itemType">A ListItemType.  If Null, the cell is initialized with a GroupedGridButtonType.Image.</param>
        </member>
        <member name="T:Jenzabar.Common.Web.UI.Controls.EditButtonColumn">
            <summary>
            A column that supports image buttons that when clicked trigger the EditCommand event in GroupedGrid or DataGrid controls.
            </summary>
            <remarks>This control extends <see cref="T:Jenzabar.Common.Web.UI.Controls.ImageCommandColumn">ImageCommandColumn</see>.</remarks>
        </member>
        <member name="T:Jenzabar.Common.Web.UI.Controls.DeleteButtonColumn">
            <summary>
            A column that supports image buttons that when clicked trigger a delete command for all items in DataGrid or GroupedGrid controls.
            </summary>
        </member>
        <member name="T:Jenzabar.Common.Web.UI.Controls.ExpandCollapseColumn">
            <summary>
            A <see cref="T:Jenzabar.Common.Web.UI.Controls.GroupedGridButtonColumn">GroupedGridButtonColumn</see> that supports the "onclick" attribute to expand and collapse data cells.
            </summary>
        </member>
        <member name="T:Jenzabar.Common.Web.UI.Controls.PlusMinusColumn">
            <summary>
            A System.Web.UI.WebControls.DataGridColumn that supports 
            plus and minus images and the corresponding "onclick" attribute to expand and collapse data cells.
            </summary>
        </member>
        <member name="T:Jenzabar.Common.Web.UI.Controls.CollapsiblePanel">
            <summary>
            A Panel control that can collapse to display only the header or expand to show its content. 
            </summary>
            <remarks>
            <para>This control renders a div container (div class="cp"). Beneath the "cp" 
            div container it renders two divs, one for the header (div class="head"), and one for the content (div class="content"). The header div is 
            split into two spans, (span class="left") and (span class="right"). The title of the CollapsiblePanel is rendered in the 
            "left" span, and the expand/collapse button (input type="image"), which does the expanding and collapsing of the panel,
            is rendered in the "right" span. The content div contains any markup that you specify.  It also contains any server side controls 
            that you define.</para>
            <para>This control inherits from <see cref="T:System.Web.UI.WebControls.Panel"/> and functions much the same way as the 
            .NET control. It supports dynamically adding controls to its control collection and renders 
            in the content container.</para>
            </remarks>	
        </member>
        <member name="M:Jenzabar.Common.Web.UI.Controls.CollapsiblePanel.LoadViewState(System.Object)">
            <summary>
            Loads the viewstate for this control.
            </summary>
            <remarks>Facilitates restoring the expanded/collapsed state of the control.</remarks>
            <param name="savedState">The viewstate as saved during SaveViewState</param>
            
        </member>
        <member name="M:Jenzabar.Common.Web.UI.Controls.CollapsiblePanel.RenderBeginTag(System.Web.UI.HtmlTextWriter)">
            <summary>
            Renders all the script and markup needed to expand/collapse the content section of the control.
            </summary>
            <param name="writer">The HtmlTextWriter to render the content.</param>
        </member>
        <member name="M:Jenzabar.Common.Web.UI.Controls.CollapsiblePanel.RenderEndTag(System.Web.UI.HtmlTextWriter)">
            <summary>
            Renders the closing tags for the content and container divs for the control.
            </summary>
            <param name="writer">The HtmlTextWriter to render the closing div tag.</param>
        </member>
        <member name="P:Jenzabar.Common.Web.UI.Controls.CollapsiblePanel.Text">
            <summary>
            Gets and sets the text that displays in the header for the collapsible panel.
            </summary>
        </member>
        <member name="P:Jenzabar.Common.Web.UI.Controls.CollapsiblePanel.Collapsed">
            <summary>
            Stores true to render the control in collapsed mode and false to render it in expanded mode.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Common.Instrumentation.EventLogger">
            <summary>
            <para>
            This type supports the Instrumentation infrastructure and is not intended to be used directly from your code.
            </para>
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Instrumentation.EventLogger.#ctor(System.String,System.Diagnostics.EventLogEntryType,System.Int32)">
            <summary/>
            <param name="source"/>
            <param name="logType"/>
            <param name="eventId"/>
            <exclude/>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Instrumentation.EventLogger.Log(System.String)">
            <summary/>
            <param name="message"/>
            <exclude/>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Instrumentation.EventLogger.Log(System.String,System.Diagnostics.EventLogEntryType)">
            <summary/>
            <param name="message"/>
            <param name="eventLogType"/>
            <exclude/>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Common.Cryptography.NativeMethods">
            <devdoc>
            Native methods for interop with crypt32.dll and kernel32.dll.
            </devdoc>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Configuration.CustomKeyAlgorithmPairStorageProviderData">
            <summary>
            <para>Represents a custom storage provider to read and write data in configuration.</para>
            </summary>
            <remarks>
            <para>The class maps to the <c>storageProvider</c> element in configuration.</para>
            </remarks>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Configuration.CustomKeyAlgorithmPairStorageProviderData.#ctor">
            <summary>
            <para>Initialize a new instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Configuration.CustomKeyAlgorithmPairStorageProviderData"/> class..</para>
            </summary>  
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Configuration.CustomKeyAlgorithmPairStorageProviderData.#ctor(System.String)">
            <summary>
            Initialize a new instance of a <see cref="T:Microsoft.Practices.EnterpriseLibrary.Configuration.CustomKeyAlgorithmPairStorageProviderData"/> class.
            </summary>
            <param name="name">
            The name of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Configuration.CustomKeyAlgorithmPairStorageProviderData"/>.
            </param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Configuration.CustomKeyAlgorithmPairStorageProviderData.#ctor(System.String,System.String)">
            <summary>
            Initialize a new instance of a <see cref="T:Microsoft.Practices.EnterpriseLibrary.Configuration.CustomKeyAlgorithmPairStorageProviderData"/> class.
            </summary>
            <param name="name">
            The name of the custom handler.
            </param>
            <param name="typeName">
            The type of the custom handler.
            </param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Configuration.CustomKeyAlgorithmPairStorageProviderData.Clone">
            <summary>
            <para>Creates a deep copy of the current instance.</para>
            </summary>
            <returns>
            <para>A deep copy of this instance.</para>
            </returns>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Configuration.CustomKeyAlgorithmPairStorageProviderData.TypeName">
            <summary>
            <para>Gets or sets the <see cref="T:System.Type"/> name of the provider.</para>
            </summary>
            <remarks>
            <value>
            <para>The type name of the provider. The default is an empty string.</para>
            </value>
            </remarks>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Configuration.CustomKeyAlgorithmPairStorageProviderData.Attributes">
            <summary>
            Gets or sets custom configuration attributes.
            </summary>
        </member>
        <member name="T:Jenzabar.Common.Configuration.ISettingsReader">
            <summary>
            Defines a method that supports custom, user-defined reading of the settings in the configuration files.
            </summary>
        </member>
        <member name="M:Jenzabar.Common.Configuration.ISettingsReader.ReadSettings(System.Xml.XmlElement)">
            <summary>
            Reads configuration information from an XmlElement and merges it with the class defaults. This method can be called twice in a row by the runtime if the client has overridden the configuration settings.
            </summary>
            <param name="settings">The <see cref="T:System.Xml.XmlElement"/> that contains the configuration settings for the class.</param>
        </member>
        <member name="T:Jenzabar.Common.Configuration.Settings">
            <summary>
            Provides a basic inplementation of ISettingsReader that will populate the public fields and writeable properties with values read from the configuration files
            </summary>
        </member>
        <member name="M:Jenzabar.Common.Configuration.Settings.#ctor">
            <summary>
            Creates a new instance of the Jenzabar.Common.Configuration.Settings class.
            </summary>
        </member>
        <member name="F:Jenzabar.Common.Configuration.Settings._jenzSettingsPath">
            <summary>
            the directory path to the files containing the default configuration settings
            </summary>
        </member>
        <member name="F:Jenzabar.Common.Configuration.Settings._clientSettingsPath">
            <summary>
            the directory path to the files containing the client's configuration settings
            </summary>
        </member>
        <member name="F:Jenzabar.Common.Configuration.Settings._cachedSettings">
            <summary>
            a hashtable containing the settings that have already been read from the config files
            </summary>
        </member>
        <member name="F:Jenzabar.Common.Configuration.Settings._cachedDocs">
            <summary>
            a hashtable containing the xmldocuments that have been read from disk
            </summary>
        </member>
        <member name="M:Jenzabar.Common.Configuration.Settings.#cctor">
            <summary>
            Static constructor, finds the correct path for the jenzabar settings and the client settings
            </summary>
        </member>
        <member name="M:Jenzabar.Common.Configuration.Settings.GetSettings(System.Type)">
            <summary>
            Gets the configuration settings based on the type of cless to retrieve. 
            </summary>
            <param name="settingsType">The type of configuration settings class to retrieve.</param>
            <returns>An object of the type passed in as settingsType that has been populated with configuration settings read from the xml configuration files.</returns>
        </member>
        <member name="M:Jenzabar.Common.Configuration.Settings.GetLanguage">
            <summary>
            Gets the Language settings from appSettings section; if not specified - English will be used. 
            </summary>
            <returns>String like "En", "Fr", "Ru" etc</returns>
        </member>
        <member name="M:Jenzabar.Common.Configuration.Settings.ReadSettings(System.Xml.XmlElement)">
            <summary>
            
            </summary>
            <param name="settings"></param>
        </member>
        <member name="M:Jenzabar.Common.Configuration.Settings.InnerReadSettings(System.Object,System.Xml.XmlElement)">
            <summary>
            recursivly called to populate this class, and any classes referenced 
            </summary>
            <param name="o">The object that is having the settings restored</param>
            <param name="e">The settings node that contains the settigns to place into the class.</param>
        </member>
        <member name="M:Jenzabar.Common.Configuration.Settings.ReadTypedValue(System.Xml.XmlElement,System.String,System.Type,System.Object)">
            <summary>
            Tries to read a setting (attribute or child element) value from the XmlElement and convert it to the type supplied
            </summary>
            <param name="e">The XmlElement that settings are to be read from</param>
            <param name="setting">The name of the setting to read from the XmlElement</param>
            <param name="t">The <see cref="T:System.Type"/> that the setting is</param>
            <param name="val">The current value for the type</param>
            <returns>The setting as it was read from the config file, or null if there was nothing in the config file</returns>
        </member>
        <member name="P:Jenzabar.Common.Configuration.Settings.ClientConfigDirectory">
            <summary>
            The path to the directory where client configuration data is stored.
            </summary>
        </member>
        <member name="T:Jenzabar.Common.DataStructures.NameChangeType">
            <summary>
            Indicates the part of the users name that was changed.
            </summary>
            <remarks>Used in the Name.Changed event to indicate the part of the users name that was changed.</remarks>
        </member>
        <member name="F:Jenzabar.Common.DataStructures.NameChangeType.Prefix">
            <summary>
            Indicates that the Prefix of the person's name was changed in the Name.Changed event.
            </summary>
        </member>
        <member name="F:Jenzabar.Common.DataStructures.NameChangeType.First">
            <summary>
            Indicates that the first name of the person was changed in the Name.Changed event.
            </summary>
        </member>
        <member name="F:Jenzabar.Common.DataStructures.NameChangeType.Middle">
            <summary>
            Indicates that the middle name of the person was changed in the Name.Changed event.
            </summary>
        </member>
        <member name="F:Jenzabar.Common.DataStructures.NameChangeType.Last">
            <summary>
            Indicates that the last name of the person was changed in the Name.Changed event.
            </summary>
        </member>
        <member name="F:Jenzabar.Common.DataStructures.NameChangeType.Suffix">
            <summary>
            Indicates that the suffix of the person's name was changed in the Name.Changed event.
            </summary>
        </member>
        <member name="F:Jenzabar.Common.DataStructures.NameChangeType.Prefered">
            <summary>
            Indicates that the suffix of the person's name was changed in the Name.Changed event.
            </summary>
        </member>
        <member name="T:Jenzabar.Common.DataStructures.NameChangedEventArgs">
            <summary>
            Event arguments for name change events raised from the Name class.
            </summary>
            <remarks>This class provides information about the portion of the name that changed to the consumer of the Name.Changed event.</remarks>
        </member>
        <member name="M:Jenzabar.Common.DataStructures.NameChangedEventArgs.#ctor(Jenzabar.Common.DataStructures.NameChangeType)">
            <summary>
            Creates a new instance of the Jenzabar.Common.DataStructures.NameChangedEventArgs class.
            </summary>
            <param name="changedName"></param>
        </member>
        <member name="P:Jenzabar.Common.DataStructures.NameChangedEventArgs.ChangeType">
            <summary>
            Indicates the piece of the Name that was changed.
            </summary>
            <remarks>A <see cref="T:Jenzabar.Common.DataStructures.NameChangeType"/> value that indicates the portion of the name that was changed. This can be used to find out what changed on the name and act accordingly.</remarks>
        </member>
        <member name="T:Jenzabar.Common.DataStructures.NameChangedHandler">
            <summary>
            Represents the method that will handle the Name.Changed event that is fired when a portion of the Name class is changed.
            </summary>
        </member>
        <member name="T:Jenzabar.Common.DataStructures.NameDisplayFormat">
            <summary>
            Controls the formating of a names.
            </summary>
        </member>
        <member name="F:Jenzabar.Common.DataStructures.NameDisplayFormat.FullName">
            <summary>
            The name is displayed with all avaliable pieces of data. Example: "Dr Herman L. Smith PhD"
            </summary>
        </member>
        <member name="F:Jenzabar.Common.DataStructures.NameDisplayFormat.LastNameFirst">
            <summary>
            The name is displayed with the last name first, then the first name, and then the middle name if it is present. Example: "Smith, Herman L."
            </summary>
        </member>
        <member name="T:Jenzabar.Common.DataStructures.Name">
            <summary>
            Encapsulates logic to process and display names
            </summary>
        </member>
        <member name="M:Jenzabar.Common.DataStructures.Name.GetPrefixList">
            <summary>
            Gets a culture specific list of the valid Prefixes for the current culture.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Jenzabar.Common.DataStructures.Name.GetSuffixList">
            <summary>
            Gets a culture specific list of the valid Suffixes for the current culture.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Jenzabar.Common.DataStructures.Name.OnChanged(Jenzabar.Common.DataStructures.NameChangeType)">
            <summary>
            Raises the name changed event with a change type.
            </summary>
            <param name="changeType">A NameChangeType value indicating the portion os the name that changed.</param>
        </member>
        <member name="M:Jenzabar.Common.DataStructures.Name.#ctor(System.String,System.String)">
            <summary>
            Constructs the name struct
            </summary>
            <param name="firstName">The firstname of the individual</param>
            <param name="lastName">The lastname of the individual</param>
        </member>
        <member name="M:Jenzabar.Common.DataStructures.Name.#ctor(System.String,System.String,System.String)">
            <summary>
            Constructs the name struct
            </summary>
            <param name="firstName">The firstname of the individual</param>
            <param name="middleName">The middle name of the individual</param>
            <param name="lastName">The lastname of the individual</param>
        </member>
        <member name="M:Jenzabar.Common.DataStructures.Name.#ctor(System.String,System.String,System.String,System.String,System.Boolean,System.String,System.String)">
            <summary>
            Constructs the name struct
            </summary>
            <param name="prefix">The prefix of the individual (such as Mr. or Ms.)</param>
            <param name="firstName">The firstname of the individual</param>
            <param name="preferredName">The name that the user would like to use as their first name. This will not replace the official first name, but be used in its place.</param>
            <param name="hideMiddleName">true to make the middle name hidden.</param>
            <param name="middleName">The middle name of the individual</param>
            <param name="lastName">The lastname of the individual</param>
            <param name="suffix">The suffix of the individual (such as Jr. or II)</param>
        </member>
        <member name="M:Jenzabar.Common.DataStructures.Name.ToString">
            <summary>
            Returns the display name of the individual in the format "[Prefix] First|Prefered [Middle] Last [Suffix]"
            </summary>
            <returns>The string representation of this name.</returns>
            <remarks>The string representation of the name is determined by the existance of the different portions of the it. Some examples of the string representation of the name class are "Dr. Joseph Edward Sadowski", "Daniel Eric Kuehner III".</remarks>
        </member>
        <member name="M:Jenzabar.Common.DataStructures.Name.ToLastFirstNameString">
            <summary>
            Returns the display name of the individual in the format "LastName, First Name [Middle]"
            </summary>
            <returns>The string representation of this name.</returns>
        </member>
        <member name="E:Jenzabar.Common.DataStructures.Name.Changed">
            <summary>
            Occurs when a portion of the Name is changed.
            </summary>
            <remarks>If any portion of the name changes this event will fire informing any consumer of the change, allowing them to react.</remarks>
        </member>
        <member name="P:Jenzabar.Common.DataStructures.Name.DisplayName">
            <summary>
            Display Name property
            </summary>
            <remarks>
            The most commonly display parts of the name.
            Includes first, middle initial, and last
            </remarks>
        </member>
        <member name="P:Jenzabar.Common.DataStructures.Name.MiddleInitial">
            <summary>
            Gets the Middle Initial of the Name.
            </summary>
            <remarks>This will return the first letter of the middle name, or an empty string if there is no middle name.</remarks>
        </member>
        <member name="P:Jenzabar.Common.DataStructures.Name.Prefix">
            <summary>
            Gets and sets the Prefix for the Name.
            </summary>
            <remarks>Examples of prefixes are Dr, Mr, Miss</remarks>
        </member>
        <member name="P:Jenzabar.Common.DataStructures.Name.FirstName">
            <summary>
            Gets and sets the First Name portion of the Name
            </summary>
        </member>
        <member name="P:Jenzabar.Common.DataStructures.Name.PreferredName">
            <summary>
            Gets and sets the Prefered Name to be used in addition to the First Name to provide a more personalized feel.
            </summary>
            <remarks>Also known as a kinck name, a prefered name might might be Joe where the first name is Joseph.</remarks>
        </member>
        <member name="P:Jenzabar.Common.DataStructures.Name.MiddleName">
            <summary>
            Gets and sets the Middle Name portion of the Name
            </summary>
        </member>
        <member name="P:Jenzabar.Common.DataStructures.Name.HideMiddleName">
            <summary>
            True to hide the middle name in the display name, otherwise false.
            </summary>
        </member>
        <member name="P:Jenzabar.Common.DataStructures.Name.LastName">
            <summary>
            Gets and sets the Last Name portion of the Name
            </summary>
        </member>
        <member name="P:Jenzabar.Common.DataStructures.Name.Suffix">
            <summary>
            Gets and sets the Suffix of the Name.
            </summary>
            <remarks>Examples of suffixes are Jr, III, Sr</remarks>
        </member>
        <member name="T:Jenzabar.Common.UserFriendlyException">
            <summary>
            Use this Exception with user friendly messages, 
            already internationalized etc.
            </summary>
        </member>
        <member name="M:Jenzabar.Common.UserFriendlyException.#ctor(System.String)">
            <summary>
            Constructs the exception
            </summary>
            <param name="message">The message to be stored in the exception</param>
        </member>
        <member name="M:Jenzabar.Common.UserFriendlyException.#ctor(System.String,System.Exception)">
            <summary>
            Constructs the exception
            </summary>
            <param name="message">The message to be stored in the exception</param>
            <param name="innerException">The intial exception to be wrapped</param>
        </member>
        <member name="M:Jenzabar.Common.UserFriendlyException.#ctor(System.String,System.Exception,Jenzabar.Common.ErrorLevel)">
            <summary>
            Constructs the exception
            </summary>
            <param name="message">The message to be stored in the exception</param>
            <param name="innerException">The intial exception to be wrapped</param>
            <param name="errorLevel">error severity level</param>
        </member>
        <member name="P:Jenzabar.Common.UserFriendlyException.Category">
            <summary>
            category of exception, see enum for descriptions
            </summary>
        </member>
        <member name="T:Jenzabar.Common.Web.UI.Controls.MoveCopyDelete">
            <summary>
            MoveCopyDelete lets users delete, copy, or move items by selecting the corresponding actions from a drop-down
            in the <see cref="T:Jenzabar.Common.Web.UI.Controls.GroupedGrid">GroupedGrid</see> .
            </summary>
            <remarks>This control extends System.Web.UI.Control and is used in the Bookmarks portlet.</remarks>
        </member>
        <member name="F:Jenzabar.Common.Web.UI.Controls.MoveCopyDelete._hideSubmitButton">
            <summary>
            Gets or sets whether to hide the Submit button.
            </summary>
        </member>
        <member name="F:Jenzabar.Common.Web.UI.Controls.MoveCopyDelete._showFileCabinetSave">
            <summary>
            Gets or sets whether to show the file cabinet save button.
            </summary>
        </member>
        <member name="P:Jenzabar.Common.Web.UI.Controls.MoveCopyDelete.EventType">
            <summary>
            Gets the current action that is selected from the dropdown (Move, Copy, Delete, or Save).
            </summary>
        </member>
        <member name="P:Jenzabar.Common.Web.UI.Controls.MoveCopyDelete.SelectedKey">
            <summary>
            Gets the current key for the action that was selected from the dropdown.
            </summary>
        </member>
        <member name="T:Jenzabar.Common.Web.UI.Controls.BreadCrumbElement">
            <summary>
            Stores one element of a bread crumb trail.  
            Stores the screen name and the hyperlink to navigate to that screen.
            </summary>
            
        </member>
        <member name="T:Jenzabar.Common.Web.UI.Controls.BreadCrumbTrail">
            <summary>
            Builds a bread crumb trail by concatenating screen name hyperlinks delimited by ">".
            </summary>
            
        </member>
        <member name="M:Jenzabar.Common.Web.UI.Controls.BreadCrumbTrail.AddCrumbElement(Jenzabar.Common.Web.UI.Controls.BreadCrumbElement)">
            <summary>
            Adds a bread crumb to the trail.
            </summary>
            <param name="myCrumbElement">A BreadCrumbElement</param>
            
        </member>
        <member name="M:Jenzabar.Common.Web.UI.Controls.BreadCrumbTrail.populateCrumbTrail(System.String,System.String)">
            <summary>
            Populates the bread crumb trail elements from screen display names and links to those screens
            </summary>
            
            <param name="DisplayNames">A pipe-delimited (|) string of screen names</param>
            <param name="CommandArguments">A pipe-delimited (|) string of links to screens</param>
        </member>
        <member name="M:Jenzabar.Common.Web.UI.Controls.BreadCrumbTrail.RefreshCrumbElements">
            <summary>
            Refreshes the bread crumb trail control.
            </summary>
            
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Common.ExceptionFormatter">
            <summary>
            <para>Provides exception formatting when not using the Exception Handling block.</para>
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.ExceptionFormatter.#ctor">
            <summary>
            <para>Initialize a new instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.ExceptionFormatter"/> class.</para>
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.ExceptionFormatter.#ctor(System.Collections.Specialized.NameValueCollection,System.String)">
            <summary>
            <para>Initialize a new instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.ExceptionFormatter"/> class with the additional information and the application name.</para>
            </summary>
            <param name="additionalInfo">
            <para>The additional information to log.</para>
            </param>
            <param name="applicationName">
            <para>The application name.</para>
            </param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.ExceptionFormatter.GetMessage(System.Exception)">
            <summary>
            <para>Get the formatted message to be logged.</para>
            </summary>
            <param name="exception"><para>The exception object whose information should be written to log file.</para></param>
            <returns><para>The formatted message.</para></returns>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.ExceptionFormatter.CollectAdditionalInfo">
            <devdoc>
            Add additional 'environment' information. 
            </devdoc>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Common.Instrumentation.PerformanceCounterInstances">
            <summary>
            <para>
            This type supports the Instrumentation infrastructure and is not intended to be used directly from your code.
            </para>
            </summary>	
            <devdoc>
            This class can contain two performance counters, one for the app and another for _total_. 
            </devdoc>	
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Instrumentation.PerformanceCounterInstances.#ctor(System.String,System.String,System.Boolean)">
            <summary/>
            <param name="categoryName"/>
            <param name="counterName"/>
            <param name="createNewInstance"/>
            <exclude/>
            <devdoc>
            This class can contain two performance counters, one for the application and another for _total_. 
            </devdoc>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Instrumentation.PerformanceCounterInstances.RawValue(System.Int64)">
            <summary/>
            <exclude/>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Instrumentation.PerformanceCounterInstances.Decrement">
            <summary/>
            <exclude/>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Instrumentation.PerformanceCounterInstances.Increment">
            <summary/>
            <exclude/>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Instrumentation.PerformanceCounterInstances.IncrementBy(System.Int64)">
            <summary/>
            <param name="value"/>
            <exclude/>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Instrumentation.PerformanceCounterInstances.IncrementByCore(System.Int64)">
            <devdoc>
            Make this method private so that it can have conditional attribute
            defined in this project.
            </devdoc>        
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Instrumentation.PerformanceCounterInstances.IncrementCore">
            <devdoc>
            Make this method private so that it can have conditional attribute /// defined in this project.
            </devdoc>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Instrumentation.PerformanceCounterInstances.DecrementCore">
            <devdoc>
            Make this method private so that it can have conditional attribute
            defined in this project.
            </devdoc>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Instrumentation.PerformanceCounterInstances.ReportCounterFailure(System.String)">
            <devdoc>
            Reports the failure in performance counters once per counter to the event log.
            </devdoc>        
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Instrumentation.PerformanceCounterInstances.RawValueCore(System.Int64)">
            <devdoc>
            Make this method private so that it can have conditional attribute defined in this project.
            </devdoc>        
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Instrumentation.PerformanceCounterInstances.CurrentInstanceName">
            <summary/>
            <exclude/>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Instrumentation.PerformanceCounterInstances.CounterName">
            <summary/>
            <exclude/>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Configuration.ConfigurationSettings">
            <summary>
            <para>Represents the root of the configuration graph.</para>
            </summary>
            <remarks>
            <para>The class maps to the <c>enterpriselibrary.configurationSettings</c> element in configuration.</para>
            </remarks>
        </member>
        <member name="F:Microsoft.Practices.EnterpriseLibrary.Configuration.ConfigurationSettings.SectionName">
            <summary>
            <para>Gets the section name for the library in configuration.</para>
            </summary>
            <value>
            <para>The section name for the library in configuration.</para>
            </value>
            <remarks>
            <para>The secion name is enterpriselibrary.configurationSettings.</para>
            </remarks>
        </member>
        <member name="F:Microsoft.Practices.EnterpriseLibrary.Configuration.ConfigurationSettings.ConfigurationNamespace">
            <summary>
            <para>Gets the Xml namespace for this root node.</para>
            </summary>
            <value>
            <para>The Xml namespace for this root node.</para>
            </value>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Configuration.ConfigurationSettings.#ctor">
            <summary>
            <para>Initialize a new instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Configuration.ConfigurationSettings"/> class.</para>
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Configuration.ConfigurationSettings.#ctor(System.String)">
            <summary>
            <para>Initialize a new instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Configuration.ConfigurationSettings"/> class with a default section name.</para>
            </summary>
            <param name="applicationName">
            <para>The name of the application for these settings.</para>
            </param>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Configuration.ConfigurationSettings.ConfigurationSections">
            <summary>
            <para>Gets the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Configuration.ConfigurationSectionDataCollection"/>.</para>
            </summary>
            <value>
            <para>The configuration sections available in configuration. The default is an empty collection.</para>
            </value>
            <remarks>
            <para>This property maps to the <c>configurationSections</c> element in configuration.</para>
            </remarks>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Configuration.ConfigurationSettings.ApplicationName">
            <summary>
            <para>Gets or sets the name of the application for these settings.</para>
            </summary>
            <value>
            <para>The name of application for these settings. The default is an empty string.</para>
            </value>
            <remarks>
            <para>This property maps to the <c>applicationName</c> attribute in configuration for the block configuration.</para>
            </remarks>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Configuration.ConfigurationSettings.Item(System.String)">
            <summary>
            <para>Gets or sets the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Configuration.ConfigurationSectionData"/> associated with the specified <paramref name="name"/>.</para>
            </summary>
            <param name="name">
            <para>The name of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Configuration.ConfigurationSectionData"/> to get or set.</para>
            </param>
            <value>
            <para>The value associated with the specified <paramref name="name"/>. If the specified <paramref name="name"/> is not found, attempting to get it returns a <see langword="null"/> reference (Nothing in Visual Basic), and attempting to set it creates a new entry using the specified <paramref name="name"/>.</para>
            </value>
            <exception cref="T:System.ArgumentNullException">
            <para><paramref name="name"/> is a <see langword="null"/> reference (Nothing in Visual Basic).</para>
            </exception>
            <seealso cref="P:Microsoft.Practices.EnterpriseLibrary.Configuration.ConfigurationSectionData.Name"/>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Configuration.ConfigurationSettings.KeyAlgorithmPairStorageProviderData">
            <summary>
            <para>Gets or sets the <see cref="P:Microsoft.Practices.EnterpriseLibrary.Configuration.ConfigurationSettings.KeyAlgorithmPairStorageProviderData"/> for encrypting sections.</para>
            </summary>
            <value>
            <para>The <see cref="P:Microsoft.Practices.EnterpriseLibrary.Configuration.ConfigurationSettings.KeyAlgorithmPairStorageProviderData"/> for encrypting sections.</para>
            </value>
            <remarks>
            <para>This property maps to the <c>keyAlgorithmStorageProvider</c> attribute in configuration for the configuration.</para>
            </remarks>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Configuration.ConfigurationSettings.XmlIncludeTypes">
            <summary>
            <para>Gets the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Configuration.XmlIncludeTypeDataCollection"/>.</para>
            </summary>
            <value>
            <para>The include types available in configuration. The default is an empty collection.</para>
            </value>
            <remarks>
            <para>This property maps to the <c>includeTypes</c> element in configuration.</para>
            </remarks>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Configuration.ConfigurationChangedEventHandler">
            <summary>
            <para>Represents the method that will handle the <seealso cref="E:Microsoft.Practices.EnterpriseLibrary.Configuration.ConfigurationManager.ConfigurationChanged"/> and <see cref="E:Microsoft.Practices.EnterpriseLibrary.Configuration.ConfigurationContext.ConfigurationChanged"/> events.</para>
            </summary>
            <param name="sender">
            <para>The source of the event.</para>
            </param>
            <param name="e">
            <para>A <see cref="T:Microsoft.Practices.EnterpriseLibrary.Configuration.ConfigurationChangedEventArgs"/> that contains the event data.</para>
            </param>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Common.FileHelper">
            <summary>
            <para>Helper class to do all the file work. It assumes that all files are rooted.</para>
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.FileHelper.ChangeFileAttributesToWritable(System.String)">
            <summary>
            <para>Reset the file attributes of a file so it can be overwritten.</para>
            </summary>
            <param name="filePath">
            <para>The fully qualified path to the file.</para>
            </param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.FileHelper.IsFileReadOnly(System.String)">
            <summary>
            <para>Determies if the file is read-only.</para>
            </summary>
            <param name="filePath">
            <para>The fully qualified path to the file.</para>
            </param>
            <returns>
            <para><see langword="true"/> if the file is read-only; otherwise <see langword="false"/>.</para>
            </returns>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.FileHelper.CreateZeroByteFile(System.String)">
            <summary>
            <para>Creat a zero byte length file in the specified path.</para>
            </summary>
            <param name="filePath">
            <para>The absolute path to the file to create.</para>
            </param>
            <exception cref="T:System.ArgumentNullException">
            <para><paramref name="filePath"/> is a <see langword="null"/> reference (Nothing in Visual Basic).</para>
            </exception>
            <exception cref="T:System.UnauthorizedAccessException">
            <para>The caller does not have the required permission.</para>para&gt;
            <para>-or-</para>
            <para><paramref name="filePath"/> specified a file that is read-only.</para>
            </exception>
            <exception cref="T:System.ArgumentException">
            <para><paramref name="filePath"/> is a zero-length string, contains only white space, or contains one or more invalid characters as defined by <see cref="F:System.IO.Path.InvalidPathChars"/>.</para>
            </exception>
            <exception cref="T:System.IO.PathTooLongException">
            <para>The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters.</para>
            </exception>
            <exception cref="T:System.IO.DirectoryNotFoundException">
            <para>The specified path is invalid, such as being on an unmapped drive.</para>
            </exception>
            <exception cref="T:System.IO.IOException">
            <para>An I/O error occurred while creating the file.</para>
            </exception>
            <exception cref="T:System.ArgumentNullException">
            <para><paramref name="filePath"/> is in an invalid format.</para>
            </exception>
            <seealso cref="M:System.IO.File.Create(System.String)"/>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Configuration.DpapiSettingsData">
            <summary>
            Configuration settings for any DPAPI implementation.
            </summary>
            <remarks>
            See 
            <a href="http://msdn.microsoft.com/library/default.asp?url=/library/en-us/dnsecure/html/windataprotection-dpapi.asp">Windows Data Protection</a> on
            MSDN for more information.
            </remarks>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Configuration.DpapiSettingsData.#ctor">
            <summary>
            <para>Initialize a new instnace of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Configuration.DpapiSettingsData"/> class.</para>
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Configuration.DpapiSettingsData.#ctor(System.Byte[],Microsoft.Practices.EnterpriseLibrary.Common.Cryptography.DpapiStorageMode)">
            <summary>
            <para>Initialize a new instnace of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Configuration.DpapiSettingsData"/> class with entropy and a <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Cryptography.DpapiStorageMode"/>.</para>
            </summary>
            <param name="entropy">
            <para>The machine entropy</para>
            </param>
            <param name="mode">
            <para>One of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Cryptography.DpapiStorageMode"/> values.</para>
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <para>The value provided was out of the excepted valid ranges for <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Cryptography.DpapiStorageMode"/>.</para>
            </exception>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Configuration.DpapiSettingsData.Mode">
            <summary>
            <para>Gets or sets the DPAPI storage mode.</para>
            </summary>
            <value>
            <para>One of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Cryptography.DpapiStorageMode"/> values.</para>
            </value>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <para>The value provided was out of the excepted valid ranges for <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Cryptography.DpapiStorageMode"/>.</para>
            </exception>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Configuration.DpapiSettingsData.Entropy">
            <summary>
            <para>Gets or sets the machine entropy.</para>
            </summary>
            <value>
            <para>The machine entropy.</para>
            </value>
            <remarks>
            <para>This is only required when the mode is set to <seealso cref="F:Microsoft.Practices.EnterpriseLibrary.Common.Cryptography.DpapiStorageMode.Machine"/>.</para>
            </remarks>
        </member>
        <member name="T:Jenzabar.Common.Web.UI.Controls.ImageAndTextButton">
            <summary>
            A hyperlink style button control that renders an image in front of a hyperlink and provides a tooltip.
            </summary>
            <remarks>Extends .NET's System.Web.UI.WebControls.LinkButton.</remarks>
        </member>
        <member name="M:Jenzabar.Common.Web.UI.Controls.ImageAndTextButton.#ctor">
            <summary>
            Creates a new instance of the ImageAndTextButton control.
            </summary>
        </member>
        <member name="M:Jenzabar.Common.Web.UI.Controls.ImageAndTextButton.SaveViewState">
            <summary>
            Saves the view state for the control.
            </summary>
            <returns>Saved state System.Web.UI.Pair object.</returns>
        </member>
        <member name="M:Jenzabar.Common.Web.UI.Controls.ImageAndTextButton.LoadViewState(System.Object)">
            <summary>
            Loads the view state for the control.
            </summary>
            <param name="savedState">The previously saved view state object.</param>
        </member>
        <member name="M:Jenzabar.Common.Web.UI.Controls.ImageAndTextButton.Render(System.Web.UI.HtmlTextWriter)">
            <summary>
            Writes HTML for the control to the output stream.
            </summary>
            <param name="writer">The HtmlTextWriter that renders the control.</param>
            <remarks></remarks>
        </member>
        <member name="P:Jenzabar.Common.Web.UI.Controls.ImageAndTextButton.TextKey">
            <summary>
            Gets and sets the key to use to look up globalized text to use for the text of this control.
            </summary>
        </member>
        <member name="P:Jenzabar.Common.Web.UI.Controls.ImageAndTextButton.ToolTipKey">
            <summary>
            Gets and sets the key to use to look up globalized text to use for the tooltip of this control.
            </summary>
        </member>
        <member name="P:Jenzabar.Common.Web.UI.Controls.ImageAndTextButton.ImageUrl">
            <summary>
            Gets and sets the src for the image that will be used for the button.
            </summary>
            <remarks>
            This can be a relative path for the application like "~/images/add-button.gif"</remarks>
        </member>
        <member name="P:Jenzabar.Common.Web.UI.Controls.ImageAndTextButton.EnableViewState">
            <summary>
            True to make the ImageAndTextButton maintain state across posts.
            </summary>
        </member>
        <member name="T:Jenzabar.Common.Web.UI.Controls.DeleteImageAndTextButton">
            <summary>
            An <see cref="T:Jenzabar.Common.Web.UI.Controls.ImageAndTextButton">ImageAndTextButton</see> with the generic Delete image.
            </summary>
        </member>
        <member name="P:Jenzabar.Common.Web.UI.Controls.DeleteImageAndTextButton.ImageUrl">
            <summary>
            Gets the path to the src to be used for images.
            </summary>
        </member>
        <member name="T:Jenzabar.Common.Web.UI.Controls.AddImageAndTextButton">
            <summary>
            An <see cref="T:Jenzabar.Common.Web.UI.Controls.ImageAndTextButton">ImageAndTextButton</see> with the generic Add image.
            </summary>
        </member>
        <member name="P:Jenzabar.Common.Web.UI.Controls.AddImageAndTextButton.ImageUrl">
            <summary>
            Gets the path to the src to be used for images.
            </summary>
        </member>
        <member name="T:Jenzabar.Common.Web.UI.Controls.ContentBox">
            <summary>
            A control that acts as a container for other controls.  
            It renders a thin black line around other controls and displays a header.
            </summary>
            <remarks>This control extends .NET's System.Web.UI.WebControls.Panel.</remarks>
        </member>
        <member name="P:Jenzabar.Common.Web.UI.Controls.ContentBox.TextKey">
            <summary>
            Gets and sets the key to use to look up the globalized header for this control.
            </summary>
        </member>
        <member name="P:Jenzabar.Common.Web.UI.Controls.ContentBox.Text">
            <summary>
            Gets and sets the text for the globalized header of this control.
            </summary>
        </member>
        <member name="T:Jenzabar.Common.ApplicationBlocks.ExceptionManagement.ExceptionManager">
            <summary>
            The Exception Manager class manages the publishing of exception information based on settings in the configuration file.
            </summary>
        </member>
        <member name="M:Jenzabar.Common.ApplicationBlocks.ExceptionManagement.ExceptionManager.#ctor">
            <summary>
            Private constructor to restrict an instance of this class from being created.
            </summary>
        </member>
        <member name="M:Jenzabar.Common.ApplicationBlocks.ExceptionManagement.ExceptionManager.Publish(System.Exception)">
            <summary>
            Static method to publish the exception information.
            </summary>
            <param name="exception">The exception object whose information should be published.</param>
        </member>
        <member name="M:Jenzabar.Common.ApplicationBlocks.ExceptionManagement.ExceptionManager.Publish(System.Exception,System.Collections.Specialized.NameValueCollection)">
            <summary>
            Static method to publish the exception information and any additional information.
            </summary>
            <param name="exception">The exception object whose information should be published.</param>
            <param name="additionalInfo">A collection of additional data that should be published along with the exception information.</param>
        </member>
        <member name="M:Jenzabar.Common.ApplicationBlocks.ExceptionManagement.ExceptionManager.PublishToCustomPublisher(System.Exception,System.Collections.Specialized.NameValueCollection,Jenzabar.Common.ApplicationBlocks.ExceptionManagement.PublisherSettings)">
            <summary>
            Private static helper method to publish the exception information to a custom publisher.
            </summary>
            <param name="exception">The exception object whose information should be published.</param>
            <param name="additionalInfo">A collection of additional data that should be published along with the exception information.</param>
            <param name="publisher">The PublisherSettings that contains the values of the publishers configuration.</param>
        </member>
        <member name="M:Jenzabar.Common.ApplicationBlocks.ExceptionManagement.ExceptionManager.PublishToDefaultPublisher(System.Exception,System.Collections.Specialized.NameValueCollection)">
            <summary>
            Private static helper method to publish the exception information to the default publisher.
            </summary>
            <param name="exception">The exception object whose information should be published.</param>
            <param name="additionalInfo">A collection of additional data that should be published along with the exception information.</param>
        </member>
        <member name="M:Jenzabar.Common.ApplicationBlocks.ExceptionManagement.ExceptionManager.PublishInternalException(System.Exception,System.Collections.Specialized.NameValueCollection)">
            <summary>
            Private static helper method to publish the exception information to the default publisher.
            </summary>
            <param name="exception">The exception object whose information should be published.</param>
            <param name="additionalInfo">A collection of additional data that should be published along with the exception information.</param>
        </member>
        <member name="M:Jenzabar.Common.ApplicationBlocks.ExceptionManagement.ExceptionManager.Activate(System.String,System.String)">
            <summary>
            Private helper function to assist in run-time activations. Returns
            an object from the specified assembly and type.
            </summary>
            <param name="assembly">Name of the assembly file (w/out extension)</param>
            <param name="typeName">Name of the type to create</param>
            <returns>Instance of the type specified in the input parameters.</returns>
        </member>
        <member name="M:Jenzabar.Common.ApplicationBlocks.ExceptionManagement.ExceptionManager.SerializeToXml(System.Exception,System.Collections.Specialized.NameValueCollection)">
            <summary>
            Public static helper method to serialize the exception information into XML.
            </summary>
            <param name="exception">The exception object whose information should be published.</param>
            <param name="additionalInfo">A collection of additional data that should be published along with the exception information.</param>
        </member>
        <member name="T:Jenzabar.Common.ApplicationBlocks.ExceptionManagement.DefaultPublisher">
            <summary>
            Component used as the default publishing component if one is not specified in the config file.
            </summary>
        </member>
        <member name="M:Jenzabar.Common.ApplicationBlocks.ExceptionManagement.DefaultPublisher.#ctor">
            <summary>
            Default Constructor.
            </summary>
        </member>
        <member name="M:Jenzabar.Common.ApplicationBlocks.ExceptionManagement.DefaultPublisher.#ctor(System.String,System.String)">
            <summary>
            Constructor allowing the log name and application names to be set.
            </summary>
            <param name="logName">The name of the log for the DefaultPublisher to use.</param>
            <param name="applicationName">The name of the application.  This is used as the Source name in the event log.</param>
        </member>
        <member name="M:Jenzabar.Common.ApplicationBlocks.ExceptionManagement.DefaultPublisher.Publish(System.Exception,System.Collections.Specialized.NameValueCollection,System.Collections.Specialized.NameValueCollection)">
            <summary>
            Method used to publish exception information and additional information.
            </summary>
            <param name="exception">The exception object whose information should be published.</param>
            <param name="additionalInfo">A collection of additional data that should be published along with the exception information.</param>
            <param name="configSettings">A collection of any additional attributes provided in the config settings for the custom publisher.</param>
        </member>
        <member name="M:Jenzabar.Common.ApplicationBlocks.ExceptionManagement.DefaultPublisher.WriteToLog(System.String,System.Diagnostics.EventLogEntryType)">
            <summary>
            Helper function to write an entry to the Event Log.
            </summary>
            <param name="entry">The entry to enter into the Event Log.</param>
            <param name="type">The EventLogEntryType to be used when the entry is logged to the Event Log.</param>
        </member>
        <member name="T:Jenzabar.Common.Web.UI.Controls.MultiFileUpload">
            <summary>
            Lets users select more than one file to upload at a time.
            Consists of a list of the files to add along with checkboxes and an
            "upload file" directive.
            </summary>
            <remarks>
            The files are uploaded one at a time, 
            but to the user it looks as if they are being uploaded all at once.
            </remarks>
        </member>
        <member name="M:Jenzabar.Common.Web.UI.Controls.MultiFileUpload.#ctor">
            <summary>
            Creates a new instance of the control.
            </summary>
        </member>
        <member name="M:Jenzabar.Common.Web.UI.Controls.MultiFileUpload.OnPreRender(System.EventArgs)">
            <summary>
            Re-assigns the ids for the checkboxes, 
            so they will match the ids created when the form is posted back.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Jenzabar.Common.Web.UI.Controls.MultiFileUpload.SaveViewState">
            <summary>
            Stores any uploaded files in the ViewState.
            </summary>
            <returns>A System.Web.UI.Pair object containing the posted files.</returns>
        </member>
        <member name="M:Jenzabar.Common.Web.UI.Controls.MultiFileUpload.Render(System.Web.UI.HtmlTextWriter)">
            <summary> 
            Renders the control.
            </summary>
            <param name="output"> The HTMLTextWriter that renders the control. </param>
        </member>
        <member name="M:Jenzabar.Common.Web.UI.Controls.MultiFileUpload._add_ServerClick(System.Object,System.EventArgs)">
            <summary>
            Called when the user clicks "Add". 
            This adds the needed checkbox controls to the controls collection, 
            and remembers the file that was uploaded in the session.
            </summary>
            <param name="sender">The control object sending the event.</param>
            <param name="e">The System.EventArgs.</param>
        </member>
        <member name="M:Jenzabar.Common.Web.UI.Controls.MultiFileUpload._remove_Click(System.Object,System.EventArgs)">
            <summary>
            Called when the user clicks "Remove Selected" at the bottom of the list of selected files.
            </summary>
            <param name="sender">The control object sending the event.</param>
            <param name="e">The System.EventArgs.</param>
        </member>
        <member name="P:Jenzabar.Common.Web.UI.Controls.MultiFileUpload.MaxFileSize">
            <summary>
            Gets and sets the maximum size allowed for all the uploaded files, combined.
            </summary>
        </member>
        <member name="P:Jenzabar.Common.Web.UI.Controls.MultiFileUpload.PostedFiles">
            <summary>
            Gets the list of files uploaded by the client.
            </summary>
        </member>
        <member name="P:Jenzabar.Common.Web.UI.Controls.UploadTempFile.FileName">
            <summary>
            Gets the fully-qualified name of the file on the client's computer (for example, "C:\MyFiles\Test.txt").
            </summary>
        </member>
        <member name="P:Jenzabar.Common.Web.UI.Controls.UploadTempFile.ContentLength">
            <summary>
            Gets the size in bytes of an uploaded file.
            </summary>
        </member>
        <member name="P:Jenzabar.Common.Web.UI.Controls.UploadTempFile.ContentType">
            <summary>
            Gets the MIME content type of a file sent by a client.
            </summary>
        </member>
        <member name="P:Jenzabar.Common.Web.UI.Controls.UploadTempFile.InputStream">
            <summary>
            Gets a System.IO.Stream object that points to an uploaded file 
            in preparation for reading the contents of the file.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Configuration.Protection.KeyAlgorithmPair">
            <summary>
            <para>Represents the key algrithm pair for encrypting configuration sections.</para>
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Configuration.Protection.KeyAlgorithmPair.#ctor">
            <summary>
            <para>Instantiate a new instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Configuration.Protection.KeyAlgorithmPair"/> class.</para>
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Configuration.Protection.KeyAlgorithmPair.#ctor(System.Byte[],System.String)">
            <summary>
            <para>Instantiate a new instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Configuration.Protection.KeyAlgorithmPair"/> class with a key and algorithm type name.</para>
            </summary>
            <param name="key">
            <para>The key for the algorithm.</para>
            </param>
            <param name="algorithmTypeName">
            <para>The fully qualified type name for the algorithm.</para>
            </param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Configuration.Protection.KeyAlgorithmPair.Finalize">
            <summary>
            <para>Allows an the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Configuration.Protection.KeyAlgorithmPair"/> to attempt to free resources and perform other cleanup operations before the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Configuration.Protection.KeyAlgorithmPair"/> is reclaimed by garbage collection. </para>
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Configuration.Protection.KeyAlgorithmPair.Dispose">
            <summary>
            <para>Releases the unmanaged resources used by the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Configuration.Protection.KeyAlgorithmPair"/> and optionally releases the managed resources.</para>
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Configuration.Protection.KeyAlgorithmPair.Dispose(System.Boolean)">
            <summary>
            <para>Releases the unmanaged resources used by the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Configuration.Protection.KeyAlgorithmPair"/> and optionally releases the managed resources.</para>
            </summary>
            <param name="disposing">
            <para><see langword="true"/> to release both managed and unmanaged resources; <see langword="false"/> to release only unmanaged resources.</para>
            </param>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Configuration.Protection.KeyAlgorithmPair.Key">
            <summary>
            <para>Gets or sets the key for the pair.</para>
            </summary>
            <value>
            <para>The key for the pair.</para>
            </value>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Configuration.Protection.KeyAlgorithmPair.AlgorithmTypeName">
            <summary>
            <para>Gets or sets the algorithm type name.</para>
            </summary>
            <value>
            <para>The algorithm type name.</para>
            </value>
        </member>
        <member name="T:Jenzabar.Common.Web.UI.Controls.ConfirmationButton">
            <summary>
            A button control that displays a globalized confirmation message when the button is pushed to submit a form.
            </summary>
            <remarks>This control extends <see cref="T:Jenzabar.Common.Web.UI.Controls.GlobalizedButton">GlobalizedButton</see>.</remarks>
        </member>
        <member name="P:Jenzabar.Common.Web.UI.Controls.ConfirmationButton.ConfirmationMessage">
            <summary>
            Gets and sets the globalized confirmation message that is displayed to the user before the form is submitted, allowing the user to click cancel to not submit the form.
            </summary>
        </member>
        <member name="T:Jenzabar.Common.Web.UI.Controls.ConfirmationImageButton">
            <summary>
            A control that displays an image and responds to mouse clicks on the image with a confirmation message.
            </summary>
            <remarks>This control extends .NET's System.Web.UI.WebControls.ImageButton.</remarks>
        </member>
        <member name="P:Jenzabar.Common.Web.UI.Controls.ConfirmationImageButton.ConfirmationMessage">
            <summary>
            Gets and sets the globalized confirmation message that is displayed to the user before the form is submitted, allowing the user to click cancel to not submit the form.
            </summary>
        </member>
        <member name="T:Jenzabar.Common.Web.UI.Controls.ConfirmationImageAndTextButton">
            <summary>
            A hyperlink style button control that renders an image before a globalized hyperlink string and displays a confirmation message when clicked.
            </summary>
            <remarks>Extends <see cref="T:Jenzabar.Common.Web.UI.Controls.ImageAndTextButton">ImageAndTextButton</see>.</remarks>
        </member>
        <member name="M:Jenzabar.Common.Web.UI.Controls.ConfirmationImageAndTextButton.Render(System.Web.UI.HtmlTextWriter)">
            <summary>
            Writes HTML for the control to the output stream.
            </summary>
            <param name="writer">The HtmlTextWriter to write the markup to.</param>
            <remarks></remarks>
        </member>
        <member name="P:Jenzabar.Common.Web.UI.Controls.ConfirmationImageAndTextButton.ConfirmationMessage">
            <summary>
            Gets and sets the globalized confirmation message that is displayed to the user before the form is submitted, allowing the user to click cancel to not submit the form.
            </summary>
        </member>
        <member name="T:Jenzabar.Common.Xml.Node">
            <summary>
            class Node
            </summary>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Common.Cryptography.SymmetricCryptographer">
            <summary>
            <para>Represents basic cryptography services for a <see cref="T:System.Security.Cryptography.SymmetricAlgorithm"/>.</para>
            </summary>
            <remarks>
            <para>
            Because the IV (Initialization Vector) has the same distribution as the resulting 
            ciphertext, the IV is randomly generated and prepended to the ciphertext.
            </para>
            </remarks>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Cryptography.SymmetricCryptographer.#ctor(System.Security.Cryptography.SymmetricAlgorithm,System.Byte[])">
            <summary>
            <para>Initalize a new instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Cryptography.SymmetricCryptographer"/> class with a <see cref="T:System.Security.Cryptography.SymmetricAlgorithm"/> and key.</para>
            </summary>
            <param name="algorithm"><para>The algorithm in which to perform crypographic functions.</para></param>
            <param name="key"><para>The key for the algorithm.</para></param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Cryptography.SymmetricCryptographer.#ctor(System.String,System.Byte[])">
            <summary>
            <para>Initalize a new instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Cryptography.SymmetricCryptographer"/> class with an algorithm type and a key.</para>
            </summary>
            <param name="algorithmType"><para>The qualified assembly name of a <see cref="T:System.Security.Cryptography.SymmetricAlgorithm"/>.</para></param>
            <param name="key"><para>The key for the algorithm.</para></param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Cryptography.SymmetricCryptographer.Encrypt(System.Byte[])">
            <summary>
            <para>Encrypts bytes with the initialized algorithm and key.</para>
            </summary>
            <param name="plaintext"><para>The plaintext in which you wish to encrypt.</para></param>
            <returns><para>The resulting ciphertext.</para></returns>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Cryptography.SymmetricCryptographer.Decrypt(System.Byte[])">
            <summary>
            <para>Decrypts bytes with the initialized algorithm and key.</para>
            </summary>
            <param name="encryptedText"><para>The text which you wish to decrypt.</para></param>
            <returns><para>The resulting plaintext.</para></returns>
        </member>
        <member name="T:Jenzabar.Common.Xml.Document">
            <summary>
            Represents an XML document
            </summary>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Configuration.ConfigurationBuilder">
            <summary>
            <para>
            Provides a facade to configuration settings from defined storage in a specified configuration section. 
            </para>
            </summary> 
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Configuration.ConfigurationBuilder.#ctor(System.String)">
            <summary>
            <para>
            Initialize a new instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Configuration.ConfigurationManager"/> class with a configuration file.
            </para>
            </summary>
            <param name="configurationFile">
            <para>
            The file where the configuration settings are defined.
            </para>
            </param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Configuration.ConfigurationBuilder.#ctor(Microsoft.Practices.EnterpriseLibrary.Configuration.ConfigurationSettings)">
            <summary>
            <para>Initialize a new instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Configuration.ConfigurationManager"/> class with the preloaded configuration.</para>
            </summary>
            <param name="configurationSettings">
            <para>The preloaded configuration data to initialize the manager.</para>
            </param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Configuration.ConfigurationBuilder.Dispose">
            <summary>
            <para>Releases the unmanaged resources used by the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Configuration.ConfigurationBuilder"/> and optionally releases the managed resources.</para>
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Configuration.ConfigurationBuilder.Dispose(System.Boolean)">
            <summary>
            <para>Releases the unmanaged resources used by the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Configuration.ConfigurationBuilder"/> and optionally releases the managed resources.</para>
            </summary>
            <param name="disposing">
            <para><see langword="true"/> to release both managed and unmanaged resources; <see langword="false"/> to release only unmanaged resources.</para>
            </param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Configuration.ConfigurationBuilder.ReadConfiguration(System.String)">
            <summary>
            <para>
            Reads configuration settings for a user-defined configuration section.
            </para>
            </summary>
            <param name="sectionName">
            <para>The configuration section to read.</para>
            </param>
            <returns>
            <para>The configuration settings for <paramref name="sectionName"/>.</para>
            </returns>
            <exception cref="T:System.ArgumentException">
            <para><paramref name="sectionName"/>can not be <see langword="null"/> (Nothing in Visual Basic).</para>
            </exception>
            <exception cref="T:System.Configuration.ConfigurationException">
            <para><paramref name="sectionName"/> is not valid for this configuration.</para>
            </exception>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Configuration.ConfigurationBuilder.WriteConfiguration(System.String,System.Object)">
            <summary>
            <para>
            Write configuration for a section to storage.
            </para>
            </summary>
            <param name="sectionName">
            <para>The name of the section for the configuration data.</para>
            </param>
            <param name="configValue">
            <para>The configuration value to store.</para>
            </param>
            <exception cref="T:System.Configuration.ConfigurationException">
            <para><paramref name="sectionName"/> is not valid section for this configuration.</para>
            <para>- or -</para>
            <para>The section data is read only.</para>
            <para>- or -</para>
            <para>An error occured while reading the configuration to save the data.</para>
            </exception>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Configuration.ConfigurationBuilder.WriteMetaConfiguration(Microsoft.Practices.EnterpriseLibrary.Configuration.ConfigurationSettings)">
            <summary>
            <para>
            Write the meta configuration for the configuration manager to the configuration file.
            </para>
            </summary>
            <param name="configurationSettings">
            The meta configuration to write to configuration.
            </param>
            <exception cref="T:System.Configuration.ConfigurationException">
            <para>An error occured while reading the configuration to save the data.</para>
            </exception>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Configuration.ConfigurationBuilder.WriteMetaConfig(Microsoft.Practices.EnterpriseLibrary.Configuration.ConfigurationSectionData)">
            <summary>
            <para>
            Write the meta configuration for the configuration manager to the configuration file.
            </para>
            </summary>
            <param name="configurationSectionData">
            The meta configuration to write to configuration.
            </param>
            <exception cref="T:System.Configuration.ConfigurationException">
            <para>An error occured while reading the configuration to save the data.</para>
            </exception>
            <exception cref="T:System.InvalidOperationException">
            <para>The configuration section already exists.</para>
            </exception>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Configuration.ConfigurationBuilder.ReadMetaConfiguration">
            <summary>
            <para>
            Read the meta configuration for the configuration manager.
            </para>
            </summary>
            <returns>
            <para>
            The meta configuration for the configuration manager or null if no entries exists.
            </para>
            </returns>
            <exception cref="T:System.Configuration.ConfigurationException">
            <para>An error occured while reading the meta configuration.</para>
            </exception>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Configuration.ConfigurationBuilder.ReadMetaConfiguration(System.String)">
            <summary>
            <para>
            Read the meta configuration for the configuration manager.
            </para>
            </summary>
            <param name="sectionName">
            <para>The name of the configuration section to retrieve.    </para>
            </param>
            <returns>
            <para>
            The meta configuration for the configuration manager or null if no entries exists.
            </para>
            </returns>
            <exception cref="T:System.Configuration.ConfigurationException">
            <para>An error occured while reading the meta configuration.</para>
            </exception>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Configuration.ConfigurationBuilder.IsReadOnly(System.String)">
            <summary>
            <para>
            Gets a value indicating whether a section in configuration is read-only.
            </para>
            </summary>
            <param name="sectionName">
            <para>
            The section in the configuration.
            </para>
            </param>
            <returns>
            <see langword="true"/> if the configuration section is read-only; otherwise <see langword="false"/>.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <para><paramref name="sectionName"/> can not be <see langword="null"/>.</para>
            </exception>		
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Configuration.ConfigurationBuilder.IsValidSection(System.String)">
            <summary>
            <para>Determines if a section name is valid in the current configuration file.</para>
            </summary>
            <param name="sectionName">
            <para>The name of the section to validate.</para>
            </param>
            <returns><see langword="true"/> if the section name is valid; otherwise, <see langword="false"/></returns>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Configuration.ConfigurationBuilder.ClearSectionCache(System.String)">
            <summary>
            <para>Removes a section from the internal cache.</para>
            </summary>
            <param name="sectionName">
            <para>The section name to remove.</para>
            </param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Configuration.ConfigurationBuilder.ClearSectionCache">
            <summary>
            <para>Removes all sections from the internal cache.</para>
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Configuration.ConfigurationBuilder.OnConfigurationChanging(Microsoft.Practices.EnterpriseLibrary.Configuration.ConfigurationChangingEventArgs)">
            <summary>
            <para>Raises the <seealso cref="E:Microsoft.Practices.EnterpriseLibrary.Configuration.ConfigurationBuilder.ConfigurationChanging"/> event.</para>
            </summary>
            <param name="e">
            <para>A <see cref="T:Microsoft.Practices.EnterpriseLibrary.Configuration.ConfigurationChangingEventArgs"/> that contains the event data.</para>
            </param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Configuration.ConfigurationBuilder.OnConfigurationChanged(Microsoft.Practices.EnterpriseLibrary.Configuration.ConfigurationChangedEventArgs)">
            <summary>
            <para>Raises the <seealso cref="E:Microsoft.Practices.EnterpriseLibrary.Configuration.ConfigurationBuilder.ConfigurationChanged"/> event.</para>
            </summary>
            <param name="e">
            <para>A <see cref="T:Microsoft.Practices.EnterpriseLibrary.Configuration.ConfigurationChangedEventArgs"/> that contains the event data.</para>
            </param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Configuration.ConfigurationBuilder.CacheContains(System.String)">
            <devdoc>
            Determines if the cache contains a section. Used by tests
            </devdoc>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Configuration.ConfigurationBuilder.CreateContext">
            <summary>
            <para>Gets the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Configuration.ConfigurationContext"/> for the current <see cref="T:Microsoft.Practices.EnterpriseLibrary.Configuration.ConfigurationManager"/>.</para>
            </summary>
            <returns><para>A <see cref="T:Microsoft.Practices.EnterpriseLibrary.Configuration.ConfigurationContext"/>.</para></returns>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Configuration.ConfigurationBuilder.Serialize(Microsoft.Practices.EnterpriseLibrary.Configuration.ConfigurationSettings)">
            <devdoc>
            Serialize the block configuration into an XmlNode.
            </devdoc>
        </member>
        <member name="E:Microsoft.Practices.EnterpriseLibrary.Configuration.ConfigurationBuilder.ConfigurationChanging">
            <summary>
            <para>Occurs before configuration is changed.</para>
            </summary>
        </member>
        <member name="E:Microsoft.Practices.EnterpriseLibrary.Configuration.ConfigurationBuilder.ConfigurationChanged">
            <summary>
            <para>Occurs after configuration is changed.</para>
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Configuration.ConfigurationBuilder.MsCorLibDirectory">
            <devdoc>
            Get the directory for current NDP
            </devdoc>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Configuration.ConfigurationBuilder.MachineConfigurationFile">
            <devdoc>
            Get the machine configuration file.
            </devdoc>
        </member>
        <member name="T:Jenzabar.Common.Web.UI.Controls.PageNavigator">
            <summary>
            Provides a list of hyperlinks to pages in a portal grid.
            </summary>
        </member>
        <member name="M:Jenzabar.Common.Web.UI.Controls.PageNavigator.Render(System.Web.UI.HtmlTextWriter)">
            <summary>
            Renders the navigational page control using pipe-delimited page index hyperlinks.
            </summary>
            <param name="writer">The HtmlTextWriter that renders the control.</param>
        </member>
        <member name="M:Jenzabar.Common.Web.UI.Controls.PageNavigator.RaisePostBackEvent(System.String)">
            <summary>
            If AutoBind=true, binds data.  
            Otherwise, raises a SelectedPageChanged event, if a new page.
            </summary>
            <param name="eventArgument">A string containing the new page index.</param>
        </member>
        <member name="M:Jenzabar.Common.Web.UI.Controls.PageNavigator.OnSelectedPageChanged(Jenzabar.Common.Web.UI.Controls.SelectedPageChangedEventArgs)">
            <summary>
            Raises the SelectedPageChanged event.
            </summary>
            <param name="e">The <see cref="T:Jenzabar.Common.Web.UI.Controls.SelectedPageChangedEventArgs">SelectedPageChangedEventArgs</see> for the <see cref="E:Jenzabar.Common.Web.UI.Controls.PageNavigator.SelectedPageChanged">SelectedPageChanged</see> event.</param>
        </member>
        <member name="P:Jenzabar.Common.Web.UI.Controls.PageNavigator.SelectedPage">
            <summary>
            Gets and sets the selected page.
            </summary>
        </member>
        <member name="P:Jenzabar.Common.Web.UI.Controls.PageNavigator.AutoBind">
            <summary>
            Sets whether to automatically bind data (default is true) on page change.
            </summary>
        </member>
        <member name="E:Jenzabar.Common.Web.UI.Controls.PageNavigator.SelectedPageChanged">
            <summary>
            Raised when the user selects a new page.
            </summary>
        </member>
        <member name="T:Jenzabar.Common.Web.UI.Controls.LetterNavigator">
            <summary>
            Displays navigational page links using the first two letters as a range (e.g., [Aa - As | At - Az]).
            </summary>
            <remarks>This control extends <see cref="T:Jenzabar.Common.Web.UI.Controls.PageNavigator">PageNavigator</see>.</remarks>
        </member>
        <member name="T:Jenzabar.Common.Web.UI.Controls.LetterSelector">
            <summary>
            Provides a list of all the letters in the current alphabet, allowing the user to select one.
            </summary>
        </member>
        <member name="M:Jenzabar.Common.Web.UI.Controls.LetterSelector.SelectFirstChar">
            <summary>
            Selects the first character from the alphabet.
            If the alphabet is empty, "A" is selected.
            </summary>
            <returns>selected char</returns>
        </member>
        <member name="M:Jenzabar.Common.Web.UI.Controls.LetterSelector.Render(System.Web.UI.HtmlTextWriter)">
            <summary>
            Renders the navigational letter selector control, emphasizing the selected letter.
            </summary>
            <param name="writer">The HtmlTextWriter that renders the control.</param>
        </member>
        <member name="M:Jenzabar.Common.Web.UI.Controls.LetterSelector.System#Web#UI#IPostBackEventHandler#RaisePostBackEvent(System.String)">
            <summary>
            Handles the postback event and raises the <see cref="E:Jenzabar.Common.Web.UI.Controls.LetterSelector.SelectedLetterChanged">SelectedLetterChanged</see> event, if the letter changed.
            </summary>
            <param name="eventArgument">The letter that the user clicked on.</param>
        </member>
        <member name="M:Jenzabar.Common.Web.UI.Controls.LetterSelector.OnSelectedLetterChanged(Jenzabar.Common.Web.UI.Controls.SelectedLetterChangedEventArgs)">
            <summary>
            Raises the <see cref="E:Jenzabar.Common.Web.UI.Controls.LetterSelector.SelectedLetterChanged">SelectedLetterChanged</see> event.
            </summary>
            <param name="e">The <see cref="T:Jenzabar.Common.Web.UI.Controls.SelectedLetterChangedEventArgs">SelectedLetterChangedEventArgs</see> for the SelectedLetterChanged event.</param>
        </member>
        <member name="P:Jenzabar.Common.Web.UI.Controls.LetterSelector.SelectedLetter">
            <summary>
            Gets or sets the selected letter.
            </summary>
        </member>
        <member name="P:Jenzabar.Common.Web.UI.Controls.LetterSelector.FirstChar">
            <summary>
            First character of the alphabet.
            </summary>
        </member>
        <member name="P:Jenzabar.Common.Web.UI.Controls.LetterSelector.LinkAllIsVisible">
            <summary>
            Get and set whether all links are visible (default = true).
            </summary>
        </member>
        <member name="E:Jenzabar.Common.Web.UI.Controls.LetterSelector.SelectedLetterChanged">
            <summary>
            Raised when the user selects a new letter.
            </summary>
        </member>
        <member name="T:Jenzabar.Common.Web.UI.Controls.SelectedLetterChangedEventHandler">
            <summary>
            Event handler for events that are raised when a user selects a letter.
            </summary>
        </member>
        <member name="T:Jenzabar.Common.Web.UI.Controls.SelectedLetterChangedEventArgs">
            <summary>
            Provides information about the letter a user selected from a list of all letters in the alphabet.
            </summary>
        </member>
        <member name="M:Jenzabar.Common.Web.UI.Controls.SelectedLetterChangedEventArgs.#ctor(System.Char)">
            <summary>
            Creates a new instance with the letter that the user selected.
            </summary>
            <param name="newLetter">The letter that the user selected.</param>
        </member>
        <member name="P:Jenzabar.Common.Web.UI.Controls.SelectedLetterChangedEventArgs.SelectedLetter">
            <summary>
            Gets the letter that the user selected.
            </summary>
        </member>
        <member name="T:Jenzabar.Common.Web.UI.Controls.SelectedPageChangedEventHandler">
            <summary>
            Event handler for events that are raised when a user selects a new page.
            </summary>
        </member>
        <member name="T:Jenzabar.Common.Web.UI.Controls.SelectedPageChangedEventArgs">
            <summary>
            Provides information about the page a user selected from a list of page numbers.
            </summary>
        </member>
        <member name="M:Jenzabar.Common.Web.UI.Controls.SelectedPageChangedEventArgs.#ctor(System.Int32)">
            <summary>
            Creates a new instance with the page number that the user selected.
            </summary>
            <param name="pageNumber">The page number that the user selected.</param>
        </member>
        <member name="P:Jenzabar.Common.Web.UI.Controls.SelectedPageChangedEventArgs.PageNumber">
            <summary>
            Gets the Page number the user selected.
            </summary>
        </member>
        <member name="T:Jenzabar.Common.Web.UI.Controls.DisplayIndicator">
            <summary>
            This control allows the user to specify the range of dates 
            when a control will be displayed or "active".  This control contains
            two <see cref="T:Jenzabar.Common.Web.UI.Controls.DatePicker">DatePicker</see> controls, 
            one for the start date and one for the end date of the date range.
            </summary>
            <remarks>This control extends System.Web.UI.WebControls.WebControl.</remarks>
        </member>
        <member name="M:Jenzabar.Common.Web.UI.Controls.DisplayIndicator.#ctor">
            <summary>
            Creates a new instance of the DisplayIndicator class.
            </summary>
        </member>
        <member name="M:Jenzabar.Common.Web.UI.Controls.DisplayIndicator.AreDatesCloseEnough(System.DateTime,System.DateTime)">
            <summary>
            Checks whether two dates match up to the minute (seconds are ignored), if the control is displaying time.
            If the control is only displaying dates, then the dates are compared ignoring the times.
            </summary>
            <param name="one">The first DateTime to compare.</param>
            <param name="two">The second DateTime to compare.</param>
            <returns>True if the dates are close enough (within the same minute); false, otherwise.</returns>
        </member>
        <member name="M:Jenzabar.Common.Web.UI.Controls.DisplayIndicator.EnsureChildControls">
            <summary>
            Determines whether the server control contains child controls.  
            If it does not, it creates child controls.  
            </summary>
        </member>
        <member name="M:Jenzabar.Common.Web.UI.Controls.DisplayIndicator.CreateChildControls">
            <summary>
             Notifies server controls that use composition-based implementations to create any child controls they contain in preparation for posting back or rendering.   
            </summary>
        </member>
        <member name="M:Jenzabar.Common.Web.UI.Controls.DisplayIndicator.Render(System.Web.UI.HtmlTextWriter)">
            <summary>
            Renders the contents of this control.
            </summary>
            <param name="writer">The HtmlTextWriter that renders the control.</param>
        </member>
        <member name="M:Jenzabar.Common.Web.UI.Controls.DisplayIndicator.RenderOptionAndLink(System.Web.UI.HtmlTextWriter,System.Web.UI.HtmlControls.HtmlInputRadioButton,System.String)">
            <summary>
            Renders an input element of type RadioButton with a label wrapped in a div (class="opt") tag.
            </summary>
            <param name="writer">The HtmlTextWriter that renders the control.</param>
            <param name="ctl">The HtmlInputRadioButton control to render.</param>
            <param name="text">The string to appear in the label for the radio button.</param>
        </member>
        <member name="P:Jenzabar.Common.Web.UI.Controls.DisplayIndicator.SelectedDateRange">
            <summary>
            Gets and sets the range of dates when the control is available.
            </summary>
        </member>
        <member name="P:Jenzabar.Common.Web.UI.Controls.DisplayIndicator.AllowEndNow">
            <summary>
            True to allow the user to select 'End Now' from the list of possible end dates; false, otherwise.
            </summary>
        </member>
        <member name="P:Jenzabar.Common.Web.UI.Controls.DisplayIndicator.ShowTime">
            <summary>
            True if the control will render drop-down selection boxes that allow the user to specify the time as well as the date.
            </summary>
        </member>
        <member name="P:Jenzabar.Common.Web.UI.Controls.DisplayIndicator.Actions">
            <summary>
            Gets a list of actions that the user can perform on the data when the date range has expires.
            If this list contains no items, the 'Actions' section will not be rendered.
            </summary>
        </member>
        <member name="P:Jenzabar.Common.Web.UI.Controls.DisplayIndicator.SelectedAction">
            <summary>
            Gets the action item that the user selected from the actions drop-down selection list.
            </summary>
        </member>
        <member name="P:Jenzabar.Common.Web.UI.Controls.DisplayIndicator.TextForStartSection">
            <summary>
            Gets and sets the globalized text for the "Start" section.
            </summary>
        </member>
        <member name="P:Jenzabar.Common.Web.UI.Controls.DisplayIndicator.TextForStartNow">
            <summary>
            Gets and sets the globalized text for the "Start Now" radio-button option.
            </summary>
        </member>
        <member name="P:Jenzabar.Common.Web.UI.Controls.DisplayIndicator.TextForStartLater">
            <summary>
            Gets and sets the globalized text for the "Start Later" radio-button option.
            </summary>
        </member>
        <member name="P:Jenzabar.Common.Web.UI.Controls.DisplayIndicator.TextForStartOnDate">
            <summary>
            Gets and sets the globalized text for the "Start On" radio-button option.
            </summary>
        </member>
        <member name="P:Jenzabar.Common.Web.UI.Controls.DisplayIndicator.TextForEndSection">
            <summary>
            Gets and sets the globalized text for the "End" section.
            </summary>
        </member>
        <member name="P:Jenzabar.Common.Web.UI.Controls.DisplayIndicator.TextForEndNever">
            <summary>
            Gets and sets the globalized text for the "End Never" radio-button option.
            </summary>
        </member>
        <member name="P:Jenzabar.Common.Web.UI.Controls.DisplayIndicator.TextForEndNow">
            <summary>
            Gets and sets the globalized text for the "End Now" radio-button option.
            </summary>
        </member>
        <member name="P:Jenzabar.Common.Web.UI.Controls.DisplayIndicator.TextForEndOnDate">
            <summary>
            Gets and sets the globalized text for the "End On Date" radio-button option.
            </summary>
        </member>
        <member name="P:Jenzabar.Common.Web.UI.Controls.DisplayIndicator.TextForActionSection">
            <summary>
            Gets and sets the globalized text for the "Actions" section.
            </summary>
        </member>
        <member name="P:Jenzabar.Common.Web.UI.Controls.DisplayIndicator.AutoValidate">
            <summary>
            Gets and sets whether the display indicator should be validated.
            </summary>
        </member>
        <member name="T:Jenzabar.Common.Configuration.GlobalizationSettings">
            <summary>
            Configuration settings for Globalizing (translating) the application.
            </summary>
        </member>
        <member name="T:Jenzabar.Common.Web.UI.Controls.TabElement">
            <summary>
            A single tab in the <see cref="T:Jenzabar.Common.Web.UI.Controls.TabStrip">TabStrip</see> control.
            </summary>
        </member>
        <member name="T:Jenzabar.Common.Web.UI.Controls.TabStrip">
            <summary>
            Do not use.  
            Instead, use <see cref="!:ContentTabs">ContentTabs</see> to collapse long sections of a specific view.
            Use <see cref="T:Jenzabar.Common.Web.UI.Controls.SuperTabs">SuperTabs</see> to provide screen navigation.
            	/// </summary>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Configuration.Resources">
            <devdoc>
            Used for the common ui culture in SR
            </devdoc>
        </member>
        <member name="T:Jenzabar.Common.RunTime.LongRunningProcessStatus">
            <summary>
            Indicates the current status of a <see cref="T:Jenzabar.Common.RunTime.LongRunningProcess"/>.
            </summary>
        </member>
        <member name="F:Jenzabar.Common.RunTime.LongRunningProcessStatus.Executing">
            <summary>
            The process is doing work.
            </summary>
        </member>
        <member name="F:Jenzabar.Common.RunTime.LongRunningProcessStatus.Failed">
            <summary>
            The process threw an exception, and exited.
            </summary>
        </member>
        <member name="F:Jenzabar.Common.RunTime.LongRunningProcessStatus.Succeded">
            <summary>
            The process completed without errors.
            </summary>
        </member>
        <member name="F:Jenzabar.Common.RunTime.LongRunningProcessStatus.NotStarted">
            <summary>
            The process has not benn started, and is waiting for <see cref="M:Jenzabar.Common.RunTime.LongRunningProcess.Start"/> to be called to start the process.
            </summary>
        </member>
        <member name="T:Jenzabar.Common.RunTime.LongRunningProcess">
            <summary>
            Base class for all processes in the system that may take a long time to run.
            </summary>
            <remarks>
            This class provides common functionality to all processes that must run for a long time and possibly lock down the user interface.
            </remarks>
            <example>
            <p><b>Creating a LongRunningProcess</b></p>
            <p>To create a long running process inherit from the LongRunningProcess class and override the <see cref="M:Jenzabar.Common.RunTime.LongRunningProcess.DoProcessing"/> 
            method implementing the actual processing in there. This method will be called on a new thread once the client 
            makes a clall to the <see cref="M:Jenzabar.Common.RunTime.LongRunningProcess.Start"/> method of the LongRunningProcess class.</p>
            <code>
            public class TestProcess : LongRunningProcess
            {
            	// store any data you need to execute the process internaly
            	private int timesToLoop;
            	
            	// pass any required data that your process will need in the constructor
            	public TestProcess( int timesToLoop )
            	{
            		this.timesToLoop = timesToLoop;
            	}
            	
            	// override DoProcessing implemnting any code for your process here.
            	protected override object DoProcessing()
            	{
            		// implement the code to execute your process here.
            		// This loop is just a sample your code does not need to loop
            		for( int i = 0 ; i &lt; timesToLoop ; i++ )
            		{
            			// call set message to provide information about what is happening if possible
            			this.SetMessage( string.Format( "Working on number {0} of {1}", i, timesToLoop ) );
            			Thread.Sleep( 1000 );
            		}
            		// the last message set is will remain after your process completes
            		this.SetMessage( "Process Complete" );
            		// If your process returns any data this is where it will need to do it
            		return null;
            	}
            }
            </code>
            <p>Inside the <see cref="M:Jenzabar.Common.RunTime.LongRunningProcess.DoProcessing"/> mthod you should make calls to the <see cref="M:Jenzabar.Common.RunTime.LongRunningProcess.SetMessage(System.String)"/>, or <see cref="M:Jenzabar.Common.RunTime.LongRunningProcess.SetMessageGlobalized(System.String)"/> methods 
            whenever possible to provide run time information about your process.</p>
            </example>
        </member>
        <member name="M:Jenzabar.Common.RunTime.LongRunningProcess.GetProcess(System.Guid)">
            <summary>
            Returns a <see cref="T:Jenzabar.Common.RunTime.LongRunningProcess"/> give it's ID.
            </summary>
            <param name="processId">The ID of the process to get.</param>
            <returns>The process with matching ID, or null if there is no process withe the specified ID, or the process with the specified ID has completed over 5 minutes ago.</returns>
        </member>
        <member name="M:Jenzabar.Common.RunTime.LongRunningProcess.#ctor">
            <summary>
            Creates a new instance of the LongRunningProcess class, and initializes it.
            </summary>
        </member>
        <member name="M:Jenzabar.Common.RunTime.LongRunningProcess.DoProcessing">
            <summary>
            To be implemented by inheriting classes. This is where the processing will need to take place.
            </summary>
        </member>
        <member name="M:Jenzabar.Common.RunTime.LongRunningProcess.Start">
            <summary>
            Begins this process executing asyncronously.
            </summary>
        </member>
        <member name="M:Jenzabar.Common.RunTime.LongRunningProcess.SetMessage(System.String)">
            <summary>
            Sets the <see cref="P:Jenzabar.Common.RunTime.LongRunningProcess.Message"/> property for this process. This can be used to provide information to the user about what is happening as the process is executing.
            </summary>
            <param name="message">A user readable message that is meant to inform the user of what is happening inside the process.</param>
        </member>
        <member name="M:Jenzabar.Common.RunTime.LongRunningProcess.SetMessageGlobalized(System.String)">
            <summary>
            Sets the <see cref="P:Jenzabar.Common.RunTime.LongRunningProcess.Message"/> property for this process. This can be used to provide information to the user about what is happening as the process is executing.
            </summary>
            <param name="messageKey">The globalization key to a user readable message that is meant to inform the user of what is happening inside the process.</param>
        </member>
        <member name="M:Jenzabar.Common.RunTime.LongRunningProcess.GetExceptionThatCausedFailure">
            <summary>
            Returns the exception that caused the process to fail.
            </summary>
            <returns>The exception that caused the process to fail, or null if the process has not failed.</returns>
        </member>
        <member name="P:Jenzabar.Common.RunTime.LongRunningProcess.ID">
            <summary>
            Gets the unique id of this instance of the process. This can be used later to retrieve this process by making a call to the static <see cref="M:Jenzabar.Common.RunTime.LongRunningProcess.GetProcess(System.Guid)"/> method.
            </summary>
        </member>
        <member name="P:Jenzabar.Common.RunTime.LongRunningProcess.Message">
            <summary>
            Gets the last message that was recieved from the process as it executes.
            </summary>
        </member>
        <member name="P:Jenzabar.Common.RunTime.LongRunningProcess.Result">
            <summary>
            Gets the return value of the process. This can be used
            </summary>
        </member>
        <member name="P:Jenzabar.Common.RunTime.LongRunningProcess.Status">
            <summary>
            Gets the current status of the process as it executes.
            </summary>
        </member>
        <member name="T:Jenzabar.Common.ApplicationBlocks.ExceptionManagement.ExceptionManagementMode">
            <summary>
            Enum containing the mode options for the exceptionManagement tag.
            </summary>
        </member>
        <member name="F:Jenzabar.Common.ApplicationBlocks.ExceptionManagement.ExceptionManagementMode.Off">
            <summary>The ExceptionManager should not process exceptions.</summary>
        </member>
        <member name="F:Jenzabar.Common.ApplicationBlocks.ExceptionManagement.ExceptionManagementMode.On">
            <summary>The ExceptionManager should process exceptions. This is the default.</summary>
        </member>
        <member name="T:Jenzabar.Common.ApplicationBlocks.ExceptionManagement.PublisherMode">
            <summary>
            Enum containing the mode options for the publisher tag.
            </summary>
        </member>
        <member name="F:Jenzabar.Common.ApplicationBlocks.ExceptionManagement.PublisherMode.Off">
            <summary>The ExceptionManager should not call the publisher.</summary>
        </member>
        <member name="F:Jenzabar.Common.ApplicationBlocks.ExceptionManagement.PublisherMode.On">
            <summary>The ExceptionManager should call the publisher. This is the default.</summary>
        </member>
        <member name="T:Jenzabar.Common.ApplicationBlocks.ExceptionManagement.PublisherFormat">
            <summary>
            Enum containing the format options for the publisher tag.
            </summary>
        </member>
        <member name="F:Jenzabar.Common.ApplicationBlocks.ExceptionManagement.PublisherFormat.Exception">
            <summary>The ExceptionManager should call the IExceptionPublisher interface of the publisher. 
            This is the default.</summary>
        </member>
        <member name="F:Jenzabar.Common.ApplicationBlocks.ExceptionManagement.PublisherFormat.Xml">
            <summary>The ExceptionManager should call the IExceptionXmlPublisher interface of the publisher.</summary>
        </member>
        <member name="T:Jenzabar.Common.ApplicationBlocks.ExceptionManagement.ExceptionManagementSettings">
            <summary>
            Class that defines the exception management settings in the config file.
            </summary>
        </member>
        <member name="M:Jenzabar.Common.ApplicationBlocks.ExceptionManagement.ExceptionManagementSettings.AddPublisher(Jenzabar.Common.ApplicationBlocks.ExceptionManagement.PublisherSettings)">
            <summary>
            Adds a PublisherSettings to the arraylist of publishers.
            </summary>
        </member>
        <member name="P:Jenzabar.Common.ApplicationBlocks.ExceptionManagement.ExceptionManagementSettings.Mode">
            <summary>
            Specifies the whether the exceptionManagement settings are "on" or "off".
            </summary>
        </member>
        <member name="P:Jenzabar.Common.ApplicationBlocks.ExceptionManagement.ExceptionManagementSettings.Publishers">
            <summary>
            An ArrayList containing all of the PublisherSettings listed in the config file.
            </summary>
        </member>
        <member name="T:Jenzabar.Common.ApplicationBlocks.ExceptionManagement.PublisherSettings">
            <summary>
            Class that defines the publisher settings within the exception management settings in 
            the config file.
            </summary>
        </member>
        <member name="M:Jenzabar.Common.ApplicationBlocks.ExceptionManagement.PublisherSettings.IsExceptionFiltered(System.Type)">
            <summary>
            Determines whether the exception type is to be filtered out based on the includes and exclude
            types specified.
            </summary>
            <param name="exceptionType">The Type of the exception to check for filtering.</param>
            <returns>True is the exception type is to be filtered out, false if it is not filtered out.</returns>
        </member>
        <member name="M:Jenzabar.Common.ApplicationBlocks.ExceptionManagement.PublisherSettings.MatchesFilter(System.Type,Jenzabar.Common.ApplicationBlocks.ExceptionManagement.TypeFilter)">
            <summary>
            Determines if a type is contained the supplied filter. 
            </summary>
            <param name="type">The Type to look for</param> 
            <param name="typeFilter">The Filter to test against the Type</param>
            <returns>true or false</returns>
        </member>
        <member name="M:Jenzabar.Common.ApplicationBlocks.ExceptionManagement.PublisherSettings.AddOtherAttributes(System.String,System.String)">
            <summary>
            Allows name/value pairs to be added to the Other Attributes collection.
            </summary>
        </member>
        <member name="P:Jenzabar.Common.ApplicationBlocks.ExceptionManagement.PublisherSettings.Mode">
            <summary>
            Specifies the whether the exceptionManagement settings are "on" or "off".
            </summary>
        </member>
        <member name="P:Jenzabar.Common.ApplicationBlocks.ExceptionManagement.PublisherSettings.ExceptionFormat">
            <summary>
            Specifies the whether the publisher supports the IExceptionXmlPublisher interface (value is set to "xml")
            or the publisher supports the IExceptionPublisher interface (value is either left off or set to "exception").
            </summary>
        </member>
        <member name="P:Jenzabar.Common.ApplicationBlocks.ExceptionManagement.PublisherSettings.AssemblyName">
            <summary>
            The assembly name of the publisher component that will be used to invoke the object.
            </summary>
        </member>
        <member name="P:Jenzabar.Common.ApplicationBlocks.ExceptionManagement.PublisherSettings.TypeName">
            <summary>
            The type name of the publisher component that will be used to invoke the object.
            </summary>
        </member>
        <member name="P:Jenzabar.Common.ApplicationBlocks.ExceptionManagement.PublisherSettings.IncludeTypes">
            <summary>
            A semicolon delimited list of all exception types that the publisher will be invoked for. 
            A "*" can be used to specify all types and is the default value if this is left off.
            </summary>
        </member>
        <member name="P:Jenzabar.Common.ApplicationBlocks.ExceptionManagement.PublisherSettings.ExcludeTypes">
            <summary>
            A semicolon delimited list of all exception types that the publisher will not be invoked for. 
            A "*" can be used to specify all types. The default is to exclude no types.
            </summary>
        </member>
        <member name="P:Jenzabar.Common.ApplicationBlocks.ExceptionManagement.PublisherSettings.OtherAttributes">
            <summary>
            A collection of any other attributes included within the publisher tag in the config file. 
            </summary>
        </member>
        <member name="T:Jenzabar.Common.ApplicationBlocks.ExceptionManagement.TypeFilter">
            <summary>
            TypeFilter class stores contents of the Include and Exclude filters provided in the
            configuration file
            </summary>
        </member>
        <member name="P:Jenzabar.Common.ApplicationBlocks.ExceptionManagement.TypeFilter.AcceptAllTypes">
            <summary>
            Indicates if all types should be accepted for a filter
            </summary>
        </member>
        <member name="P:Jenzabar.Common.ApplicationBlocks.ExceptionManagement.TypeFilter.Types">
            <summary>
            Collection of types for the filter
            </summary>
        </member>
        <member name="T:Jenzabar.Common.ApplicationBlocks.ExceptionManagement.TypeInfo">
            <summary>
            TypeInfo class contains information about each type within a TypeFilter
            </summary>
        </member>
        <member name="P:Jenzabar.Common.ApplicationBlocks.ExceptionManagement.TypeInfo.IncludeSubClasses">
            <summary>
            Indicates if subclasses are to be included with the type specified in the Include and Exclude filters
            </summary>
        </member>
        <member name="P:Jenzabar.Common.ApplicationBlocks.ExceptionManagement.TypeInfo.ClassType">
            <summary>
            The Type class representing the type specified in the Include and Exclude filters
            </summary>
        </member>
        <member name="T:Jenzabar.Common.ApplicationBlocks.ExceptionManagement.ExceptionManagerSectionHandler">
            <summary>
            The Configuration Section Handler for the "exceptionManagement" section of the config file. 
            </summary>
        </member>
        <member name="M:Jenzabar.Common.ApplicationBlocks.ExceptionManagement.ExceptionManagerSectionHandler.#ctor">
            <summary>
            The constructor for the ExceptionManagerSectionHandler to initialize the resource file.
            </summary>
        </member>
        <member name="M:Jenzabar.Common.ApplicationBlocks.ExceptionManagement.ExceptionManagerSectionHandler.Create(System.Object,System.Object,System.Xml.XmlNode)">
            <summary>
            Builds the ExceptionManagementSettings and PublisherSettings structures based on the configuration file.
            </summary>
            <param name="parent">Composed from the configuration settings in a corresponding parent configuration section.</param>
            <param name="configContext">Provides access to the virtual path for which the configuration section handler computes configuration values. Normally this parameter is reserved and is null.</param>
            <param name="section">The XML node that contains the configuration information to be handled. section provides direct access to the XML contents of the configuration section.</param>
            <returns>The ExceptionManagementSettings struct built from the configuration settings.</returns>
        </member>
        <member name="M:Jenzabar.Common.ApplicationBlocks.ExceptionManagement.ExceptionManagerSectionHandler.LoadTypeFilter(System.String[])">
            <summary>
            Creates TypeFilter with type information from the string array of type names.
            </summary>
            <param name="rawFilter">String array containing names of types to be included in the filter.</param>
            <returns>TypeFilter object containing type information.</returns>
        </member>
        <member name="T:Jenzabar.Common.Web.UI.Controls.Notice">
            <summary>
            A markup construct used to provide notices when marking up portlet forms.
            </summary>
            <remarks>This control extends <see cref="T:Jenzabar.Common.Web.UI.Controls.DisplayControlBase">DisplayControlBase</see>.</remarks>
        </member>
        <member name="M:Jenzabar.Common.Web.UI.Controls.Notice.#ctor">
            <summary>
            Creates a new instance to be used to mark up notices on the page.
            </summary>
        </member>
        <member name="T:Jenzabar.Common.Web.UI.Controls.OrderListBox">
            <summary>
            A list of items with up and down arrows that let the user re-order
            the items on the client side. 
            </summary>
            <remarks>This control extends .NET's System.Web.UI.WebControls.Listbox.</remarks>
        </member>
        <member name="T:Jenzabar.Common.Web.UI.Controls.ErrorDisplay">
            <summary>
            Defines a common way to display error messages to the users
            when an exception occurs.
            Renders a red border around the error message with a pink background.
            </summary>
            <remarks>
            This control renders the stack trace and other security sensitive 
            information, if the code is compiled in DEBUG mode. 
            This control will not render 
            anything, if there is no ErrorMessage or Error defined for it.
            This control extends .NET's System.Web.UI.Control.</remarks>
        </member>
        <member name="M:Jenzabar.Common.Web.UI.Controls.ErrorDisplay.#ctor(System.String,System.Exception)">
            <summary>
            Creates a new instance of the ErrorDisplay control using a message about the error and the original exception.
            </summary>
            <param name="errorMessage">A string containing the error message.</param>
            <param name="exception">The Exception that caused the error.</param>
        </member>
        <member name="M:Jenzabar.Common.Web.UI.Controls.ErrorDisplay.#ctor(System.String)">
            <summary>
            Creates a new instance of the ErrorDisplay control using a message about the error.
            </summary>
            <param name="errorMessage">The message describing the error that occurred.</param>
        </member>
        <member name="M:Jenzabar.Common.Web.UI.Controls.ErrorDisplay.#ctor(System.Exception)">
            <summary>
            Creates a new instance of the ErrorDisplay control using the original exception.
            </summary>
            <param name="exception">The exception that was thrown.</param>
        </member>
        <member name="M:Jenzabar.Common.Web.UI.Controls.ErrorDisplay.#ctor">
            <summary>
            Creates a new instance of the ErrorDisplay control using no message or exception.
            </summary>
        </member>
        <member name="M:Jenzabar.Common.Web.UI.Controls.ErrorDisplay.Render(System.Web.UI.HtmlTextWriter)">
            <summary>
            Renders the content of this control, 
            if an error message or an exception is defined.
            </summary>
            <param name="writer">The HtmlTextWriter that renders the control.</param>
        </member>
        <member name="P:Jenzabar.Common.Web.UI.Controls.ErrorDisplay.ErrorMessage">
            <summary>
            Gets and sets the message that will be displayed for this error display control
            </summary>
            <remarks>
            If the message is not set for this control, and the Error property is populated 
            with an <see cref="T:System.Exception"/>, then the ToString() message of the Exception is displayed when the control is rendered.</remarks>
        </member>
        <member name="P:Jenzabar.Common.Web.UI.Controls.ErrorDisplay.ErrorMessageKey">
            <summary>
            Sets the error message using Globalizer key
            </summary>
        </member>
        <member name="P:Jenzabar.Common.Web.UI.Controls.ErrorDisplay.Error">
            <summary>
            Gets and sets the exception for this control.
            </summary>
            <remarks>
            The exception that triggered the display of this control. 
            This property can be null. If the code is compiled in DEBUG mode, 
            the information from the ToString() method of this Exception will be displayed.
            </remarks>
        </member>
        <member name="T:Jenzabar.Common.Web.UI.StringArrayTypeConverter">
            <summary>
            Converts string arrays to comma seperated strings, and visa versa
            </summary>
        </member>
        <member name="M:Jenzabar.Common.Web.UI.StringArrayTypeConverter.#ctor">
            <summary>
            Constructs the type converter
            </summary>
        </member>
        <member name="M:Jenzabar.Common.Web.UI.StringArrayTypeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Checks to see if the source type can be converted into a string array
            </summary>
            <param name="context">The context in which the conversion is taking place</param>
            <param name="sourceType">The source type to convert</param>
            <returns>True if it can be converted, false otherwise</returns>
        </member>
        <member name="M:Jenzabar.Common.Web.UI.StringArrayTypeConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Checks to see if the string array can be converted into the destination type
            </summary>
            <param name="context">The context in which the conversion is taking place</param>
            <param name="destinationType">The destination type to convert</param>
            <returns>True if it can be converted, false otherwise</returns>
        </member>
        <member name="M:Jenzabar.Common.Web.UI.StringArrayTypeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <summary>
            Culture aware version of ConvertFrom
            </summary>
        </member>
        <member name="M:Jenzabar.Common.Web.UI.StringArrayTypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <summary>
            Culture aware version of ConvertTo
            </summary>
        </member>
        <member name="T:Jenzabar.Common.Collections.Group">
            <summary>
            Represents a group of objects that are all related through a common object, the Parent.
            </summary>
        </member>
        <member name="M:Jenzabar.Common.Collections.Group.#ctor(System.Object)">
            <summary>
            Creates a new instance of the Jenzabar.Common.Collections.Group class with a parent object.
            </summary>
            <param name="groupedBy">The System.Object that groups the items in this collection together.</param>
        </member>
        <member name="M:Jenzabar.Common.Collections.Group.Equals(System.Object)">
            <summary>
            Returns true if the object is a group and is the same object in memory, otherwise compares the Parent object to the object being passed in
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Jenzabar.Common.Collections.Group.GetHashCode">
            <summary>
            Returns the hash code of the parent object. If the parent object is null, then it returns 0.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Jenzabar.Common.Collections.Group.Contains(System.Object)">
            <summary>
            Looks for an object in this group that equals the object passed in.
            </summary>
            <param name="value">The System.Object that we will look for in this group.</param>
            <returns>True if the object exists in the group, otherwise false.</returns>
            <remarks>This method works the opposite way that the ArrayList implementation works, in that it calls Equals() on the item in the list instead of the item being passed in. This allows us to use this group class as a child of it's self without having to do anything too crazy to find out if an object is in the group yet.</remarks>
        </member>
        <member name="M:Jenzabar.Common.Collections.Group.IndexOf(System.Object)">
            <summary>
            Searches for the specified System.Object and returns the zero-based index of the first occurrence within the entire Jenzabar.Common.Collections.Group.
            </summary>
            <param name="value">The Object to locate in the Jenzabar.Common.Collections.Group. The value can be a null reference (Nothing in Visual Basic). </param>
            <returns>The zero-based index of the first occurrence of value within the entire Jenzabar.Common.Collections.Group, if found; otherwise, -1.</returns>
        </member>
        <member name="M:Jenzabar.Common.Collections.Group.Remove(System.Object)">
            <summary>
            Removes the first instance of the specified object from the Jenzabar.Common.Collections.Group.
            </summary>
            <param name="value">The element to be removed from the Jenzabar.Common.Collections.Group. The value can be null (VB Nothing).</param>
        </member>
        <member name="M:Jenzabar.Common.Collections.Group.RemoveAt(System.Int32)">
            <summary>
            Removes an element at the specified index from the Jenzabar.Common.Collections.Group
            </summary>
            <param name="index">The zero-based index of the element to remove.</param>
        </member>
        <member name="M:Jenzabar.Common.Collections.Group.Add(System.Object)">
            <summary>
            Adds an element to the end of the Jenzabar.Common.Collections.Group.
            </summary>
            <param name="value">The element to be added to the end of the Jenzabar.Common.Collections.Group. The value can be null (VB Nothing).</param>
        </member>
        <member name="M:Jenzabar.Common.Collections.Group.ToArray">
            <summary>
            Returns the inner list as an Array
            </summary>
            <returns>Array of objects</returns>
        </member>
        <member name="M:Jenzabar.Common.Collections.Group.ToArray(System.Type)">
            <summary>
            Returns the inner list as an Array
            </summary>
            <param name="type">The type to which to set the Array</param>
            <returns>Array of type "type"</returns>
        </member>
        <member name="P:Jenzabar.Common.Collections.Group.GroupedBy">
            <summary>
            Gets the object that this Group is being grouped by.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Common.Instrumentation.ApplicationData">
            <summary>
            <para>
            This type supports the Instrumentation infrastructure and is not intended to be used directly from your code.
            </para>
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Instrumentation.ApplicationData.#ctor">
            <summary/>
            <exclude/>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Instrumentation.ApplicationData.Publish">
            <devdoc>
            This method wraps the BaseEvent.Published property so that it can have a ConditionalAttribute that can be used to turn off WMI.
            </devdoc>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Instrumentation.ApplicationData.ProcessIdentifier">
            <summary/>
            <exclude/>
            <devdoc>
            The id of the process.
            </devdoc>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Instrumentation.ApplicationData.ProcessName">
            <summary/>
            <exclude/>
            <devdoc>
            The name of the process.
            </devdoc>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Instrumentation.ApplicationData.BaseDirectory">
            <summary/>
            <exclude/>
            <devdoc>
            The base directory.
            </devdoc>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Instrumentation.ApplicationData.ConfigFile">
            <summary/>
            <exclude/>
            <devdoc>
            The configuration file.
            </devdoc>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Instrumentation.ApplicationData.PerformanceCounterInstanceName">
            <summary/>
            <exclude/>
            <devdoc>
            The name of the performance counter instance for the purpose of cross-referencing the performance counters.
            </devdoc>
        </member>
        <member name="T:Jenzabar.Common.ApplicationBlocks.Data.SqlHelper">
            <summary>
            The SqlHelper class is intended to encapsulate high performance, scalable best practices for 
            common uses of SqlClient
            </summary>
        </member>
        <member name="M:Jenzabar.Common.ApplicationBlocks.Data.SqlHelper.AttachParameters(System.Data.SqlClient.SqlCommand,System.Data.SqlClient.SqlParameter[])">
            <summary>
            This method is used to attach array of SqlParameters to a SqlCommand.
            
            This method will assign a value of DbNull to any parameter with a direction of
            InputOutput and a value of null.  
            
            This behavior will prevent default values from being used, but
            this will be the less common case than an intended pure output parameter (derived as InputOutput)
            where the user provided no input value.
            </summary>
            <param name="command">The command to which the parameters will be added</param>
            <param name="commandParameters">An array of SqlParameters to be added to command</param>
        </member>
        <member name="M:Jenzabar.Common.ApplicationBlocks.Data.SqlHelper.AssignParameterValues(System.Data.SqlClient.SqlParameter[],System.Data.DataRow)">
            <summary>
            This method assigns dataRow column values to an array of SqlParameters
            </summary>
            <param name="commandParameters">Array of SqlParameters to be assigned values</param>
            <param name="dataRow">The dataRow used to hold the stored procedure's parameter values</param>
        </member>
        <member name="M:Jenzabar.Common.ApplicationBlocks.Data.SqlHelper.AssignParameterValues(System.Data.SqlClient.SqlParameter[],System.Object[])">
            <summary>
            This method assigns an array of values to an array of SqlParameters
            </summary>
            <param name="commandParameters">Array of SqlParameters to be assigned values</param>
            <param name="parameterValues">Array of objects holding the values to be assigned</param>
        </member>
        <member name="M:Jenzabar.Common.ApplicationBlocks.Data.SqlHelper.PrepareCommand(System.Data.SqlClient.SqlCommand,System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlTransaction,System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[],System.Boolean@)">
            <summary>
            This method opens (if necessary) and assigns a connection, transaction, command type and parameters 
            to the provided command
            </summary>
            <param name="command">The SqlCommand to be prepared</param>
            <param name="connection">A valid SqlConnection, on which to execute this command</param>
            <param name="transaction">A valid SqlTransaction, or 'null'</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <param name="commandParameters">An array of SqlParameters to be associated with the command or 'null' if no parameters are required</param>
            <param name="mustCloseConnection"><c>true</c> if the connection was opened by the method, otherwose is false.</param>
        </member>
        <member name="M:Jenzabar.Common.ApplicationBlocks.Data.SqlHelper.ExecuteNonQuery(System.String,System.Data.CommandType,System.String)">
            <summary>
            Execute a SqlCommand (that returns no resultset and takes no parameters) against the database specified in 
            the connection string
            </summary>
            <remarks>
            e.g.:  
             int result = ExecuteNonQuery(connString, CommandType.StoredProcedure, "PublishOrders");
            </remarks>
            <param name="connectionString">A valid connection string for a SqlConnection</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <returns>An int representing the number of rows affected by the command</returns>
        </member>
        <member name="M:Jenzabar.Common.ApplicationBlocks.Data.SqlHelper.ExecuteNonQuery(System.String,System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            Execute a SqlCommand (that returns no resultset) against the database specified in the connection string 
            using the provided parameters
            </summary>
            <remarks>
            e.g.:  
             int result = ExecuteNonQuery(connString, CommandType.StoredProcedure, "PublishOrders", new SqlParameter("@prodid", 24));
            </remarks>
            <param name="connectionString">A valid connection string for a SqlConnection</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <param name="commandParameters">An array of SqlParamters used to execute the command</param>
            <returns>An int representing the number of rows affected by the command</returns>
        </member>
        <member name="M:Jenzabar.Common.ApplicationBlocks.Data.SqlHelper.ExecuteNonQuery(System.String,System.String,System.Object[])">
            <summary>
            Execute a stored procedure via a SqlCommand (that returns no resultset) against the database specified in 
            the connection string using the provided parameter values.  This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <remarks>
            This method provides no access to output parameters or the stored procedure's return value parameter.
            
            e.g.:  
             int result = ExecuteNonQuery(connString, "PublishOrders", 24, 36);
            </remarks>
            <param name="connectionString">A valid connection string for a SqlConnection</param>
            <param name="spName">The name of the stored prcedure</param>
            <param name="parameterValues">An array of objects to be assigned as the input values of the stored procedure</param>
            <returns>An int representing the number of rows affected by the command</returns>
        </member>
        <member name="M:Jenzabar.Common.ApplicationBlocks.Data.SqlHelper.ExecuteNonQuery(System.Data.SqlClient.SqlConnection,System.Data.CommandType,System.String)">
            <summary>
            Execute a SqlCommand (that returns no resultset and takes no parameters) against the provided SqlConnection. 
            </summary>
            <remarks>
            e.g.:  
             int result = ExecuteNonQuery(conn, CommandType.StoredProcedure, "PublishOrders");
            </remarks>
            <param name="connection">A valid SqlConnection</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <returns>An int representing the number of rows affected by the command</returns>
        </member>
        <member name="M:Jenzabar.Common.ApplicationBlocks.Data.SqlHelper.ExecuteNonQuery(System.Data.SqlClient.SqlConnection,System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            Execute a SqlCommand (that returns no resultset) against the specified SqlConnection 
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
             int result = ExecuteNonQuery(conn, CommandType.StoredProcedure, "PublishOrders", new SqlParameter("@prodid", 24));
            </remarks>
            <param name="connection">A valid SqlConnection</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <param name="commandParameters">An array of SqlParamters used to execute the command</param>
            <returns>An int representing the number of rows affected by the command</returns>
        </member>
        <member name="M:Jenzabar.Common.ApplicationBlocks.Data.SqlHelper.ExecuteNonQuery(System.Data.SqlClient.SqlConnection,System.String,System.Object[])">
            <summary>
            Execute a stored procedure via a SqlCommand (that returns no resultset) against the specified SqlConnection 
            using the provided parameter values.  This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <remarks>
            This method provides no access to output parameters or the stored procedure's return value parameter.
            
            e.g.:  
             int result = ExecuteNonQuery(conn, "PublishOrders", 24, 36);
            </remarks>
            <param name="connection">A valid SqlConnection</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="parameterValues">An array of objects to be assigned as the input values of the stored procedure</param>
            <returns>An int representing the number of rows affected by the command</returns>
        </member>
        <member name="M:Jenzabar.Common.ApplicationBlocks.Data.SqlHelper.ExecuteNonQuery(System.Data.SqlClient.SqlTransaction,System.Data.CommandType,System.String)">
            <summary>
            Execute a SqlCommand (that returns no resultset and takes no parameters) against the provided SqlTransaction. 
            </summary>
            <remarks>
            e.g.:  
             int result = ExecuteNonQuery(trans, CommandType.StoredProcedure, "PublishOrders");
            </remarks>
            <param name="transaction">A valid SqlTransaction</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <returns>An int representing the number of rows affected by the command</returns>
        </member>
        <member name="M:Jenzabar.Common.ApplicationBlocks.Data.SqlHelper.ExecuteNonQuery(System.Data.SqlClient.SqlTransaction,System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            Execute a SqlCommand (that returns no resultset) against the specified SqlTransaction
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
             int result = ExecuteNonQuery(trans, CommandType.StoredProcedure, "GetOrders", new SqlParameter("@prodid", 24));
            </remarks>
            <param name="transaction">A valid SqlTransaction</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <param name="commandParameters">An array of SqlParamters used to execute the command</param>
            <returns>An int representing the number of rows affected by the command</returns>
        </member>
        <member name="M:Jenzabar.Common.ApplicationBlocks.Data.SqlHelper.ExecuteNonQuery(System.Data.SqlClient.SqlTransaction,System.String,System.Object[])">
            <summary>
            Execute a stored procedure via a SqlCommand (that returns no resultset) against the specified 
            SqlTransaction using the provided parameter values.  This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <remarks>
            This method provides no access to output parameters or the stored procedure's return value parameter.
            
            e.g.:  
             int result = ExecuteNonQuery(conn, trans, "PublishOrders", 24, 36);
            </remarks>
            <param name="transaction">A valid SqlTransaction</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="parameterValues">An array of objects to be assigned as the input values of the stored procedure</param>
            <returns>An int representing the number of rows affected by the command</returns>
        </member>
        <member name="M:Jenzabar.Common.ApplicationBlocks.Data.SqlHelper.ExecuteDataset(System.String,System.Data.CommandType,System.String)">
            <summary>
            Execute a SqlCommand (that returns a resultset and takes no parameters) against the database specified in 
            the connection string. 
            </summary>
            <remarks>
            e.g.:  
             DataSet ds = ExecuteDataset(connString, CommandType.StoredProcedure, "GetOrders");
            </remarks>
            <param name="connectionString">A valid connection string for a SqlConnection</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <returns>A dataset containing the resultset generated by the command</returns>
        </member>
        <member name="M:Jenzabar.Common.ApplicationBlocks.Data.SqlHelper.ExecuteDataset(System.String,System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            Execute a SqlCommand (that returns a resultset) against the database specified in the connection string 
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
             DataSet ds = ExecuteDataset(connString, CommandType.StoredProcedure, "GetOrders", new SqlParameter("@prodid", 24));
            </remarks>
            <param name="connectionString">A valid connection string for a SqlConnection</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <param name="commandParameters">An array of SqlParamters used to execute the command</param>
            <returns>A dataset containing the resultset generated by the command</returns>
        </member>
        <member name="M:Jenzabar.Common.ApplicationBlocks.Data.SqlHelper.ExecuteDataset(System.String,System.String,System.Object[])">
            <summary>
            Execute a stored procedure via a SqlCommand (that returns a resultset) against the database specified in 
            the connection string using the provided parameter values.  This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <remarks>
            This method provides no access to output parameters or the stored procedure's return value parameter.
            
            e.g.:  
             DataSet ds = ExecuteDataset(connString, "GetOrders", 24, 36);
            </remarks>
            <param name="connectionString">A valid connection string for a SqlConnection</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="parameterValues">An array of objects to be assigned as the input values of the stored procedure</param>
            <returns>A dataset containing the resultset generated by the command</returns>
        </member>
        <member name="M:Jenzabar.Common.ApplicationBlocks.Data.SqlHelper.ExecuteDataset(System.Data.SqlClient.SqlConnection,System.Data.CommandType,System.String)">
            <summary>
            Execute a SqlCommand (that returns a resultset and takes no parameters) against the provided SqlConnection. 
            </summary>
            <remarks>
            e.g.:  
             DataSet ds = ExecuteDataset(conn, CommandType.StoredProcedure, "GetOrders");
            </remarks>
            <param name="connection">A valid SqlConnection</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <returns>A dataset containing the resultset generated by the command</returns>
        </member>
        <member name="M:Jenzabar.Common.ApplicationBlocks.Data.SqlHelper.ExecuteDataset(System.Data.SqlClient.SqlConnection,System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            Execute a SqlCommand (that returns a resultset) against the specified SqlConnection 
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
             DataSet ds = ExecuteDataset(conn, CommandType.StoredProcedure, "GetOrders", new SqlParameter("@prodid", 24));
            </remarks>
            <param name="connection">A valid SqlConnection</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <param name="commandParameters">An array of SqlParamters used to execute the command</param>
            <returns>A dataset containing the resultset generated by the command</returns>
        </member>
        <member name="M:Jenzabar.Common.ApplicationBlocks.Data.SqlHelper.ExecuteDataset(System.Data.SqlClient.SqlConnection,System.String,System.Object[])">
            <summary>
            Execute a stored procedure via a SqlCommand (that returns a resultset) against the specified SqlConnection 
            using the provided parameter values.  This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <remarks>
            This method provides no access to output parameters or the stored procedure's return value parameter.
            
            e.g.:  
             DataSet ds = ExecuteDataset(conn, "GetOrders", 24, 36);
            </remarks>
            <param name="connection">A valid SqlConnection</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="parameterValues">An array of objects to be assigned as the input values of the stored procedure</param>
            <returns>A dataset containing the resultset generated by the command</returns>
        </member>
        <member name="M:Jenzabar.Common.ApplicationBlocks.Data.SqlHelper.ExecuteDataset(System.Data.SqlClient.SqlTransaction,System.Data.CommandType,System.String)">
            <summary>
            Execute a SqlCommand (that returns a resultset and takes no parameters) against the provided SqlTransaction. 
            </summary>
            <remarks>
            e.g.:  
             DataSet ds = ExecuteDataset(trans, CommandType.StoredProcedure, "GetOrders");
            </remarks>
            <param name="transaction">A valid SqlTransaction</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <returns>A dataset containing the resultset generated by the command</returns>
        </member>
        <member name="M:Jenzabar.Common.ApplicationBlocks.Data.SqlHelper.ExecuteDataset(System.Data.SqlClient.SqlTransaction,System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            Execute a SqlCommand (that returns a resultset) against the specified SqlTransaction
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
             DataSet ds = ExecuteDataset(trans, CommandType.StoredProcedure, "GetOrders", new SqlParameter("@prodid", 24));
            </remarks>
            <param name="transaction">A valid SqlTransaction</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <param name="commandParameters">An array of SqlParamters used to execute the command</param>
            <returns>A dataset containing the resultset generated by the command</returns>
        </member>
        <member name="M:Jenzabar.Common.ApplicationBlocks.Data.SqlHelper.ExecuteDataset(System.Data.SqlClient.SqlTransaction,System.String,System.Object[])">
            <summary>
            Execute a stored procedure via a SqlCommand (that returns a resultset) against the specified 
            SqlTransaction using the provided parameter values.  This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <remarks>
            This method provides no access to output parameters or the stored procedure's return value parameter.
            
            e.g.:  
             DataSet ds = ExecuteDataset(trans, "GetOrders", 24, 36);
            </remarks>
            <param name="transaction">A valid SqlTransaction</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="parameterValues">An array of objects to be assigned as the input values of the stored procedure</param>
            <returns>A dataset containing the resultset generated by the command</returns>
        </member>
        <member name="M:Jenzabar.Common.ApplicationBlocks.Data.SqlHelper.ExecuteReader(System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlTransaction,System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[],Jenzabar.Common.ApplicationBlocks.Data.SqlHelper.SqlConnectionOwnership)">
            <summary>
            Create and prepare a SqlCommand, and call ExecuteReader with the appropriate CommandBehavior.
            </summary>
            <remarks>
            If we created and opened the connection, we want the connection to be closed when the DataReader is closed.
            
            If the caller provided the connection, we want to leave it to them to manage.
            </remarks>
            <param name="connection">A valid SqlConnection, on which to execute this command</param>
            <param name="transaction">A valid SqlTransaction, or 'null'</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <param name="commandParameters">An array of SqlParameters to be associated with the command or 'null' if no parameters are required</param>
            <param name="connectionOwnership">Indicates whether the connection parameter was provided by the caller, or created by SqlHelper</param>
            <returns>SqlDataReader containing the results of the command</returns>
        </member>
        <member name="M:Jenzabar.Common.ApplicationBlocks.Data.SqlHelper.ExecuteReader(System.String,System.Data.CommandType,System.String)">
            <summary>
            Execute a SqlCommand (that returns a resultset and takes no parameters) against the database specified in 
            the connection string. 
            </summary>
            <remarks>
            e.g.:  
             SqlDataReader dr = ExecuteReader(connString, CommandType.StoredProcedure, "GetOrders");
            </remarks>
            <param name="connectionString">A valid connection string for a SqlConnection</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <returns>A SqlDataReader containing the resultset generated by the command</returns>
        </member>
        <member name="M:Jenzabar.Common.ApplicationBlocks.Data.SqlHelper.ExecuteReader(System.String,System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            Execute a SqlCommand (that returns a resultset) against the database specified in the connection string 
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
             SqlDataReader dr = ExecuteReader(connString, CommandType.StoredProcedure, "GetOrders", new SqlParameter("@prodid", 24));
            </remarks>
            <param name="connectionString">A valid connection string for a SqlConnection</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <param name="commandParameters">An array of SqlParamters used to execute the command</param>
            <returns>A SqlDataReader containing the resultset generated by the command</returns>
        </member>
        <member name="M:Jenzabar.Common.ApplicationBlocks.Data.SqlHelper.ExecuteReader(System.String,System.String,System.Object[])">
            <summary>
            Execute a stored procedure via a SqlCommand (that returns a resultset) against the database specified in 
            the connection string using the provided parameter values.  This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <remarks>
            This method provides no access to output parameters or the stored procedure's return value parameter.
            
            e.g.:  
             SqlDataReader dr = ExecuteReader(connString, "GetOrders", 24, 36);
            </remarks>
            <param name="connectionString">A valid connection string for a SqlConnection</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="parameterValues">An array of objects to be assigned as the input values of the stored procedure</param>
            <returns>A SqlDataReader containing the resultset generated by the command</returns>
        </member>
        <member name="M:Jenzabar.Common.ApplicationBlocks.Data.SqlHelper.ExecuteReader(System.Data.SqlClient.SqlConnection,System.Data.CommandType,System.String)">
            <summary>
            Execute a SqlCommand (that returns a resultset and takes no parameters) against the provided SqlConnection. 
            </summary>
            <remarks>
            e.g.:  
             SqlDataReader dr = ExecuteReader(conn, CommandType.StoredProcedure, "GetOrders");
            </remarks>
            <param name="connection">A valid SqlConnection</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <returns>A SqlDataReader containing the resultset generated by the command</returns>
        </member>
        <member name="M:Jenzabar.Common.ApplicationBlocks.Data.SqlHelper.ExecuteReader(System.Data.SqlClient.SqlConnection,System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            Execute a SqlCommand (that returns a resultset) against the specified SqlConnection 
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
             SqlDataReader dr = ExecuteReader(conn, CommandType.StoredProcedure, "GetOrders", new SqlParameter("@prodid", 24));
            </remarks>
            <param name="connection">A valid SqlConnection</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <param name="commandParameters">An array of SqlParamters used to execute the command</param>
            <returns>A SqlDataReader containing the resultset generated by the command</returns>
        </member>
        <member name="M:Jenzabar.Common.ApplicationBlocks.Data.SqlHelper.ExecuteReader(System.Data.SqlClient.SqlConnection,System.String,System.Object[])">
            <summary>
            Execute a stored procedure via a SqlCommand (that returns a resultset) against the specified SqlConnection 
            using the provided parameter values.  This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <remarks>
            This method provides no access to output parameters or the stored procedure's return value parameter.
            
            e.g.:  
             SqlDataReader dr = ExecuteReader(conn, "GetOrders", 24, 36);
            </remarks>
            <param name="connection">A valid SqlConnection</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="parameterValues">An array of objects to be assigned as the input values of the stored procedure</param>
            <returns>A SqlDataReader containing the resultset generated by the command</returns>
        </member>
        <member name="M:Jenzabar.Common.ApplicationBlocks.Data.SqlHelper.ExecuteReader(System.Data.SqlClient.SqlTransaction,System.Data.CommandType,System.String)">
            <summary>
            Execute a SqlCommand (that returns a resultset and takes no parameters) against the provided SqlTransaction. 
            </summary>
            <remarks>
            e.g.:  
             SqlDataReader dr = ExecuteReader(trans, CommandType.StoredProcedure, "GetOrders");
            </remarks>
            <param name="transaction">A valid SqlTransaction</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <returns>A SqlDataReader containing the resultset generated by the command</returns>
        </member>
        <member name="M:Jenzabar.Common.ApplicationBlocks.Data.SqlHelper.ExecuteReader(System.Data.SqlClient.SqlTransaction,System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            Execute a SqlCommand (that returns a resultset) against the specified SqlTransaction
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
              SqlDataReader dr = ExecuteReader(trans, CommandType.StoredProcedure, "GetOrders", new SqlParameter("@prodid", 24));
            </remarks>
            <param name="transaction">A valid SqlTransaction</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <param name="commandParameters">An array of SqlParamters used to execute the command</param>
            <returns>A SqlDataReader containing the resultset generated by the command</returns>
        </member>
        <member name="M:Jenzabar.Common.ApplicationBlocks.Data.SqlHelper.ExecuteReader(System.Data.SqlClient.SqlTransaction,System.String,System.Object[])">
            <summary>
            Execute a stored procedure via a SqlCommand (that returns a resultset) against the specified
            SqlTransaction using the provided parameter values.  This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <remarks>
            This method provides no access to output parameters or the stored procedure's return value parameter.
            
            e.g.:  
             SqlDataReader dr = ExecuteReader(trans, "GetOrders", 24, 36);
            </remarks>
            <param name="transaction">A valid SqlTransaction</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="parameterValues">An array of objects to be assigned as the input values of the stored procedure</param>
            <returns>A SqlDataReader containing the resultset generated by the command</returns>
        </member>
        <member name="M:Jenzabar.Common.ApplicationBlocks.Data.SqlHelper.ExecuteScalar(System.String,System.Data.CommandType,System.String)">
            <summary>
            Execute a SqlCommand (that returns a 1x1 resultset and takes no parameters) against the database specified in 
            the connection string. 
            </summary>
            <remarks>
            e.g.:  
             int orderCount = (int)ExecuteScalar(connString, CommandType.StoredProcedure, "GetOrderCount");
            </remarks>
            <param name="connectionString">A valid connection string for a SqlConnection</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <returns>An object containing the value in the 1x1 resultset generated by the command</returns>
        </member>
        <member name="M:Jenzabar.Common.ApplicationBlocks.Data.SqlHelper.ExecuteScalar(System.String,System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            Execute a SqlCommand (that returns a 1x1 resultset) against the database specified in the connection string 
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
             int orderCount = (int)ExecuteScalar(connString, CommandType.StoredProcedure, "GetOrderCount", new SqlParameter("@prodid", 24));
            </remarks>
            <param name="connectionString">A valid connection string for a SqlConnection</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <param name="commandParameters">An array of SqlParamters used to execute the command</param>
            <returns>An object containing the value in the 1x1 resultset generated by the command</returns>
        </member>
        <member name="M:Jenzabar.Common.ApplicationBlocks.Data.SqlHelper.ExecuteScalar(System.String,System.String,System.Object[])">
            <summary>
            Execute a stored procedure via a SqlCommand (that returns a 1x1 resultset) against the database specified in 
            the connection string using the provided parameter values.  This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <remarks>
            This method provides no access to output parameters or the stored procedure's return value parameter.
            
            e.g.:  
             int orderCount = (int)ExecuteScalar(connString, "GetOrderCount", 24, 36);
            </remarks>
            <param name="connectionString">A valid connection string for a SqlConnection</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="parameterValues">An array of objects to be assigned as the input values of the stored procedure</param>
            <returns>An object containing the value in the 1x1 resultset generated by the command</returns>
        </member>
        <member name="M:Jenzabar.Common.ApplicationBlocks.Data.SqlHelper.ExecuteScalar(System.Data.SqlClient.SqlConnection,System.Data.CommandType,System.String)">
            <summary>
            Execute a SqlCommand (that returns a 1x1 resultset and takes no parameters) against the provided SqlConnection. 
            </summary>
            <remarks>
            e.g.:  
             int orderCount = (int)ExecuteScalar(conn, CommandType.StoredProcedure, "GetOrderCount");
            </remarks>
            <param name="connection">A valid SqlConnection</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <returns>An object containing the value in the 1x1 resultset generated by the command</returns>
        </member>
        <member name="M:Jenzabar.Common.ApplicationBlocks.Data.SqlHelper.ExecuteScalar(System.Data.SqlClient.SqlConnection,System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            Execute a SqlCommand (that returns a 1x1 resultset) against the specified SqlConnection 
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
             int orderCount = (int)ExecuteScalar(conn, CommandType.StoredProcedure, "GetOrderCount", new SqlParameter("@prodid", 24));
            </remarks>
            <param name="connection">A valid SqlConnection</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <param name="commandParameters">An array of SqlParamters used to execute the command</param>
            <returns>An object containing the value in the 1x1 resultset generated by the command</returns>
        </member>
        <member name="M:Jenzabar.Common.ApplicationBlocks.Data.SqlHelper.ExecuteScalar(System.Data.SqlClient.SqlConnection,System.String,System.Object[])">
            <summary>
            Execute a stored procedure via a SqlCommand (that returns a 1x1 resultset) against the specified SqlConnection 
            using the provided parameter values.  This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <remarks>
            This method provides no access to output parameters or the stored procedure's return value parameter.
            
            e.g.:  
             int orderCount = (int)ExecuteScalar(conn, "GetOrderCount", 24, 36);
            </remarks>
            <param name="connection">A valid SqlConnection</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="parameterValues">An array of objects to be assigned as the input values of the stored procedure</param>
            <returns>An object containing the value in the 1x1 resultset generated by the command</returns>
        </member>
        <member name="M:Jenzabar.Common.ApplicationBlocks.Data.SqlHelper.ExecuteScalar(System.Data.SqlClient.SqlTransaction,System.Data.CommandType,System.String)">
            <summary>
            Execute a SqlCommand (that returns a 1x1 resultset and takes no parameters) against the provided SqlTransaction. 
            </summary>
            <remarks>
            e.g.:  
             int orderCount = (int)ExecuteScalar(trans, CommandType.StoredProcedure, "GetOrderCount");
            </remarks>
            <param name="transaction">A valid SqlTransaction</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <returns>An object containing the value in the 1x1 resultset generated by the command</returns>
        </member>
        <member name="M:Jenzabar.Common.ApplicationBlocks.Data.SqlHelper.ExecuteScalar(System.Data.SqlClient.SqlTransaction,System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            Execute a SqlCommand (that returns a 1x1 resultset) against the specified SqlTransaction
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
             int orderCount = (int)ExecuteScalar(trans, CommandType.StoredProcedure, "GetOrderCount", new SqlParameter("@prodid", 24));
            </remarks>
            <param name="transaction">A valid SqlTransaction</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <param name="commandParameters">An array of SqlParamters used to execute the command</param>
            <returns>An object containing the value in the 1x1 resultset generated by the command</returns>
        </member>
        <member name="M:Jenzabar.Common.ApplicationBlocks.Data.SqlHelper.ExecuteScalar(System.Data.SqlClient.SqlTransaction,System.String,System.Object[])">
            <summary>
            Execute a stored procedure via a SqlCommand (that returns a 1x1 resultset) against the specified
            SqlTransaction using the provided parameter values.  This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <remarks>
            This method provides no access to output parameters or the stored procedure's return value parameter.
            
            e.g.:  
             int orderCount = (int)ExecuteScalar(trans, "GetOrderCount", 24, 36);
            </remarks>
            <param name="transaction">A valid SqlTransaction</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="parameterValues">An array of objects to be assigned as the input values of the stored procedure</param>
            <returns>An object containing the value in the 1x1 resultset generated by the command</returns>
        </member>
        <member name="M:Jenzabar.Common.ApplicationBlocks.Data.SqlHelper.ExecuteXmlReader(System.Data.SqlClient.SqlConnection,System.Data.CommandType,System.String)">
            <summary>
            Execute a SqlCommand (that returns a resultset and takes no parameters) against the provided SqlConnection. 
            </summary>
            <remarks>
            e.g.:  
             XmlReader r = ExecuteXmlReader(conn, CommandType.StoredProcedure, "GetOrders");
            </remarks>
            <param name="connection">A valid SqlConnection</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command using "FOR XML AUTO"</param>
            <returns>An XmlReader containing the resultset generated by the command</returns>
        </member>
        <member name="M:Jenzabar.Common.ApplicationBlocks.Data.SqlHelper.ExecuteXmlReader(System.Data.SqlClient.SqlConnection,System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            Execute a SqlCommand (that returns a resultset) against the specified SqlConnection 
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
             XmlReader r = ExecuteXmlReader(conn, CommandType.StoredProcedure, "GetOrders", new SqlParameter("@prodid", 24));
            </remarks>
            <param name="connection">A valid SqlConnection</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command using "FOR XML AUTO"</param>
            <param name="commandParameters">An array of SqlParamters used to execute the command</param>
            <returns>An XmlReader containing the resultset generated by the command</returns>
        </member>
        <member name="M:Jenzabar.Common.ApplicationBlocks.Data.SqlHelper.ExecuteXmlReader(System.Data.SqlClient.SqlConnection,System.String,System.Object[])">
            <summary>
            Execute a stored procedure via a SqlCommand (that returns a resultset) against the specified SqlConnection 
            using the provided parameter values.  This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <remarks>
            This method provides no access to output parameters or the stored procedure's return value parameter.
            
            e.g.:  
             XmlReader r = ExecuteXmlReader(conn, "GetOrders", 24, 36);
            </remarks>
            <param name="connection">A valid SqlConnection</param>
            <param name="spName">The name of the stored procedure using "FOR XML AUTO"</param>
            <param name="parameterValues">An array of objects to be assigned as the input values of the stored procedure</param>
            <returns>An XmlReader containing the resultset generated by the command</returns>
        </member>
        <member name="M:Jenzabar.Common.ApplicationBlocks.Data.SqlHelper.ExecuteXmlReader(System.Data.SqlClient.SqlTransaction,System.Data.CommandType,System.String)">
            <summary>
            Execute a SqlCommand (that returns a resultset and takes no parameters) against the provided SqlTransaction. 
            </summary>
            <remarks>
            e.g.:  
             XmlReader r = ExecuteXmlReader(trans, CommandType.StoredProcedure, "GetOrders");
            </remarks>
            <param name="transaction">A valid SqlTransaction</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command using "FOR XML AUTO"</param>
            <returns>An XmlReader containing the resultset generated by the command</returns>
        </member>
        <member name="M:Jenzabar.Common.ApplicationBlocks.Data.SqlHelper.ExecuteXmlReader(System.Data.SqlClient.SqlTransaction,System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            Execute a SqlCommand (that returns a resultset) against the specified SqlTransaction
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
             XmlReader r = ExecuteXmlReader(trans, CommandType.StoredProcedure, "GetOrders", new SqlParameter("@prodid", 24));
            </remarks>
            <param name="transaction">A valid SqlTransaction</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command using "FOR XML AUTO"</param>
            <param name="commandParameters">An array of SqlParamters used to execute the command</param>
            <returns>An XmlReader containing the resultset generated by the command</returns>
        </member>
        <member name="M:Jenzabar.Common.ApplicationBlocks.Data.SqlHelper.ExecuteXmlReader(System.Data.SqlClient.SqlTransaction,System.String,System.Object[])">
            <summary>
            Execute a stored procedure via a SqlCommand (that returns a resultset) against the specified 
            SqlTransaction using the provided parameter values.  This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <remarks>
            This method provides no access to output parameters or the stored procedure's return value parameter.
            
            e.g.:  
             XmlReader r = ExecuteXmlReader(trans, "GetOrders", 24, 36);
            </remarks>
            <param name="transaction">A valid SqlTransaction</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="parameterValues">An array of objects to be assigned as the input values of the stored procedure</param>
            <returns>A dataset containing the resultset generated by the command</returns>
        </member>
        <member name="M:Jenzabar.Common.ApplicationBlocks.Data.SqlHelper.FillDataset(System.String,System.Data.CommandType,System.String,System.Data.DataSet,System.String[])">
            <summary>
            Execute a SqlCommand (that returns a resultset and takes no parameters) against the database specified in 
            the connection string. 
            </summary>
            <remarks>
            e.g.:  
             FillDataset(connString, CommandType.StoredProcedure, "GetOrders", ds, new string[] {"orders"});
            </remarks>
            <param name="connectionString">A valid connection string for a SqlConnection</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <param name="dataSet">A dataset wich will contain the resultset generated by the command</param>
            <param name="tableNames">This array will be used to create table mappings allowing the DataTables to be referenced
            by a user defined name (probably the actual table name)</param>
        </member>
        <member name="M:Jenzabar.Common.ApplicationBlocks.Data.SqlHelper.FillDataset(System.String,System.Data.CommandType,System.String,System.Data.DataSet,System.String[],System.Data.SqlClient.SqlParameter[])">
            <summary>
            Execute a SqlCommand (that returns a resultset) against the database specified in the connection string 
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
             FillDataset(connString, CommandType.StoredProcedure, "GetOrders", ds, new string[] {"orders"}, new SqlParameter("@prodid", 24));
            </remarks>
            <param name="connectionString">A valid connection string for a SqlConnection</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <param name="commandParameters">An array of SqlParamters used to execute the command</param>
            <param name="dataSet">A dataset wich will contain the resultset generated by the command</param>
            <param name="tableNames">This array will be used to create table mappings allowing the DataTables to be referenced
            by a user defined name (probably the actual table name)
            </param>
        </member>
        <member name="M:Jenzabar.Common.ApplicationBlocks.Data.SqlHelper.FillDataset(System.String,System.String,System.Data.DataSet,System.String[],System.Object[])">
            <summary>
            Execute a stored procedure via a SqlCommand (that returns a resultset) against the database specified in 
            the connection string using the provided parameter values.  This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <remarks>
            This method provides no access to output parameters or the stored procedure's return value parameter.
            
            e.g.:  
             FillDataset(connString, CommandType.StoredProcedure, "GetOrders", ds, new string[] {"orders"}, 24);
            </remarks>
            <param name="connectionString">A valid connection string for a SqlConnection</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="dataSet">A dataset wich will contain the resultset generated by the command</param>
            <param name="tableNames">This array will be used to create table mappings allowing the DataTables to be referenced
            by a user defined name (probably the actual table name)
            </param>    
            <param name="parameterValues">An array of objects to be assigned as the input values of the stored procedure</param>
        </member>
        <member name="M:Jenzabar.Common.ApplicationBlocks.Data.SqlHelper.FillDataset(System.Data.SqlClient.SqlConnection,System.Data.CommandType,System.String,System.Data.DataSet,System.String[])">
            <summary>
            Execute a SqlCommand (that returns a resultset and takes no parameters) against the provided SqlConnection. 
            </summary>
            <remarks>
            e.g.:  
             FillDataset(conn, CommandType.StoredProcedure, "GetOrders", ds, new string[] {"orders"});
            </remarks>
            <param name="connection">A valid SqlConnection</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <param name="dataSet">A dataset wich will contain the resultset generated by the command</param>
            <param name="tableNames">This array will be used to create table mappings allowing the DataTables to be referenced
            by a user defined name (probably the actual table name)
            </param>    
        </member>
        <member name="M:Jenzabar.Common.ApplicationBlocks.Data.SqlHelper.FillDataset(System.Data.SqlClient.SqlConnection,System.Data.CommandType,System.String,System.Data.DataSet,System.String[],System.Data.SqlClient.SqlParameter[])">
            <summary>
            Execute a SqlCommand (that returns a resultset) against the specified SqlConnection 
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
             FillDataset(conn, CommandType.StoredProcedure, "GetOrders", ds, new string[] {"orders"}, new SqlParameter("@prodid", 24));
            </remarks>
            <param name="connection">A valid SqlConnection</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <param name="dataSet">A dataset wich will contain the resultset generated by the command</param>
            <param name="tableNames">This array will be used to create table mappings allowing the DataTables to be referenced
            by a user defined name (probably the actual table name)
            </param>
            <param name="commandParameters">An array of SqlParamters used to execute the command</param>
        </member>
        <member name="M:Jenzabar.Common.ApplicationBlocks.Data.SqlHelper.FillDataset(System.Data.SqlClient.SqlConnection,System.String,System.Data.DataSet,System.String[],System.Object[])">
            <summary>
            Execute a stored procedure via a SqlCommand (that returns a resultset) against the specified SqlConnection 
            using the provided parameter values.  This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <remarks>
            This method provides no access to output parameters or the stored procedure's return value parameter.
            
            e.g.:  
             FillDataset(conn, "GetOrders", ds, new string[] {"orders"}, 24, 36);
            </remarks>
            <param name="connection">A valid SqlConnection</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="dataSet">A dataset wich will contain the resultset generated by the command</param>
            <param name="tableNames">This array will be used to create table mappings allowing the DataTables to be referenced
            by a user defined name (probably the actual table name)
            </param>
            <param name="parameterValues">An array of objects to be assigned as the input values of the stored procedure</param>
        </member>
        <member name="M:Jenzabar.Common.ApplicationBlocks.Data.SqlHelper.FillDataset(System.Data.SqlClient.SqlTransaction,System.Data.CommandType,System.String,System.Data.DataSet,System.String[])">
            <summary>
            Execute a SqlCommand (that returns a resultset and takes no parameters) against the provided SqlTransaction. 
            </summary>
            <remarks>
            e.g.:  
             FillDataset(trans, CommandType.StoredProcedure, "GetOrders", ds, new string[] {"orders"});
            </remarks>
            <param name="transaction">A valid SqlTransaction</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <param name="dataSet">A dataset wich will contain the resultset generated by the command</param>
            <param name="tableNames">This array will be used to create table mappings allowing the DataTables to be referenced
            by a user defined name (probably the actual table name)
            </param>
        </member>
        <member name="M:Jenzabar.Common.ApplicationBlocks.Data.SqlHelper.FillDataset(System.Data.SqlClient.SqlTransaction,System.Data.CommandType,System.String,System.Data.DataSet,System.String[],System.Data.SqlClient.SqlParameter[])">
            <summary>
            Execute a SqlCommand (that returns a resultset) against the specified SqlTransaction
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
             FillDataset(trans, CommandType.StoredProcedure, "GetOrders", ds, new string[] {"orders"}, new SqlParameter("@prodid", 24));
            </remarks>
            <param name="transaction">A valid SqlTransaction</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <param name="dataSet">A dataset wich will contain the resultset generated by the command</param>
            <param name="tableNames">This array will be used to create table mappings allowing the DataTables to be referenced
            by a user defined name (probably the actual table name)
            </param>
            <param name="commandParameters">An array of SqlParamters used to execute the command</param>
        </member>
        <member name="M:Jenzabar.Common.ApplicationBlocks.Data.SqlHelper.FillDataset(System.Data.SqlClient.SqlTransaction,System.String,System.Data.DataSet,System.String[],System.Object[])">
            <summary>
            Execute a stored procedure via a SqlCommand (that returns a resultset) against the specified 
            SqlTransaction using the provided parameter values.  This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <remarks>
            This method provides no access to output parameters or the stored procedure's return value parameter.
            
            e.g.:  
             FillDataset(trans, "GetOrders", ds, new string[]{"orders"}, 24, 36);
            </remarks>
            <param name="transaction">A valid SqlTransaction</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="dataSet">A dataset wich will contain the resultset generated by the command</param>
            <param name="tableNames">This array will be used to create table mappings allowing the DataTables to be referenced
            by a user defined name (probably the actual table name)
            </param>
            <param name="parameterValues">An array of objects to be assigned as the input values of the stored procedure</param>
        </member>
        <member name="M:Jenzabar.Common.ApplicationBlocks.Data.SqlHelper.FillDataset(System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlTransaction,System.Data.CommandType,System.String,System.Data.DataSet,System.String[],System.Data.SqlClient.SqlParameter[])">
            <summary>
            Private helper method that execute a SqlCommand (that returns a resultset) against the specified SqlTransaction and SqlConnection
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
             FillDataset(conn, trans, CommandType.StoredProcedure, "GetOrders", ds, new string[] {"orders"}, new SqlParameter("@prodid", 24));
            </remarks>
            <param name="connection">A valid SqlConnection</param>
            <param name="transaction">A valid SqlTransaction</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <param name="dataSet">A dataset wich will contain the resultset generated by the command</param>
            <param name="tableNames">This array will be used to create table mappings allowing the DataTables to be referenced
            by a user defined name (probably the actual table name)
            </param>
            <param name="commandParameters">An array of SqlParamters used to execute the command</param>
        </member>
        <member name="M:Jenzabar.Common.ApplicationBlocks.Data.SqlHelper.UpdateDataset(System.Data.SqlClient.SqlCommand,System.Data.SqlClient.SqlCommand,System.Data.SqlClient.SqlCommand,System.Data.DataSet,System.String)">
            <summary>
            Executes the respective command for each inserted, updated, or deleted row in the DataSet.
            </summary>
            <remarks>
            e.g.:  
             UpdateDataset(conn, insertCommand, deleteCommand, updateCommand, dataSet, "Order");
            </remarks>
            <param name="insertCommand">A valid transact-SQL statement or stored procedure to insert new records into the data source</param>
            <param name="deleteCommand">A valid transact-SQL statement or stored procedure to delete records from the data source</param>
            <param name="updateCommand">A valid transact-SQL statement or stored procedure used to update records in the data source</param>
            <param name="dataSet">The DataSet used to update the data source</param>
            <param name="tableName">The DataTable used to update the data source.</param>
        </member>
        <member name="M:Jenzabar.Common.ApplicationBlocks.Data.SqlHelper.CreateCommand(System.Data.SqlClient.SqlConnection,System.String,System.String[])">
            <summary>
            Simplify the creation of a Sql command object by allowing
            a stored procedure and optional parameters to be provided
            </summary>
            <remarks>
            e.g.:  
             SqlCommand command = CreateCommand(conn, "AddCustomer", "CustomerID", "CustomerName");
            </remarks>
            <param name="connection">A valid SqlConnection object</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="sourceColumns">An array of string to be assigned as the source columns of the stored procedure parameters</param>
            <returns>A valid SqlCommand object</returns>
        </member>
        <member name="M:Jenzabar.Common.ApplicationBlocks.Data.SqlHelper.ExecuteNonQueryTypedParams(System.String,System.String,System.Data.DataRow)">
            <summary>
            Execute a stored procedure via a SqlCommand (that returns no resultset) against the database specified in 
            the connection string using the dataRow column values as the stored procedure's parameters values.
            This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on row values.
            </summary>
            <param name="connectionString">A valid connection string for a SqlConnection</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="dataRow">The dataRow used to hold the stored procedure's parameter values.</param>
            <returns>An int representing the number of rows affected by the command</returns>
        </member>
        <member name="M:Jenzabar.Common.ApplicationBlocks.Data.SqlHelper.ExecuteNonQueryTypedParams(System.Data.SqlClient.SqlConnection,System.String,System.Data.DataRow)">
            <summary>
            Execute a stored procedure via a SqlCommand (that returns no resultset) against the specified SqlConnection 
            using the dataRow column values as the stored procedure's parameters values.  
            This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on row values.
            </summary>
            <param name="connection">A valid SqlConnection object</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="dataRow">The dataRow used to hold the stored procedure's parameter values.</param>
            <returns>An int representing the number of rows affected by the command</returns>
        </member>
        <member name="M:Jenzabar.Common.ApplicationBlocks.Data.SqlHelper.ExecuteNonQueryTypedParams(System.Data.SqlClient.SqlTransaction,System.String,System.Data.DataRow)">
            <summary>
            Execute a stored procedure via a SqlCommand (that returns no resultset) against the specified
            SqlTransaction using the dataRow column values as the stored procedure's parameters values.
            This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on row values.
            </summary>
            <param name="transaction">A valid SqlTransaction object</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="dataRow">The dataRow used to hold the stored procedure's parameter values.</param>
            <returns>An int representing the number of rows affected by the command</returns>
        </member>
        <member name="M:Jenzabar.Common.ApplicationBlocks.Data.SqlHelper.ExecuteDatasetTypedParams(System.String,System.String,System.Data.DataRow)">
            <summary>
            Execute a stored procedure via a SqlCommand (that returns a resultset) against the database specified in 
            the connection string using the dataRow column values as the stored procedure's parameters values.
            This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on row values.
            </summary>
            <param name="connectionString">A valid connection string for a SqlConnection</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="dataRow">The dataRow used to hold the stored procedure's parameter values.</param>
            <returns>A dataset containing the resultset generated by the command</returns>
        </member>
        <member name="M:Jenzabar.Common.ApplicationBlocks.Data.SqlHelper.ExecuteDatasetTypedParams(System.Data.SqlClient.SqlConnection,System.String,System.Data.DataRow)">
            <summary>
            Execute a stored procedure via a SqlCommand (that returns a resultset) against the specified SqlConnection 
            using the dataRow column values as the store procedure's parameters values.
            This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on row values.
            </summary>
            <param name="connection">A valid SqlConnection object</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="dataRow">The dataRow used to hold the stored procedure's parameter values.</param>
            <returns>A dataset containing the resultset generated by the command</returns>
        </member>
        <member name="M:Jenzabar.Common.ApplicationBlocks.Data.SqlHelper.ExecuteDatasetTypedParams(System.Data.SqlClient.SqlTransaction,System.String,System.Data.DataRow)">
            <summary>
            Execute a stored procedure via a SqlCommand (that returns a resultset) against the specified SqlTransaction 
            using the dataRow column values as the stored procedure's parameters values.
            This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on row values.
            </summary>
            <param name="transaction">A valid SqlTransaction object</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="dataRow">The dataRow used to hold the stored procedure's parameter values.</param>
            <returns>A dataset containing the resultset generated by the command</returns>
        </member>
        <member name="M:Jenzabar.Common.ApplicationBlocks.Data.SqlHelper.ExecuteReaderTypedParams(System.String,System.String,System.Data.DataRow)">
            <summary>
            Execute a stored procedure via a SqlCommand (that returns a resultset) against the database specified in 
            the connection string using the dataRow column values as the stored procedure's parameters values.
            This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <param name="connectionString">A valid connection string for a SqlConnection</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="dataRow">The dataRow used to hold the stored procedure's parameter values.</param>
            <returns>A SqlDataReader containing the resultset generated by the command</returns>
        </member>
        <member name="M:Jenzabar.Common.ApplicationBlocks.Data.SqlHelper.ExecuteReaderTypedParams(System.Data.SqlClient.SqlConnection,System.String,System.Data.DataRow)">
            <summary>
            Execute a stored procedure via a SqlCommand (that returns a resultset) against the specified SqlConnection 
            using the dataRow column values as the stored procedure's parameters values.
            This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <param name="connection">A valid SqlConnection object</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="dataRow">The dataRow used to hold the stored procedure's parameter values.</param>
            <returns>A SqlDataReader containing the resultset generated by the command</returns>
        </member>
        <member name="M:Jenzabar.Common.ApplicationBlocks.Data.SqlHelper.ExecuteReaderTypedParams(System.Data.SqlClient.SqlTransaction,System.String,System.Data.DataRow)">
            <summary>
            Execute a stored procedure via a SqlCommand (that returns a resultset) against the specified SqlTransaction 
            using the dataRow column values as the stored procedure's parameters values.
            This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <param name="transaction">A valid SqlTransaction object</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="dataRow">The dataRow used to hold the stored procedure's parameter values.</param>
            <returns>A SqlDataReader containing the resultset generated by the command</returns>
        </member>
        <member name="M:Jenzabar.Common.ApplicationBlocks.Data.SqlHelper.ExecuteScalarTypedParams(System.String,System.String,System.Data.DataRow)">
            <summary>
            Execute a stored procedure via a SqlCommand (that returns a 1x1 resultset) against the database specified in 
            the connection string using the dataRow column values as the stored procedure's parameters values.
            This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <param name="connectionString">A valid connection string for a SqlConnection</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="dataRow">The dataRow used to hold the stored procedure's parameter values.</param>
            <returns>An object containing the value in the 1x1 resultset generated by the command</returns>
        </member>
        <member name="M:Jenzabar.Common.ApplicationBlocks.Data.SqlHelper.ExecuteScalarTypedParams(System.Data.SqlClient.SqlConnection,System.String,System.Data.DataRow)">
            <summary>
            Execute a stored procedure via a SqlCommand (that returns a 1x1 resultset) against the specified SqlConnection 
            using the dataRow column values as the stored procedure's parameters values.
            This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <param name="connection">A valid SqlConnection object</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="dataRow">The dataRow used to hold the stored procedure's parameter values.</param>
            <returns>An object containing the value in the 1x1 resultset generated by the command</returns>
        </member>
        <member name="M:Jenzabar.Common.ApplicationBlocks.Data.SqlHelper.ExecuteScalarTypedParams(System.Data.SqlClient.SqlTransaction,System.String,System.Data.DataRow)">
            <summary>
            Execute a stored procedure via a SqlCommand (that returns a 1x1 resultset) against the specified SqlTransaction
            using the dataRow column values as the stored procedure's parameters values.
            This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <param name="transaction">A valid SqlTransaction object</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="dataRow">The dataRow used to hold the stored procedure's parameter values.</param>
            <returns>An object containing the value in the 1x1 resultset generated by the command</returns>
        </member>
        <member name="M:Jenzabar.Common.ApplicationBlocks.Data.SqlHelper.ExecuteXmlReaderTypedParams(System.Data.SqlClient.SqlConnection,System.String,System.Data.DataRow)">
            <summary>
            Execute a stored procedure via a SqlCommand (that returns a resultset) against the specified SqlConnection 
            using the dataRow column values as the stored procedure's parameters values.
            This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <param name="connection">A valid SqlConnection object</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="dataRow">The dataRow used to hold the stored procedure's parameter values.</param>
            <returns>An XmlReader containing the resultset generated by the command</returns>
        </member>
        <member name="M:Jenzabar.Common.ApplicationBlocks.Data.SqlHelper.ExecuteXmlReaderTypedParams(System.Data.SqlClient.SqlTransaction,System.String,System.Data.DataRow)">
            <summary>
            Execute a stored procedure via a SqlCommand (that returns a resultset) against the specified SqlTransaction 
            using the dataRow column values as the stored procedure's parameters values.
            This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <param name="transaction">A valid SqlTransaction object</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="dataRow">The dataRow used to hold the stored procedure's parameter values.</param>
            <returns>An XmlReader containing the resultset generated by the command</returns>
        </member>
        <member name="M:Jenzabar.Common.ApplicationBlocks.Data.SqlHelper.ConvertDataReaderToDataTable(System.Data.SqlClient.SqlDataReader)">
            <summary>
            Converts a data reader to a data table
            </summary>
            <param name="reader">The data reader to convert</param>
            <returns>The data table</returns>
            <remarks>
            The data reader will be closed once the conversion is completed
            </remarks>
        </member>
        <member name="M:Jenzabar.Common.ApplicationBlocks.Data.SqlHelper.ConvertDataReaderToDataTable(System.Data.SqlClient.SqlDataReader,System.String)">
            <summary>
            Converts a data reader to a data table
            </summary>
            <param name="reader">The data reader to convert</param>
            <param name="ItemName">An identifier for the The query/sproc that generated this reader. So we do not reuse a cache key
            that may be incorrect in this instance</param>
            <returns>The data table</returns>
            <remarks>
            The data reader will be closed once the conversion is completed
            </remarks>
        </member>
        <member name="M:Jenzabar.Common.ApplicationBlocks.Data.SqlHelper.GetSchemaTable(System.Data.SqlClient.SqlDataReader,System.String)">
            <summary>
            reader.GetSchemaTable is takig a looong time to execute, this should prevent us from having to call it too much.
            </summary>
            <param name="reader">The datareader to find the key for</param>
            <param name="ItemName">Extra identifier to define the cache key</param>
            <returns></returns>
        </member>
        <member name="M:Jenzabar.Common.ApplicationBlocks.Data.SqlHelper.GetCacheKey(System.Data.SqlClient.SqlDataReader,System.String)">
            <summary>
            This searches a hashtable to find cached columns so GetSchemaTable doesn't necessarily need to requery the DB for schema
            </summary>
            <param name="reader">The reader to help identify the cache key</param>
            <param name="ItemName">Additional Information to indentify the cache key (in case the same columns come back for different
            queries and need to have different attributes </param>
            <returns>A string representing the cache key to search on</returns>
        </member>
        <member name="T:Jenzabar.Common.ApplicationBlocks.Data.SqlHelper.SqlConnectionOwnership">
            <summary>
            This enum is used to indicate whether the connection was provided by the caller, or created by SqlHelper, so that
            we can set the appropriate CommandBehavior when calling ExecuteReader()
            </summary>
        </member>
        <member name="F:Jenzabar.Common.ApplicationBlocks.Data.SqlHelper.SqlConnectionOwnership.Internal">
            <summary>Connection is owned and managed by SqlHelper</summary>
        </member>
        <member name="F:Jenzabar.Common.ApplicationBlocks.Data.SqlHelper.SqlConnectionOwnership.External">
            <summary>Connection is owned and managed by the caller</summary>
        </member>
        <member name="T:Jenzabar.Common.ApplicationBlocks.Data.SqlHelperParameterCache">
            <summary>
            SqlHelperParameterCache provides functions to leverage a static cache of procedure parameters, and the
            ability to discover parameters for stored procedures at run-time.
            </summary>
        </member>
        <member name="M:Jenzabar.Common.ApplicationBlocks.Data.SqlHelperParameterCache.DiscoverSpParameterSet(System.Data.SqlClient.SqlConnection,System.String,System.Boolean)">
            <summary>
            Resolve at run time the appropriate set of SqlParameters for a stored procedure
            </summary>
            <param name="connection">A valid SqlConnection object</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="includeReturnValueParameter">Whether or not to include their return value parameter</param>
            <returns>The parameter array discovered.</returns>
        </member>
        <member name="M:Jenzabar.Common.ApplicationBlocks.Data.SqlHelperParameterCache.CloneParameters(System.Data.SqlClient.SqlParameter[])">
            <summary>
            Deep copy of cached SqlParameter array
            </summary>
            <param name="originalParameters"></param>
            <returns></returns>
        </member>
        <member name="M:Jenzabar.Common.ApplicationBlocks.Data.SqlHelperParameterCache.CacheParameterSet(System.String,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            Add parameter array to the cache
            </summary>
            <param name="connectionString">A valid connection string for a SqlConnection</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <param name="commandParameters">An array of SqlParamters to be cached</param>
        </member>
        <member name="M:Jenzabar.Common.ApplicationBlocks.Data.SqlHelperParameterCache.GetCachedParameterSet(System.String,System.String)">
            <summary>
            Retrieve a parameter array from the cache
            </summary>
            <param name="connectionString">A valid connection string for a SqlConnection</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <returns>An array of SqlParamters</returns>
        </member>
        <member name="M:Jenzabar.Common.ApplicationBlocks.Data.SqlHelperParameterCache.GetSpParameterSet(System.String,System.String)">
            <summary>
            Retrieves the set of SqlParameters appropriate for the stored procedure
            </summary>
            <remarks>
            This method will query the database for this information, and then store it in a cache for future requests.
            </remarks>
            <param name="connectionString">A valid connection string for a SqlConnection</param>
            <param name="spName">The name of the stored procedure</param>
            <returns>An array of SqlParameters</returns>
        </member>
        <member name="M:Jenzabar.Common.ApplicationBlocks.Data.SqlHelperParameterCache.GetSpParameterSet(System.String,System.String,System.Boolean)">
            <summary>
            Retrieves the set of SqlParameters appropriate for the stored procedure
            </summary>
            <remarks>
            This method will query the database for this information, and then store it in a cache for future requests.
            </remarks>
            <param name="connectionString">A valid connection string for a SqlConnection</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="includeReturnValueParameter">A bool value indicating whether the return value parameter should be included in the results</param>
            <returns>An array of SqlParameters</returns>
        </member>
        <member name="M:Jenzabar.Common.ApplicationBlocks.Data.SqlHelperParameterCache.GetSpParameterSet(System.Data.SqlClient.SqlConnection,System.String)">
            <summary>
            Retrieves the set of SqlParameters appropriate for the stored procedure
            </summary>
            <remarks>
            This method will query the database for this information, and then store it in a cache for future requests.
            </remarks>
            <param name="connection">A valid SqlConnection object</param>
            <param name="spName">The name of the stored procedure</param>
            <returns>An array of SqlParameters</returns>
        </member>
        <member name="M:Jenzabar.Common.ApplicationBlocks.Data.SqlHelperParameterCache.GetSpParameterSet(System.Data.SqlClient.SqlConnection,System.String,System.Boolean)">
            <summary>
            Retrieves the set of SqlParameters appropriate for the stored procedure
            </summary>
            <remarks>
            This method will query the database for this information, and then store it in a cache for future requests.
            </remarks>
            <param name="connection">A valid SqlConnection object</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="includeReturnValueParameter">A bool value indicating whether the return value parameter should be included in the results</param>
            <returns>An array of SqlParameters</returns>
        </member>
        <member name="M:Jenzabar.Common.ApplicationBlocks.Data.SqlHelperParameterCache.GetSpParameterSetInternal(System.Data.SqlClient.SqlConnection,System.String,System.Boolean)">
            <summary>
            Retrieves the set of SqlParameters appropriate for the stored procedure
            </summary>
            <param name="connection">A valid SqlConnection object</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="includeReturnValueParameter">A bool value indicating whether the return value parameter should be included in the results</param>
            <returns>An array of SqlParameters</returns>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Configuration.XmlSerializerTransformerData">
            <summary>
            <para>Represents a data transformer that takes data and serializes / deserializes the configuration data info Xml.</para>
            </summary>      
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Configuration.XmlSerializerTransformerData.#ctor">
            <summary>
            <para>Initialize a new instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Configuration.XmlSerializerTransformerData"/> class.</para>
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Configuration.XmlSerializerTransformerData.#ctor(System.String)">
            <summary>
            <para>Initialize a new instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Configuration.XmlSerializerTransformerData"/> class with a name and fully qualified type name.</para>
            </summary>
            <param name="name">
            <para>The name of the transformer.</para>
            </param>       
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Configuration.XmlSerializerTransformerData.Clone">
            <summary>
            <para>Creates a new object that is a copy of the current instance.</para>
            </summary>
            <returns>
            <para>A new object that is a copy of this instance.</para>
            </returns>
            <remarks>
            <para>This clone does a deep copy.</para>
            </remarks>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Configuration.XmlSerializerTransformerData.XmlIncludeTypes">
            <summary>
            <para>Gets the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Configuration.XmlIncludeTypeDataCollection"/>.</para>
            </summary>
            <value>
            <para>The include types available in configuration. The default is an empty collection.</para>
            </value>
            <remarks>
            <para>This property maps to the <c>includeTypes</c> element in configuration.</para>
            </remarks>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Configuration.XmlSerializerTransformerData.TypeName">
            <summary>
            <para>Gets the fully qualified assembly name for a <see cref="T:Microsoft.Practices.EnterpriseLibrary.Configuration.Transformer.XmlSerializerTransformer"/>.</para>
            </summary>
            <value>
            <para>The fully qualified assembly name for a <see cref="T:Microsoft.Practices.EnterpriseLibrary.Configuration.Transformer.XmlSerializerTransformer"/>.</para>
            </value>
        </member>
        <member name="T:Jenzabar.Common.Web.UI.Controls.MoveDelete">
            <summary>
            MoveCopyDelete lets users delete or move items by selecting the corresponding actions from a drop-down
            in the <see cref="T:Jenzabar.Common.Web.UI.Controls.GroupedGrid">GroupedGrid</see> .
            </summary>
            <remarks>This control extends System.Web.UI.Control and is used in the FileCabinet portlet.</remarks>
        </member>
        <member name="P:Jenzabar.Common.Web.UI.Controls.MoveDelete.EventType">
            <summary>
            Gets the current action selected from the dropdown.
            </summary>
        </member>
        <member name="P:Jenzabar.Common.Web.UI.Controls.MoveDelete.SelectedKey">
            <summary>
            Gets the current key for the action selected from the dropdown.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Configuration.Protection.KeyedHashAlgorithmKeyCreator">
            <summary>
            <para>Creates keys for a <see cref="T:System.Security.Cryptography.KeyedHashAlgorithm"/>.</para>
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Configuration.Protection.KeyedHashAlgorithmKeyCreator.#ctor(System.String)">
            <summary>
            <para>Initializes an instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Configuration.Protection.KeyedHashAlgorithmKeyCreator"/> class for a specific <see cref="T:System.Security.Cryptography.KeyedHashAlgorithm"/>.</para>
            </summary>
            <param name="typeName">The assembly qualified name of a class which derives from a <see cref="T:System.Security.Cryptography.KeyedHashAlgorithm"/>.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Configuration.Protection.KeyedHashAlgorithmKeyCreator.GenerateKey">
            <summary>
            <para>Generates a random key.</para>
            </summary>
            <returns><para>A random key.</para></returns>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Configuration.Protection.KeyedHashAlgorithmKeyCreator.KeyIsValid(System.Byte[])">
            <summary>
            <para>Determines if the <paramref name="key"/> is valid.</para>
            </summary>
            <param name="key">The key to test.</param>
            <returns><para><see langword="true"/> if the key is valid; otherwise <see langword="false"/>.</para></returns>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Configuration.Protection.KeyedHashAlgorithmKeyCreator.KeyLength">
            <summary>
            <para>Gets the length of the key.</para>
            </summary>
            <value>The length of the key.</value>
        </member>
        <member name="T:Jenzabar.Common.Web.UI.Controls.GroupRadioButton">
            <summary>
            A <see cref="T:System.Web.UI.WebControls.RadioButton">RadioButton</see> control 
            that can be grouped within rows of DataGrid, DataList, Repeater, and other controls.
            </summary>
            <remarks>
            The "name" attribute of the HTML radio button control that is rendered 
            at the web form after the RadioButton control executes depends 
            on the UniqueID of the RadioButton. For the different rows of the 
            DataGrid/DataList/Repeater control, these "name" attributes are different, 
            because the radio buttons in different rows do not belong to the same group.
            </remarks>	
        </member>
        <member name="P:Jenzabar.Common.Configuration.DirectorySettings.ConnectionString">
            <summary>
            The connection information for ADAM.
            </summary>
            <example>LDAP://localhost:389/</example>
        </member>
        <member name="P:Jenzabar.Common.Configuration.DirectorySettings.RootNodeDN">
            <summary>
            This is the root of the application partition in ADAM.
            </summary>
            <example>O=Jenzabar,C=US</example>
        </member>
        <member name="P:Jenzabar.Common.Configuration.DirectorySettings.RootDataImportDN">
            <summary>
            Gets or sets the location of the Root Data Import Service. This is the where are departments, courses,
            and course sections will be created.
            </summary>
            <example>CN=Academics,CN=Portal,O=Jenzabar,C=US</example>
        </member>
        <member name="P:Jenzabar.Common.Configuration.DirectorySettings.RootCampusGroupsDN">
            <summary>
            Gets or sets the location of the Camps Groups context. This is where all of the campus groups will 
            be created.
            </summary>
            <example>CN=Campus Groups,CN=Campus Life,CN=Portal,O=Jenzabar,C=US</example>
        </member>
        <member name="P:Jenzabar.Common.Configuration.DirectorySettings.RootMyPagesDN">
            <summary>
            Gets or sets the location of the My Pages context. This is where all of the my pages will be
            created.
            </summary>
            <example>CN=My Pages,CN=Portal,O=Jenzabar,C=US</example>
        </member>
        <member name="P:Jenzabar.Common.Configuration.DirectorySettings.RootPortalUsersDN">
            <summary>
            Gets or sets the location of the PortalUsers container. This is where all of the portal users are read
            from.
            </summary>
            <example>OU=PortalUsers,CN=Portal,O=Jenzabar,C=US</example>
        </member>
        <member name="P:Jenzabar.Common.Configuration.DirectorySettings.GuestAccountName">
            <summary>
            Gets or sets the account that the framework connects as when there is no user logged in.
            </summary>
            <example>guest</example>
        </member>
        <member name="P:Jenzabar.Common.Configuration.DirectorySettings.GuestAccountPassword">
            <summary>
            Gets or sets the password for the guest account.
            </summary>
            <example>password</example>
        </member>
        <member name="P:Jenzabar.Common.Configuration.DirectorySettings.SystemAccountName">
            <summary>
            The account the framework will connect to ADAM with when a particular operation requires 
            guaranteed permissions on an object.
            </summary>
            <example>HighPrivs</example>
        </member>
        <member name="P:Jenzabar.Common.Configuration.DirectorySettings.SystemAccountPassword">
            <summary>
            The password for the system account.
            </summary>
            <example>password</example>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Configuration.TransformerFactory">
            <devdoc>
            The factory class creates ITransformer objects.
            </devdoc>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Configuration.RuntimeConfigurationView">
            <summary>
            <para>Represents a view of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Configuration.ConfigurationSettings"/>.</para>
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Configuration.RuntimeConfigurationView.#ctor(Microsoft.Practices.EnterpriseLibrary.Configuration.ConfigurationContext)">
            <summary>
            <para>Initialize a new instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Configuration.RuntimeConfigurationView"/> class with a <see cref="T:Microsoft.Practices.EnterpriseLibrary.Configuration.ConfigurationContext"/> object.</para>
            </summary>
            <param name="context">
            <para>A <see cref="T:Microsoft.Practices.EnterpriseLibrary.Configuration.ConfigurationContext"/> object.</para>
            </param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Configuration.RuntimeConfigurationView.GetTransformerProviderData(System.String)">
            <summary>
            <para>Retrieves the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Configuration.TransformerData"/> for the section.</para>
            </summary>
            <param name="sectionName">
            <para>The name of the section to get the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Configuration.TransformerData"/></para>
            </param>
            <returns>
            <para>The <see cref="T:Microsoft.Practices.EnterpriseLibrary.Configuration.TransformerData"/> for the section.</para>
            </returns>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Configuration.RuntimeConfigurationView.GetConfigurationSettings">
            <summary>
            <para>Gets the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Configuration.ConfigurationSettings"/>.</para>
            </summary>
            <returns>
            <para>The <see cref="T:Microsoft.Practices.EnterpriseLibrary.Configuration.ConfigurationSettings"/>.</para>
            </returns>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Configuration.RuntimeConfigurationView.GetXmlIncludeTypes(System.String)">
            <summary>
            <para>Gets the types used in the <see cref="T:System.Xml.Serialization.XmlSerializer"/> for the section.</para>
            </summary>
            <param name="sectionName">
            <para>The name of the section for the include types.</para>
            </param>
            <returns>
            <para>An array of types to use in the <see cref="T:System.Xml.Serialization.XmlSerializer"/>.</para>
            </returns>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Configuration.RuntimeConfigurationView.CollectTypes(Microsoft.Practices.EnterpriseLibrary.Configuration.XmlIncludeTypeDataCollection)">
            <devdoc>
            Full demand needed to protect Type.GetType. LinkDemand insufficient because that only
            checks permissions of calling code, which would be GetXmlIncludeTypes, which has full 
            trust
            </devdoc>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Configuration.RuntimeConfigurationView.GetStorageProviderData(System.String)">
            <summary>
            <para>Retrieves the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Configuration.StorageProviderData"/> for the section.</para>
            </summary>
            <param name="sectionName">
            <para>The name of the section to get the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Configuration.StorageProviderData"/></para>
            </param>
            <returns>
            <para>The <see cref="T:Microsoft.Practices.EnterpriseLibrary.Configuration.StorageProviderData"/> for the section.</para>
            </returns>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Configuration.RuntimeConfigurationView.GetConfigurationProtector(System.String)">
            <summary>
            <para>Retrieves the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Configuration.ConfigurationProtector"/> for the section.</para>
            </summary>
            <param name="sectionName">
            <para>The name of the section to get the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Configuration.ConfigurationProtector"/></para>
            </param>
            <returns>
            <para>The <see cref="T:Microsoft.Practices.EnterpriseLibrary.Configuration.ConfigurationProtector"/> for the section.</para>
            </returns>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Configuration.RuntimeConfigurationView.GetKeyAlgorithmPairStorageProviderData">
            <summary>
            <para>Gets the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Configuration.KeyAlgorithmPairStorageProviderData"/> for the configuration.</para>
            </summary>
            <returns>
            <para>The <see cref="T:Microsoft.Practices.EnterpriseLibrary.Configuration.KeyAlgorithmPairStorageProviderData"/> for the configuration.</para>
            </returns>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Configuration.RuntimeConfigurationView.ConfigurationFile">
            <summary>
            <para>Gets the configuration file containing the configuration meta-data.</para>
            </summary>
            <value>
            <para>The configuration file containing the configuration meta-data.</para>
            </value>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Configuration.StorageProviderFactory">
            <devdoc>
            The factory that creates IStorageProviderReader / IStorageProviderWriter objects.
            </devdoc>
        </member>
    </members>
</doc>
