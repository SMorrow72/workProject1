<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Jenzabar.Portal.Framework.Web</name>
    </assembly>
    <members>
        <member name="T:Jenzabar.Portal.Framework.Web.UI.Controls.Secured.SRadioButtonList">
            <summary>
            A secured, operation aware version of the RadioButtonList control
            </summary>
            <remarks>
            Secured controls can be used to make interface elements aware of whether or not
            a user has access to a particular operation assigned to the control
            
            If the user does not have access to the operation(s) assigned to the control, the
            control can be set to render differently (or not at all) to prevent the user from
            using the control to perform the secured operation
            
            In addition, events normally raised by the control will not be raised if the control
            detects that the access check has failed. This prevents users from "spoofing" access
            by simulating a postback.
            </remarks>
        </member>
        <member name="T:Jenzabar.Portal.Framework.Web.UI.Controls.Secured.ISecuredControl">
            <summary>
            The required methods and properties for secured controls
            </summary>
        </member>
        <member name="T:Jenzabar.Portal.Framework.Web.UI.ISecured">
            <summary>
            The required methods and properties for a securable object
            </summary>
            <remarks>
            A securable object is an object on which operation access checks may be performed
            </remarks>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.ISecured.OperationNames">
            <summary>
            Member property OperationNames
            </summary>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.ISecured.IsSecured">
            <summary>
            Member property IsSecured
            </summary>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.ISecured.AccessCheckType">
            <summary>
            Member property AccessCheckType
            </summary>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Secured.ISecuredControl.DisplayType">
            <summary>
            Gets or sets how the control should be displayed should the operation access check fail
            </summary>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Web.UI.Controls.Secured.SRadioButtonList.m_OperationNames">
            <summary>
            Member variable m_OperationNames
            </summary>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Web.UI.Controls.Secured.SRadioButtonList.m_IsSecured">
            <summary>
            Member variable m_IsSecured
            </summary>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Web.UI.Controls.Secured.SRadioButtonList.m_AccessCheckType">
            <summary>
            Member variable AccessCheckType
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Secured.SRadioButtonList.#ctor">
            <summary>
            Constructor for the SRadioButtonList class
            </summary> 
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Secured.SRadioButtonList.OnSelectedIndexChanged(System.EventArgs)">
            <summary>
            Overrides the OnSelectedIndexChanged event in base control
            </summary>
            <param name="e">EventArgs</param>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Secured.SRadioButtonList.OnPreRender(System.EventArgs)">
            <summary>
            Overrides the OnPreRender event in base control
            </summary>
            <param name="e">EventArgs</param>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Secured.SRadioButtonList.SecureControl">
            <summary>
            Used internally to secure the control
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Secured.SRadioButtonList.Render(System.Web.UI.HtmlTextWriter)">
            <summary>
            Overrides the Render event in base control
            </summary>
            <param name="writer">HtmlTextWriter to render control with</param>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Secured.SRadioButtonList.AccessCheckFailedText">
            <summary>
            Gets or sets the text to display if an access check fails.
            </summary>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Secured.SRadioButtonList.AccessCheckFailedTextCSSClass">
            <summary>
            Gets or sets the style to apply to the text if displayed if the access check fails and the display type is 'Text'.
            </summary>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Secured.SRadioButtonList.OperationNames">
            <summary>
            Member Property - OperationNames
            </summary>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Secured.SRadioButtonList.IsSecured">
            <summary>
            Member Property - IsSecured
            </summary>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Secured.SRadioButtonList.AccessCheckType">
            <summary>
            Member Property - AccessCheckType
            </summary>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Secured.SRadioButtonList.DisplayType">
            <summary>
            Member Property - m_DisplayType
            </summary>
        </member>
        <member name="T:Jenzabar.Portal.Framework.Web.UI.Controls.Secured.SRepeater">
            <summary>
            A secured, operation aware version of the Repeater control
            </summary>
            <remarks>
            Secured controls can be used to make interface elements aware of whether or not
            a user has access to a particular operation assigned to the control
            
            If the user does not have access to the operation(s) assigned to the control, the
            control can be set to render differently (or not at all) to prevent the user from
            using the control to perform the secured operation
            
            In addition, events normally raised by the control will not be raised if the control
            detects that the access check has failed. This prevents users from "spoofing" access
            by simulating a postback.
            </remarks>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Web.UI.Controls.Secured.SRepeater.m_OperationNames">
            <summary>
            Member variable m_OperationNames
            </summary>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Web.UI.Controls.Secured.SRepeater.m_IsSecured">
            <summary>
            Member variable m_IsSecured
            </summary>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Web.UI.Controls.Secured.SRepeater.m_AccessCheckType">
            <summary>
            Member variable AccessCheckType
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Secured.SRepeater.#ctor">
            <summary>
            Constructor for the SRepeater class
            </summary>  
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Secured.SRepeater.OnItemCommand(System.Web.UI.WebControls.RepeaterCommandEventArgs)">
            <summary>
            Overrides the OnItemCommand event in base control
            </summary>
            <param name="e">RepeaterCommandEventArgs</param>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Secured.SRepeater.OnPreRender(System.EventArgs)">
            <summary>
            Overrides the OnPreRender event in base control
            </summary>
            <param name="e">EventArgs</param>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Secured.SRepeater.SecureControl">
            <summary>
            Used internally to secure the control
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Secured.SRepeater.Render(System.Web.UI.HtmlTextWriter)">
            <summary>
            Overrides the Render event in base control
            </summary>
            <param name="writer">HtmlTextWriter to render control with</param>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Secured.SRepeater.AccessCheckFailedText">
            <summary>
            Gets or sets the text to display if an access check fails.
            </summary>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Secured.SRepeater.AccessCheckFailedTextCSSClass">
            <summary>
            Gets or sets the style to apply to the text if displayed if the access check fails and the display type is 'Text'.
            </summary>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Secured.SRepeater.OperationNames">
            <summary>
            Member Property - OperationNames
            </summary>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Secured.SRepeater.IsSecured">
            <summary>
            Member Property - IsSecured
            </summary>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Secured.SRepeater.AccessCheckType">
            <summary>
            Member Property - AccessCheckType
            </summary>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Secured.SRepeater.DisplayType">
            <summary>
            Member Property - m_DisplayType
            </summary>
        </member>
        <member name="T:Jenzabar.Portal.Framework.Web.UI.Controls.MetaControls.Attributes.ListBoxMetaControlAttribute">
            <summary>
            An attribute used to declare the need for a preference or setting to be displayed as a ListBox
            </summary>
            <remarks>
            This attribute can be applied to either a portlet  or
            an application (a class that inherits from PortalApplicationBase).
            
            It will be used by the framework to automatically generate the appropriate preferences or
            settings overlay that allows the user to enter the data for that preference or setting
            using the control specified.
            
            This information can then be retrieved by using the various preference and settings domain objects
            in the framework. They can also be accessed by using the Preferences or Settings property of the
            PortletBase and PortalApplicationBase classes.
            </remarks>
        </member>
        <member name="T:Jenzabar.Portal.Framework.Web.UI.Controls.MetaControls.Attributes.MetaControlAttributeBase">
            <summary>
            Used by meta control attributes
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.MetaControls.Attributes.MetaControlAttributeBase.#ctor(System.Int32,System.String,System.String,System.String,System.Type,System.Boolean,System.String,Jenzabar.Portal.Framework.NameValueDataSourceType,Jenzabar.Portal.Framework.NameValueType,System.String)">
            <summary>
            Constructs a meta control
            </summary>
            <param name="sortOrder">Ordinal that determines the meta control's position</param>
            <param name="name">The name of the meta control</param>
            <param name="friendlyNameResourceKey">The resource key for the friendly name of the operation</param>
            <param name="descriptionResourceKey">The resource key for a brief description of the operation</param>
            <param name="resourceProvider">The type that implements IResourceProvider</param>
            <param name="required">Denotes whether or not a value is required for the meta control</param>
            <param name="defaultValues">The default values for the meta control or the resource key if not dynamic</param>
            <param name="nameValueDataSourceType">Denotes whether or not the name/value data source is static or dynamic</param>
            <param name="nameValueType">The type of the name/value pair</param>
            <param name="cssClass">The CSS class for the meta control</param>
            <remarks>
            If nameValueDataSourceType is static, we use defaultValues as a Resource Key
            If nameValueDataSourceType is dynamic, we consider defaultValues the pointer to the dynamic resource.
            </remarks>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.MetaControls.Attributes.MetaControlAttributeBase.#ctor(System.Int32,System.String,System.String,System.String,System.Boolean,System.String,Jenzabar.Portal.Framework.NameValueDataSourceType,Jenzabar.Portal.Framework.NameValueType,System.String)">
            <summary>
            Constructs a meta control
            </summary>
            <param name="sortOrder">Ordinal that determines the meta control's position</param>
            <param name="name">The name of the meta control</param>
            <param name="displayName">The display name of the meta control</param>
            <param name="description">The description for the meta control</param>
            <param name="required">Denotes whether or not a value is required for the meta control</param>
            <param name="defaultValues">The default values for the meta control</param>
            <param name="nameValueDataSourceType">Denotes whether or not the name/value data source is static or dynamic</param>
            <param name="nameValueType">The type of the name/value pair</param>
            <param name="cssClass">The CSS class for the meta control</param>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.MetaControls.Attributes.MetaControlAttributeBase.CreateMetaControl(System.Object)">
            <summary>
            Creates the meta control associated with the attribute
            </summary>
            <param name="key">The key used to retrieve dynamic values from a NameValueProvider, typically the object to which the attribute is attached</param>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.MetaControls.Attributes.MetaControlAttributeBase.SortOrder">
            <summary>
            Gets the ordinal that determines the meta control's position
            </summary>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.MetaControls.Attributes.MetaControlAttributeBase.Name">
            <summary>
            Gets the name of the meta control
            </summary>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.MetaControls.Attributes.MetaControlAttributeBase.DisplayName">
            <summary>
            Gets the display name of the meta control
            </summary>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.MetaControls.Attributes.MetaControlAttributeBase.Description">
            <summary>
            Gets the description for the meta control
            </summary>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.MetaControls.Attributes.MetaControlAttributeBase.Required">
            <summary>
            Gets whether or not a value is required for the meta control 
            </summary>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.MetaControls.Attributes.MetaControlAttributeBase.DefaultValues">
            <summary>
            Gets the default values for the meta control
            </summary>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.MetaControls.Attributes.MetaControlAttributeBase.NameValueDataSourceClass">
            <summary>
            Gets the class for the name/value data source
            </summary>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.MetaControls.Attributes.MetaControlAttributeBase.NameValueDataSourceAssembly">
            <summary>
            Gets the assembly for the name/value data source
            </summary>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.MetaControls.Attributes.MetaControlAttributeBase.NameValueDataSourceType">
            <summary>
            Gets the 
            </summary>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.MetaControls.Attributes.MetaControlAttributeBase.NameValueType">
            <summary>
            Gets the type of the name/value pair
            </summary>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.MetaControls.Attributes.MetaControlAttributeBase.CSSClass">
            <summary>
            Gets the CSS class for the meta control
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.MetaControls.Attributes.ListBoxMetaControlAttribute.#ctor(System.Int32,System.String,System.String,System.String,System.Boolean,System.String,System.String,Jenzabar.Portal.Framework.NameValueDataSourceType,Jenzabar.Portal.Framework.NameValueType,System.String)">
            <summary>
            Constructs a ListBox meta control
            </summary>
            <param name="sortOrder">Ordinal that determines the meta control's position</param>
            <param name="name">The name of the meta control</param>
            <param name="displayName">The display name of the meta control</param>
            <param name="description">The description for the meta control</param>
            <param name="required">Denotes whether or not a value is required for the meta control</param>
            <param name="defaultItems">The list of selected items chosen by default</param>
            <param name="items">The complete list of items to select from</param>
            <param name="nameValueDataSourceType">Denotes whether or not the name/value data source is static or dynamic</param>
            <param name="nameValueType">The type of the name/value pair</param>
            <param name="cssClass">The CSS class for the meta control</param>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.MetaControls.Attributes.ListBoxMetaControlAttribute.#ctor(System.Int32,System.String,System.String,System.String,System.Boolean,System.String,System.String,Jenzabar.Portal.Framework.NameValueDataSourceType,Jenzabar.Portal.Framework.NameValueType,System.String,System.Boolean,System.Int32,System.Int32)">
            <summary>
            Constructs a ListBox meta control
            </summary>
            <param name="sortOrder">Ordinal that determines the meta control's position</param>
            <param name="name">The name of the meta control</param>
            <param name="displayName">The display name of the meta control</param>
            <param name="description">The description for the meta control</param>
            <param name="required">Denotes whether or not a value is required for the meta control</param>
            <param name="defaultItems">The list of selected items chosen by default</param>
            <param name="items">The complete list of items to select from</param>
            <param name="nameValueDataSourceType">Denotes whether or not the name/value data source is static or dynamic</param>
            <param name="nameValueType">The type of the name/value pair</param>
            <param name="cssClass">The CSS class for the meta control</param>
            <param name="countSelections">Denotes whether or not the number of items selected should be validated</param>
            <param name="countSelectionMinimum">The minimum number of items to be selected</param>
            <param name="countSelectionMaximum">The maximum number of items to be selected</param>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.MetaControls.Attributes.ListBoxMetaControlAttribute.#ctor(System.Int32,System.String,System.String,System.String,System.Boolean,System.String,System.String,Jenzabar.Portal.Framework.NameValueDataSourceType,Jenzabar.Portal.Framework.NameValueType,System.String,System.Int32,System.Web.UI.WebControls.ListSelectionMode)">
            <summary>
            Constructs a ListBox meta control
            </summary>
            <param name="sortOrder">Ordinal that determines the meta control's position</param>
            <param name="name">The name of the meta control</param>
            <param name="displayName">The display name of the meta control</param>
            <param name="description">The description for the meta control</param>
            <param name="required">Denotes whether or not a value is required for the meta control</param>
            <param name="defaultItems">The list of selected items chosen by default</param>
            <param name="items">The complete list of items to select from</param>
            <param name="nameValueDataSourceType">Denotes whether or not the name/value data source is static or dynamic</param>
            <param name="nameValueType">The type of the name/value pair</param>
            <param name="cssClass">The CSS class for the meta control</param>
            <param name="rows">The number of rows used to display the items</param>
            <param name="selectionMode">The mode for selecting items</param>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.MetaControls.Attributes.ListBoxMetaControlAttribute.#ctor(System.Int32,System.String,System.String,System.String,System.Boolean,System.String,System.String,Jenzabar.Portal.Framework.NameValueDataSourceType,Jenzabar.Portal.Framework.NameValueType,System.String,System.Int32,System.Web.UI.WebControls.ListSelectionMode,System.Boolean,System.Int32,System.Int32)">
            <summary>
            Constructs a ListBox meta control
            </summary>
            <param name="sortOrder">Ordinal that determines the meta control's position</param>
            <param name="name">The name of the meta control</param>
            <param name="displayName">The display name of the meta control</param>
            <param name="description">The description for the meta control</param>
            <param name="required">Denotes whether or not a value is required for the meta control</param>
            <param name="defaultItems">The list of selected items chosen by default</param>
            <param name="items">The complete list of items to select from</param>
            <param name="nameValueDataSourceType">Denotes whether or not the name/value data source is static or dynamic</param>
            <param name="nameValueType">The type of the name/value pair</param>
            <param name="cssClass">The CSS class for the meta control</param>
            <param name="rows">The number of rows used to display the items</param>
            <param name="selectionMode">The mode for selecting items</param>
            <param name="countSelections">The number of columns to display the items</param>
            <param name="countSelectionMinimum">The minimum number of columns to display the items</param>
            <param name="countSelectionMaximum">The maximum number of columns to display the items</param>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.MetaControls.Attributes.ListBoxMetaControlAttribute.#ctor(System.Int32,System.String,System.String,System.String,System.Type,System.Boolean,System.String,System.String,Jenzabar.Portal.Framework.NameValueDataSourceType,Jenzabar.Portal.Framework.NameValueType,System.String)">
            <summary>
            Constructs a ListBox meta control
            </summary>
            <param name="sortOrder">Ordinal that determines the meta control's position</param>
            <param name="name">The name of the meta control</param>
            <param name="friendlyNameResourceKey">The resource key for the friendly name of the operation</param>
            <param name="descriptionResourceKey">The resource key for a brief description of the operation</param>
            <param name="resourceProvider">The qualified type name of the class that implements IResourceProvider</param>
            <param name="required">Denotes whether or not a value is required for the meta control</param>
            <param name="defaultItems">The list of selected items chosen by default</param>
            <param name="items">The complete list of items to select from</param>
            <param name="nameValueDataSourceType">Denotes whether or not the name/value data source is static or dynamic</param>
            <param name="nameValueType">The type of the name/value pair</param>
            <param name="cssClass">The CSS class for the meta control</param>
            <remarks>
            The resourceProvider argument is in the format: "AssemblyName,TypeName".
            </remarks>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.MetaControls.Attributes.ListBoxMetaControlAttribute.#ctor(System.Int32,System.String,System.String,System.String,System.Type,System.Boolean,System.String,System.String,Jenzabar.Portal.Framework.NameValueDataSourceType,Jenzabar.Portal.Framework.NameValueType,System.String,System.Boolean,System.Int32,System.Int32)">
            <summary>
            Constructs a ListBox meta control
            </summary>
            <param name="sortOrder">Ordinal that determines the meta control's position</param>
            <param name="name">The name of the meta control</param>
            <param name="friendlyNameResourceKey">The resource key for the friendly name of the operation</param>
            <param name="descriptionResourceKey">The resource key for a brief description of the operation</param>
            <param name="resourceProvider">The qualified type name of the class that implements IResourceProvider</param>
            <param name="required">Denotes whether or not a value is required for the meta control</param>
            <param name="defaultItems">The list of selected items chosen by default</param>
            <param name="items">The complete list of items to select from</param>
            <param name="nameValueDataSourceType">Denotes whether or not the name/value data source is static or dynamic</param>
            <param name="nameValueType">The type of the name/value pair</param>
            <param name="cssClass">The CSS class for the meta control</param>
            <param name="countSelections">Denotes whether or not the number of items selected should be validated</param>
            <param name="countSelectionMinimum">The minimum number of items to be selected</param>
            <param name="countSelectionMaximum">The maximum number of items to be selected</param>
            <remarks>
            The resourceProvider argument is in the format: "AssemblyName,TypeName".
            </remarks>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.MetaControls.Attributes.ListBoxMetaControlAttribute.#ctor(System.Int32,System.String,System.String,System.String,System.Type,System.Boolean,System.String,System.String,Jenzabar.Portal.Framework.NameValueDataSourceType,Jenzabar.Portal.Framework.NameValueType,System.String,System.Int32,System.Web.UI.WebControls.ListSelectionMode)">
            <summary>
            Constructs a ListBox meta control
            </summary>
            <param name="sortOrder">Ordinal that determines the meta control's position</param>
            <param name="name">The name of the meta control</param>
            <param name="friendlyNameResourceKey">The resource key for the friendly name of the operation</param>
            <param name="descriptionResourceKey">The resource key for a brief description of the operation</param>
            <param name="resourceProvider">The qualified type name of the class that implements IResourceProvider</param>
            <param name="required">Denotes whether or not a value is required for the meta control</param>
            <param name="defaultItems">The list of selected items chosen by default</param>
            <param name="items">The complete list of items to select from</param>
            <param name="nameValueDataSourceType">Denotes whether or not the name/value data source is static or dynamic</param>
            <param name="nameValueType">The type of the name/value pair</param>
            <param name="cssClass">The CSS class for the meta control</param>
            <param name="rows">The number of rows used to display the items</param>
            <param name="selectionMode">The mode for selecting items</param>
            <remarks>
            The resourceProvider argument is in the format: "AssemblyName,TypeName".
            </remarks>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.MetaControls.Attributes.ListBoxMetaControlAttribute.#ctor(System.Int32,System.String,System.String,System.String,System.Type,System.Boolean,System.String,System.String,Jenzabar.Portal.Framework.NameValueDataSourceType,Jenzabar.Portal.Framework.NameValueType,System.String,System.Int32,System.Web.UI.WebControls.ListSelectionMode,System.Boolean,System.Int32,System.Int32)">
            <summary>
            Constructs a ListBox meta control
            </summary>
            <param name="sortOrder">Ordinal that determines the meta control's position</param>
            <param name="name">The name of the meta control</param>
            <param name="friendlyNameResourceKey">The resource key for the friendly name of the operation</param>
            <param name="descriptionResourceKey">The resource key for a brief description of the operation</param>
            <param name="resourceProvider">The qualified type name of the class that implements IResourceProvider</param>
            <param name="required">Denotes whether or not a value is required for the meta control</param>
            <param name="defaultItems">The list of selected items chosen by default</param>
            <param name="items">The complete list of items to select from</param>
            <param name="nameValueDataSourceType">Denotes whether or not the name/value data source is static or dynamic</param>
            <param name="nameValueType">The type of the name/value pair</param>
            <param name="cssClass">The CSS class for the meta control</param>
            <param name="rows">The number of rows used to display the items</param>
            <param name="selectionMode">The mode for selecting items</param>
            <param name="countSelections">Denotes whether or not the number of items selected should be validated</param>
            <param name="countSelectionMinimum">The minimum number of items to be selected</param>
            <param name="countSelectionMaximum">The maximum number of items to be selected</param>
            <remarks>
            The resourceProvider argument is in the format: "AssemblyName,TypeName".
            </remarks>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.MetaControls.Attributes.ListBoxMetaControlAttribute.CreateMetaControl(System.Object)">
            <summary>
            Creates the meta control associated with the attribute
            </summary>
            <param name="key">The key used to retrieve dynamic values from a NameValueProvider, typically the object to which the attribute is attached</param>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.MetaControls.Attributes.ListBoxMetaControlAttribute.Items">
            <summary>
            Gets the complete list of items to select from
            </summary>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.MetaControls.Attributes.ListBoxMetaControlAttribute.Rows">
            <summary>
            Gets the number of rows used to display the items
            </summary>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.MetaControls.Attributes.ListBoxMetaControlAttribute.SelectionMode">
            <summary>
            Gets the mode for selecting items
            </summary>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.MetaControls.Attributes.ListBoxMetaControlAttribute.CountSelections">
            <summary>
            Gets whether or not the number of items selected should be validated 
            </summary>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.MetaControls.Attributes.ListBoxMetaControlAttribute.CountSelectionMinimum">
            <summary>
            Gets the minimum number of items to be selected
            </summary>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.MetaControls.Attributes.ListBoxMetaControlAttribute.CountSelectionMaximum">
            <summary>
            Gets the maximum number of items to be selected
            </summary>
        </member>
        <member name="T:Jenzabar.Portal.Framework.Web.StoreKeyProviderSession">
            <summary>
            An implementation of a store key provider that uses session to store the values
            </summary>
        </member>
        <member name="T:Jenzabar.Portal.Framework.Web.IStoreKeyProvider">
            <summary>
            The required methods and properties for a store key provider
            </summary>
            <remarks>
            A store key provider returns a key that can be used to store data for a particular user
            </remarks>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.IStoreKeyProvider.GetKey(System.Web.HttpContext)">
            <summary>
            Gets the key
            </summary>
            <param name="context">The HTTP context</param>
            <returns>The key</returns>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.StoreKeyProviderSession.GetKey(System.Web.HttpContext)">
            <summary>
            Gets the key to use when saving values to the store
            </summary>
            <param name="context">The current HTTP context</param>
            <returns></returns>
        </member>
        <member name="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.ConfigFile">
            <summary>
            ConfigFile reads and writes the contents of a VAM.config file.
            It maintains the items read in its properties.
            </summary>
            <remarks>
            <para>Use the Read method to read. It has a merge parameter which can merge
            one file's lists with another. Merging involves adding, replacing, and deleting.</para>
            <para>Developers should not expect to subclass this.  </para>
            </remarks>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.ConfigFile.cVAMConfigFileName">
            <summary>
            The file name for the VAM.config file.
            </summary>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.ConfigFile.cVAMCustomConfileFileName">
            <summary>
            The file name for the custom.VAM.config file.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.ConfigFile.#ctor">
            <summary>
            Constructor. No parameters.
            </summary>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.ConfigFile.fLastFileCheck">
            <summary>
            fLastFileCheck is a TickCount for when the file was last loaded.
            Used to avoid testing the file datetime stamp every time Globals.Config
            is accessed because that will happen numerous times in one pass through the control
            list. Instead, we assume the user cannot change the Custom.VAM.config file within 5 seconds
            of running through the controls.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.ConfigFile.ReadFilesIfChanged(System.String)">
            <summary>
            ReadFilesIfChanged sees if custom.VAM.config has changed. If so, it rereads
            both files. Does nothing if fHasVAMConfigB or fHasCustomVAMConfig are false.
            Does nothing if its been called within the last 5 seconds.
            Returns true if the files were read. False if not.
            </summary>
            <param name="pPath"></param>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.ConfigFile.ReadAllFiles(System.String)">
            <summary>
            ReadAllFiles reads the VAM.config and, if present, merges the Custom.VAM.Config file
            with it. It should be called when the ConfigFile class is first created.
            If VAM.Config is not found or anything is invalid about the format of either file,
            expect exceptions.
            </summary>
            <param name="pPath">The file path to the folder containing these files.</param>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.ConfigFile.ReadRegEx(System.Xml.XmlTextReader)">
            <summary>
            ReadRegEx reads the RegExPattern tags and fills in the RegExPatterns list.
            pReader must be positioned at the &lt;RegExPatterns&gt; node.
            </summary>
            <param name="pReader"></param>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.ConfigFile.GetTypeAttribute(System.Xml.XmlTextReader,System.Type,System.String)">
            <summary>
            GetTypeAttribute retrieves the type= attribute at the current pReader position.
            It converts the string into a real type and returns it.
            It throws exceptions if type attribute is missing, cannot be converted into a type,
            and if it doesn't match pBaseType or its children.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.ConfigFile.ReadNamedObjects(System.Xml.XmlTextReader,Jenzabar.Portal.Framework.Web.UI.Controls.Validation.CollectionsLibrary.NameObjectCollection,System.Type,System.String)">
            <summary>
            ReadNamedObjects handles translating elements whose pattern is:
            &lt;tag name="name" [enabled=true|false] type="fullname or qualifiedassemblyname"&gt;
              &lt;property name="property name"&gt;value&lt;/property&gt;
            &lt;/tag&gt;
            This supports DataTypes, ErrorFormatters, and Conditions.
            It creates an instance of the requested type, validates the type against pBaseType
            and assigns any property found in the property tags list using a TypeConverter to translate the string.
            </summary>
            <param name="pReader">The source of XML.</param>
            <param name="pList">The hashtable where elements are added, replaced or removed.</param>
            <param name="pBaseType">The type all objects must be.</param>
            <param name="pTagName">The tag name that begins each row. When there no longer are these tags, exit.</param>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.ConfigFile.ReadProperties(System.Xml.XmlTextReader,System.Object,System.Type)">
            <summary>
            ReadProperties goes through a list of &lt;property&gt; tags.
            For each, it uses the property's TypeConverter to convert from string
            to the correct datatype and Reflection to assign the value to the property.
            This tag has a name attribute for the property name and a value attribute
            for the property value.
            If it encounters an &lt;object&gt; tag, that tag starts a nested object which contains its
            own &lt;property&gt; tags, calling this method recursively.
            The &lt;object&gt; tag includes the name attribute for the property name and type= gives
            the class to instantiate. The class is only created if the property is not read only.
            If type= is omitted, it uses the current instance.
            Assembly= gives the assembly. Its only used when type= is defined and is required in that case.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.ConfigFile.ReadNameValueCollection(System.Xml.XmlTextReader,System.Collections.Specialized.NameValueCollection)">
            <summary>
            ReadNameValueCollection goes through a list of &lt;add&gt; tags.
            Each must have two attributes: name and value.
            These are converted into entries of a NameValueCollection
            </summary>
            <param name="pReader"></param>
            <param name="pInstance"></param>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.ConfigFile.ReadControlHookupMethods(System.Xml.XmlTextReader)">
            <summary>
            ReadControlHookupMethods reads the ControlHookupMethod tags and fills in the ControlHookupMethods list.
            pReader must be positioned at the &lt;ControlHookupMethod&gt; node.
            </summary>
            <param name="pReader"></param>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.ConfigFile.ReadGlobalProperties(System.Xml.XmlTextReader)">
            <summary>
            ReadGlobalProperties reads the GlobalProperties section. It is a list of:
            <Property name="propertyname" value="value" />
            It applies the properties to the static properties of the Globals class.
            It uses ReadProperties to do this.
            </summary>
            <param name="pReader"></param>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.ConfigFile.ApplyUserDefinedNames">
            <summary>
            ApplyUserDefinedNames goes through some of the collections and copies the name (key)
            from the NameValueCollection to the Name property on that collection.
            This allows the user to add custom versions of the objects, where the name and properties
            differ from the object's defaults.
            Affects: Conditions, ErrorFormatters, and DataTypes
            </summary>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.ConfigFile.RegExPatterns">
            <summary>
            RegExPatterns is a collection of patterns used by the RegularExpressionCondition.
            The list is shown in the RegularExpressionTypeEditor so the user can pick one
            while setting up the condition.
            The collection is a NameValueCollection. The name is the Name attribute of
            the &lt;RegExPattern name=""&gt; tag. The value is the Pattern string.
            </summary>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.ConfigFile.DataTypes">
            <summary>
            DataTypes is a collection of VAMTypeConverter instances.
            The Hashtable's name attribute is the name attribute of &lt;DataType name=""&gt;.
            The value attribute is the VAMTypeConverter instance.
            </summary>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.ConfigFile.ThirdPartyControlDataTypes">
            <summary>
            ThirdPartyControlDataTypes contains a subset of the same objects found in DataTypes.
            These objects each have VAMTypeConverter.SupportsThirdPartyControl set to true.
            This list is used by ControlConnection.IsValidControl to find a match to a control.
            All VAMTypeConverters in this list must have SupportsThirdPartyControl=true
            and override TestThirdPartyControl() and GetControlValue().
            </summary>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.ConfigFile.ErrorFormatters">
            <summary>
            ErrorFormatters is a collection of BaseErrorFormatter instances.
            The Hashtable's name attribute is the name attribute of &lt;ErrorFormatter name=""&gt;.
            The value attribute is the BaseErrorFormatter subclass instance.
            </summary>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.ConfigFile.Conditions">
            <summary>
            Conditions is a collection of BaseCondition instances.
            The Hashtable's name attribute is the name attribute of &lt;Condition name=""&gt;.
            The value attribute is the BaseCondition instance.
            </summary>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.ConfigFile.ControlHookupMethods">
            <summary>
            ControlHookupMethods is a collection that matches control types
            to their optional client-side Control Hookup method.
            The client side attaches the control's onchange or onclick event handler
            using VAM_HookupControl. That function must be passed the actual field to
            hookup or a Control Hookup Method which passes specific subcontrols to 
            VAM_HookupControl.
            
            Most control IDs reflect the actual control to pass to VAM_HookupControl.
            They are NOT added to this collection.
            Some, like CheckBoxLists and RadioButtonLists, contain subcontrols and are registered
            here.
            To add a control, call AddControlHookupMethod. To find a control, call FindControlHookupMethod.
            Default controls are installed in CreateDefaultControlHookupMethods. Web sites
            that support other hookup methods, should register them with AddControlHookupMethod
            during the Application_Start method.
            These methods are assigned to the client-side Condition object's HUCtrlFnc method.
            
            Method description:
            Internally, this method should identify the control IDs that need an onchange or
            onclick event and call VAM_HookupControl again, with the control ID and the pCond parameter = null.
            Parameters:
              Cond object - contains ID(s) to translate into subcontrols.
              Action object - to be passed into VAM_HookupControl
              Main control ID (string) - the ID assigned by the user to the control. This
                ID must be converted into the subcontrol's ID, usually by adding a fixed string
                like ID + "_Button"
            Returns:
              Nothing
            </summary>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.ConfigFile.CustomVAMDateTime">
            <summary>
            FileDateTime is the datetime stamp on the custom.VAM.Config file when it was last read.
            The file is re-read when the datetime stamp on the file changes.
            Initially, this is DateTime.MinValue.
            </summary>
        </member>
        <member name="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.NamedConditionsCollection">
            <remarks>
            NamedConditionsCollection is a collection of BaseCondition objects
            used by ConfigFile for the Conditions property.
            It keeps a name, which is the type name, and is sorted by the name.
            </remarks>
        </member>
        <member name="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.CollectionsLibrary.NameObjectCollection">
            <remarks>
            <para>NameObjectCollection subclasses NameObjectCollectionBase to do what Microsoft
            should have done all along: make it instantiatable with any object (like ArrayList).
            It still keeps keys in alphabetic order (case insensitive).</para>
            <para>Subclasses can override ValidateType to reject undesired objects.</para>
            <para>You can retrieve this class with documentation and sort at
            http://www.peterblum.com/CollectionsLibrary/AutoSortArrayList.aspx.</para>
            </remarks>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.CollectionsLibrary.NameObjectCollection.#ctor">
            <summary>
            Constructor with no parameters.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.CollectionsLibrary.NameObjectCollection.#ctor(System.Int32)">
            <summary>
            Constructor which sets the initial capacity.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.CollectionsLibrary.NameObjectCollection.#ctor(System.Collections.IHashCodeProvider,System.Collections.IComparer)">
            <summary>
            Constructor.
            </summary>
            <param name="pHashProvider"></param>
            <param name="pComparer"></param>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.CollectionsLibrary.NameObjectCollection.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructor.
            </summary>
            <param name="pInfo"></param>
            <param name="pContext"></param>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.CollectionsLibrary.NameObjectCollection.#ctor(System.Int32,System.Collections.IHashCodeProvider,System.Collections.IComparer)">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.CollectionsLibrary.NameObjectCollection.Add(System.String,System.Object)">
            <summary>
            Validates the type before adding.
            </summary>
            <param name="pName"></param>
            <param name="pValue"></param>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.CollectionsLibrary.NameObjectCollection.Clear">
            <summary>
            Calls BaseClear.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.CollectionsLibrary.NameObjectCollection.Get(System.Int32)">
            <summary>
            Calls BaseGet
            </summary>
            <param name="pIndex"></param>
            <returns></returns>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.CollectionsLibrary.NameObjectCollection.Get(System.String)">
            <summary>
            Calls BaseGet
            </summary>
            <param name="pName"></param>
            <returns></returns>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.CollectionsLibrary.NameObjectCollection.GetAllKeys">
            <summary>
            Calls GetAllKeys
            </summary>
            <returns></returns>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.CollectionsLibrary.NameObjectCollection.GetAllValues">
            <summary>
            Calls BaseGetAllValues
            </summary>
            <returns></returns>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.CollectionsLibrary.NameObjectCollection.GetAllValues(System.Type)">
            <summary>
            Calls BaseGetAllValues
            </summary>
            <param name="pType"></param>
            <returns></returns>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.CollectionsLibrary.NameObjectCollection.GetKey(System.Int32)">
            <summary>
            Calls BaseGetKey
            </summary>
            <param name="pIndex"></param>
            <returns></returns>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.CollectionsLibrary.NameObjectCollection.HasKeys">
            <summary>
            Calls BaseHasKeys
            </summary>
            <returns></returns>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.CollectionsLibrary.NameObjectCollection.Remove(System.String)">
            <summary>
            Calls BaseRemove
            </summary>
            <param name="pName"></param>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.CollectionsLibrary.NameObjectCollection.RemoveAt(System.Int32)">
            <summary>
            Calls RemoveAt
            </summary>
            <param name="pIndex"></param>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.CollectionsLibrary.NameObjectCollection.Set(System.Int32,System.Object)">
            <summary>
            Validates the type then calls BaseSet
            </summary>
            <param name="pIndex"></param>
            <param name="pValue"></param>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.CollectionsLibrary.NameObjectCollection.Set(System.String,System.Object)">
            <summary>
            Validates the type then calls BaseSet
            </summary>
            <param name="pName"></param>
            <param name="pValue"></param>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.CollectionsLibrary.NameObjectCollection.ValidateType(System.Object)">
            <summary>
            ValidateType is called when you add an item. It does nothing at this level.
            Subclasses can use it to throw exceptions when the object passed in doesn't
            match the expected types.
            </summary>
            <param name="pValue"></param>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.CollectionsLibrary.NameObjectCollection.Item(System.Int32)">
            <summary>
            Indexer for the position in the list.
            </summary>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.CollectionsLibrary.NameObjectCollection.Item(System.String)">
            <summary>
            Indexer to match the name to the element name in the list.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.NamedConditionsCollection.#ctor">
            <summary>
            Initializes this object.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.NamedConditionsCollection.ValidateType(System.Object)">
            <summary>
            The value must be a <see cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseCondition"/> subclass.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.NamedConditionsCollection.Find(System.String)">
            <summary>
            Find locates a BaseCondition whose name matches pName (case insensitive).
            Returns the BaseCondition or null if not found.
            </summary>
            <param name="pName"></param>
            <returns></returns>
        </member>
        <member name="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.ConfigFileEditor">
            <remarks>
            ConfigFileEditor is used by UITypeEditors to read and write the custom.VAM.config
            file. After reading, call various methods to modify the XmlDocuments representing
            custom.VAM.config then call the SaveCustomFile method.
            </remarks>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.ConfigFileEditor.fMainLoadErrorMsg">
            <summary>
            These allow us to capture the exceptions in ReadFiles without displaying them
            right away. When functions call CheckValidFiles, if either isn't empty,
            it throws an exception with these errors.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.ConfigFileEditor.ReadFiles">
            <summary>
            ReadFiles creates new MainConfigDocument and CustomConfigDocuments.
            It uses Globals.ConfigFilePath for the file path.
            If it cannot load one of the files, it leaves the property null.
            This method must be called before using any other method.
            It always reloads CustomConfigDocuments but only loads MainConfigDocument
            once because the user doesn't edit MainConfigDocument.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.ConfigFileEditor.CheckValidFiles">
            <summary>
            CheckValidFiles throws an exception built from fMainLoadErrorMsg and fCustomLoadErrorMsg
            if either has text.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.ConfigFileEditor.SaveCustomFile">
            <summary>
            SaveCustomFile writes fCustomConfigDocument and refreshes Globals.ConfigFile
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.ConfigFileEditor.DeleteNode(System.String,System.String,System.String)">
            <summary>
            DeleteNode removes an item identified by the pNode. However, it may not delete the actual node.
            If the node exists in fMainConfigDocument, a node in fCustomConfigDocument is created or modified
            to read &lt;nodename name="" enabled=false /&gt;. This effectively hides the option.
            If the node does not exist in fMainConfigDocument, remove the node in fCustomConfigDocument
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.ConfigFileEditor.FindChildWithName(System.Xml.XmlNode,System.String)">
            <summary>
            Searches the immediate children of pNode for an attribute "name" = pName.
            Returns that node or null.
            </summary>
            <param name="pNode"></param>
            <param name="pName"></param>
            <returns></returns>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.ConfigFileEditor.RestoreToDefault(System.String,System.String)">
            <summary>
            RestoreToDefault removes a node in fCustomConfigDocument, exposing the original in fMainConfigDocument.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.ConfigFileEditor.ModifyNameValueNode(System.String,System.String,System.String,System.String,System.Boolean)">
            <summary>
            Adds or updates a node in the tree at pNode. This is designed for
            NameValueCollection areas of the config file that use &lt;Add name=pName value=pValue /&gt;
            If pName is already a name attribute, its value is modified and Enabled is removed (to show it)
            Otherwise it adds a new node.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.ConfigFileEditor.ModifyNamePropertiesNode(System.String,System.String,System.String,System.Object,System.Boolean)">
            <summary>
            ModifyNamePropertiesNode adds or updates a Name/property node group.
            The group is like this:
            &lt;pNode&gt;
              &lt;pElementName name=pAttributeName&gt;
                 &lt;Property name=propertyname1 value=propertyvalue1 /&gt;
                 &lt;object name=propertyname1 [type=objectype assembly=assemblyname] &gt;
                    &lt;Property name="propertyname" value=propertyvalue" /&gt;
                 &lt;/object&gt;
              &lt;/pElementName&gt;
            &lt;/pNode&gt;
            Pass in an object in pValue. Its properties that are BrowsableAttribute(true)
            are all added to the property list.
            If the node already exists, the existing properties are first deleted before the new ones are assigned.
            It always writes every property instead of skipping those that match DefaultValueAttribute.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.ConfigFileEditor.WritePropertyNodes(System.Xml.XmlNode,System.Object)">
            <summary>
            WritePropertyNodes adds child nodes to pParentNode given the browsable, public, non-static properties
            of pInstance. Recursive.
            </summary>
            <param name="pParentNode"></param>
            <param name="pInstance"></param>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.ConfigFileEditor.IsOverridden(System.String,System.String)">
            <summary>
            IsOverridden returns true when pNode has an entry in fMainConfigDocument
            and fCustomConfigDocument (where enabled &lt;&gt; false).
            Use it to enable an RestoreToDefault button.
            </summary>
            <param name="pNode"></param>
            <param name="pAttributeName"></param>
            <returns></returns>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.ConfigFileEditor.PrepNodePath(System.String)">
            <summary>
            PrepNodePath takes a short section path ("/DataTypes/DataType") and puts it into
            a complete path ("/Configuration/DataTypes/DataType")
            </summary>
            <param name="pSection"></param>
            <returns></returns>
        </member>
        <member name="T:Jenzabar.Portal.Framework.Web.UI.PortletActionEventHandler">
            <summary>
            The method signature for a portlet action event handler
            </summary>
        </member>
        <member name="T:Jenzabar.Portal.Framework.Web.UI.PortletActionEventArgs">
            <summary>
            An event raised when a portlet action occurs
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.PortletActionEventArgs.#ctor(Jenzabar.Portal.Framework.Web.UI.PortletBase,Jenzabar.Portal.Framework.Web.UI.PortletAction)">
            <summary>
            Constructs the event arguments
            </summary>
            <param name="portlet">The portlet that raised the event</param>
            <param name="action">The action</param>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.PortletActionEventArgs.Portlet">
            <summary>
            Gets the portlet that raised the event
            </summary>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.PortletActionEventArgs.Action">
            <summary>
            Gets the action that caused the event
            </summary>
        </member>
        <member name="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseErrorFormatter">
            <summary>
            BaseErrorFormatter provides the HTML and JavaScript to the 
            <see cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseValidatorAction"/> class
            for displaying the error message.
            </summary>
            <remarks>
            <para>The actual format of displaying a validators error can have numerous looks. </para>
            <para>The validator control uses this class to write the actual HTML into the page.
            It’s job is to add controls to the ValidatorControl’s child list, to add JavaScript 
            to the page, and to provide properties to the client-side representation of the ValidatorAction object
            that will be used by client-side versions of the ErrorFormatter classes.</para>
            <para>See the <b>Developer's Guide</b> for extensive documentation.</para>
            </remarks>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseErrorFormatter.cSpaces">
            <summary>
            Used by <see cref="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseErrorFormatter.GetGap(System.Int32,Jenzabar.Portal.Framework.Web.UI.Controls.Validation.GapType)"/> to supply HTML for the character gap.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseErrorFormatter.#ctor">
            <summary>
            Constructor with no parameters.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseErrorFormatter.#ctor(System.String,Jenzabar.Portal.Framework.Web.UI.Controls.Validation.ValidatorDisplay)">
            <summary>
            Constructor that sets the Name and Display properties.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseErrorFormatter.#ctor(Jenzabar.Portal.Framework.Web.UI.Controls.Validation.ValidatorDisplay,System.Int32,Jenzabar.Portal.Framework.Web.UI.Controls.Validation.GapType,System.Boolean)">
            <summary>
            Constructor that sets the Display, GapBefore, GapBeforeType, and BlinkAllowed properties.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseErrorFormatter.#ctor(Jenzabar.Portal.Framework.Web.UI.Controls.Validation.ValidatorDisplay,System.Web.UI.WebControls.Style)">
            <summary>
            Constructor that sets the Display and ControlStyle properties.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseErrorFormatter.#ctor(Jenzabar.Portal.Framework.Web.UI.Controls.Validation.ValidatorDisplay,System.Web.UI.WebControls.Style,System.Int32,Jenzabar.Portal.Framework.Web.UI.Controls.Validation.GapType,System.Boolean)">
            <summary>
            Constructor that sets the Display, ControlStyle, 
            GapBefore, GapBeforeType, and BlinkAllowed properties.
            </summary>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseErrorFormatter.fName">
            <summary>
            Storage for <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseErrorFormatter.Name"/>.
            </summary>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseErrorFormatter.fDisplay">
            <summary>
            Storage for <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseErrorFormatter.Display"/>.
            </summary>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseErrorFormatter.fControlStyle">
            <summary>
            Storage for <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseErrorFormatter.ControlStyle"/>.
            </summary>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseErrorFormatter.fAttributes">
            <summary>
            Storage for <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseErrorFormatter.Attributes"/>.
            </summary>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseErrorFormatter.fAttrStateBag">
            <summary>
            The Attributes property uses this as part of its storage.
            <see cref="T:System.Web.UI.AttributeCollection"/> uses this as a parameter of its constructor.
            </summary>
            <remarks>
            Remains null until the Attributes property is first used.
            </remarks>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseErrorFormatter.fToolTip">
            <summary>
            Storage for <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseErrorFormatter.ToolTip"/>.
            </summary>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseErrorFormatter.fToolTipLookupID">
            <summary>
            Storage for <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseErrorFormatter.ToolTipLookupID"/>.
            </summary>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseErrorFormatter.fLookedupToolTip">
            <summary>
            When null, <see cref="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseErrorFormatter.GetLookedUpToolTip"/> 
            calls <see cref="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.StringLookup.StringIDLookup(System.String,System.String,System.String)">StringLookup.StringIDLookup</see> to
            get the ToolTip. This holds the result of that for multiple uses.
            </summary>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseErrorFormatter.fGapBefore">
            <summary>
            Storage for <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseErrorFormatter.GapBefore"/>.
            </summary>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseErrorFormatter.fGapBeforeType">
            <summary>
            Storage for <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseErrorFormatter.GapBeforeType"/>.
            </summary>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseErrorFormatter.fBlinkAllowed">
            <summary>
            Storage for <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseErrorFormatter.BlinkAllowed"/>.
            </summary>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseErrorFormatter.fBlinkCssClass">
            <summary>
            Storage for <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseErrorFormatter.BlinkCssClass"/>.
            </summary>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseErrorFormatter.fID">
            <summary>
            fID is the unique ID assigned to the span tag for reference inside
            the javascript. It is retrieved from ValidatorControl.ID.
            </summary>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseErrorFormatter.fClientID">
            <summary>
            fClientID is fID with the ClientID format of the owner naming container:
            NamingContainer.ClientID + "_" + fID
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseErrorFormatter.Clone">
            <summary>
            Creates a duplicate instance of this object. Implements <see cref="T:System.ICloneable"/>
            </summary>
            <remarks>
            <para>Clone should be subclassed to take these actions:</para>
            <para>1. Create an instance of the class</para>
            <para>2. Call Copy()</para>
            <para>3. Return the instance</para>
            </remarks>
            <returns>New instance of this object with the same property values.</returns>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseErrorFormatter.Copy(Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseErrorFormatter)">
            <summary>
            Copy transfers the properties from pSource to this instance.
            </summary>
            <value>
            <para>>Subclasses should call their ancestor and support each property they introduce.
            </para>
            <para>If you omit copying property, there will be side effects when the user uses
            the Properties Editor. The UITypeEditor for ErrorFormatters clones
            the ErrorFormatter and saves the clone. Any property not included in this method
            will lose its value.</para>
            </value>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseErrorFormatter.CompareTo(System.Object)">
            <summary>
            Implements <see cref="T:System.IComparable"/> to compare the Name property.
            </summary>
            <param name="pObj">Another BaseErrorFormatter whose Name property will be compared.</param>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseErrorFormatter.AddControls(System.Web.UI.Control,System.Boolean,Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseValidatorAction)">
            <summary>
            Creates the HTML for the error message.
            </summary>
            <remarks>
            <para>Called by the <see cref="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseValidatorAction.AddToPage(System.Boolean)">BaseValidatorAction.AddToPage</see> method during OnPreRender. </para>
            <para>It creates an enclosing tag for the error message and lets the ancestor fill
            in the body. All elements are added as child controls to the control passed in.</para>
            <para>The enclosing tag has the following attributes assigned:</para>
            <list type="bullet">
            <item><description>Tag name comes from 
            <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseErrorFormatter.EnclosingTagName"/>.</description></item>
            <item><description>ID= attribute is from 
            <see cref="F:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseErrorFormatter.fClientID"/>.</description></item>
            <item><description>Style= attribute is from the Display rule forming visibility and display parameters.
            In addition the <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseErrorFormatter.Style"/> has its values assigned.</description></item>
            <item><description>Class= attribute is from 
            <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseErrorFormatter.CssClass"/>.</description></item>
            <item><description>Title= attribute is from 
            <see cref="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseErrorFormatter.GetLookedUpToolTip"/>.
            </description></item>
            <item><description>The <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseErrorFormatter.Attributes"/>
            property assigns all of its contents as name and value pairs into the enclosing tag.</description></item>
            </list>
            <para>If there is a gap defined, it is created with 
            <see cref="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseErrorFormatter.GetGap(System.Int32,Jenzabar.Portal.Framework.Web.UI.Controls.Validation.GapType)"/> and assigned after the enclosing tag
            so its visibility changes.</para>
            <para>The inner HTML contents are defined by the subclass when this calls
            <see cref="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseErrorFormatter.AddControlsBody(System.Web.UI.Control,Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseValidatorAction,System.Boolean,System.String,System.String)"/>.</para>
            <para>Does nothing when the Display property is None.</para>
            </remarks>
            <param name="pControl">Add your controls to this pControl.Controls collection.</param>
            <param name="pVisible">When true, the error message is visible (validator error is already showing)</param>
            <param name="pAction">The ValidatorAction instance that owns this.</param>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseErrorFormatter.AddControlsBody(System.Web.UI.Control,Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseValidatorAction,System.Boolean,System.String,System.String)">
            <summary>
            Override to provide the HTML that appears inside the enclosing tag’s innerText. 
            It defines the actual look of the error message. It does not handle visibility.
            </summary>
            <remarks>
            <para>Your code should build a containing HTML element, such as a SPAN tag, that has
            a unique ID which you will use to uniquely find the element on the client-side.
            Then your client-side function can call VAM_GetById() to get the control and
            assign the runtime error message.</para>
            <para>The ParentClientID parameter is the unique ID of pControl. Your ID should add an extension
            to it, like ParentClientID + "_txt". Your client side code will have access to the ParentClientID in
            the ErrFldID property.</para>
            <para>See the <b>Developer's Guide</b> for an example.</para>
            </remarks>
            <param name="pControl">Add your controls to the Controls collection of this control.</param>
            <param name="pAction">Use <see cref="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseValidatorAction.GetErrorMessage(System.Boolean)">BaseValidatorAction.GetErrorMessage</see>
            to get the current error message.
            The error message should be replaceable in your client-side representation of 
            this function by knowing the ID to the containing tag that you create.</param>
            <param name="pVisible">Indicates if the message should be shown or not.</param>
            <param name="pParentID">The ID of the enclosing control.</param>
            <param name="pParentClientID">The ClientID of the enclosing control. Your child controls
            will use this to refer to the actual element that holds the error message so it can 
            be updated on the client-side.</param>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseErrorFormatter.GetGap(System.Int32,Jenzabar.Portal.Framework.Web.UI.Controls.Validation.GapType)">
            <summary>
            GetGap returns a HTML string representing a gap or space based on the parameters passed.
            </summary>
            <remarks>
            <para>When pGapType is Pixel, it forms an &lt;img&gt; tag that uses the URL 
            to the file named "spacer.gif" in either the "~/VAM/Appearance" folder or
            the user defined path from the VAM_AppearanceVirtualPath key in web.config.</para>
            </remarks>
            <returns>The HTML for the gap or "" when pGapSize is 0.</returns>
            <param name="pGapSize">The number of characters or pixels. Usually pass GapBefore.</param>
            <param name="pGapType">The type of the gap. Usually pass GapBeforeType.</param>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseErrorFormatter.DefineJavaScript(Jenzabar.Portal.Framework.Web.UI.Controls.Validation.VAMPage)">
            <summary>
            DefineJavaScript creates whatever JavaScript that is used by this error formatter on the client-side. 
            It should define JavaScript functions or load a file.
            </summary>
            <remarks>
            <para>It is passed the current VAMPage class which has two methods that make registration easy:</para>
            <para>- Call <see cref="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.VAMPage.IsScriptBlockRegistered(System.String)">VAMPage.IsScriptBlockRegistered</see> before 
            registering to determine if the script was
              written by another instance of this class.</para>
            <para>- If its not registered, call <see cref="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.VAMPage.RegisterScriptBlock(System.String,System.String)">VAMPage.RegisterScriptBlock</see>
               or <see cref="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.VAMPage.RegisterScriptFile(System.String,System.String)">VAMPage.RegisterScriptFile</see>.</para>
            </remarks>
            <param name="pPage">Current VAMPage object.</param>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseErrorFormatter.DefineProperties(Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseAction,System.Text.StringBuilder)">
            <summary>
            Adds properties to the client-side representation for the ValidatorAction object.
            </summary>
            <remarks>
            <para>Use the following support methods on the Action parameter to insert a property or method into
            the client-side VAM object:</para>
            <list type="bullet">
            <item>
            <description><see cref="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseCA.RegisterValue(System.Text.StringBuilder,System.String,System.String)"/> for integers, strings, booleans,
            and doubles.</description>
            </item>
            <item>
            <description><see cref="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseCA.RegisterMethod(System.Text.StringBuilder,System.String,System.String)"/> for method names.</description>
            </item>
            <item>
            <description><see cref="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseCA.RegisterControlID(System.Text.StringBuilder,System.String,System.String)"/> for converting a control reference
            into its ClientID.</description>
            </item>
            <item>
            <description><see cref="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseCA.RegisterValueFromCode(System.Text.StringBuilder,System.String,System.String)"/> for using JavaScript code
            to create the value such as 'new Date()'.</description>
            </item>
            </list>
            <para>Commas a required before each property. This is done automatically with all of the above
            Register methods. Otherwise, you must call pAction.<see cref="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseCA.AddComma(System.Text.StringBuilder)"/> 
            before adding your text to the stringbuilder.</para>
            <para>Here are the properties added by this class:</para>
            <list type="table">
            <listheader>
            <term>Property</term>
            <description>Server side source</description>
            </listheader>
            <item><term>FmtterFnc (method)</term>
            <description>FormatterFunctionName.</description></item>
            <item><term>ErrFldID (string)</term>
            <description>fClientID.</description></item>
            <item><term>Dspl (int)</term>
            <description>Base on the Display property: 0 = none, 1 = static, 2 = dynamic.</description></item>
            <item><term>Blnk (boolean)</term>
            <description>BlinkAllowed</description></item>
            <item><term>BlnkCss (string))</term>
            <description>BlinkCssClass</description></item>
            <item><term>BlinkFnc (method)</term>
            <description>BlinkFunctionName</description></item>
            </list>
            </remarks>
            <param name="pAction">The <see cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseValidatorAction"/> instance
            that supplies its properties to the client-side object. It also has
            the <see cref="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseCA.RegisterValue(System.Text.StringBuilder,System.String,System.String)"/> and 
            <see cref="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseCA.RegisterMethod(System.Text.StringBuilder,System.String,System.String)"/> properties for use in this method.</param>
            <param name="pJavaScript">Append your properties to this stringbuilder.</param>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseErrorFormatter.AddDesignModeControls(System.Web.UI.Control,Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseValidatorAction)">
            <summary>
            AddDesignModeControls builds the HTML for the ErrorFormatter for design mode.
            </summary>
            <remarks>
            <para>The design mode representation attempts to show a WYSIWYG representation
            of the control. In addition, if there are any required parameters that are not assigned,
            they are added to the end.</para>
            <para>This method forms an enclosing &lt;span&gt; tag with style and class attributes assigned.
            It calls <see cref="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseErrorFormatter.AddDesignModeControlsBody(System.Web.UI.Control,Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseValidatorAction)"/>
            to allow the subclass to supply the WYSIWYG formatting.</para>
            <para>If there are any missing but required properties, they are built into
            a string like this "[" + control.ID + [property descriptions] + "]".
            It first calls the Action.Condition.<see cref="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseCondition.GetDesignModeErrors"/> method to get a description
            of any errors on the Condition object. Then it sees if the ErrorMessage is blank (after
            using the String Lookup System on the ErrorMessageLookupID.)
            </para>
            <para>When Display equals 'None', it shows "[ID Display=None]".</para>
            </remarks>
            <param name="pControl">Add controls to the Controls collection of this parameter.</param>
            <param name="pAction">Supplies the current Action object and its condition to supply
            information used for formatting.</param>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseErrorFormatter.AddDesignModeControlsBody(System.Web.UI.Control,Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseValidatorAction)">
            <summary>
            AddDesignModeControls fills in the children of pControl with what
            shows inside the enclosing tag while in design mode.
            </summary>
            <param name="pControl">Add controls to the Controls collection of this parameter.</param>
            <param name="pAction">Supplies the current Action object and its condition to supply
            information used for formatting.</param>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseErrorFormatter.GetLookedUpToolTip">
            <summary>
            Uses the String Lookup System to convert ToolTip and ToolTipLookupID into
            the actual tooltip text.
            </summary>
            <remarks>
            Returns fLookedupToolTip. If fLookedupToolTip == null,
            it calls <see cref="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.StringLookup.StringIDLookup(System.String,System.String,System.String)">StringLookup.StringIDLookup</see> with ToolTipLookupID first.
            </remarks>
            <returns>The tooltip text.</returns>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseErrorFormatter.Name">
            <summary>
            Name gives a human readable name/identifier to the class.
            </summary>
            <value>
            <para><see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.Globals.ErrorFormatters">Globals.ErrorFormatters</see> 
            maintains a list of predefined ErrorFormatters loaded from the config files or added
            in the Application_Start method. The user sees the name for an ErrorFormatter in
            the UITypeEditor for the <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseAnyValidator.ErrorFormatter">BaseAnyValidator.ErrorFormatter</see> property.
            At runtime, the BaseValidationAction searches Globals.ErrorFormatters
            for a match.</para>
            <para>Users are allowed to create ErrorFormatter templates within the custom.VAM.config
            file using an existing ErrorFormatter class with non-default property assignments
            and assigning this property to a unique name.</para>
            <para>This property is not visible in the Properties Editor but it is written into
            the ASP.NET representation of the control.</para>
            </value>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseErrorFormatter.Display">
            <summary>
            Display determines how to show the ErrorMessage.
            </summary>
            <value>
            <list type="table">
            <item>
            <term>None</term>
            <description>Never shows. Use when you only want the message in the 
              SummaryValidator or to let other validation rules indicate the 
              error (such as alert or flashing the field with the error.)</description>
            </item>
            <item>
            <term>Static</term>
            <description>The field always takes up space on the page when invisible. 
              Uses the style display:block and visibility to toggle.</description>
            </item>
            <item>
            <term>Dynamic</term>
            <description>The field doesn’t take up space on the page when invisible. 
              Uses the style display to toggle.</description>
            </item>
            </list>
            <para>It defaults to Static.</para>
            </value>
            <seealso cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.ValidatorDisplay"/>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseErrorFormatter.ControlStyle">
            <summary>
            ControlStyle provides the elements of a Style object.
            </summary>
            <value>
            <para>Provides font, color, border, and sizing style attributes to the element tag that encloses
            the error formatter's HTML.</para>
            <para>The CssClass property contained in this object can establish all
            of these style attributes through a style sheet. It defaults to "VAMErrorText."</para>
            <para>Most of the other style properties in this class simply expose this object's properties
            because this property is not shown in the Property Editor.</para>
            </value>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseErrorFormatter.BackColor">
            <summary>
            Gets or sets the background color of the error message.
            </summary>
            <value>
            <para>Stores its value in ControlStyle.BackColor.</para>
            <para>It defaults to Color.Empty.</para>
            </value>
            <seealso cref="T:System.Drawing.Color"/>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseErrorFormatter.BorderColor">
            <summary>
            Gets or sets the border color of the error message.
            </summary>
            <value>
            <para>Stores its value in ControlStyle.BorderColor.</para>
            <para>It defaults to Color.Empty.</para>
            </value>
            <seealso cref="T:System.Drawing.Color"/>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseErrorFormatter.BorderStyle">
            <summary>
            Gets or sets the border style of the error message.
            </summary>
            <value>
            <para>Stores its value in ControlStyle.BorderStyle.</para>
            <para>It defaults to BorderStyle.NotSet.</para>
            </value>
            <seealso cref="T:System.Web.UI.WebControls.BorderStyle"/>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseErrorFormatter.BorderWidth">
            <summary>
            Gets or sets the border width of the error message.
            </summary>
            <value>
            <para>Stores its value in ControlStyle.BorderWidth.</para>
            <para>It defaults to Unit.Empty.</para>
            </value>
            <seealso cref="T:System.Web.UI.WebControls.Unit"/>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseErrorFormatter.CssClass">
            <summary>
            Gets or sets the style class name of the error message.
            </summary>
            <value>
            <para>Stores its value in ControlStyle.CssClass.</para>
            <para>It defaults to "VAMErrorText". That name is declared in the VAMStyleSheet.css file supplied
            with VAM. Pages must either declare a &lt;LINK&gt; to VAMStyleSheet.css or assign
            this property to a style sheet class name declared on the page.</para>
            </value>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseErrorFormatter.ForeColor">
            <summary>
            Gets or sets the fore (text) color of the error message.
            </summary>
            <value>
            <para>Stores its value in ControlStyle.ForeColor.</para>
            <para>It defaults to Color.Empty.</para>
            </value>
            <seealso cref="T:System.Drawing.Color"/>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseErrorFormatter.Font">
            <summary>
            Gets or sets the font properties of the error message.
            </summary>
            <value>
            <para>Stores its value in ControlStyle.Font.</para>
            </value>
            <seealso cref="T:System.Web.UI.WebControls.FontInfo"/>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseErrorFormatter.Height">
            <summary>
            Gets or sets the height of the error message.
            </summary>
            <value>
            <para>Stores its value in ControlStyle.Height.</para>
            <para>It defaults to Unit.Empty.</para>
            </value>
            <seealso cref="T:System.Web.UI.WebControls.Unit"/>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseErrorFormatter.Width">
            <summary>
            Gets or sets the width of the error message.
            </summary>
            <value>
            <para>Stores its value in ControlStyle.Width.</para>
            <para>It defaults to Unit.Empty.</para>
            </value>
            <seealso cref="T:System.Web.UI.WebControls.Unit"/>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseErrorFormatter.Style">
            <summary>
            Style gets a collection of text attributes that will be rendered as a style attribute 
            on the enclosing tag of the error message.
            </summary>
            <value>
            <para>Uses <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseErrorFormatter.Attributes"/>.CssStyle for storage.</para>
            </value>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseErrorFormatter.Attributes">
            <summary>
            Attributes is a collection of arbitrary attributes (for rendering only) that do not correspond
            to other properties on this class.
            </summary>
            <value>
            <para>It's values are assigned to the enclosing tag of the error message.</para>
            <para>For example, use this to add the attribute "disabled=true" to the HTML 
            tag containing the error message.</para>
            </value>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseErrorFormatter.ToolTip">
            <summary>
            ToolTip adds a tooltip to the error message.
            </summary>
            <value>
            Defaults to "".
            </value>
            <remarks>
            <para><b>EditorAttribute:</b><see cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.StringTypeEditor"/></para>
            </remarks>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseErrorFormatter.ToolTipLookupID">
            <summary>
            ToolTipLookupID provides an alternative to ToolTip. When used, the error message
            is looked up from another source, such as a resource file or database to use as
            the ToolTip.
            </summary>
            <value>
            <para>This allows you to define a common set of error messages so the programmer doesn't uniquely
            define them each time.
            It also provides localization based on the current culture.</para>
            <para>To use it, assign a key string that represents the ToolTip that you want.
            This key will be used to search your data source for the correct string.</para>
            <para>When you are using the default Resource Manager system of VAM, it looks
            at the Name field of the ResX file for a match. The Value field of that row is returned.</para>
            <para>If no match is found OR this is blank, ToolTip will be used.</para>
            <para>This property uses the StringGroup of 
            <see cref="F:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.StringLookup.cMiscGroupName">StringLookup.cMiscGroupName</see>.</para>
            <para>It defaults to "".</para>
            <para><see cref="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseErrorFormatter.GetLookedUpToolTip"/> converts
            this into the desired string.</para>
            </value>
            <remarks>
            <para><b>EditorAttribute:</b><see cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.StringTypeEditor"/></para>
            </remarks>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseErrorFormatter.GapBefore">
            <summary>
            GapBefore is used to place a gap to the left of the error, when it is shown.
            </summary>
            <value>
            <para>The gap can be in characters, using &amp;nbsp; or pixels using a hidden graphic.</para>
            <para>The pixel gap is formed by stretching the 1x1 pixel graphic (visibility:hidden).
            So this is the number of pixels to stretch the image.
            The image is from the Appearance folder, spacer.gif.</para>
            <para>It defaults to 0 because if it was non-zero by default, anything not positioned
            to the right of a field would appear shifted. So make the user set it to form the gap.</para>
            </value>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseErrorFormatter.GapBeforeType">
            <summary>
            GapBeforeType determines how <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseErrorFormatter.GapBefore"/> is formatted.
            </summary>
            <value>
            Defaults to GapType.Character.
            </value>
            <seealso cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.GapType"/>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseErrorFormatter.BlinkAllowed">
            <summary>
            BlinkAllowed enables the error message text or image to blink to catch the user's attention
            based on <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.VAMPage.BlinkOnChange">VAMPage.BlinkOnChange</see> and 
            <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.VAMPage.BlinkOnSubmit">VAMPage.BlinkOnSubmit</see>.
            </summary>
            <value>
            <para>When true, blinking is allowed.</para>
            <para>It defaults to true.</para>
            </value>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseErrorFormatter.BlinkCssClass">
            <summary>
            BlinkCssClass is a style sheet class name for the blinked state of the error message object.
            </summary>
            <value>
            <para>When blinking, the client side switches the Class attribute on the enclosing tag of
            the error message between this class and its original value.</para>
            <para>If this is blank, the client side switches between transparent text and its original text.</para>
            <para>It defaults to "VAMBlinkText". That name is declared in the VAMStyleSheet.css file supplied
            with VAM. Pages must either declare a &lt;LINK&gt; to VAMStyleSheet.css or assign
            this property to a style sheet class name declared on the page.</para>
            </value>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseErrorFormatter.BlinkFunctionName">
            <summary>
            BlinkFunctionName defines the client-side Blink Function name 
            which is called to toggle the blinking. 
            </summary>
            <value>
            <para>This property allows an ErrorFormatter to provide a substituate client side blink
            function.</para>
            <para>It defaults to "VAM_Blink".</para>
            <para>Assigned to the client-side representation of the validator action object in the Blink property</para>
            <para>See the <b>Developer's Guide</b> for details and example on the client-side Blink Function.</para>
            </value>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseErrorFormatter.FormatterFunctionName">
            <summary>
            FormatterFunctionName defines the client-side Error Formatter Function name 
            which is called to change the attributes of the error message information. 
            </summary>
            <value>
            <para>Each ErrorFormatter subclass should supply its own Error Formatter function
            to show and hide the error message and other HTML.</para>
            <para>It defaults to "".</para>
            <para>See the <b>Developer's Guide</b> for details and example on the client-side 
            Error Formatter Function.</para>
            </value>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseErrorFormatter.CanFormatTokens">
            <summary>
            CanFormatTokens determines if this class supports formatting on tokens (Action.ReplaceMessageToken).
            </summary>
            <value>
            <para>ErrorMessages can contain tokens, like "{TEXTVALUE}" and "{COUNT}". The 
            <see cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.VAMPage"/> declares properties that provide style
            sheet class names to each of the three types of tokens: property, runtime, and other.
            The <see cref="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseValidatorAction.ReplaceMessageToken(System.String,System.String,System.String,Jenzabar.Portal.Framework.Web.UI.Controls.Validation.TokenType,Jenzabar.Portal.Framework.Web.UI.Controls.Validation.MessageType)"/> method
            calls this to determine of those style sheet class names should be added into the ErrorMessage
            or not. If this returns true, ReplaceMessageToken embeds the token like this:
            <c>&lt;span class='classname'&gt;token&lt;/span&gt;</c>.</para>
            <para>When false, it does not embed the token into the &lt;span&gt; tag.</para>
            <para>ErrorFormatters that support HTML in their error messages should override this
            to return true.</para>
            <para>Returns false by default.</para>
            </value>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseErrorFormatter.EnclosingTagName">
            <summary>
            EnclosingTagName supplies the tag that encloses the error formatter. 
            </summary>
            <value>
            <para>It defaults to "span". </para>
            <para>This enclosing tag is supplied all of the style properties and values
            from Attributes.</para>
            <para>Do not enclose the TagName in &lt; or &gt; characters.</para>
            </value>
        </member>
        <member name="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.ValidatorDisplay">
            <summary>
            ValidatorDisplay is the same concept as Microsoft's definition for this type.
            It determines how the error message is shown on the page.
            </summary>
            <remarks>
            It is duplicated in case Microsoft changes their enumerated type (adds other cases)
            so we don't break.
            </remarks>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.ValidatorDisplay.None">
            <summary>
            The validation message is never displayed inline.
            </summary>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.ValidatorDisplay.Static">
            <summary>
            Space for the validation message is allocated in the page layout.
            </summary>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.ValidatorDisplay.Dynamic">
            <summary>
            Space for the validation message is dynamically added to the page if validation fails.
            </summary>
        </member>
        <member name="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.ValidationEvents">
            <summary>
            ValidationEvents is used by the 
            <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseValidatorAction.EventsThatValidate">BaseValidatorAction.EventsThatValidate</see> property
            to determine what events fire the validator: OnChange OnSubmit
            </summary>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.ValidationEvents.All">
            <summary>
            It runs on both onchange and onsubmit events. This is the traditional setup.
            </summary>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.ValidationEvents.OnSubmit">
            <summary>
            Runs only onsubmit. Turns off validation on field changes but demands validation
            when the page is submitted.
            </summary>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.ValidationEvents.OnChange">
            <summary>
            Runs only onchange. Turns off validation when submitting. This state is effectively
            a warning and turns off server side validation as well.
            A warning is the ability to show an error message without stopping the user.
            </summary>
        </member>
        <member name="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.GapType">
            <summary>
            GapType determines how to format a gap, using Characters or pixels.
            It is used with <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseErrorFormatter.GapBeforeType">BaseErrorFormatter.GapBeforeType</see>
            and <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.TextErrorFormatter.GapAfterImageType">TextErrorFormatter.GapAfterImageType</see>.
            </summary>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.GapType.Character">
            <summary>
            Gap uses the text "&amp;nbsp;" for each unit of separation.
            </summary>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.GapType.Pixel">
            <summary>
            Gap uses an image that is stretched to by a number of pixels.
            </summary>
        </member>
        <member name="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.TokenType">
            <summary>
            TokenType determines the type of token. It is used by 
            <see cref="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseValidatorAction.ReplaceMessageToken(System.String,System.String,System.String,Jenzabar.Portal.Framework.Web.UI.Controls.Validation.TokenType,Jenzabar.Portal.Framework.Web.UI.Controls.Validation.MessageType)">BaseValidatorAction.ReplaceMessageToken</see>.
            </summary>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.TokenType.Label">
            <summary>
            Label is for {LABEL} and {LABEL#} tokens.
            </summary>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.TokenType.Property">
            <summary>
            Property is for properties on the control.
            </summary>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.TokenType.Runtime">
            <summary>
            Runtime is for values determined at runtime, usually on the client side.
            </summary>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.TokenType.Other">
            <summary>
            Other is for any other token such as singular:plural.
            </summary>
        </member>
        <member name="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.TextErrorFormatter">
            <summary>
            TextErrorFormatter places the ErrorMessage on the page as literal text.
            </summary>
            <remarks>
            <para>This error formatter puts the error message directly on the page. It looks
            like the formatting supplied with Microsoft's validators. However, it is designed
            to separate any HTML formatting from the error message.</para>
            <para>The <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.TextErrorFormatter.HTMLBefore"/>
            and <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.TextErrorFormatter.HTMLAfter"/> properties can enclose
            the error message in HTML or simply text.</para>
            <para>The <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.TextErrorFormatter.ImageURL"/> allows
            the user to include an image before the text.</para>
            <para>See the <b>Developer's Guide</b> for and overview and subclassing strategy.</para>
            </remarks>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.TextErrorFormatter.#ctor">
            <summary>
            Constructor with no parameters.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.TextErrorFormatter.#ctor(System.String,Jenzabar.Portal.Framework.Web.UI.Controls.Validation.ValidatorDisplay)">
            <summary>
            Constructor that sets the Name and Display properties.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.TextErrorFormatter.#ctor(Jenzabar.Portal.Framework.Web.UI.Controls.Validation.ValidatorDisplay,System.Int32,Jenzabar.Portal.Framework.Web.UI.Controls.Validation.GapType,System.Boolean,System.String,System.Web.UI.WebControls.ImageAlign,System.String,System.String,System.String,System.String)">
            <summary>
            Constructor that sets the Display, GapBefore, GapBeforeType, BlinkAllowed,
            ImageURL, ImageAlign, HTMLBefore, HTMLAfter, HTMLBeforeLookupID, and
            HTMLAfterLookupID properties.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.TextErrorFormatter.#ctor(Jenzabar.Portal.Framework.Web.UI.Controls.Validation.ValidatorDisplay,System.Web.UI.WebControls.Style)">
            <summary>
            Constructor that sets the Display and ControlStyle properties.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.TextErrorFormatter.#ctor(Jenzabar.Portal.Framework.Web.UI.Controls.Validation.ValidatorDisplay,System.Web.UI.WebControls.Style,System.Int32,Jenzabar.Portal.Framework.Web.UI.Controls.Validation.GapType,System.Boolean,System.String,System.Web.UI.WebControls.ImageAlign,System.String,System.String,System.String,System.String)">
            <summary>
            Constructor that sets the Display, ControlStyle, GapBefore, GapBeforeType, BlinkAllowed,
            ImageURL, ImageAlign, HTMLBefore, HTMLAfter, HTMLBeforeLookupID, and
            HTMLAfterLookupID properties.
            </summary>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.TextErrorFormatter.fImageURL">
            <summary>
            Storage for <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.TextErrorFormatter.ImageURL"/>.
            </summary>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.TextErrorFormatter.fImageAlign">
            <summary>
            Storage for <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.TextErrorFormatter.ImageAlign"/>.
            </summary>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.TextErrorFormatter.fGapAfterImage">
            <summary>
            Storage for <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.TextErrorFormatter.GapAfterImage"/>.
            </summary>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.TextErrorFormatter.fGapAfterImageType">
            <summary>
            Storage for <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.TextErrorFormatter.GapAfterImageType"/>.
            </summary>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.TextErrorFormatter.fHTMLBefore">
            <summary>
            Storage for <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.TextErrorFormatter.HTMLBefore"/>.
            </summary>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.TextErrorFormatter.fHTMLBeforeLookupID">
            <summary>
            Storage for <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.TextErrorFormatter.HTMLBeforeLookupID"/>.
            </summary>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.TextErrorFormatter.fLookedupHTMLBefore">
            <summary>
            When null, <see cref="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.TextErrorFormatter.GetLookedUpHTMLBefore"/> 
            calls <see cref="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.StringLookup.StringIDLookup(System.String,System.String,System.String)">StringLookup.StringIDLookup</see> to
            get the Text. This holds the result of that for multiple uses.
            </summary>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.TextErrorFormatter.fHTMLAfter">
            <summary>
            Storage for <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.TextErrorFormatter.HTMLAfter"/>.
            </summary>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.TextErrorFormatter.fHTMLAfterLookupID">
            <summary>
            Storage for <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.TextErrorFormatter.HTMLAfterLookupID"/>.
            </summary>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.TextErrorFormatter.fLookedupHTMLAfter">
            <summary>
            When null, <see cref="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.TextErrorFormatter.GetLookedUpHTMLAfter"/> 
            calls <see cref="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.StringLookup.StringIDLookup(System.String,System.String,System.String)">StringLookup.StringIDLookup</see> to
            get the Text. This holds the result of that for multiple uses.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.TextErrorFormatter.AddControlsBody(System.Web.UI.Control,Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseValidatorAction,System.Boolean,System.String,System.String)">
            <summary>
            Builds several LiteralControls containing the optional HTMLBefore, option ImageURL, 
            a &lt;span&gt; which contains the error message text, and HTMLAfter.
            </summary>
            <remarks>
            <para>The error message is retrieved from the Action's GetErrorMessage method so that
            server side tokens and string lookup system conversion are applied.
            The error message is only inserted when the client-side is disabled
            or Display=Static. It adds for Display=Static only to insert the same space needed
            for the error message, which will be updated on the client side when first shown.</para>
            <para>The &lt;span&gt; tag that encloses the error message has the ID= attribute
            set to pParentClientID + "_Txt". This allows the client-side code to locate
            the &lt;span&gt; tag and set the innerText.</para>
            <para>HTMLBefore and HTMLAfter are converted through the string lookup system
            using <see cref="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.TextErrorFormatter.GetLookedUpHTMLBefore"/>
            and <see cref="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.TextErrorFormatter.GetLookedUpHTMLAfter"/>. 
            They are only added if the converted string is not blank.</para>
            <para>The image is added by calling <see cref="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.TextErrorFormatter.AddLeadImage(System.Web.UI.Control)"/>.</para>
            </remarks>
            <param name="pControl">Add child controls to this control.</param>
            <param name="pAction">This BaseValidatorAction is the owner of this error formatter. Use
            its GetErrorMessage method to get the error message.</param>
            <param name="pVisible">When true, the error message should be shown. When false, it is hidden.
            The outer control actually does the showing and hiding.</param>
            <param name="pParentID">The parent control ID in this Naming Container.</param>
            <param name="pParentClientID">The parent control's ClientID. Use this to form a unique
            ID= attribute that can be looked up within JavaScript. Usually you add an extension to this string
            like "_txt".</param>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.TextErrorFormatter.AddDesignModeControlsBody(System.Web.UI.Control,Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseValidatorAction)">
            <summary>
            Shows HTMLBefore, ImageURL, the error message (without token conversion),
            and HTMLAfter.
            </summary>
            <remarks>
            <para>All strings are run through the String Lookup System to apply their LookupID property.</para>
            </remarks>
            <param name="pControl">Add child controls to this control.</param>
            <param name="pAction">This BaseValidatorAction is the owner of this error formatter. Use
            it to get the ErrorMessage and ErrorMessageLookupID properties.</param>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.TextErrorFormatter.AddLeadImage(System.Web.UI.Control)">
            <summary>
            AddLeadImage supports the <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.TextErrorFormatter.ImageURL"/> property.
            It inserts an &lt;img&gt; tag into the controls list.
            </summary>
            <remarks>
            <para>The ImageUrl is the src= attribute. The ID= attribute is fClientID + "_Img".
            This ID is used by the client-side blinking code in the VAM_Blink function.</para>
            </remarks>
            <param name="pControl">Add child controls to this control.</param>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.TextErrorFormatter.GetLookedUpHTMLBefore">
            <summary>
            Uses the String Lookup System to get the text associated
            with the <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.TextErrorFormatter.HTMLBefore"/>
            and <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.TextErrorFormatter.HTMLBeforeLookupID"/>
            and sets fLookedupHTMLBefore.
            </summary>
            <returns>fLookedupHTMLBefore. If fLookedupHTMLBefore == null,
            it calls <see cref="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.StringLookup.StringIDLookup(System.String,System.String,System.String)">StringLookup.StringIDLookup</see> 
            with HTMLBeforeLookupID first.</returns>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.TextErrorFormatter.GetLookedUpHTMLAfter">
            <summary>
            Uses the String Lookup System to get the text associated
            with the <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.TextErrorFormatter.HTMLAfter"/>
            and <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.TextErrorFormatter.HTMLAfterLookupID"/>
            and sets fLookedupHTMLAfter.
            </summary>
            <returns>fLookedupHTMLAfter. If fLookedupHTMLAfter == null,
            it calls <see cref="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.StringLookup.StringIDLookup(System.String,System.String,System.String)">StringLookup.StringIDLookup</see> 
            with HTMLAfterLookupID first.</returns>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.TextErrorFormatter.Clone">
            <returns>Cloned TextErrorFormatter.</returns>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.TextErrorFormatter.Copy(Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseErrorFormatter)">
            <summary>
            In addition to the ancestor, it copies all properties introduced in this class.
            </summary>
            <remarks>
            Supports any ErrorFormatter class. It will not copy any TextErrorFormatter properties to a
            class other than TextErrorFormatter. Use this to transfer properties from any one class
            to another.
            </remarks>
            <param name="pSource">The original ErrorFormatter object to copy.</param>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.TextErrorFormatter.Name">
            <summary>
            Overridden to supply the DefaultValueAttribute of "Text".
            </summary>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.TextErrorFormatter.ImageURL">
            <summary>
            Gets and sets the URL to show an optional image that appears to the left of the message.
            </summary>
            <value>
            <para>You can use the tilde (~) as token that is replaced by the virtual path to the
            web applications. For example, "~/VAM/Appearance/MyPict.gif".</para>
            <para>It defaults to "".</para>
            </value>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.TextErrorFormatter.ImageAlign">
            <summary>
            Gets and sets the alignment of the image against the text (and the rest of the row).
            Used when <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.TextErrorFormatter.ImageURL"/> is assigned. 
            </summary>
            <value>
            It defaults to ImageAlign.Middle.
            </value>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.TextErrorFormatter.GapAfterImage">
            <summary>
            GapAfterImage is used to place a gap between the image and the error message.
            It is a number of characters or pixels for the gap, depending on 
            <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.TextErrorFormatter.GapAfterImageType"/>.
            </summary>
            <value>
            <para>It defaults to 1.</para>
            <para>Not used when <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.TextErrorFormatter.ImageURL"/> is "".</para>
            </value>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.TextErrorFormatter.GapAfterImageType">
            <summary>
            GapAfterImageType determines how 
            <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.TextErrorFormatter.GapAfterImage"/> is formatted.
            </summary>
            <value>
            <para>It defaults to GapType.Character.</para>
            </value>
            <seealso cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.GapType"/>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.TextErrorFormatter.HTMLBefore">
            <summary>
            HTMLBefore allows the user to include HTML that appears before the error message.
            </summary>
            <value>
            <para>If the <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.TextErrorFormatter.ImageURL"/> is used, 
            this property's HTML appears before the image too.</para>
            <para>It defaults to "".</para>
            </value>
            <remarks>
            <para><b>EditorAttribute:</b><see cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.StringTypeEditor"/></para>
            </remarks>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.TextErrorFormatter.HTMLBeforeLookupID">
            <summary>
            HTMLBeforeLookupID is the String Lookup System's lookupID for 
            <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.TextErrorFormatter.HTMLBefore"/>.
            </summary>
            <value>
            <para>It is assigned to StringLookup.cMiscGroup.</para>
            <para>It defaults to "".</para>
            </value>
            <remarks>
            <para><b>EditorAttribute:</b><see cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.StringTypeEditor"/></para>
            </remarks>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.TextErrorFormatter.HTMLAfter">
            <summary>
            HTMLAfter allows the user to include HTML that appears after the error message.
            </summary>
            <value>
            It defaults to "".
            </value>
            <remarks>
            <para><b>EditorAttribute:</b><see cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.StringTypeEditor"/></para>
            </remarks>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.TextErrorFormatter.HTMLAfterLookupID">
            <summary>
            HTMLAfterLookupID is the String Lookup System's lookupID for 
            <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.TextErrorFormatter.HTMLAfter"/>.
            </summary>
            <value>
            <para>It is assigned to StringLookup.cMiscGroup.</para>
            <para>It defaults to "".</para>
            </value>
            <remarks>
            <para><b>EditorAttribute:</b><see cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.StringTypeEditor"/></para>
            </remarks>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.TextErrorFormatter.FormatterFunctionName">
            <summary>
            The client-side Error Formatter Function is "VAM_TextFmttr".
            </summary>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.TextErrorFormatter.CanFormatTokens">
            <summary>
            Returns true.
            </summary>
        </member>
        <member name="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseImageErrorFormatter">
            <summary>
            BaseImageErrorFormatter places an &lt;img&gt; tag on the page and
            calls on a subclass to define a way to show the error message.
            </summary>
            <remarks>
            <para>The <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseImageErrorFormatter.ImageURL"/> property
            is used as the URL to the image.</para>
            <para>When blinking, the enclosing &lt;span&gt; tag must remain visible so that the user can click 
            on the spot of the image when the image is in its blinked state. Thus blinking 
            is extended to show and hide the image itself using the visibility style. 
            That preserves the space of the image so the user has a place to click upon.</para>
            <para>The image gets the ClientID of the span tag PLUS "_Img": </para>
            </remarks>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseImageErrorFormatter.#ctor">
            <summary>
            Constructor with no parameters.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseImageErrorFormatter.#ctor(System.String,Jenzabar.Portal.Framework.Web.UI.Controls.Validation.ValidatorDisplay)">
            <summary>
            Constructor that sets the Name and Display properties.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseImageErrorFormatter.#ctor(Jenzabar.Portal.Framework.Web.UI.Controls.Validation.ValidatorDisplay,System.Int32,Jenzabar.Portal.Framework.Web.UI.Controls.Validation.GapType,System.Boolean,System.String)">
            <summary>
            Constructor that sets the Display, GapBefore, GapBeforeType, BlinkAllowed,
            and ImageURL properties.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseImageErrorFormatter.#ctor(Jenzabar.Portal.Framework.Web.UI.Controls.Validation.ValidatorDisplay,System.Web.UI.WebControls.Style)">
            <summary>
            Constructor that sets the Display and ControlStyle properties.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseImageErrorFormatter.#ctor(Jenzabar.Portal.Framework.Web.UI.Controls.Validation.ValidatorDisplay,System.Web.UI.WebControls.Style,System.Int32,Jenzabar.Portal.Framework.Web.UI.Controls.Validation.GapType,System.Boolean,System.String)">
            <summary>
            Constructor that sets the Display, ControlStyle,GapBefore, GapBeforeType, BlinkAllowed,
            and ImageURL properties.
            </summary>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseImageErrorFormatter.fImageURL">
            <summary>
            Storage for <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseImageErrorFormatter.ImageURL"/>.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseImageErrorFormatter.AddControlsBody(System.Web.UI.Control,Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseValidatorAction,System.Boolean,System.String,System.String)">
            <summary>
            Creates an <see cref="T:System.Web.UI.WebControls.Image"/> control pointing to the 
            <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseImageErrorFormatter.ImageURL"/>. It calls
            <see cref="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseImageErrorFormatter.AddPropertiesToImage(System.Web.UI.WebControls.Image,Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseValidatorAction,System.Boolean)"/> to
            let the subclass install properties that help display the error message.
            </summary>
            <remarks>
            <para>The image will have an ID= attribute of pParentClientID + "_Img".</para>
            <para>Runs ImageURL through <see cref="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.Globals.ConvertUrlWithSiteRoot(System.String)">Globals.ConvertUrlWithSiteRoot</see>
            to update the path, based on the web.config file attribute "VAM_AppearanceVirtualPath".</para>
            </remarks>
            <param name="pControl">Add child controls to this control.</param>
            <param name="pAction">This BaseValidatorAction is the owner of this error formatter. Use
            its GetErrorMessage method to get the error message.</param>
            <param name="pVisible">When true, the error message should be shown. When false, it is hidden.
            The outer control actually does the showing and hiding.</param>
            <param name="pParentID">The parent control ID in this Naming Container.</param>
            <param name="pParentClientID">The parent control's ClientID. Use this to form a unique
            ID= attribute that can be looked up within JavaScript. Usually you add an extension to this string
            like "_txt".</param>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseImageErrorFormatter.AddPropertiesToImage(System.Web.UI.WebControls.Image,Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseValidatorAction,System.Boolean)">
            <summary>
            AddPropertiesToImage allows the subclass to define additional properties on the image,
            including any client-side javascript hooks, that support showing the error message.
            </summary>
            <remarks>
            Must subclass to do anything. This class does nothing.
            </remarks>
            <param name="pImageControl">The ImageControl whose properties you can modify to show the error message.</param>
            <param name="pAction">This BaseValidatorAction is the owner of this error formatter. Use
            its GetErrorMessage method to get the error message.</param>
            <param name="pVisible">When true, the error is visible. When false, it is not.</param>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseImageErrorFormatter.AddDesignModeControlsBody(System.Web.UI.Control,Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseValidatorAction)">
            <summary>
            Creates an <see cref="T:System.Web.UI.WebControls.Image"/> control pointing to the 
            <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseImageErrorFormatter.ImageURL"/>.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseImageErrorFormatter.Copy(Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseErrorFormatter)">
            <summary>
            In addition to the ancestor, it copies all properties introduced in this class.
            </summary>
            <remarks>
            Supports any ErrorFormatter class. It will not copy any BaseImageErrorFormatter properties to a
            class other than BaseImageErrorFormatter. Use this to transfer properties from any one class
            to another.
            </remarks>
            <param name="pSource">The original ErrorFormatter object to copy.</param>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseImageErrorFormatter.ImageURL">
            <summary>
            ImageURL is the URL to the image file.
            </summary>
            <value>
            <para>It defaults to "~/VAM/Appearance/ValErrorIcon.gif"</para>
            <para>VAM supplies the image file ValErrorImage.gif in the VAM/Appearance folder.</para>
            <para>The "VAM_AppearancesVirtualPath" key in web.config will replace the default
            string "~/VAM/Appearance/" so that you can relocate the VAM/Appearance folder without
            changing this property.</para>
            </value>
        </member>
        <member name="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.TooltipImageErrorFormatter">
            <summary>
            TooltipImageErrorFormatter shows an image when there is an error.
            It shows the error message in a tooltip (the title= attribute).
            </summary>
            <remarks>
            <para>Set the URL to the image with the
            <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseImageErrorFormatter.ImageURL"/> property.</para>
            <para>When a browser doesn't 
            support the title= attribute, this error formatter cannot do its job and should be
            substituted with another. The <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.Globals.OnAdjustValidatorActionToBrowser">Globals.OnAdjustValidatorActionToBrowser</see>
            event provides a way to automate this.</para>
            </remarks>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.TooltipImageErrorFormatter.#ctor">
            <summary>
            Constructor with no parameters.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.TooltipImageErrorFormatter.#ctor(System.String,Jenzabar.Portal.Framework.Web.UI.Controls.Validation.ValidatorDisplay)">
            <summary>
            Constructor that sets the Name and Display properties.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.TooltipImageErrorFormatter.#ctor(Jenzabar.Portal.Framework.Web.UI.Controls.Validation.ValidatorDisplay,System.Int32,Jenzabar.Portal.Framework.Web.UI.Controls.Validation.GapType,System.Boolean,System.String,System.String,System.String)">
            <summary>
            Constructor that sets the Display, GapBefore, GapBeforeType, BlinkAllowed,
            ImageURL, ToolTip and ToolTipLookupID properties.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.TooltipImageErrorFormatter.#ctor(Jenzabar.Portal.Framework.Web.UI.Controls.Validation.ValidatorDisplay,System.Web.UI.WebControls.Style)">
            <summary>
            Constructor that sets the Display and ControlStyle properties.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.TooltipImageErrorFormatter.#ctor(Jenzabar.Portal.Framework.Web.UI.Controls.Validation.ValidatorDisplay,System.Web.UI.WebControls.Style,System.Int32,Jenzabar.Portal.Framework.Web.UI.Controls.Validation.GapType,System.Boolean,System.String,System.String,System.String)">
            <summary>
            Constructor that sets the Display, ControlStyle, GapBefore, GapBeforeType, BlinkAllowed,
            ImageURL, ToolTip and ToolTipLookupID properties.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.TooltipImageErrorFormatter.AddPropertiesToImage(System.Web.UI.WebControls.Image,Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseValidatorAction,System.Boolean)">
            <summary>
            Assigns a tooltip to the Image's ToolTip property, but only when client-scripting
            is disabled for this Action object.
            </summary>
            <remarks>
            <para>When client-side scripting is enabled, the client-side "VAM_TTFmttr" function 
            will assign the error message to the image's title= property.</para>
            <para>Uses pAction.GetErrorMessage() to get the error message complete
            with tokens and string lookup applied. If the browser doesn't
            support multiline tooltips, it strips out the \n and \r characters.</para>
            </remarks>
            <param name="pImageControl">The ImageControl whose properties you can modify to show the error message.</param>
            <param name="pAction">This BaseValidatorAction is the owner of this error formatter. Use
            its GetErrorMessage method to get the error message.</param>
            <param name="pVisible">When true, the error is visible. When false, it is not.</param>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.TooltipImageErrorFormatter.Clone">
            <returns>Cloned TooltipImageErrorFormatter.</returns>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.TooltipImageErrorFormatter.Name">
            <summary>
            Sets the DefaultValueAttribute to "Image with tooltip".
            </summary>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.TooltipImageErrorFormatter.ToolTip">
            <summary>
            ToolTip is defined by the parent but isn't used here. 
            The error message is automatically the tooltip.
            This class hides it from the Properties Editor.
            </summary>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.TooltipImageErrorFormatter.ToolTipLookupID">
            <summary>
            ToolTipLookupID is defined by the parent but isn't used here. 
            The error message is automatically the tooltip.
            This class hides it from the Properties Editor.
            </summary>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.TooltipImageErrorFormatter.FormatterFunctionName">
            <summary>
            The client-side Error Formatter Function is "VAM_TTFmttr".
            </summary>
        </member>
        <member name="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.AlertImageErrorFormatter">
            <summary>
            AlertImageErrorFormatter shows an image when there is an error. 
            When you click it, an alert appears with the error message.
            You can assign a tooltip to the image to tell the user to click.
            </summary>
            <remarks>
            <para>This errorformatter uses JavaScript to intercept the client-side
            onclick event of the image and open the alert box. When a browser doesn't 
            support JavaScript, this error formatter cannot do its job and should be
            substituted with another. The <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.Globals.OnAdjustValidatorActionToBrowser">Globals.OnAdjustValidatorActionToBrowser</see>
            event provides a way to automate this.</para>
            <para>Set the URL to the image with the
            <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseImageErrorFormatter.ImageURL"/> property.</para>
            <para>The <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.AlertImageErrorFormatter.ToolTip"/>
            property provides the optional tooltip.</para>
            </remarks>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.AlertImageErrorFormatter.#ctor">
            <summary>
            Constructor with no parameters.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.AlertImageErrorFormatter.#ctor(System.String,Jenzabar.Portal.Framework.Web.UI.Controls.Validation.ValidatorDisplay)">
            <summary>
            Constructor that sets the Name and Display properties.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.AlertImageErrorFormatter.#ctor(Jenzabar.Portal.Framework.Web.UI.Controls.Validation.ValidatorDisplay,System.Int32,Jenzabar.Portal.Framework.Web.UI.Controls.Validation.GapType,System.Boolean,System.String)">
            <summary>
            Constructor that sets the Display, GapBefore, GapBeforeType, BlinkAllowed,
            and ImageURL properties.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.AlertImageErrorFormatter.#ctor(Jenzabar.Portal.Framework.Web.UI.Controls.Validation.ValidatorDisplay,System.Int32,Jenzabar.Portal.Framework.Web.UI.Controls.Validation.GapType,System.Boolean,System.String,System.String,System.String)">
            <summary>
            Constructor that sets the Display, GapBefore, GapBeforeType, BlinkAllowed,
            ImageURL, ToolTip and ToolTipLookupID properties.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.AlertImageErrorFormatter.#ctor(Jenzabar.Portal.Framework.Web.UI.Controls.Validation.ValidatorDisplay,System.Web.UI.WebControls.Style)">
            <summary>
            Constructor that sets the Display and ControlStyle properties.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.AlertImageErrorFormatter.#ctor(Jenzabar.Portal.Framework.Web.UI.Controls.Validation.ValidatorDisplay,System.Web.UI.WebControls.Style,System.Int32,Jenzabar.Portal.Framework.Web.UI.Controls.Validation.GapType,System.Boolean,System.String)">
            <summary>
            Constructor that sets the Display, ControlStyle, GapBefore, GapBeforeType, BlinkAllowed,
            and ImageURL properties.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.AlertImageErrorFormatter.#ctor(Jenzabar.Portal.Framework.Web.UI.Controls.Validation.ValidatorDisplay,System.Web.UI.WebControls.Style,System.Int32,Jenzabar.Portal.Framework.Web.UI.Controls.Validation.GapType,System.Boolean,System.String,System.String,System.String)">
            <summary>
            Constructor that sets the Display, ControlStyle, GapBefore, GapBeforeType, BlinkAllowed,
            ImageURL, ToolTip and ToolTipLookupID properties.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.AlertImageErrorFormatter.AddPropertiesToImage(System.Web.UI.WebControls.Image,Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseValidatorAction,System.Boolean)">
            <summary>
            Always assigns the ToolTip property on the Image because the tooltip is not changed
            on the client-side. The JavaScript to open an alert box with the Error Message 
            is added only when client-side script is disabled.
            </summary>
            <param name="pImageControl">The ImageControl whose properties you can modify to show the error message.</param>
            <param name="pAction">This BaseValidatorAction is the owner of this error formatter. Use
            its GetErrorMessage method to get the error message.</param>
            <param name="pVisible">When true, the error is visible. When false, it is not.</param>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.AlertImageErrorFormatter.Clone">
            <returns>Clones this AlertImageErrorFormatter</returns>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.AlertImageErrorFormatter.Name">
            <summary>
            Overrides the DefaultValueAttribute to use "Image with alert box"
            </summary>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.AlertImageErrorFormatter.ToolTip">
            <summary>
            Tooltip assigns a tooltip (title) to the image to give the user instructions
            about clicking to get the alert box to appear. 
            </summary>
            <value>
            Defaults to "Click here for details."
            </value>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.AlertImageErrorFormatter.FormatterFunctionName">
            <summary>
            The client-side Error Formatter Function is "VAM_AlertFmttr".
            </summary>
        </member>
        <member name="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.ErrorFormatterCollection">
            <summary>
            This is a <see cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.CollectionsLibrary.NameObjectCollection"/> to hold 
            <see cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseErrorFormatter"/> instances.
            </summary>
            <remarks>
            <para>It is maintained globally <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.Globals.ErrorFormatters">Globals.ErrorFormatters</see>.</para>
            <para>The user can add their own ErrorFormatter within the custom.VAM.config file.</para>
            <para>This class maintains elements sorted by Name.</para>
            </remarks>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.ErrorFormatterCollection.#ctor">
            <summary>
            Constructor with no parameters.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.ErrorFormatterCollection.ValidateType(System.Object)">
            <summary>
            Only BaseErrorFormatter is valid.
            </summary>
            <param name="pValue"></param>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.ErrorFormatterCollection.Find(System.String)">
            <summary>
            Find locates a BaseErrorFormatter whose name matches pName (case insensitive).
            </summary>
            <param name="pName">The name to match to a BaseErrorFormatter.Name property.</param>
            <returns>The BaseErrorFormatter found or null if not found.</returns>
        </member>
        <member name="T:Jenzabar.Portal.Framework.Web.UI.Controls.SecurityGrid">
            <summary>
            A class for displaying security information in a grid
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.SecurityGrid.#ctor(Jenzabar.Portal.Framework.Security.SecuredActiveDirectoryObject)">
            <summary>
            Creates a new instance of the SecurityGrid class and sets the object that it should secure.
            </summary>
            <param name="obj"></param>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.SecurityGrid.#ctor">
            <summary>
            Creates a new instance of the SecurityGrid class
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.SecurityGrid.SaveViewState">
            <summary>
            Overrides SaveViewState method in base class
            </summary>
            <returns>Object representing the viewstate that was saved</returns>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.SecurityGrid.LoadViewState(System.Object)">
            <summary>
            Overrides LoadViewState method in base class
            </summary>
            <returns>Object representing the viewstate to load</returns>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.SecurityGrid.OnPreRender(System.EventArgs)">
            <summary>
            Overrides the OnPreRender event in base control
            </summary>
            <param name="e">EventArgs</param>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.SecurityGrid.Render(System.Web.UI.HtmlTextWriter)">
            <summary>
            Overrides the Render event in base control
            </summary>
            <param name="writer">HtmlTextWriter to render control with</param>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.SecurityGrid.CommitSecurityChanges">
            <summary>
            Commits the changes made to the security of the object and all of it's child objects.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.SecurityGrid.RaisePostBackEvent(System.String)">
            <summary>
            Sets properties on PostBack based on the eventArgument passed
            </summary>
            <param name="eventArgument">A string representing the action to take</param>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.SecurityGrid.EditRoleHandler(System.Object,System.Web.UI.WebControls.CommandEventArgs)">
            <summary>
            Handels the EditRoleClicked event of the SecurityTable for the Roles of the Context that the ObjectTOSecure is in.
            </summary>
            <param name="sender">The control that raised the event</param>
            <param name="e">The arguments to the event</param>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.SecurityGrid.DeleteRoleHandler(System.Object,System.Web.UI.WebControls.CommandEventArgs)">
            <summary>
            Handels the DeleteRoleClicked event of the SecurityTable for the Roles of the Context that the ObjectTOSecure is in.
            </summary>
            <param name="sender">The control that raised the event</param>
            <param name="e">The arguments to the event</param>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.SecurityGrid.ObjectToSecure">
            <summary>
            Gets and sets the object that will be secured by the grid
            </summary>
        </member>
        <member name="T:Jenzabar.Portal.Framework.Web.UI.Controls.SecurityTable">
            <summary>
            Used in rendering the table for security 
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.SecurityTable.OnPreRender(System.EventArgs)">
            <summary>
            Overrides the OnPreRender event in base control
            </summary>
            <param name="e">EventArgs</param>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.SecurityTable.Render(System.Web.UI.HtmlTextWriter)">
            <summary>
            Overrides the Render event in base control
            </summary>
            <param name="writer">HtmlTextWriter to render control with</param>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.SecurityTable.GetCheckBoxCellMarkup(System.Boolean,System.Boolean,System.String,System.String)">
            <summary>
            Generates and returns a string to be used as the markup for the checkboxes that define the permissions.
            </summary>
            <param name="isChecked">true to have the checkbox checked</param>
            <param name="isDisabled">true to make the checkbox disabled, and not editable by the user</param>
            <param name="val">the value to be given to the checkbox</param>
            <param name="className">the class for the cell that the checkbox will be in. if this is null, the cell has no class</param>
            <returns>the HTML markup for the checkbox that can be written to the output.</returns>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.SecurityTable.GetCheckBoxCellMarkup(System.Boolean,System.Boolean,System.String)">
            <summary>
            Generates and returns a string to be used as the markup for the checkboxes that define the permissions.
            </summary>
            <param name="isChecked">true to have the checkbox checked</param>
            <param name="isDisabled">true to have the checkbox disabled</param>
            <param name="val">the value to be given to the checkbox</param>
            <returns>The Cell markup</returns>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.SecurityTable.RaisePostDataChangedEvent">
            <summary>
            required for the IPostbackDataHandler interface
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.SecurityTable.LoadPostData(System.String,System.Collections.Specialized.NameValueCollection)">
            <summary>
            Loads PostData into the internal SelectedPrincipals ArrayList
            </summary>
            <param name="postDataKey">The key to retrieve values from the PostCollection</param>
            <param name="postCollection">The NameValueCollection that holds post data</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.SecurityTable.SyncChanges(Jenzabar.Portal.Framework.PortalGroup[],System.String[])">
            <summary>
            Syncs the data between the internal roles array and the given keys array
            </summary>
            <param name="roles">The internal object's Roles array</param>
            <param name="postKeys">The Keys to sync to the roles</param>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.SecurityTable.RaisePostBackEvent(System.String)">
            <summary>
            Sets properties on PostBack based on the eventArgument passed
            </summary>
            <param name="eventArgument">A string representing the action to take</param>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.SecurityTable.OnEditRoleClicked(System.Web.UI.WebControls.CommandEventArgs)">
            <summary>
            Raises the EditRoleClicked event
            </summary>
            <param name="args">The arguments to the click event</param>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.SecurityTable.OnDeleteRoleClicked(System.Web.UI.WebControls.CommandEventArgs)">
            <summary>
            Raises the DeleteRoleClicked event
            </summary>
            <param name="args">The arguments to the click event</param>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.SecurityTable.CommitSecurityChanges">
            <summary>
            Commits the changes made to the security of the object and all of it's child objects.
            No need to call this function from Security grid; But if table is used by itself
            </summary>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.SecurityTable.ObjectToSecure">
            <summary>
            Gets and sets the objec that this grid will display security for
            </summary>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.SecurityTable.Roles">
            <summary>
            Gets and sets the list of roles that will be displayed in the table
            </summary>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.SecurityTable.PermissionsForText">
            <summary>
            Gets and sets the text that will be displayed in the header of the security table
            </summary>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.SecurityTable.AllowEditingOfRoles">
            <summary>
            True to add the Edit and Delete buttons for each role, otherwise flase, and the buttons are not displayed.
            </summary>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.SecurityTable.ExpandRoles">
            <summary>
            True to make this control write out the list of memebers of a role in a drop down.
            </summary>
        </member>
        <member name="E:Jenzabar.Portal.Framework.Web.UI.Controls.SecurityTable.EditRoleClicked">
            <summary>
            Raised when the user clicks the edit icon for a role.
            </summary>
        </member>
        <member name="E:Jenzabar.Portal.Framework.Web.UI.Controls.SecurityTable.DeleteRoleClicked">
            <summary>
            Rasied when the user clicks the delete icon for a role
            </summary>
        </member>
        <member name="T:Jenzabar.Portal.Framework.Web.UI.Controls.Secured.SLinkButton">
            <summary>
            A secured, operation aware version of the LinkButton control
            </summary>
            <remarks>
            Secured controls can be used to make interface elements aware of whether or not
            a user has access to a particular operation assigned to the control
            
            If the user does not have access to the operation(s) assigned to the control, the
            control can be set to render differently (or not at all) to prevent the user from
            using the control to perform the secured operation
            
            In addition, events normally raised by the control will not be raised if the control
            detects that the access check has failed. This prevents users from "spoofing" access
            by simulating a postback.
            </remarks>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Web.UI.Controls.Secured.SLinkButton.m_OperationNames">
            <summary>
            Member variable m_OperationNames
            </summary>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Web.UI.Controls.Secured.SLinkButton.m_IsSecured">
            <summary>
            Member variable m_IsSecured
            </summary>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Web.UI.Controls.Secured.SLinkButton.m_AccessCheckType">
            <summary>
            Member variable AccessCheckType
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Secured.SLinkButton.#ctor">
            <summary>
            Constructor for the SLinkButton class
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Secured.SLinkButton.OnClick(System.EventArgs)">
            <summary>
            Overrides OnClick Event of base control
            </summary>
            <param name="e">EventArgs</param>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Secured.SLinkButton.OnCommand(System.Web.UI.WebControls.CommandEventArgs)">
            <summary>
            Overrides OnCommand Event of base control
            </summary>
            <param name="e">CommandEventArgs</param>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Secured.SLinkButton.OnPreRender(System.EventArgs)">
            <summary>
            Overrides the OnPreRender event in base control
            </summary>
            <param name="e">EventArgs</param>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Secured.SLinkButton.SecureControl">
            <summary>
            Used internally to secure the control
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Secured.SLinkButton.Render(System.Web.UI.HtmlTextWriter)">
            <summary>
            Overrides the Render event in base control
            </summary>
            <param name="writer">HtmlTextWriter to render control with</param>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Secured.SLinkButton.AccessCheckFailedText">
            <summary>
            Gets or sets the text to display if an access check fails.
            </summary>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Secured.SLinkButton.AccessCheckFailedTextCSSClass">
            <summary>
            Gets or sets the style to apply to the text if displayed if the access check fails and the display type is 'Text'.
            </summary>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Secured.SLinkButton.OperationNames">
            <summary>
            Member Property - OperationNames
            </summary>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Secured.SLinkButton.IsSecured">
            <summary>
            Member Property - IsSecured
            </summary>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Secured.SLinkButton.AccessCheckType">
            <summary>
            Member Property - AccessCheckType
            </summary>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Secured.SLinkButton.DisplayType">
            <summary>
            Member Property - m_DisplayType
            </summary>
        </member>
        <member name="T:Jenzabar.Portal.Framework.Web.UI.Controls.PortalImage">
            <summary>
            A control to display images within the portal
            </summary>
            <remarks>
            The control allows for a base path to be set so that all images paths are
            resolved relative to the base path
            </remarks>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.PortalImage.OnPreRender(System.EventArgs)">
            <summary>
            Overrides the OnPreRender event of the base control
            </summary>
            <param name="e">EventArgs</param>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.PortalImage.SaveViewState">
            <summary>
            Overrides SaveViewState method in base class
            </summary>
            <returns>Object representing the viewstate that was saved</returns>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.PortalImage.LoadViewState(System.Object)">
            <summary>
            Overrides LoadViewState method in base class
            </summary>
            <returns>Object representing the viewstate to load</returns>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.PortalImage.BasePath">
            <summary>
            Gets or sets the path to prepend to the image URL
            </summary>
            <remarks>
            This path is relative to the web application root
            The "~" character can be used to signify the web application root
            </remarks>
            <example>
            "~/Applications/MyApplication/Portlets/MyPortlet/Images"
            </example>
        </member>
        <member name="T:Jenzabar.Portal.Framework.Web.UI.ICssProvider">
            <summary>
            The ICssProvider interface indicates that a Portlet requires a specific CSS file for it's layout, and provides methods and properties to access this file.
            </summary>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.ICssProvider.CssClass">
            <summary>
            Gets the class name to be used for the div containing the portlet. This will scope the any css used within this portlet to only th portlet implementing this interface.
            </summary>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.ICssProvider.CssFileLocation">
            <summary>
            The location of the css file required for this control.
            </summary>
        </member>
        <member name="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.MultiConditionForm">
            <summary>
            MultiConditionForm is used by the UITypeEditor <see cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.MultiConditionTypeEditor"/>.
            </summary>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.MultiConditionForm.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.MultiConditionForm.fConditions">
            <summary>
            Storage for <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.MultiConditionForm.Conditions"/>.
            </summary>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.MultiConditionForm.fIsOpen">
            <summary>
            Creator of this form should not open a new instance when fIsOpen is true.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.MultiConditionForm.#ctor(Jenzabar.Portal.Framework.Web.UI.Controls.Validation.ConditionCollection,System.String)">
            <summary>
            Constructor
            </summary>
            <param name="pConditions">The root condiitons collection - the data for this form.</param>
            <param name="pTopLabel">The label that appears above the tree view and describes
            the parent condition from its Describe() method.</param>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.MultiConditionForm.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.MultiConditionForm.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.MultiConditionForm.MultiConditionForm_Load(System.Object,System.EventArgs)">
            <summary>
            The OnLoad event handler.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.MultiConditionForm.FillInTreeView">
            <summary>
            Clears the tree then adds tree nodes using Condition.Conditions.
            Any condition based on BaseMultiCondition becomes a parent node. All others are child nodes.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.MultiConditionForm.FillInChildren(Jenzabar.Portal.Framework.Web.UI.Controls.Validation.ConditionCollection,System.Windows.Forms.TreeNodeCollection)">
            <summary>
            Recursive function that adds nodes to the tree.
            </summary>
            <param name="pConditions">The collection of conditions being added as a tree node.</param>
            <param name="pNodes">The node to add these conditions.</param>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.MultiConditionForm.AddBtn_Click(System.Object,System.EventArgs)">
            <summary>
            Event handler for the Add Button. Opens the <see cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.PickConditionForm"/>
            to get a new condition instance. Then it opens the <see cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.PropertyGridForm"/>
            to let the user assign its properties. If both return DialogResult.OK, it adds
            the condition to the form using <see cref="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.MultiConditionForm.AddCondition(Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseCondition)"/>.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.MultiConditionForm.AddCondition(Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseCondition)">
            <summary>
            AddCondition adds pCondition to the end of the currently selected node's list
            or if its a BaseMultiCondition selected, to the end if its child list.
            </summary>
            <param name="pCondition">The condition to add.</param>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.MultiConditionForm.CreateTreeNode(Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseCondition)">
            <summary>
            Creates the MCTreeNode with the Condition and returns it.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.MultiConditionForm.EditBtn_Click(System.Object,System.EventArgs)">
            <summary>
            Event handler for the Edit button. Opens the <see cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.PropertyGridForm"/>
            for the condition on the selected node.
            </summary>
            <remarks>
            Edits are applied to a cloned version of the Condition. If the user selects OK,
            the clone replaces the original.
            </remarks>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.MultiConditionForm.RemoveBtn_Click(System.Object,System.EventArgs)">
            <summary>
            Event handler for the Remove Button. Prompts to confirm. Then removes the
            selected node and its associated Condition.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.MultiConditionForm.treeView1_BeforeCollapse(System.Object,System.Windows.Forms.TreeViewCancelEventArgs)">
            <summary>
            Prevent the Collapse command (effectively doesn't allow double-clicking to collapse
            so we can use double-click to invoke the Edit button.)
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.MultiConditionForm.MultiConditionForm_Closed(System.Object,System.EventArgs)">
            <summary>
            Event handler for OnClosed event.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.MultiConditionForm.MoveToBtn_Click(System.Object,System.EventArgs)">
            <summary>
            Event handler for the Move To button. Opens the <see cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.MoveConditionForm"/>.
            If it is OKed, it moves the condition - removing the TreeNode it started at and adding
            a new one at the destination.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.MultiConditionForm.treeView1_AfterSelect(System.Object,System.Windows.Forms.TreeViewEventArgs)">
            <summary>
            Event handler for TreeView AfterSelect. Updates the buttons based on whether or
            not there is a selection.
            </summary>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.MultiConditionForm.Conditions">
            <summary>
            The root Conditions collection to edit.
            </summary>
        </member>
        <member name="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.MCTreeNode">
            <summary>
            Specialized version of System.Windows.Forms.TreeNode that 
            keeps a Condition with the node. It also establishes an alternative
            color for nodes that contain BaseMultiCondition.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.MCTreeNode.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.MCTreeNode.fCondition">
            <summary>
            Storage for Condition.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.MCTreeNode.UpdateAppearance">
            <summary>
            Applies the Condition to the Text and other appearance elements.
            </summary>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.MCTreeNode.Condition">
            <summary>
            When changed, it also calls UpdateAppearance.
            </summary>
        </member>
        <member name="T:Jenzabar.Portal.Framework.Web.UI.Controls.PortletFeedback">
            <summary>
            Provides rendering support for any feedback that the portlets need to provide to the users to 
            confirm that an action has succedded, or inform them that there was an error.
            </summary>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.PortletFeedback.Text">
            <summary>
            Gets and sets the text for the feedback.
            </summary>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.PortletFeedback.Type">
            <summary>
            Gets and sets the type of feedback.
            </summary>
        </member>
        <member name="T:Jenzabar.Portal.Framework.Web.UI.ObjectSettingsCollection">
            <summary>
            A collection of settings for a particular object;
            Base class for other SettingsCollection classes
            
            The collection class will automatically return the defaults for a setting
            if no values are returned from the data source
            </summary>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Web.UI.ObjectSettingsCollection.m_Object">
            <summary>
            proterty stores object (Portlet or Application)
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.ObjectSettingsCollection.#ctor(System.Object)">
            <summary>
            Constructs a setting collection
            </summary>
            <param name="obj">Base object for collection (Portlet, Application etc)</param>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.ObjectSettingsCollection.GetStringValue(System.String)">
            <summary>
            Gets the setting value as a string
            </summary>
            <param name="settingName">The setting's name index</param>
            <returns>The string value of the setting</returns>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.ObjectSettingsCollection.GetIntValue(System.String)">
            <summary>
            Gets the setting value as an int
            </summary>
            <param name="settingName">The setting's name index</param>
            <returns>The int value of the setting</returns>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.ObjectSettingsCollection.GetBoolValue(System.String)">
            <summary>
            Gets the setting value as a bool
            </summary>
            <param name="settingName">The setting's name index</param>
            <returns>True if the value of the setting is not the empty string</returns>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.ObjectSettingsCollection.GetBoolValue(System.String,System.String)">
            <summary>
            Gets the setting value as a bool
            </summary>
            <param name="settingName">The setting's name index</param>
            <param name="correctValue">The value to which to compare the setting's string value</param>
            <returns>True if the value of the setting is equal to the correctValue parameter (not case-sensitive)</returns>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.ObjectSettingsCollection.GetBoolValue(System.String,System.String,System.Boolean)">
            <summary>
            Gets the setting value as a bool
            </summary>
            <param name="settingName">The setting's name index</param>
            <param name="correctValue">The value to which to compare the setting's string value</param>
            <param name="isCaseSensitive">If true, the string comparison returns false if the cases don't match</param>
            <returns>True if the value of the setting is equal to the correctValue parameter</returns>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.ObjectSettingsCollection.GetValue(System.String,System.Boolean)">
            <summary>
            function to be overriden in child objects
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.ObjectSettingsCollection.SetValue(System.String,System.Boolean,Jenzabar.Portal.Framework.NameValueDataSource[])">
            <summary>
            Need to be overriden!
            </summary>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.ObjectSettingsCollection.Item(System.String)">
            <summary>
            Gets or sets the value of a setting by its name
            </summary>
            <remarks>
            If the setting has not be set by the user, the defaults specified in the meta control attribute will be returned
            </remarks>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.ObjectSettingsCollection.Item(System.String,System.Boolean)">
            <summary>
            Gets or sets the value of a setting by its name
            </summary>
            <remarks>
            Specifying true for noCache will force the setting value to be obtained from the data source instead of the cache
            
            If the setting has not be set by the user, the defaults specified in the meta control attribute will be returned
            </remarks>
        </member>
        <member name="T:Jenzabar.Portal.Framework.Web.UI.Controls.MyInfoPopup">
            <summary>
            Provides ability to display users name, action link and link to a popup of their information.
            </summary>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Web.UI.Controls.MyInfoPopup._user">
            <summary>
            Member variable - _user
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.MyInfoPopup.Render(System.Web.UI.HtmlTextWriter)">
            <summary>
            Overrides the base control's Render method without calling to the base render.
            </summary>
            <param name="writer">The HtmlTextWriter to render the control to</param>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.MyInfoPopup.User">
            <summary>
            Gets and sets the <see cref="T:Jenzabar.Portal.Framework.PortalUser"/> to be displayed by this control
            </summary>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.MyInfoPopup.PreviewMode">
            <summary>
            Sets a bool as to whether this control is a preview button
            The only difference being that it displays preview text instead of
            the user's email address
            </summary>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.MyInfoPopup.NameFormat">
            <summary>
            Gets and sets the format the users name will be displayed in.
            </summary>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.MyInfoPopup.UserID">
            <summary>
            Gets and sets the ID for the user that should be displayed by this control as a string in either ADAM DN format, or GUID format.
            </summary>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.MyInfoPopup.UserObjectId">
            <summary>
            Gets and sets the <see cref="T:Jenzabar.Portal.Framework.Data.ObjectIdentifier"/> that uniquly identifies the user that this will display info for.
            </summary>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.MyInfoPopup.UserHostId">
            <summary>
            Gets and sets the <see cref="P:Jenzabar.Portal.Framework.PortalUser.HostID"/> that uniquly identifies the user that this will display info for.
            </summary>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.MyInfoPopup.ClickableName">
            <summary>
            True to render the name of the user (or preview text if in preview mode) as a link that will raise a click even on the server.
            </summary>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.MyInfoPopup.ERPDisplayName">
            <summary>
            Gets and sets the ERP Display Name in the event the User is null
            </summary>
        </member>
        <member name="T:Jenzabar.Portal.Framework.Web.UI.Controls.MyInfoPopupColumn">
            <summary>
            A column for use in the Grouped Grid that displays users names, and a link to their MyInfo Popup.
            </summary>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.MyInfoPopupColumn.HeaderTextKey">
            <summary>
            Gets and sets the key to use to look up the globalized text for this controls header text.
            </summary>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.MyInfoPopupColumn.FooterTextKey">
            <summary>
            Gets and sets the key to use to look up the globalized text for this controls footer text.
            </summary>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.MyInfoPopupColumn.DataUserField">
            <summary>
            Gets and sets the name of the field or expression that will be evaluated on the data item to get the PortalUser that the my info popup will be for
            </summary>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.MyInfoPopupColumn.DataHostIDField">
            <summary>
            Gets and sets the name of the field or expression that will be evaluated on the data item to get the PortalUser that the my info popup will be for
            </summary>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.MyInfoPopupColumn.DataUserIDField">
            <summary>
            Gets and sets the name of the field or expression that will be evaluated on the data item to get the PortalUser that the my info popup will be for
            </summary>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.MyInfoPopupColumn.DataERPDisplayName">
            <summary>
            Gets and sets the ERP display name to use in the event the User is not found
            </summary>
        </member>
        <member name="T:Jenzabar.Portal.Framework.Web.UI.Controls.Secured.SButton">
            <summary>
            A secured, operation aware version of the Button control
            </summary>
            <remarks>
            Secured controls can be used to make interface elements aware of whether or not
            a user has access to a particular operation assigned to the control
            
            If the user does not have access to the operation(s) assigned to the control, the
            control can be set to render differently (or not at all) to prevent the user from
            using the control to perform the secured operation
            
            In addition, events normally raised by the control will not be raised if the control
            detects that the access check has failed. This prevents users from "spoofing" access
            by simulating a postback.
            </remarks>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Web.UI.Controls.Secured.SButton.m_OperationNames">
            <summary>
            Member variable m_OperationNames
            </summary>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Web.UI.Controls.Secured.SButton.m_IsSecured">
            <summary>
            Member variable m_IsSecured
            </summary>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Web.UI.Controls.Secured.SButton.m_AccessCheckType">
            <summary>
            Member variable AccessCheckType
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Secured.SButton.#ctor">
            <summary>
            Constructor for the SButton class
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Secured.SButton.OnClick(System.EventArgs)">
            <summary>
            Overrides the base onclick event for this button
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Secured.SButton.OnCommand(System.Web.UI.WebControls.CommandEventArgs)">
            <summary>
            Overrides the base OnCommand event for this button
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Secured.SButton.OnPreRender(System.EventArgs)">
            <summary>
            Overrides the OnPreRender event for this button
            </summary>
            <param name="e">Event Args</param>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Secured.SButton.SecureControl">
            <summary>
            Used internally to secure the control
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Secured.SButton.Render(System.Web.UI.HtmlTextWriter)">
            <summary>
            Overrides the Render event for this button
            </summary>
            <param name="writer">The HTMTextWriter to user to render this control</param>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Secured.SButton.AccessCheckFailedText">
            <summary>
            Gets or sets the text to display if an access check fails.
            </summary>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Secured.SButton.AccessCheckFailedTextCSSClass">
            <summary>
            Gets or sets the style to apply to the text if displayed if the access check fails and the display type is 'Text'.
            </summary>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Secured.SButton.OperationNames">
            <summary>
            Member property - OperationNames
            </summary>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Secured.SButton.IsSecured">
            <summary>
            Member property - IsSecured
            </summary>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Secured.SButton.AccessCheckType">
            <summary>
            Member property - AccessCheckType
            </summary>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Secured.SButton.DisplayType">
            <summary>
            Member property - m_DisplayType
            </summary>
        </member>
        <member name="T:Jenzabar.Portal.Framework.Web.UI.SiteSettingsCollection">
            <summary>
            A collection of settings for a site
            
            The collection class will automatically return the defaults for a setting
            if no values are returned from the data source
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.SiteSettingsCollection.#ctor(System.Object)">
            <summary>
            constructor
            </summary>
            <param name="obj">Application object</param>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.SiteSettingsCollection.GetValue(System.String,System.Boolean)">
            <summary>
            Need to be overriden!
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.SiteSettingsCollection.SetValue(System.String,System.Boolean,Jenzabar.Portal.Framework.NameValueDataSource[])">
            <summary>
            Need to be overriden!
            </summary>
        </member>
        <member name="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.ErrorMessageForm">
            <summary>
            A Windows form used by <see cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.ErrorMessageTypeEditor"/>.
            </summary>
            <remarks>
            <para>Provides a modal dialog box that allows editing the ErrorMessage and
            SummaryErrorMessage properties of <see cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseValidator"/> controls
            through the Properties Editor.</para>
            <para>It supports the token feature of these properties by offering a context
            menu of tokens. When the user selects from the context menu, the token
            is inserted at the current insertion point of the edit box.</para>
            </remarks>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.ErrorMessageForm.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.ErrorMessageForm.fMessageData">
            <summary>
            Storage for <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.ErrorMessageForm.MessageData"/>.
            </summary>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.ErrorMessageForm.fPropertyName">
            <summary>
            PropertyName is the name of the property we are editing.
            Set with Configure()
            </summary>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.ErrorMessageForm.fValidationAction">
            <summary>
            ValidationAction is the BaseValidationAction whose message we are editing.
            It provides a list of tokens.
            </summary>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.ErrorMessageForm.fTokens">
            <summary>
            fTokens holds the list of tokens retrieved from the fValidationAction.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.ErrorMessageForm.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.ErrorMessageForm.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.ErrorMessageForm.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.ErrorMessageForm.Configure(System.String,Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseValidatorAction)">
            <summary>
            The ErrorMessageTypeEditor must call this prior to calling the Show method.
            </summary>
            <remarks>
            Supplies the form with two required pieces of data: the property name and the
            <see cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseValidatorAction"/> instance whose properties
            are being edited. The BaseValidatorAction provides tokens for the context menu
            with its DescribeTokens method.
            </remarks>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.ErrorMessageForm.UndoMI_Click(System.Object,System.EventArgs)">
            <summary>
            Context menu command handler for Undo.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.ErrorMessageForm.CutMI_Click(System.Object,System.EventArgs)">
            <summary>
            Context menu command handler for Cut.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.ErrorMessageForm.CopyMI_Click(System.Object,System.EventArgs)">
            <summary>
            Context menu command handler for Copy.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.ErrorMessageForm.PasteMI_Click(System.Object,System.EventArgs)">
            <summary>
            Context menu command handler for Paste.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.ErrorMessageForm.DeleteMI_Click(System.Object,System.EventArgs)">
            <summary>
            Context menu command handler for Delete.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.ErrorMessageForm.SelectAllMI_Click(System.Object,System.EventArgs)">
            <summary>
            Context menu command handler for Select All.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.ErrorMessageForm.ErrorMessageForm_Load(System.Object,System.EventArgs)">
            <summary>
            Load event handler.
            </summary>
            <remarks>
            <para>Transfers data into the elements of the page:</para>
            <list type="bullet">
            <item><description>Assign MessageData to the textbox.</description></item>
            <item><description>fPropertyName to the window's Title bar.</description></item>
            <item><description>Appends the tokens into the context menu, establishing the event
            handler TokenMI_Click for each.</description></item>
            </list>
            </remarks>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.ErrorMessageForm.TokenMI_Click(System.Object,System.EventArgs)">
            <summary>
            Event handler for each Token context menu command.
            </summary>
            <remarks>
            <para>Based on the position of the selected item, it locates the text
            for the selected token from the fTokens collection and assigns
            the text at the current selection point.</para>
            </remarks>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.ErrorMessageForm.OKBtn_Click(System.Object,System.EventArgs)">
            <summary>
            Event handler for the OK Button. Transfers the text box data into 
            the MessageData property.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.ErrorMessageForm.contextMenu1_Popup(System.Object,System.EventArgs)">
            <summary>
            Event handler for the context menu on popup. Does nothing.
            </summary>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.ErrorMessageForm.MessageData">
            <summary>
            MessageData is the string we are editing.
            Set with Configure()
            </summary>
        </member>
        <member name="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.RegExEditorForm">
            <summary>
            RegExEditorForm is used by the UITypeEditor <see cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.RegExpressionTypeEditor"/>.
            </summary>
            <remarks>
            It is the main form for editing the Expression property
            on <see cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.RegexCondition"/> and
            <see cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.RegexValidator"/>. It provides
            extensive tools for editing regular expressions, including the ability
            to test, save and retrieve expressions.
            </remarks>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.RegExEditorForm.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.RegExEditorForm.fExpression">
            <summary>
            fExpression is the data value passed between the UITypeEditor and the form.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.RegExEditorForm.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.RegExEditorForm.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.RegExEditorForm.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.RegExEditorForm.RegExEditorForm_Load(System.Object,System.EventArgs)">
            <summary>
            OnLoad event handler. Sets up the form.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.RegExEditorForm.UpdateName">
            <summary>
            Assign the NameLabel control. Compare the value of ExpressionTextBox
            to the list in Globals.Config.RegExPatterns. If there is a match,
            show the name. Otherwise hide this field.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.RegExEditorForm.OKBtn_Click(System.Object,System.EventArgs)">
            <summary>
            OK Button event handler. Assigns ExpressionTextBox.Text to fExpression.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.RegExEditorForm.TestBtn_Click(System.Object,System.EventArgs)">
            <summary>
            Test Button event handler. Runs the regular expression in ExpressionTextBox.Text 
            against the text in TestTextBox.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.RegExEditorForm.ExpressionTextBox_TextChanged(System.Object,System.EventArgs)">
            <summary>
            ExpressionTextBox TextChanged event handler.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.RegExEditorForm.ChooseBtn_Click(System.Object,System.EventArgs)">
            <summary>
            Choose button click event handler.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.RegExEditorForm.HelpBtn_Click(System.Object,System.EventArgs)">
            <summary>
            Help (ASP.NET Regex Overview) button click event handler.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.RegExEditorForm.button1_Click(System.Object,System.EventArgs)">
            <summary>
            Button1 (Help RegEx tokens) Click event handler.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.RegExEditorForm.SaveBtn_Click(System.Object,System.EventArgs)">
            <summary>
            Save button click event handler.
            </summary>
        </member>
        <member name="T:Jenzabar.Portal.Framework.Web.UI.Controls.Secured.SImageButton">
            <summary>
            A secured, operation aware version of the ImageButton control
            </summary>
            <remarks>
            Secured controls can be used to make interface elements aware of whether or not
            a user has access to a particular operation assigned to the control
            
            If the user does not have access to the operation(s) assigned to the control, the
            control can be set to render differently (or not at all) to prevent the user from
            using the control to perform the secured operation
            
            In addition, events normally raised by the control will not be raised if the control
            detects that the access check has failed. This prevents users from "spoofing" access
            by simulating a postback.
            </remarks>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Web.UI.Controls.Secured.SImageButton.m_OperationNames">
            <summary>
            Member variable m_OperationNames
            </summary>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Web.UI.Controls.Secured.SImageButton.m_IsSecured">
            <summary>
            Member variable m_IsSecured
            </summary>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Web.UI.Controls.Secured.SImageButton.m_AccessCheckType">
            <summary>
            Member variable AccessCheckType
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Secured.SImageButton.#ctor">
            <summary>
            Constructor for the SImageButton class
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Secured.SImageButton.OnClick(System.Web.UI.ImageClickEventArgs)">
            <summary>
            Overrides OnClick Event of base control
            </summary>
            <param name="e">ImageClickEventArgs</param>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Secured.SImageButton.OnCommand(System.Web.UI.WebControls.CommandEventArgs)">
            <summary>
            Overrides OnCommand Event of base control
            </summary>
            <param name="e">CommandEventArgs</param>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Secured.SImageButton.OnPreRender(System.EventArgs)">
            <summary>
            Overrides the OnPreRender event in base control
            </summary>
            <param name="e">EventArgs</param>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Secured.SImageButton.SecureControl">
            <summary>
            Used internally to secure the control
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Secured.SImageButton.Render(System.Web.UI.HtmlTextWriter)">
            <summary>
            Overrides the Render event in base control
            </summary>
            <param name="writer">HtmlTextWriter to render control with</param>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Secured.SImageButton.AccessCheckFailedText">
            <summary>
            Gets or sets the text to display if an access check fails.
            </summary>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Secured.SImageButton.AccessCheckFailedTextCSSClass">
            <summary>
            Gets or sets the style to apply to the text if displayed if the access check fails and the display type is 'Text'.
            </summary>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Secured.SImageButton.OperationNames">
            <summary>
            Member Property - OperationNames
            </summary>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Secured.SImageButton.IsSecured">
            <summary>
            Member Property - IsSecured
            </summary>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Secured.SImageButton.AccessCheckType">
            <summary>
            Member Property - AccessCheckType
            </summary>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Secured.SImageButton.DisplayType">
            <summary>
            Member Property - m_DisplayType
            </summary>
        </member>
        <member name="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseMultiCondition">
            <summary>
            BaseMultiCondition defines a list of zero or more <seealso cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseCondition"/> 
            objects (including other MultiConditions).
            </summary>
            <remarks>
            <para>Subclasses must define the EvaluateCondition method.</para>
            <para>The <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseMultiCondition.Conditions"/> property holds a
            collection Condition objects.</para>
            <para>The <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseCondition.EvaluateOnClickOrChange"/> 
            property is set to false and hidden from the Properties Editor
            because it isn't used by this class. (Condition objects added to the Conditions collection
            have their own EvaluateOnClickOrChange properties which can be true.)</para>
            <para>See the <b>Developer's Guide</b> for an overview.</para>
            </remarks>
            <seealso cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.MultiCondition"/>
            <seealso cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.CountTrueConditions"/>
        </member>
        <member name="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseCondition">
            <summary>
            BaseCondition is the base class to all Conditions. 
            </summary>
            <remarks>
            <para>While Conditions eventually need 
            to know about field IDs on the page that they are evaluating, this base class is too 
            abstract for that. It introduces client and server side functions that define the concepts 
            of evaluating a Condition.</para>
            <para>The ancestor has already defined methods to hook up client-side code. The 
            <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseCondition.EvalFunctionName"/> 
            property is the client-side evaluation function which returns the Condition's evaluation result.
            Subclasses should override EvalFunctionName.</para>
            <para>Users can provide a substitute EvalFunctionName with 
            <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseCondition.CustomEvalFunctionName"/>.</para>
            <para>See the <b>Developer's Guide</b> for details and examples.</para>
            </remarks>
        </member>
        <member name="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseCA">
            <summary>
            BaseCA is the ancestor to all conditions and actions. It is an abstract class.
            </summary>
            <remarks>
            <para>See the <b><b>Developer's Guide</b></b> for an extensive overview of this class and its subclasses.</para>
            </remarks>
        </member>
        <member name="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.INamingObject">
            <summary>
            INamingObject helps objects consistantly name themselves and retrieve
            names of their parent objects in a tree.
            </summary>
            <remarks>
            <para>It is designed to assist in exception handling so the user knows the exact
            element that has an invalid value.</para>
            </remarks>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.INamingObject.GetName">
            <summary>
            GetName returns a string describing the name of this object and any parent.
            </summary>
            <remarks>
            <para>It should use this logic:</para>
            <code>
            string vName = "";
            if (ParentNamingObject != null)
               vName = ((INamingObject)ParentNamingObject).GetName() + ".";
            vName += [this object's name]
            </code>
            <para>This object's name should usually be the class. For Controls, it should be the Control ID.</para>
            </remarks>
            <returns>The name describing the object.</returns>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.INamingObject.ParentNamingObject">
            <summary>
            ParentNamingObject identifies another class that implements INamingObject which is the parent
            to this object in a tree. It can return null indicating no parent.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseCA.#ctor">
            <summary>
            Constructor with no parameters. It gets the Owner when the instance is attached to
            a class with an owner or the owner control itself.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseCA.#ctor(System.Web.UI.Control)">
            <summary>
            Constructor that takes a reference to the owner control.
            </summary>
            <param name="pOwner">Reference to the owner control</param>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseCA.fEnabled">
            <summary>
            Storage for <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseCA.Enabled"/>
            </summary>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseCA.fOwner">
            <summary>
            Storage for <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseCA.Owner"/>.
            </summary>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseCA.fParentNamingObject">
            <summary>
            Storage for <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseCA.ParentNamingObject"/>.
            </summary>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseCA.fParentCallsThis">
            <summary>
            Storage for <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseCA.ParentCallsThis"/>.
            </summary>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseCA.fIsPrepared">
            <summary>
            fIsPrepared tells the <see cref="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseCA.Prepare"/>
            method whether its been run or not.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseCA.ClearPrepared">
            <summary>
            ClearPrepared can be called after <see cref="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseCA.Prepare"/> to allow a future call to 
            run Prepare fully.
            </summary>
            <remarks>
            Used by Validator classes to run their Validate
            method which needs to prepare but can happen before all properties are established.
            </remarks>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseCA.SetOwner(System.Web.UI.Control)">
            <summary>
            SetOwner assigns a value to Owner. 
            </summary>
            <remarks>
            Subclass when this control owns other objects which need
            their owner assigned. For example, the BaseMultiCondition needs to set the owner on
            each child condition.
            </remarks>
            <param name="pControl">The control to assign to the Owner property. Can be null.</param>
            <exception cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.VAMException">When the Owner is already assigned unless the value passed in is null.</exception>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseCA.Prepare">
            <summary>
            Prepare allows the class to initialize itself once all properties are in order.
            </summary>
            <remarks>
            <para>Designed to be called multiple times. It only runs the first time unless you call 
            <see cref="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseCA.ClearPrepared"/>.</para>
            <para>Subclasses should override <see cref="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseCA.PrepareBody"/> to take the actual action.</para>
            </remarks>
            <exception cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.VAMException">When Owner is null.</exception>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseCA.PrepareBody">
            <summary>
            PrepareBody is called within <see cref="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseCA.Prepare"/> 
            to handle the actual preparation.
            Subclasses often override it.
            </summary>
            <remarks>
            This class does nothing within this method. Subclasses are expected to define the functionality.
            </remarks>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseCA.DefineJavaScript(Jenzabar.Portal.Framework.Web.UI.Controls.Validation.VAMPage)">
            <summary>
            DefineJavaScript creates whatever JavaScript that is used by this condition or action. 
            It should define JavaScript functions or load a file.
            </summary>
            <remarks>
            <para>It is passed the current VAMPage class which has two methods that make registration easy:</para>
            <para>- Call <see cref="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.VAMPage.IsScriptBlockRegistered(System.String)">VAMPage.IsScriptBlockRegistered</see> before 
            registering to determine if the script was
              written by another instance of this class.</para>
            <para>- If its not registered, call <see cref="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.VAMPage.RegisterScriptBlock(System.String,System.String)">VAMPage.RegisterScriptBlock</see>
               or <see cref="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.VAMPage.RegisterScriptFile(System.String,System.String)">VAMPage.RegisterScriptFile</see>.</para>
            </remarks>
            <param name="pPage">Current VAMPage object.</param>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseCA.CreateClientSideObject(System.Text.StringBuilder)">
            <summary>
            CreateClientSideObject builds the JavaScript for the client-side object that
            represents this server-side object.
            </summary>
            <remarks>
            <para>It creates the outer structure of the object definition with Enabled, InitFnc and MainFnc
            properties. It calls <see cref="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseCA.DefineProperties(System.Text.StringBuilder)"/> to allow subclasses
            to add their own properties.</para>
            <para>The string should use the Object Initializer format: 
            <a href="http://devedge.netscape.com/library/manuals/2000/javascript/1.5/guide/obj.html#1008302">
            http://devedge.netscape.com/library/manuals/2000/javascript/1.5/guide/obj.html#1008302</a></para>
            <para>{property1:value1, property2:value2,..., propertyN:valueN}</para>
            </remarks>
            <param name="pJavaScript">The stringbuilder to which the client-side representation 
            of this object will be appended.</param>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseCA.RegisterMainFunction(System.Text.StringBuilder)">
            <summary>
            RegisterMainFunction allows subclasses to define their client side main function.
            </summary>
            <remarks>
            BaseAction and BaseCondition each subclass this to define their own unique main function.
            </remarks>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseCA.fFirstProperty">
            <summary>
            fFirstProperty is used by <see cref="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseCA.AddComma(System.Text.StringBuilder)"/> 
            to avoid writing a comma at the beginning of the properties list.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseCA.AddComma(System.Text.StringBuilder)">
            <summary>
            AddComma should be called prior to every property being added to the client-side
            representation of the condition or action object through its <see cref="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseCA.DefineProperties(System.Text.StringBuilder)"/>
            method.
            It will add the comma unless its the first property (determined by <see cref="F:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseCA.fFirstProperty"/>).
            </summary>
            <remarks>
            This method is called internally from 
            <see cref="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseCA.RegisterValue(System.Text.StringBuilder,System.String,System.String)"/>, 
            <see cref="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseCA.RegisterMethod(System.Text.StringBuilder,System.String,System.String)"/>,
            <see cref="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseCA.RegisterControlID(System.Text.StringBuilder,System.String,System.String)"/>, 
            <see cref="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseCondition.RegisterComparer(System.Text.StringBuilder)">BaseCondition.RegisterComparer</see>, 
            <see cref="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseCondition.RegisterOperator(System.Text.StringBuilder,Jenzabar.Portal.Framework.Web.UI.Controls.Validation.ConditionOperator)">BaseCondition.RegisterOperator</see>, and 
            <see cref="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseCA.RegisterValueFromCode(System.Text.StringBuilder,System.String,System.String)"/>.
            You only call it if you add text to the Stringbuilder within 
            <see cref="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseCA.DefineProperties(System.Text.StringBuilder)"/> without using these other functions.
            </remarks>
            <param name="pJavaScript">The representation of the client-side object. Add the comma to the end.</param>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseCA.RegisterControlID(System.Text.StringBuilder,System.String,System.String)">
            <summary>
            RegisterControlID adds a new property to the client-side VAM object where the value is a ClientID 
            to a control on the page.
            </summary>
            <remarks>
            <para>The pJavaScript property gets the following text appended:</para>
            <para>[,]PropertyName: 'ClientID'</para>
            <para>Call this method from your overridden <see cref="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseCA.DefineProperties(System.Text.StringBuilder)"/> 
            method.</para>
            </remarks>
            <param name="pJavaScript">Append the property to this stringbuilder.</param>
            <param name="pName">Defines the name of the property to add to the client side VAM object.</param>
            <param name="pID">A Control.ID. It is converted into the ClientID.It must be a control 
            on the current or any parent NamingContainer of Owner or an exception is thrown.
            </param>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseCA.RegisterValue(System.Text.StringBuilder,System.String,System.String)">
            <summary>
            RegisterValue adds a new property to the client-side VAM object where the value is a string.
            </summary>
            <remarks>
            <para>RegisterValue is an overloaded method.</para>
            <para>The pJavaScript property gets the following text appended:</para>
            <para>[,]PropertyName: 'Value'</para>
            <para>Call this method from your overridden <see cref="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseCA.DefineProperties(System.Text.StringBuilder)"/> 
            method.</para>
            </remarks>
            <param name="pJavaScript">Append the property to this stringbuilder.</param>
            <param name="pName">Defines the name of the property to add to the client side VAM object.</param>
            <param name="pValue">The string for the value. </param>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseCA.RegisterValue(System.Text.StringBuilder,System.String,System.Int32)">
            <summary>
            RegisterValue adds a new property to the client-side VAM object where the value is a integer.
            </summary>
            <remarks>
            <para>RegisterValue is an overloaded method.</para>
            <para>The pJavaScript property gets the following text appended:</para>
            <para>[,]PropertyName: integer</para>
            <para>Call this method from your overridden <see cref="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseCA.DefineProperties(System.Text.StringBuilder)"/> 
            method.</para>
            </remarks>
            <param name="pJavaScript">Append the property to this stringbuilder.</param>
            <param name="pName">Defines the name of the property to add to the client side VAM object.</param>
            <param name="pValue">The integer for the value. </param>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseCA.RegisterValue(System.Text.StringBuilder,System.String,System.Boolean)">
            <summary>
            RegisterValue adds a new property to the client-side VAM object where the value is a boolean.
            </summary>
            <remarks>
            <para>RegisterValue is an overloaded method.</para>
            <para>The pJavaScript property gets the following text appended:</para>
            <para>[,]PropertyName: true|false</para>
            <para>Call this method from your overridden <see cref="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseCA.DefineProperties(System.Text.StringBuilder)"/> 
            method.</para>
            </remarks>
            <param name="pJavaScript">Append the property to this stringbuilder.</param>
            <param name="pName">Defines the name of the property to add to the client side VAM object.</param>
            <param name="pValue">The boolean for the value. </param>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseCA.RegisterValue(System.Text.StringBuilder,System.String,System.Double)">
            <summary>
            RegisterValue adds a new property to the client-side VAM object where the value is a double.
            </summary>
            <remarks>
            <para>RegisterValue is an overloaded method.</para>
            <para>The pJavaScript property gets the following text appended:</para>
            <para>[,]PropertyName: double</para>
            <para>Call this method from your overridden <see cref="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseCA.DefineProperties(System.Text.StringBuilder)"/> 
            method.</para>
            </remarks>
            <param name="pJavaScript">Append the property to this stringbuilder.</param>
            <param name="pName">Defines the name of the property to add to the client side VAM object.</param>
            <param name="pValue">The double for the value. </param>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseCA.RegisterMethod(System.Text.StringBuilder,System.String,System.String)">
            <summary>
            RegisterMethod adds a new property to the client-side VAM object where the value is a method.
            </summary>
            <remarks>
            <para>The pJavaScript property gets the following text appended:</para>
            <para>[,]PropertyName: methodname</para>
            <para>Call this method from your overridden <see cref="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseCA.DefineProperties(System.Text.StringBuilder)"/> 
            method.</para>
            </remarks>
            <param name="pJavaScript">Append the property to this stringbuilder.</param>
            <param name="pName">Defines the name of the property to add to the client side VAM object.</param>
            <param name="pMethodName">The method name.</param>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseCA.RegisterValueFromCode(System.Text.StringBuilder,System.String,System.String)">
            <summary>
            RegisterValueFromCode adds a new property to the client-side VAM object where the value is 
            determined by the JavaScript code you supply. 
            </summary>
            <remarks>
            <para>The code is executed on the 
            client side and expects a returned result which is assigned to the property.
            Use this to define arrays, other JavaScript objects (like Dates) and to call functions 
            that return results.</para>
            <para>The pJavaScript property gets the following text appended:</para>
            <para>[,]PropertyName: script</para>
            <para>Call this method from your overridden <see cref="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseCA.DefineProperties(System.Text.StringBuilder)"/> 
            method.</para>
            </remarks>
            <param name="pJavaScript">Append the property to this stringbuilder.</param>
            <param name="pName">Defines the name of the property to add to the client side VAM object.</param>
            <param name="pScript">The JavaScript code.</param>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseCA.DefineProperties(System.Text.StringBuilder)">
            <summary>
            DefineProperties is called by <see cref="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseCA.CreateClientSideObject(System.Text.StringBuilder)"/> 
            to allow subclasses to extend 
            the client-side VAM object with additional fields.
            </summary>
            <remarks>
            <para>The client-side Initialization Function and Main Function usually need the properties
            defined on subclasses to operate. Use this method to add those properties.
            </para>
            <para>Use the following support methods to insert a property or method into
            the client-side VAM object:</para>
            <list type="bullet">
            <item>
            <description><see cref="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseCA.RegisterValue(System.Text.StringBuilder,System.String,System.String)"/> for integers, strings, booleans,
            and doubles.</description>
            </item>
            <item>
            <description><see cref="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseCA.RegisterMethod(System.Text.StringBuilder,System.String,System.String)"/> for method names.</description>
            </item>
            <item>
            <description><see cref="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseCA.RegisterControlID(System.Text.StringBuilder,System.String,System.String)"/> for converting a control reference
            into its ClientID.</description>
            </item>
            <item>
            <description><see cref="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseCA.RegisterValueFromCode(System.Text.StringBuilder,System.String,System.String)"/> for using JavaScript code
            to create the value such as 'new Date()'.</description>
            </item>
            </list>
            <para>Commas a required before each property. This is done automatically with all of the above
            Register methods. Otherwise, you must call <see cref="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseCA.AddComma(System.Text.StringBuilder)"/> 
            before adding your text to the stringbuilder.</para>
            <para>BaseCA does nothing in this method.</para>
            </remarks>
            <param name="pJavaScript">Append your properties to this stringbuilder.</param>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseCA.ValidateProperties">
            <summary>
            ValidateProperties is where the object should review its user-set properties and throw
            an Exception when they are illegal.
            </summary>
            <remarks>
            <para>Called from <see cref="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseAction.PrepareBody">BaseAction.PrepareBody</see>.</para>
            <para>BaseCA does nothing in this method.</para>
            <para>VAM supplies the <see cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.VAMException"/> class for throwing exceptions.
            You can also throw <see cref="T:System.ArgumentException"/>.</para>
            </remarks>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseCA.CanEnableClientScript">
            <summary>
            Determines if client-side scripts should be generated for this object.
            </summary>
            <remarks>
            <para>This method only tests <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.TrueBrowser.ReliableScripting">TrueBrowser.ReliableScripting</see>.
            Subclasses may have reasons to disable it due to settings
            that don't make the javascript valid, such as a missing property, or introduce
            a property that lets the user disable scripting.</para>
            </remarks>
            <returns>True when scripting should be generated; false if not.</returns>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseCA.GetName">
            <summary>
            GetName returns a descriptive name for this object and any parents
            in the form:
            [Parentname].thisname.
            It goes through all Parents in the tree to build a complete name like this:
            RequiredTextValidator1.Enabler
            </summary>
            <returns></returns>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseCA.VAMPage">
            <summary>
            VAMPage gets the global VAMPage for this page request.
            </summary>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseCA.Enabled">
            <summary>
            Determines if this condition or action object is used on the page or not. When true, its available for use.
            </summary>
            <value>
            <para>Users can turn off an action or condition by setting this to false.</para>
            <para>It defaults to true.</para>
            </value>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseCA.InitFunctionName">
            <summary>
            Gets the name of a JavaScript function used to initialize the client-side
            representation of this object.
            </summary>
            <value>
            <para>When blank, there is no client-side initialization function to run.</para>
            <para>If defined, it will be assigned as the InitFnc method
            in the client-side representation of this object.</para>
            <para>Override this property to return your function name.</para>
            <para>Use it to further 
            setup this condition or action, possibly taking an immediate action.
            It should hook up any controls' onchange or onclick events using VAM_HookupControl()
            The Action version of this function differs from the Condition version.</para>
            <para><b>Action</b>:</para> 
              <para>It takes one parameter, the client-side VAM Action object. It returns nothing.</para>
              <para>Use to establish properties including defaults
              from those not supplied because they are at their default values and we don't want
              to expand the size of the Javascript unnecessarily. See the <b>Developer's Guide</b> for details and example.</para>
            <para><b>Condition</b>:</para>
              <para>It takes two parameters, the client-side VAM Condition object and client-side
              VAM Action object. It returns nothing.</para>
              <para>Use to establish properties and call VAM_HookupControl() on each field that 
              will fire the action onchange or onclick events. See the <b>Developer's Guide</b> for details and example.</para>
            </value>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseCA.Owner">
            <summary>
            Owner is the owner control or naming container control from which
            this BaseCA can search for other controls (Globals.FindID)
            or enhance (ValidatorAction adding its HTML to the ValidatorControl.)
            </summary>
            <value>
            It can be assigned by the constructor, if known at the time. If not,
            assign here before the Prepare method is called. Exceptions are thrown
            from Prepare when Owner is null.
            </value>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseCA.ParentNamingObject">
            <summary>
            ParentNamingObject is the class supporting that contains this one.
            It can be null. Its used by INamingObject.GetName to return parent object names.
            </summary>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseCA.ParentCallsThis">
            <summary>
            ParentCallsThis is a name for this object as seen by the ParentNamingObject. Its usually
            the property name containing the object. For example, "Enabler".
            When "", GetName() will use the classtype.
            The ParentNamingObject should assign this when the object is attached.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseCondition.#ctor">
            <summary>
            Constructor with no parameters. It gets the Owner when the instance is attached to
            a class with an owner or the owner control itself.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseCondition.#ctor(System.Web.UI.Control)">
            <summary>
            Constructor that takes a reference to the owner control.
            </summary>
            <param name="pOwner">Reference to the owner control</param>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseCondition.fName">
            <summary>
            Storage for <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseCondition.Name"/>.
            </summary>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseCondition.fEvaluateOnClickOrChange">
            <summary>
            Storage for <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseCondition.EvaluateOnClickOrChange"/>.
            </summary>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseCondition.fNotCondition">
            <summary>
            Storage for <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseCondition.NotCondition"/>.
            </summary>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseCondition.ServerCondition">
            <summary>
            ServerCondition is an event handler that allows users to replace
            the built in EvaluateCondition() method with custom code.
            </summary>
            <value>
            <para>Users can instantiate any of the non-base Condition classes and use it.
            The idea is to select one whose properties are useful to your condition.
            Often, the user writes very specific code that knows every condition in the code
            and doesn't need any user configuration settings on the property. They'd use
            CustomCondition, a child class of BaseCondition, because it lacks other properties.</para>
            <para>While this event handler passes pArg as ConditionEventArgs, subclasses of
            BaseCondition may provide a subclass of ConditionEventArgs.</para>
            <list type="bullet">
            <item><description><see cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseOneFieldCondition"/> 
            uses <see cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.ConditionOneFieldEventArgs"/> which provides
              references to the control and its textual value.</description></item>
            <item><description><see cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseTwoFieldCondition"/> 
            uses <see cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.ConditionTwoFieldEventArgs"/> which provides
              references to both controls and their textual values.</description></item>
            </list>
            <para>When writing a ServerCondition function, access all public properties
            directly from the pSourceCondition parameter (after typecasting).</para>
            
            <para>The task of this event handler is to set either the IsMatch or CannotEvaluate
            properties based on what is detected from fields on the page.</para>
            </value>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseCondition.fCustomEvalFunctionName">
            <summary>
            Storage for <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseCondition.CustomEvalFunctionName"/>.
            </summary>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseCondition.fOverrideClientSideEvaluation">
            <summary>
            Storage for <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseCondition.OverrideClientSideEvaluation"/>.
            </summary>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseCondition.fVAMTypeConverter">
            <summary>
            Storage for <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseCondition.VAMTypeConverter"/>.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseCondition.GetVAMTypeConverter">
            <summary>
            GetVAMTypeConverter creates the <see cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.VAMTypeConverter"/> used by this condition.
            </summary>
            <remarks>
            <para>Only certain conditions support VAMTypeConverters. Those that have a DataType
            property always support them. Others can too.</para>
            <para>Any BaseCondition that implements IDataTypeProperty automatically creates
            a VAMTypeConverter here, using <see cref="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseCondition.GetVAMTypeConverterByName(System.String,System.String)"/>.</para>
            <para>Classes that do not support IDataTypeProperty should subclass.</para>
            <para>Return null when the class doesn't support VAMTypeConverters.</para>
            <para>Does not get called when fVAMTypeConverter is already assigned.</para>
            </remarks>
            <returns>A new instance of a VAMTypeConverter when the condition implements
            <see cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.IDataTypeProperty"/> and null otherwise.</returns>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseCondition.fTrim">
            <summary>
            Storage for <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseCondition.Trim"/>.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseCondition.PrepareBody">
            <summary>
            Initializes VAMTypeConverter.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseCondition.Evaluate">
            <summary>
            Evaluate is the master method to evaluating the condition. 
            </summary>
            <remarks>
            <para>It should be called
            after first checking <see cref="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseCondition.CanEvaluate"/>. 
            (It throws an exception if you call it when it can't eval.)</para>
            <para>It calls <see cref="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseCondition.EvaluateCondition"/> or 
            the <see cref="F:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseCondition.ServerCondition"/> then 
            applies the NotCondition property to the result.</para>
            </remarks>
            <returns>True when the condition was successful or could not be evaluated. False
            when the condition failed.</returns>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseCondition.EvaluateCondition">
            <summary>
            Evaluates the condition using the properties of this class to determine the rules of evaluation.
            </summary>
            <remarks>
            <para>This abstract method must be subclassed. It is called from 
            <see cref="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseCondition.Evaluate"/> when 
            <see cref="F:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseCondition.ServerCondition"/> has not been assigned an event handler.</para>
            <para>It returns one of these values:</para>
            <list type="bullet">
            <item><description>1 - success. Data on the page matches the requirements.</description></item>
            <item><description>0 - failed. Data on the page fails to match the requirements.</description></item>
            <item><description>-1 - cannot evaluate. A condition of a field does not permit evaluation.
              Common cases are a blank field (only RequiredTextCondition should evaluate this)
              and unable to convert a datatype.</description></item>
            </list>
            <para>Each Condition defines what causes a 1, 0 or -1 result. 
            For example, the equivalent of a RequiredFieldValidator will determine 
            if the associated text field is empty and return 1 when it is not.</para>
            <para>Use the Owner property to determine the Page and NamingContainer to search for any controls.</para>
            </remarks>
            <returns>1 = success; 0 = failure; -1 = cannot evaluate</returns>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseCondition.CanEvaluate">
            <summary>
            CanEvaluate determines if the object is properly setup to support evaluation.
            It returns true if it can. 
            </summary>
            <remarks>
            <para>The <see cref="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseCondition.Evaluate"/> method should only be 
            called when this returns true.</para>
            <para>This method should only evaluate static values, not the current value of a field.</para>
            <para>Use the Owner property to determine the Page and NamingContainer to search for any controls.</para>
            <para>When not subclassed, it returns the value of <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseCA.Enabled"/>.</para>
            </remarks>
            <returns>True when the Evaluate() method can be run. False when it cannot.</returns>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseCondition.GetConditionEventArgs">
            <summary>
            GetConditionEventArgs creates and initializes the properties of a 
            <see cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.ConditionEventArgs"/> class or a subclass.
            </summary>
            <returns>A instance of the ConditionEventArgs class.</returns>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseCondition.CanEnableClientScript">
            <summary>
            Returns the result from <see cref="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseCondition.CanEvaluate"/>.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseCondition.GetControlID(System.Int32)">
            <summary>
            GetControlID returns a controlID associated with pIndex.
            </summary>
            <remarks>
            <para>Since subclasses define the controlID properties to which the user can use, 
            this provides a generic way of retrieving each of those ControlIDs. 
            The user passes in 0 for the first, 1 for the second, etc. 
            It returns the ControlID or "" if no match.</para>
            </remarks>
            <param name="pIndex">An index or selector for the desired control ID, starting at 0.</param>
            <returns>The controlID found or "" if there is no match or no established ControlID
            for the index.</returns>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseCondition.GetControl(System.Int32)">
            <summary>
            GetControl returns the control instance associated with pIndex.
            </summary>
            <remarks>
            Since subclasses define the control properties to which the user can use, 
            this provides a generic way of retrieving each of those controls. 
            The user passes in 0 for the first, 1 for the second, etc. 
            It returns the control or null if no match.
            </remarks>
            <param name="pIndex">An index or selector for the desired control, starting at 0.</param>
            <returns>The control reference found or null if there is no match or no established Control reference
            for the index.</returns>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseCondition.EnsureControlConnections">
            <summary>
            EnsureControlConnections allows the subclass to instantiate
            its <see cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.ControlConnection"/> properties. 
            </summary>
            <remarks>
            <para>Code it like this:</para>
            <code>
                 base.EnsureControlConnections();
                 if (this.fYourControlConnection == null)
                 {
                    fYourControlConnection = (ControlConnection) new ControlConnectionClass(Owner, params)
                 }
            </code>
            <para>Call this from your property that returns a ControlConnection instance.</para>
            <para><see cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseOneFieldCondition"/> and 
            <see cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseTwoFieldCondition"/> both override this to create
            the ControlConnection class. Any condition subclassed from either of them
            should use their techniques for definiting ControlConnections instead of overriding this.</para>
            </remarks>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseCondition.ConvertToThirdPartyControlConnection">
            <summary>
            ConvertToThirdPartyControlConnection is called when you set VAMTypeConverter and
            the VAMTypeConverter.SupportsThirdPartyControl. This must replace any ControlConnection
            with ThirdPartyControlConnection, while maintaining the same properties.
            </summary>
            <remarks>
            <para>The idea is to provide a different IsValidControl method which calls VAMTypeConverter.TestThirdPartyControl
            instead of running the default ControlConnection.IsValidControl.
            </para>
            <para>This is often subclassed by third party conditions specific to a particular type
            of control.</para>
            </remarks>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseCondition.RegisterMainFunction(System.Text.StringBuilder)">
            <summary>
            Creates the client-side property EvalFnc on the VAM object
            for either the EvalFunctionName or CustomEvalFunctionName.
            When OverrideClientSideEvaluation is not 'No', it uses the function named "VAM_EvalAltCS".
            </summary>
            <param name="pJavaScript">Append the EvalFnc method to this stringbuilder.</param>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseCondition.DefineProperties(System.Text.StringBuilder)">
            <summary>
            Adds these properties and methods to the client-side representation of the condition object:
            NotCond, Trim, HUEvts, ConvVal, OCSMode.
            </summary>
            <remarks>
            <list type="table">
            <listheader>
            <term>Property</term>
            <description>Server side source</description>
            </listheader>
            <item>
            <term>NotCond (boolean)
            </term>
            <description>from NotCondition
            </description>
            </item>
            <item>
            <term>Trim (boolean)
            </term>
            <description>from Trim
            </description>
            </item>
            <item>
            <term>HUEvts (boolean)
            </term>
            <description>from EvaluateOnClickOrChange. Stands for "Hookup events"
            </description>
            </item>
            <item>
            <term>ConvVal (method)
            </term>
            <description>fVAMTypeConverter.CSConvertFieldToValueFunction when not blank
            </description>
            </item>
            <item>
            <term>OCSMode (integer)</term>
            <description>When OverrideClientSideEvaluation is not 'No', Hide = 1, HideOnSubmit = 0.
            On a new page or on post back when its valid, always set it to 1.</description>
            </item>
            </list>
            </remarks>
            <param name="pJavaScript">This is the same string builder used by CreateClientSideObject().</param>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseCondition.RegisterConverter(System.Text.StringBuilder)">
            <summary>
            RegisterConverter adds the method ConvStr to the client side representation of the 
            condition object as determined by 
            <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.VAMTypeConverter.CSConvertFromFunction">VAMTypeConverter.CSConvertFromFunction</see>.
            </summary>
            <remarks>
            <para>This should be called from any <see cref="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseCondition.DefineProperties(System.Text.StringBuilder)"/>
            method when the Condition uses the 
            <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.VAMTypeConverter.CSConvertFromFunction">VAMTypeConverter.CSConvertFromFunction</see>.</para>
            </remarks>
            <param name="pJavaScript">This is the same string builder passed into DefineProperties.</param>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseCondition.RegisterOperator(System.Text.StringBuilder,Jenzabar.Portal.Framework.Web.UI.Controls.Validation.ConditionOperator)">
            <summary>
            Installs the Operator property into the client-side
            representation of the condition object.
            </summary>
            <remarks>
            <para>Call from <see cref="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseCondition.DefineProperties(System.Text.StringBuilder)"/> of
            any condition that defines an operator of type <see cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.ConditionOperator"/>.</para>
            <para>Creates the property "Op", an integer, with these values:</para>
            <list type="table">
            <listheader>
            <term>ConditionOperator</term>
            <description>Client side value</description>
            </listheader>
            <item>
            <term>Equal</term>
            <description>0</description>
            </item>
            <item>
            <term>NotEqual</term>
            <description>1</description>
            </item>
            <item>
            <term>GreaterThan</term>
            <description>2</description>
            </item>
            <item>
            <term>GreaterThanEqual</term>
            <description>3</description>
            </item>
            <item>
            <term>LessThan</term>
            <description>4</description>
            </item>
            <item>
            <term>LessThanEqual</term>
            <description>5</description>
            </item>
            </list>
            </remarks>
            <param name="pJavaScript">This is the same string builder passed into DefineProperties.</param>
            <param name="pOperator">The value of a ConditionOperator property on your condition.</param>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseCondition.RegisterComparer(System.Text.StringBuilder)">
            <summary>
            RegisterComparer adds the client-side Comparer method to the client-side
            representation of the condition object.
            </summary>
            <remarks>
            <para>Call from <see cref="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseCondition.DefineProperties(System.Text.StringBuilder)"/> of
            any condition that needs a client-side comparison function.</para>
            <para>It has the name 'Comparer' and must hookup to the function named in 
            <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.VAMTypeConverter.CSComparerFunction">VAMTypeConverter.CSComparerFunction</see>
            or if blank, "VAM_Comparer" which is the default comparison function.</para>
            </remarks>
            <param name="pJavaScript">This is the same string builder passed into DefineProperties.</param>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseCondition.Describe">
            <summary>
            Describe builds a string that describes the condition for use with the design mode interface. 
            </summary>
            <remarks>
            <para>This string will appear in several places:</para>
            <list type="bullet">
            <item><description>Properties Editor row for the Enabler property.</description></item>
            <item><description>Properties Editor interface for the MultiCondition, 
            describing each condition in the tree view.</description></item>
            <item><description>Written into the ASP.NET code for the Enabler property (although its not used).</description></item>
            </list>
            <para>A description should only include the most relevant properties that determine how the condition
            is evaluated.</para>
            <para>Most of the work is done by the <see cref="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseCondition.DescribeBody"/> method. 
            </para>
            <para>This method calls DescribeBody() to do most of the work. This class
            adds the NotCondition when its true like this:</para>
            <code>"not (" + DescribeBody() + ")"</code>
            <para>If the condition implements IDataTypeProperty, it adds the datatype to the end
            like this: " [datatype]"</para>
            </remarks>
            <returns>A description of the properties that effect how the condition is evaluated.</returns>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseCondition.DescribeBody">
            <summary>
            DescribeBody is called by <see cref="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseCondition.Describe"/> to 
            allow subclasses to build the string that describes their condition.
            </summary>
            <remarks>
            <para>This text should not handle the NotCondition or identify the datatype of IDataTypeProperty conditions
            because the Describe() method handles them.</para>
            <para>It builds an English structure statement that includes only the properties
            involved in determining the condition. For example, "between 3 and 5" for RangeCondition.</para>
            </remarks>
            <returns></returns>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseCondition.GetDesignModeErrors">
            <summary>
            GetDesignModeErrors is called by the BaseErrorFormatter in design mode
            to allow the condition to describe any properties that have erroreous values.
            </summary>
            <remarks>
            <para>This information is shown in the design mode interface of the control so that 
            the user knows there are errors in the setup very quickly. It should identify any
            properties that have problems which must be fixed to get the control to work.</para>
            <para>Return "" when there are no problems. Otherwise give the property name "=" and problem.
            Always include a trailing space when a description is added.</para>
            </remarks>
            <returns>A string containing properties and values with significant errors or "" when there are no problems.</returns>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseCondition.GetDefaultName">
            <summary>
            GetDefaultName defines a user friendly name for the class. By default,
            it returns GetType().Name. Subclasses should override when a more friendly name is available.
            It is used by the Name property which is used to build a list of conditions in the UITypeEditors.
            </summary>
            <returns>A user friendly name for the class.</returns>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseCondition.Clone">
            <summary>
            Implements the IClone.Clone interface. Creates an instance of the current type
            and calls <see cref="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseCondition.CopyFrom(Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseCondition)"/> to copy the properties
            to the new instance.
            </summary>
            <returns>The new instance with matching properties.</returns>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseCondition.CopyFrom(Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseCondition)">
            <summary>
            CopyFrom copies the properties from another instance to this one.
            It automatically handles IDataTypeProperty.DataType properties
            </summary>
            <remarks>
            <para>It is very important for subclasses that introduce new properties
            to override this and transfer the new property values from the Source object
            to the active object. If this does not happen, design mode will have bugs
            where the properties will be lost after edits are made in the Properties Editor.</para>
            </remarks>
            <param name="pSource">The instance of this class or subclass that contains the properties
            to be copied.</param>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseCondition.EvalWithOperator(Jenzabar.Portal.Framework.Web.UI.Controls.Validation.ConditionOperator,System.Object,System.Object,System.Collections.IComparer)">
            <summary>
            EvalWithOperator determines the result of a boolean expression. It returns a boolean result.
            </summary>
            <remarks>
            <para>A boolean expression contains three elements: left value, operator, and right value.
            For example: 1 &lt;&gt; 2</para>
            <para>Boolean expression comparisions are done throughout the various 
            <see cref="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseCondition.EvaluateCondition"/> methods.
            This static method provides a standard way to compare two values, using the
            <see cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.ConditionOperator"/> to determine the operator.</para>
            <para>The values must be classes that support
            the <see cref="T:System.IComparable"/> interface or supply an 
            <see cref="T:System.Collections.IComparer"/> instance. These interfaces allows for generic support
            of comparing two values. <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.VAMTypeConverter.Comparer">VAMTypeConverter.Comparer</see> 
            supplies the IComparer instance value so your EvaluateCondition method doesn't have to figure it out.</para>
            <para>pLeftValue and pRightValue must be compatible datatypes
            for use with the IComparable interface to work.</para>
            </remarks>
            <param name="pOperator">Defines the operator between the left and right values.</param>
            <param name="pLeftValue">The value to the left of the operator in the expression.</param>
            <param name="pRightValue">The value to the left of the operator in the expression.</param>
            <param name="pComparer">An instance of an IComparer for more complex matching (like case insenstivity). If null, its not used.</param>
            <returns>The result of the boolean expression.</returns>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseCondition.GetControlTextValue(System.Web.UI.Control,System.Boolean)">
            <summary>
            GetControlTextValue returns the data of a control as a string.
            </summary>
            <remarks>
            <para>It supports controls that use the <see cref="T:System.Web.UI.ValidationPropertyAttribute"/>.
            If you pass a control that does not support this attribute, this method returns null.</para>
            <para>The supported control all must have a textual representation for their data.</para>
            <para>Microsoft's controls which support ValidationPropertyAttribute are:
            TextBox, HtmlInputText, HtmlTextArea, HtmlInputFile, ListBox, and DropDownList</para>
            </remarks>
            <param name="pControl">The control whose data you want to retrieve.</param>
            <param name="pTrim">When true, trim the lead and trailing spaces from the string before returning it.</param>
            <returns>The data of the control. If the control does not support ValidationPropertyAttribute, it returns null.</returns>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseCondition.GetValidationProperty(System.Object)">
            <summary>
            Returns the PropertyDescriptor for the <see cref="T:System.Web.UI.ValidationPropertyAttribute"/> 
            associated with the control or null if there is none.
            </summary>
            <remarks>
            The ASP.NET framework allows control developers to define the ValidationPropertyAttribute
            to connect their control's textual value property to the Microsoft Validation system.
            VAM supports this Attribute.
            </remarks>
            <param name="pControl">The control whose ValidationPropertyAttribute you want to retrieve.</param>
            <returns>The PropertyDescriptor associated with the ValidationPropertyAttribute or null if not found.</returns>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseCondition.GetVAMTypeConverterByName(System.String,System.String)">
            <summary>
            GetVAMTypeConverterByName looks for a named <see cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.VAMTypeConverter"/> in the 
            <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.Globals.DataTypes">Globals.DataTypes</see> collection. If found (case insensitive search)
            it returns. Otherwise, it throws an exception.
            </summary>
            <remarks>
            If pName is blank, it uses the name "String".
            </remarks>
            <exception cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.VAMException">When the name is not found.</exception>
            <param name="pName">The name to find in Globals.DataTypes.</param>
            <param name="pContainingProperty">The name of the property that contains the Name value. Used in the exception to clarify what property has an erroneous value.</param>
            <returns>The VAMTypeConverter found in Globals.DataTypes.</returns>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseCondition.ValidatePropertyMatchesDataType(System.Object,System.String,System.String,System.String)">
            <summary>
            Call this method after using <see cref="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.VAMTypeConverter.ConvertFrom(System.Object)">VAMTypeConverter.ConvertFrom</see>
            on a property value to generate a consistent error message when ConvertFrom returns null.
            </summary>
            <remarks>
            This method throws a VAMException with a specific error message, helping document an incorrectly
            setup property value, when the result of ConvertFrom is null.
            </remarks>
            <param name="pConvertedObject">The result of VAMTypeConverter.ConvertFrom.</param>
            <param name="pPropertyName">The name of the property converted.</param>
            <param name="pPropertyValue">The value of the property.</param>
            <param name="pDataTypeName">The name of the datatype (VAMTypeConverter.Name).</param>
            <exception cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.VAMException">When ConvertedObject is null.</exception>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseCondition.DescribeOperator(Jenzabar.Portal.Framework.Web.UI.Controls.Validation.ConditionOperator)">
            <summary>
            DescribeOperator provides a description of the <see cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.ConditionOperator"/> 
            enum type for use within the <see cref="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseCondition.Describe"/> method.
            </summary>
            <remarks>
            The description is always designed to fit in between the left and right values of the boolean
            expression. For example ConditionOperator.Equals is " equals ". ConditionOperator.LessThan
            is " is less than ". It always returns lead and trailing spaces.
            </remarks>
            <param name="pOperator">The operator property value whose description you want.</param>
            <returns>The description of the operator with lead and trailing spaces.</returns>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseCondition.Name">
            <summary>
            Name proves a user definable name for the class, used in the UI lists showing conditions.
            </summary>
            <value>
            <para>By default, it returns <see cref="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseCondition.GetDefaultName"/>. 
            Subclasses can override it to provide better names.
            In addition, users can create new instances and assign unique names for use in the
            <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.Globals.Conditions">Globals.Conditions</see> list where they redefine the properties under a new name.
            </para>
            <para>This property isn't shown in the Property Editor window. However, its value is
            written into the ASP.NET text and used to match to Config.Conditions</para>
            </value>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseCondition.InitFunctionName">
            <summary>
            Returns the default initialization function for all conditions, "VAM_InitCond".
            When you override this property, be sure your replacement function calls VAM_InitCond.
            </summary>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseCondition.EvaluateOnClickOrChange">
            <summary>
            EvaluateOnClickOrChange determines if any ControlToEvaluate also sets up an onchange or onclick
            client-side event handler that runs the action.
            </summary>
            <value>
            <para>When true, it sets up the event handler. It passes a flag to the client-side that tells
            the VAM_HookupControl function to hookup on the controls of this object.
            </para>
            <para>It defaults to true.</para>
            </value>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseCondition.EvalFunctionName">
            <summary>
            EvalFunctionName is the name of the client side function that evaluates the condition.
            </summary>
            <value>
            <para>It takes one parameter, the VAMObj which contains the properties.</para>
            <para>It returns one of three values:</para>
            <para>0 = failed</para>
            <para>1 = succeeded</para>
            <para>-1 = cannot evaluate. (For example, the field is invisible.)</para>
            <para>See the <b>Developer's Guide</b> for details and example.</para>
            </value>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseCondition.NotCondition">
            <summary>
            NotCondition reverses the result of the <see cref="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseCondition.EvaluateCondition"/> 
            method and its client side equivalent.
            </summary>
            <value>
            <para>EvaluateCondition should not do anything with this property. 
            <see cref="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseCondition.Evaluate"/> applies it. Similarly,
            your client-side evaluation condition should not do anything with this property.</para>
            <para>It defaults to false.</para>
            </value>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseCondition.CustomEvalFunctionName">
            <summary>
            CustomEvalFunctionName allows a user to provide their own client-side 
            evaluation function. When blank, the subclass supplies its function in EvalFunctionName.
            </summary>
            <value>
            <para>This is usually used when setting up a custom condition with ServerCondition on the
            server side.</para>
            <para><i>Parameters</i></para>
            <para>Condition (object) - The client-side representation of the Condition object.
            It supplies properties for your function to use.</para>
            <para><i>Returns</i></para>
            <para>It returns one of three values:</para>
            <para>0 = failed</para>
            <para>1 = succeeded</para>
            <para>-1 = cannot evaluate. (For example, the field is invisible.)</para>
            <para>See the User's Guide for details and example.</para>
            </value>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseCondition.OverrideClientSideEvaluation">
            <summary>
            When set to a value other than 'No', the client-side evaluation function
            supplied by this class is replaced with one that has special properties
            to show and hide the error message regardless of the data on the page.
            </summary>
            <remarks>
            <para>Useful when writing custom server side functions that don't have an equivalent
            client-side function. This gives a slight client-side behavior, including
            blinking the error message on postback and hiding it after edits.</para>
            <para>When 'No', the <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseCondition.EvalFunctionName"/>
            property provides the client-side evaluation function. Otherwise,
            this property causes the <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseCondition.CustomEvalFunctionName"/>
            to be set to "VAM_EvalAltCS" and the OCSMode property to be added
            to the client-side object for use by VAM_EvalAltCS.</para>
            </remarks>
            <seealso cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.OverrideClientSideEvaluationType"/>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseCondition.VAMTypeConverter">
            <summary>
            VAMTypeConverter is the <see cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.VAMTypeConverter"/> based on 
            the <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.IDataTypeProperty.DataType">IDataTypeProperty.DataType</see> property when implemented.
            </summary>
            <value>
            <para>It is setup during <see cref="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseCondition.PrepareBody"/>. When it is null,
            it calls <see cref="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseCondition.GetVAMTypeConverter"/>.</para>
            <para>If assigned before Prepare(),
            it will not be changed by GetVAMTypeConverter.</para>
            <para>When it gets or sets a VAMTypeConverter whose SupportsThirdPartyControl property
            is true, it calls <see cref="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseCondition.ConvertToThirdPartyControlConnection"/>.</para>
            <para>It is null when the condition doesn't use a VAMTypeConverter.</para>
            </value>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseCondition.Trim">
            <summary>
            Determines that the evaluation should occur after trimming lead and trailing spaces
            from text values of fields.
            </summary>
            <value>
            <para>Subclasses will determine if they support this property. Generally, they work with
            textual fields and retrieve them with <see cref="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseCondition.GetControlTextValue(System.Web.UI.Control,System.Boolean)"/>.</para>
            <para>When true, it should trim.</para>
            <para>Set to false when your server side retrieval code for the field doesn't trim, thus
            would be tripped up by the lead and trailing spaces.</para>
            <para>It defaults to true.</para>
            </value>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseMultiCondition.#ctor">
            <summary>
            Constructor with no parameters. Sets EvaluateOnClickOrChange=false
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseMultiCondition.#ctor(System.Web.UI.Control)">
            <summary>
            Constructor which sets Owner. Sets EvaluateOnClickOrChange=false.
            </summary>
            <param name="pOwner"></param>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseMultiCondition.fConditions">
            <summary>
            Storage for <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseMultiCondition.Conditions"/>.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseMultiCondition.PrepareBody">
            <summary>
            Goes through the child list to set Owner, ParentNamingObject, ParentCallsThis,
            and optionally the IDataTypeProperty.DataType property when the Condition.ControlIDToEvaluate
            points to a control that implements <see cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.IGetDataTypeName"/>.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseMultiCondition.CanEvaluate">
            <summary>
            Must be enabled and Conditions.Count > 0.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseMultiCondition.DefineProperties(System.Text.StringBuilder)">
            <summary>
            Adds the "Conds" property to the client-side representation of the condition object.
            </summary>
            <remarks>
            <list type="table">
            <listheader>
            <term>Property</term>
            <description>Server side source</description>
            </listheader>
            <item><term>Conds (array)</term>
            <description>It adds elements to that array by allowing the child
            Conditions to add themselves.
            <code>
            {p1:v1,p2:v2,Conds: new Array({conditionObj1},{conditionObj2}),p4:v4}
            </code>
            </description></item>
            </list>
            </remarks>
            <param name="pJavaScript">Append the properties to this stringbuilder.</param>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseMultiCondition.ValidateProperties">
            <summary>
            Aside from handling the ancestor, it calls this on each condition in Conditions.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseMultiCondition.CopyFrom(Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseCondition)">
            <summary>
            Supports the Conditions property.
            </summary>
            <param name="pSource">The source object whose properties are being copied.</param>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseMultiCondition.Conditions">
            <summary>
            Conditions is a collection of Condition instances.
            </summary>
            <remarks>
            <para>They are evaluated in the
            order of the list. When the list is empty, the condition cannot be evaluated and
            <see cref="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseMultiCondition.CanEvaluate"/> returns false.
            </para>
            <para>This property uses the UITypeEditor <see cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.MultiConditionTypeEditor"/>
            and the TypeConverter <see cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.ConditionCollectionConverter"/>.</para>
            <para>The ASP.NET text for this property uses this format:</para>
            <code>
            &lt;vam:validatorclass runat=server id=[id] /&gt;
               &lt;Conditions&gt;
                 &lt;vam:conditionclass [properties] /&gt;
                 &lt;vam:conditionclass [properties] /&gt;
               &lt;/Conditions&gt;
            &lt;/vam:validatorclass&gt;
            </code>
            <para><b>EditorAttribute:</b><see cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.MultiConditionTypeEditor"/></para>
            <para><b>TypeConverterAttribute:</b><see cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.ConditionCollectionConverter"/></para>
            </remarks>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseMultiCondition.EvaluateOnClickOrChange">
            <summary>
            This class lacks a controlID to hookup on the client-side. Remove to avoid confusion.
            Constructor sets it to false. This declaration sets attributes to hide it from the
            Properties Editor and writing to the ASP.NET form. 
            </summary>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseMultiCondition.InitFunctionName">
            <summary>
            The client-side initialization function is "VAM_InitMultiCond".
            </summary>
        </member>
        <member name="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.MultiCondition">
            <summary>
            MultiCondition defines a list of zero or more Conditions (including other MultiConditions) 
            which are evaluated together using Boolean logic. Use nested MultiConditions 
            to build complex Boolean logic.
            </summary>
            <remarks>
            <para>The <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.MultiCondition.Operator"/> property determines 
            if these items are compared using AND or OR operators.</para>
            <para>See the <b>User's Guide</b> for an overview of using this condition.</para>
            </remarks>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.MultiCondition.#ctor">
            <summary>
            Constructor with no parameters.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.MultiCondition.#ctor(System.Web.UI.Control)">
            <summary>
            Constructor which specifies the Owner property.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.MultiCondition.#ctor(Jenzabar.Portal.Framework.Web.UI.Controls.Validation.AND_OROperator)">
            <summary>
            Constructor which specifies the Operator property.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.MultiCondition.#ctor(System.Web.UI.Control,Jenzabar.Portal.Framework.Web.UI.Controls.Validation.AND_OROperator)">
            <summary>
            Constructor which specifies the Owner and Operator properties.
            </summary>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.MultiCondition.fOperator">
            <summary>
            Storage for <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.MultiCondition.Operator"/>.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.MultiCondition.EvaluateCondition">
            <summary>
            Determines if the list of children evaluate to true or false using the boolean
            operators AND or OR between them.
            </summary>
            <remarks>
            <para>When Operator=AND, all conditions must return 1 in their EvaluateCondition
            for this method to return 1.</para>
            <para>When Operator=OR, at least one condition must return 1 in their EvaluateCondition
            for this method to return 1.</para>
            <para>Any condition whose EvaluateCondition method returns -1 will be ignored.
            However, if all conditions evaluate to -1, this method will return -1 (cannot evaluate).</para>
            </remarks>
            <returns>1 when "success"; 0 when "failed"; -1 when it cannot evaluate</returns>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.MultiCondition.DefineProperties(System.Text.StringBuilder)">
            <summary>
            Adds the "ANDOp" property to the client-side representation of the client object.
            </summary>
            <remarks>
            <list type="table">
            <listheader>
            <term>Property</term>
            <description>Server side source</description>
            </listheader>
            <item><term>ANDOp (boolean)</term>
            <description>When Operator == AND, it is true.</description></item>
            </list>
            </remarks>
            <param name="pJavaScript">Append the properties to this stringbuilder.</param>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.MultiCondition.DescribeBody">
            <returns>Returns the string "AND the child conditions listed below" or
            "OR the child conditions listed below". Designed mostly for the MultiCondition editor.</returns>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.MultiCondition.CopyFrom(Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseCondition)">
            <summary>
            Copies the Operator.
            </summary>
            <param name="pSource">The source object whose properties are being copied.</param>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.MultiCondition.Operator">
            <summary>
            Gets and sets if the items are evaluated with an AND or OR condition.
            </summary>
            <value>
            <para>If you want to mix AND and OR conditions, use multiple MultiConditions.</para>
            <para>It defaults to OR.</para>
            </value>
            <seealso cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.AND_OROperator"/>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.MultiCondition.EvalFunctionName">
            <summary>
            The client-side evaluation function is "VAM_EvalMultiCond".
            </summary>
        </member>
        <member name="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.CountTrueConditions">
            <summary>
            Evaluates the child conditions and determines if the number of those that evaluate
            as "success" is between a range specified by the 
            <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.CountTrueConditions.Minimum"/> and 
            <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.CountTrueConditions.Maximum"/> properties.
            </summary>
            <remarks>
            <para>Useful in counting checkboxes scattered around a page.</para>
            <para>Set up Conditions to be counted in the <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseMultiCondition.Conditions"/>
            property. The Properties Editor for that property makes this easy. Each of
            the conditions is evaluated and compared to the values in 
            the <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.CountTrueConditions.Minimum"/> and 
            <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.CountTrueConditions.Maximum"/> properties.</para>
            <para>See the <b>User's Guide</b> for an overview of using this condition.</para>
            </remarks>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.CountTrueConditions.#ctor">
            <summary>
            Constructor with no parameters.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.CountTrueConditions.#ctor(System.Web.UI.Control)">
            <summary>
            Constructor that assigns the Owner property.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.CountTrueConditions.#ctor(System.Int32,System.Int32)">
            <summary>
            Constructor that assigns the Minimum and Maximum properties.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.CountTrueConditions.#ctor(System.Web.UI.Control,System.Int32,System.Int32)">
            <summary>
            Constructor that assigns the Owner, Minimum and Maximum properties.
            </summary>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.CountTrueConditions.fMinimum">
            <summary>
            Storage with <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.CountTrueConditions.Minimum"/>.
            </summary>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.CountTrueConditions.fMaximum">
            <summary>
            Storage with <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.CountTrueConditions.Maximum"/>.
            </summary>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.CountTrueConditions.fCount">
            <summary>
            fCount is the number of selected items found during EvaluateCondition.
            Used for token replacement in the ErrorMessage.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.CountTrueConditions.EvaluateCondition">
            <summary>
            Evaluates as "success" when the number of conditions in the 
            <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseMultiCondition.Conditions"/> property that evaluate
            as "success" themselves is between the <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.CountTrueConditions.Minimum"/>
            and <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.CountTrueConditions.Maximum"/>.
            Evaluates as "failed" when the number is outside the range.
            Evaluates as "cannot evaluate" when there are no child Conditions or all
            of them evaluate as "cannot evaluate".
            </summary>
            <remarks>
            <para>It only counts the results of the immediate children Condition. Those children
            may be based on BaseMultiCondition and have children of their own, which only serve
            to determine if their parent evaluates as "success" or "failed".</para>
            </remarks>
            <returns>1 when "success"; 0 when "failed"; -1 when "cannot evaluate"</returns>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.CountTrueConditions.DefineJavaScript(Jenzabar.Portal.Framework.Web.UI.Controls.Validation.VAMPage)">
            <summary>
            Installs the script file VAM_XVF.jx for the function "VAM_EvalCountTrueCond".
            </summary>
            <param name="pPage"></param>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.CountTrueConditions.DefineProperties(System.Text.StringBuilder)">
            <summary>
            Defines the following properties in the client-side representation of this object: Min, Max
            </summary>
            <remarks>
            <list type="table">
            <listheader>
            <term>Property</term>
            <description>Server side source</description>
            </listheader>
            <item><term>Min (integer)</term>
            <description>Minimum</description></item>
            <item><term>Max (integer)</term>
            <description>Maximum</description></item>
            </list>
            </remarks>
            <param name="pJavaScript">Append the properties to this stringbuilder.</param>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.CountTrueConditions.DescribeBody">
            <summary>
            Describes the Minimum and Maximum properties, hiding either of them if
            they are disabled (set to 0.)
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.CountTrueConditions.CopyFrom(Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseCondition)">
            <summary>
            Copies the Minimum and Maximum properties.
            </summary>
            <param name="pSource">The object containing the source of these properties.</param>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.CountTrueConditions.Minimum">
            <summary>
            Minimum is the lower limit to how many child conditions must evaluate as "success".
            </summary>
            <value>
            <para>If 0, there is no minimum.</para>
            <para>It defaults to 0.</para>
            </value>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.CountTrueConditions.Maximum">
            <summary>
            Maximum is the upper limit to how many child conditions must evaluate as "success".
            </summary>
            <value>
            <para>Use 99999 or equally large number when not using the maximum. 
            (If 0 is used, it is reassigned to 99999.)</para>
            <para>It defaults to 99999.</para>
            </value>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.CountTrueConditions.EvalFunctionName">
            <summary>
            Client-side Evaluation Function is called "VAM_EvalCountTrueCond".
            </summary>
        </member>
        <member name="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.RequiredTextCondition">
            <summary>
            RequiredTextCondition determines if the ControlToEvaluate field that has a textual value is 
            considered blank (matches the 
            <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.RequiredTextCondition.UnassignedValues"/> property). 
            When its not blank, the condition evaluates as "success".
            </summary>
            <remarks>
            <para>See the <b>User's Guide</b> for an overview of using this condition.</para>
            <para>This condition supports any control with a <see cref="T:System.Web.UI.ValidationPropertyAttribute"/> 
            as they all can return a textual value.</para>
            <para>The user can define one or more values for an unassigned state using the
            <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.RequiredTextCondition.UnassignedValues"/> property. 
            UnassignedValues can be compared case sensitive or insensitive with the 
            <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.RequiredTextCondition.UnassignedCaseInsensitive"/> property.</para>
            <para>Uses the <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseCondition.Trim"/> property to determine 
            if a blank field allows spaces or not. Ancestor defaults Trim to true.</para>
            </remarks>
            <seealso cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.RequiredListCondition"/> 
            <seealso cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.CheckStateCondition"/>
        </member>
        <member name="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseOneFieldCondition">
            <summary>
            This is a base class for any condition that allows the user to define one reference to a field
            on the page containing data to evaluate.
            </summary>
            <remarks>
            <para>This class introduces the property <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseOneFieldCondition.ControlIDToEvaluate"/>
             and provides full client and server side support of it.</para>
            <para>See the <b>Developer's Guide</b> for details on this class.</para>
            </remarks>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseOneFieldCondition.#ctor">
            <summary>
            Constructor with no parameters. It gets the Owner when the instance is attached to
            a class with an owner or the owner control itself.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseOneFieldCondition.#ctor(System.Web.UI.Control)">
            <summary>
            Constructor that establishes the Owner property.
            </summary>
            <param name="pOwner">Reference to the owner control</param>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseOneFieldCondition.#ctor(System.String)">
            <summary>
            Constructor that establishes ControlIDToEvaluate. It must be an ID to a control
            in the same naming container.
            </summary>
            <param name="pControlIDToEvaluate">ID to a control in the same naming container.</param>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseOneFieldCondition.#ctor(System.Web.UI.Control,System.String)">
            <summary>
            Constructor that establishes Owner and ControlIDToEvaluate. 
            It must be an ID to a control in the same naming container.
            </summary>
            <param name="pOwner">Reference to the owner control</param>
            <param name="pControlIDToEvaluate">ID to a control in the same naming container.</param>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseOneFieldCondition.#ctor(System.Web.UI.Control,System.Web.UI.Control)">
            <summary>
            Constructor that establishes Owner and ControlToEvaluate. 
            </summary>
            <param name="pOwner">Reference to the owner control</param>
            <param name="pControlToEvaluate">Reference to the control that will be evaluated.</param>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseOneFieldCondition.fControlToEvaluateConnection">
            <summary>
            Storage for <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseOneFieldCondition.ControlToEvaluateConnection"/>.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseOneFieldCondition.SetOwner(System.Web.UI.Control)">
            <summary>
            Assigns the Owner to <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseOneFieldCondition.ControlToEvaluateConnection"/>
            in addition to its Owner property.
            </summary>
            <param name="pOwner">The control which owns this condition.</param>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseOneFieldCondition.DefineProperties(System.Text.StringBuilder)">
            <summary>
            Adds these properties to the client-side representation of the condition object:
            IDToEval and HUCtrlFnc
            </summary>
            <remarks>
            <list type="table">
            <listheader>
            <term>Property</term>
            <description>Server side source</description>
            </listheader>
            <item>
            <term>IDToEval (string)
            </term>
            <description>The ClientID from the control identified by 
            <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseOneFieldCondition.ControlIDToEvaluate"/> or 
            <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseOneFieldCondition.ControlToEvaluate"/>.
            </description>
            </item>
            <item>
            <term>HUCtrlFnc (method)
            </term>
            <description>If the control has a Control Hookup Method, it is added. The Control Hookup Method
            allows the control to specify additional controls that call VAM_HookupControl() on the client-side
            to fire onchange or onclick events. There are two sources for Control Hookup Methods:
            <see cref="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.VAMTypeConverter.GetControlHookupMethod(System.Web.UI.Control)">VAMTypeConverter.GetControlHookupMethod</see> and
            <see cref="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.Globals.FindControlHookupMethod(System.Web.UI.Control)">Globals.FindControlHookupMethod</see>.
            </description>
            </item>
            </list>
            </remarks>
            <param name="pJavaScript">The properties are appended to this stringbuilder.</param>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseOneFieldCondition.GetControlID(System.Int32)">
            <summary>
            Supports <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseOneFieldCondition.ControlIDToEvaluate"/>.
            </summary>
            <param name="pIndex">An index or selector for the desired control ID, starting at 0.</param>
            <returns>Index = 0 returns ControlIDToEvaluate. Other values return "".</returns>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseOneFieldCondition.GetControl(System.Int32)">
            <summary>
            Supports <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseOneFieldCondition.ControlToEvaluate"/>.
            </summary>
            <param name="pIndex">An index or selector for the desired control, starting at 0.</param>
            <returns>Index = 0 returns ControlToEvaluate. Other values return null.</returns>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseOneFieldCondition.EnsureControlConnections">
            <summary>
            Tests for <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseOneFieldCondition.ControlToEvaluateConnection"/> to be null. 
            If null, it creates a new <see cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.ControlConnection"/> class
            and assigns it to ControlToEvaluateConnection.
            </summary>
            <remarks>
            <para>Calls <see cref="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseOneFieldCondition.GetControlToEvaluateConnectionType"/>
            to get the class type for the ControlConnection. Then uses <see cref="M:System.Activator.CreateInstance(System.Type,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)"/>
            to create it. The parameters passed to Activator.Create instance are always {Owner, false, "ControlIDToEvaluate", this}
            so users cannot supply alternative parameters unless they explicitly subclass this method
            and assign their new instance to ControlToEvaluateConnection before calling the ancestor.
            </para>
            </remarks>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseOneFieldCondition.ConvertToThirdPartyControlConnection">
            <summary>
            Assigns <see cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.ThirdPartyControlConnection"/> to 
            <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseOneFieldCondition.ControlToEvaluateConnection"/>.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseOneFieldCondition.GetControlToEvaluateConnectionType">
            <summary>
            GetControlToEvaluateConnectionType determines the Type used to create
            the <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseOneFieldCondition.ControlToEvaluateConnection"/>.
            </summary>
            <remarks>
            This class returns: <see cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.ValidationPropertyControlConnection"/>.
            This method is overridden when a different <see cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.ControlConnection"/> class is needed.
            </remarks>
            <returns>A type compatible with ControlConnection.</returns>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseOneFieldCondition.GetVAMTypeConverter">
            <summary>
            BaseOneFieldCondition can intelligently assign the VAMTypeConverter based on
            attributes of the ControlToEvaluate.
            </summary>
            <remarks>
            <para>When this class implements <see cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.IDataTypeProperty"/>, it does the following
            to create the VAMTypeConverter:</para>
            <list type="bullet">
            <item><description></description>If the control implements <see cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.IGetDataTypeName"/>,
            use the name returned from the control.</item>
            <item><description>If the user defined name in the DataType property is found in 
            <see cref="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseCondition.GetVAMTypeConverterByName(System.String,System.String)"/> and its
            VAMTypeConverter.SupportsThirdPartyControl is true, use it. This allows a control to support
            multiple DataTypes and the users selection determines which is used.</description></item>
            <item><description>If the control is matched to an item in 
            <see cref="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.VAMTypeConverter.TestThirdPartyControl(System.Web.UI.Control)">VAMTypeConverter.TestThirdPartyControl</see>, 
            use that VAMTypeConverter.</description></item>
            <item><description>Otherwise call the ancestor.</description></item>
            </list>
            </remarks>
            <returns>The VAMTypeConverter found or null.</returns>
            <exception cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.VAMException">When the ControlToEvaluate is not found on the page.</exception>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseOneFieldCondition.CanEvaluate">
            <summary>
            In addition to what the ancestor does, this will return false when ControlToEvaluate is unassigned
            while ControlToEvaluateConnection.AllowNoControl is false.
            </summary>
            <returns>True when the EvaluateCondition method is allowed to be used.</returns>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseOneFieldCondition.GetConditionEventArgs">
            <summary>
            Returns <see cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.ConditionOneFieldEventArgs"/>.
            </summary>
            <returns>ConditionOneFieldEventArgs.</returns>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseOneFieldCondition.GetControlTextValue">
            <summary>
            GetControlTextValue returns the text value of the ControlToEvaluate.
            It will return "" if the ControlToEvaluate doesn't have a text value, like a list, drop list, 
            radio button or checkbox.
            </summary>
            <remarks>
            Applies the Trim property.
            </remarks>
            <returns>The data from the ControlToEvaluate or "" if the control doesn't have a text value.</returns>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseOneFieldCondition.ValidateProperties">
            <summary>
            In addition to what the ancestor does, it validates the ControlToEvaluate using
            the <see cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.ControlConnection"/> in <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseOneFieldCondition.ControlToEvaluateConnection"/>.
            It also confirms that the the ControlToEvaluate is visible and throws an exception if it is not (unless
            Owner.Visible is also false).
            </summary>
            <exception cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.VAMException"/>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseOneFieldCondition.DescribeControlToEvaluate">
            <summary>
            DescribeControlToEvaluate returns the name of the ControlIDToEvaluate
            for use with the <see cref="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseCondition.DescribeBody"/> method in subclasses.
            </summary>
            <remarks>
            It does not support ControlToEvalaute because that property is set programmatically
            and is not available in design mode.
            </remarks>
            <returns>If ControlIDToEvaluate is assigned, it is returned.
            Otherwise, it returns the string "[Unknown ControlIDToEvaluate]".</returns>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseOneFieldCondition.GetDesignModeErrors">
            <summary>
            ControlIDToEvalute must be assigned.
            </summary>
            <returns>Ancestor text plus ControlIDToEvaluate="" when it is blank.</returns>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseOneFieldCondition.CopyFrom(Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseCondition)">
            <summary>
            In addition to what the ancestor assigns, this copies the ControlToEvaluateConnection.
            </summary>
            <param name="pSource">The compatible class that supplies the source of the properties to copy.</param>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseOneFieldCondition.ControlIDToEvaluate">
            <summary>
            Gets and sets the ID to the control whose value will be evaluated. 
            </summary>
            <value>
            <para>This is ID property, not the ClientID or UniqueID. It will be translated 
            into the ClientID at runtime.</para>
            <para>If the control cannot be found in the current or any parent NamingContainer, 
            an exception is thrown at runtime.</para>
            <para><see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseOneFieldCondition.ControlToEvaluate"/> overrides
            this property when it is not null.</para>
            </value>
            <remarks>
            <para>When you get or set, this property eventually calls 
            <see cref="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseOneFieldCondition.EnsureControlConnections"/> to establish
            that the user has assigned a valid control class here.</para>
            <para><b>EditorAttribute:</b><see cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.ConditionControlIDTypeEditor"/></para>
            </remarks>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseOneFieldCondition.ControlToEvaluate">
            <summary>
            Gets and sets a reference to a control whose value will be evaluated. It is an 
            alternative to <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseOneFieldCondition.ControlIDToEvaluate"/> that
            allows the control to be anywhere on the page instead of the same naming container as the Owner control.
            </summary>
            <value>
            <para>When assigned, it overrides any setting ControlIDToEvaluate.</para>
            <para>This can be a reference to the control anywhere on the page, not just in the same
            naming container.</para>
            <para>When you get or set, this property eventually calls 
            <see cref="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseOneFieldCondition.EnsureControlConnections"/> to establish
            that the user has assigned a valid control class here.</para>
            </value>
            <exception cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.VAMException">When the control class is not validated
            by the <see cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.ControlConnection"/>.</exception>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseOneFieldCondition.ControlToEvaluateConnection">
            <summary>
            Gets the <see cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.ControlConnection"/> class that maintains the ID and Instance storage
            used by <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseOneFieldCondition.ControlIDToEvaluate"/> and 
            <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseOneFieldCondition.ControlToEvaluate"/> properties.
            </summary>
            <value>
            A ControlConnection also validates the control that is referenced by its contents. Users
            can develop their own ControlConnection class to define that validation. Override
            <see cref="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseOneFieldCondition.GetControlToEvaluateConnectionType"/>
            to define your own ControlConnection. By default, it uses
            <see cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.ValidationPropertyControlConnection"/>.
            </value>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseOneFieldCondition.InitFunctionName">
            <summary>
            Returns the Condition initialization function named "VAM_InitOneFldCond"
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.RequiredTextCondition.#ctor">
            <summary>
            Constructor with no parameters.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.RequiredTextCondition.#ctor(System.Web.UI.Control)">
            <summary>
            Constructor which assigns the Owner property.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.RequiredTextCondition.#ctor(System.String)">
            <summary>
            Constructor which assigns the ControlIDToEvaluate property.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.RequiredTextCondition.#ctor(System.Web.UI.Control,System.String)">
            <summary>
            Constructor which assigns the Owner and ControlIDToEvaluate properties.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.RequiredTextCondition.#ctor(System.Web.UI.Control,System.Web.UI.Control)">
            <summary>
            Constructor which assigns the Owner and ControlToEvaluate properties.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.RequiredTextCondition.#ctor(System.Web.UI.Control,System.String,System.String,System.Boolean)">
            <summary>
            Constructor which assigns the Owner, ControlIDToEvaluate, UnassignedValues, and 
            UnassignedCaseInsensitive properties.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.RequiredTextCondition.#ctor(System.Web.UI.Control,System.Web.UI.Control,System.String,System.Boolean)">
            <summary>
            Constructor which assigns the Owner, ControlToEvaluate, UnassignedValues, and 
            UnassignedCaseInsensitive properties.
            </summary>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.RequiredTextCondition.fUnassignedValues">
            <summary>
            Storage for <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.RequiredTextCondition.UnassignedValues"/>.
            </summary>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.RequiredTextCondition.fUnassignedValuesA">
            <summary>
            Internally used to hold the array of parts from UnassignedValues. Each part is due to a '|' separator.
            </summary>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.RequiredTextCondition.fUnassignedCaseInsensitive">
            <summary>
            Storage for <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.RequiredTextCondition.UnassignedCaseInsensitive"/>.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.RequiredTextCondition.PrepareBody">
            <summary>
            Calls <see cref="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.RequiredTextCondition.CreateUnassignedArray"/>.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.RequiredTextCondition.CreateUnassignedArray">
            <summary>
            Converts the UnassignedValues property into an array of strings in fUnassignedValuesA.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.RequiredTextCondition.EvaluateCondition">
            <summary>
            Evaluates as "success" when the text of the ControlIDToEvaluate does not match
            the <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.RequiredTextCondition.UnassignedValues"/>. 
            Evaluates as "failed" when it does match. It does not have a "cannot evaluate" state.
            </summary>
            <returns>1 when success; 0 when failed.</returns>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.RequiredTextCondition.DefineProperties(System.Text.StringBuilder)">
            <summary>
            Defines the following properties in the client-side representation of this object: Unassnd, CaseIns.
            </summary>
            <remarks>
            <list type="table">
            <listheader>
            <term>Property</term>
            <description>Server side source</description>
            </listheader>
            <item><term>Unassnd (array of strings)</term>
            <description>Contains each string from fUnassignedValuesA. If fUnassignedValuesA = null or empty, this property is not written. </description></item>
            <item><term>CaseIns (bool)</term>
            <description>UnassignedCaseInsensitive</description></item>
            </list>
            </remarks>
            <param name="pJavaScript">Append the properties to this stringbuilder.</param>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.RequiredTextCondition.DescribeBody">
            <summary>
            "must not contain [UnassignedValues]" or " must contain text" when UnassignedValues is blank.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.RequiredTextCondition.CopyFrom(Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseCondition)">
            <summary>
            Copies UnassignedCaseInsensitive and UnassignedValues.
            </summary>
            <param name="pSource">Source of the properties to copy.</param>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.RequiredTextCondition.UnassignedValues">
            <summary>
            UnassignedValues is the text representing the unassigned state. When the control's value matches
            this value, the condition evaluates as "failed". 
            </summary>
            <value>
            <para>Matching may be case sensistive or insensitive based on 
            <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.RequiredTextCondition.UnassignedCaseInsensitive"/>.</para>
            <para>This string supports multiple items that reflect the unassigned state. 
            They must be separated by a pipe (|). For example, a text box is unassigned 
            when either blank or "Enter a value" is present. Use "|Enter a value".
            (The part prior to the pipe is an empty string.)</para>
            <para>Lead and trailing spaces are removed on each item within the UnassignedValues.</para>
            <para>It defaults to "".</para>
            </value>
            <remarks>
            <para><b>EditorAttribute:</b><see cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.StringTypeEditor"/></para>
            </remarks>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.RequiredTextCondition.UnassignedCaseInsensitive">
            <summary>
            UnassignedCaseInsenstive determines if the <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.RequiredTextCondition.UnassignedValues"/>
            property uses a case insensitive match or not.
            </summary>
            <value>
            <para>When true, its case insensitive.</para>
            <para>It defaults to true.</para>
            </value>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.RequiredTextCondition.EvalFunctionName">
            <summary>
            Client-side evaluation function is named "VAM_EvalReqTextCond".
            </summary>
        </member>
        <member name="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.RequiredListCondition">
            <summary>
            RequiredListCondition supports subclasses of <see cref="T:System.Web.UI.WebControls.ListControl"/>: 
            ListBox, DropDownList, RadioButtonList, and CheckBoxList. It also supports 
            <see cref="T:System.Web.UI.HtmlControls.HtmlSelect"/>.
            The condition determines if these objects have a selection that differs
            from an unassigned state. 
            </summary>
            <remarks>
            <para>See the <b>User's Guide</b> for an overview of using this condition.</para>
            <para>There is an <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.RequiredListCondition.UnassignedIndex"/> property that 
            allows the user to define an item that when selected is still the unassigned state.
            It defaults to –1 which indicates no selection is the unassigned state.</para>
            <para><b>NOTE:</b> CheckBoxLists do not support the UnassignedIndex property. They are unassigned by having
            no checkboxes marked.</para>
            <para>ListBoxes with multiple selections are supported. The condition evaluates as "success"
            when any selected item matches the UnassignedIndex.</para>
            <para>If you define a series of checkboxes or radio buttons without using 
            CheckBoxList or RadioButtonList and want to know if there is any selection, 
            use a <see cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.MultiCondition"/> with an AND operator and a 
            <see cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.CheckStateCondition"/> associated with
            each checkbox/radiobutton.</para>
            </remarks>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.RequiredListCondition.#ctor">
            <summary>
            Constructor with no parameters.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.RequiredListCondition.#ctor(System.Web.UI.Control)">
            <summary>
            Constructor which sets the Owner property.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.RequiredListCondition.#ctor(System.String)">
            <summary>
            Constructor which sets the ControlIDToEvaluate property.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.RequiredListCondition.#ctor(System.Web.UI.Control,System.String)">
            <summary>
            Constructor which sets the Owner and ControlIDToEvaluate properties.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.RequiredListCondition.#ctor(System.Web.UI.Control,System.Web.UI.Control)">
            <summary>
            Constructor which sets the Owner and ControlToEvaluate properties.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.RequiredListCondition.#ctor(System.Web.UI.Control,System.String,System.Int32)">
            <summary>
            Constructor which sets the Owner, ControlIDToEvaluate, and UnassignedIndex properties.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.RequiredListCondition.#ctor(System.Web.UI.Control,System.Web.UI.Control,System.Int32)">
            <summary>
            Constructor which sets the Owner, ControlIDToEvaluate, and UnassignedIndex properties.
            </summary>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.RequiredListCondition.fUnassignedIndex">
            <summary>
            Storage for <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.RequiredListCondition.UnassignedIndex"/>.
            </summary>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.RequiredListCondition.fEvalFunctionName">
            <summary>
            The value returned by <see cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.RequiredListCondition"/>. Set in PrepareBody.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.RequiredListCondition.PrepareBody">
            <summary>
            In addition to calling the ancestor, sets fEvalFunctionName.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.RequiredListCondition.GetControlToEvaluateConnectionType">
            <returns><see cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.RequiredListConditionControlConnection"/></returns>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.RequiredListCondition.EvaluateCondition">
            <summary>
            Evaluates as "success" when a CheckBoxList's SelectedIndex is not equal to -1 or
            any other ListControl/HtmlSelect subclass has its SelectedIndex set to a different value than
            UnassignedIndex.
            Evaluates to "failed" otherwise.
            There is no "cannot evaluate" result.
            </summary>
            <returns>1 when success; 0 when failed.</returns>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.RequiredListCondition.DefineProperties(System.Text.StringBuilder)">
            <summary>
            Adds the "UnassgnIdx" property to the client-side representation of the condition object.
            </summary>
            <remarks>
            <list type="table">
            <listheader>
            <term>Property</term>
            <description>Server side source</description>
            </listheader>
            <item><term>UnassgnIdx (integer)</term>
            <description>UnassignedIndex</description></item>
            </list>
            </remarks>
            <param name="pJavaScript">Append the properties to this stringbuilder.</param>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.RequiredListCondition.DescribeBody">
            <summary>
            If UnassignedIndex > 0 " when SelectedIndex is not" + UnassignedIndex. Otherwise, " is selected".
            </summary>
            <returns></returns>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.RequiredListCondition.CopyFrom(Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseCondition)">
            <summary>
            Copies UnassignedIndex.
            </summary>
            <param name="pSource">Where to retrieve the properties that are being copied.</param>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.RequiredListCondition.UnassignedIndex">
            <summary>
            UnassignedIndex is the unassigned state associated with the SelectedIndex property
            on the ListControl. 
            It is an integer where -1 indicates no selection and 0 is the first possible element.
            </summary>
            <value>
            <para>Change it when an item, such as the first element of a radiobuttonlist, listbox, or dropdownlist
            indicates an unassigned state.</para>
            <para>This property is ignored by CheckBoxList.</para>
            <para>Multiple selection ListBoxes support it.</para>
            <para>It defaults to -1.</para>
            </value>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.RequiredListCondition.EvalFunctionName">
            <summary>
            Client side evaluation function is one of these:
            For listbox and dropdownlist, "VAM_EvalReqListCond"
            Otherwise, "VAM_EvalReqCheckCond".
            </summary>
        </member>
        <member name="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.RequiredListConditionControlConnection">
            <summary>
            RequiredListConditionControlConnection considers any subclass of
            <see cref="T:System.Web.UI.WebControls.ListControl"/> and 
            <see cref="T:System.Web.UI.HtmlControls.HtmlSelect"/> to be valid.
            </summary>
            <remarks>
            <para>Used by <see cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.RequiredListCondition"/>
            for its ControlConnection property.</para>
            </remarks>
        </member>
        <member name="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.TypeListControlConnection">
            <summary>
            TypeListControlConnection validates based on a list of control class types
            defined in the ControlTypes collection.
            </summary>
            <remarks>
            <para>You must subclass it and override the <see cref="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.TypeListControlConnection.InitControlTypes"/> method.</para>
            <para>See the <b>Developer's Guide</b> for an overview.</para>
            </remarks>
        </member>
        <member name="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.ControlConnection">
            <summary>
            ControlConnection defines a reference to a control on the page, either
            through its ID or a direct reference. It validates that the assigned control
            is valid for use with the class that uses the ControlConnection, such as checking
            the class of the control and if the control's ID property is assigned.
            </summary>
            <remarks>
            <para>There are two properties which establish a link to a control on the page: 
            <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.ControlConnection.ControlID"/> and 
            <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.ControlConnection.ControlInstance"/>.
            When the user assigns to ControlID is defined, this system searches the Owner's naming container 
            and all parent naming containers find the ID. If the ID is not within those containers,
            you can assign the object instance directly to the ControlInstance property. That doesn't
            care about naming containers.</para>
            <para>This class provides methods to validate the control assigned and exception
            handling when an invalid control is used. In the ControlConnection class, it considers
            the following invalid: Control whose ID is blank, BaseValidator, 
            FieldStateController, MultiFieldStateController,
            Literal, and LiteralControl.
            Override the method <see cref="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.ControlConnection.IsValidControl(System.Web.UI.Control)"/> 
            to change the validation rules.</para>
            <para>There are several UITypeEditors subclassed from 
            <see cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseControlConnectionTypeEditor"/> to use with controls
            that define new properties using ControlConnections.</para>
            <para>See the <b>Developer's Guide</b> for an overview of this class and its subclasses.</para>
            </remarks>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.ControlConnection.#ctor(System.Web.UI.Control,System.Boolean,System.String,Jenzabar.Portal.Framework.Web.UI.Controls.Validation.INamingObject)">
            <summary>
            Constructor. This constructor is automatically assumed by BaseOneFieldCondition
            and BaseTwoFieldCondition for their ControlIDToEvaluate and SecondControlIDToEvaluate properties.
            </summary>
            <param name="pOwner">Control which owns the property that holds this class.
            It can be null only when you don't use the GetInstance method (or retrieve the ControlInstance property).
            This case is used by ControlConnectionTypeEditor to get to the IsValidControl method.</param>
            <param name="pAllowNoControl">When false, exception is thrown when no control is defined and the user calls GetInstance().</param>
            <param name="pPropertyName">The name of the property on pOwner which holds this class. Used in the default error message.</param>
            <param name="pParentNamingObject">A reference to the owner object that implements INamingObject.</param>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.ControlConnection.#ctor">
            <summary>
            Only use this when you will not need an owner or from within the Clone method which
            assigns the Owner.
            </summary>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.ControlConnection.fOwner">
            <summary>
            Storage for <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.ControlConnection.Owner"/>.
            </summary>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.ControlConnection.fAllowNoControl">
            <summary>
            Storage for <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.ControlConnection.AllowNoControl"/>.
            </summary>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.ControlConnection.fPropertyName">
            <summary>
            The name of the property which holds this instance. Used in the default error message.
            </summary>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.ControlConnection.fControlID">
            <summary>
            Storage for <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.ControlConnection.ControlID"/>
            </summary>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.ControlConnection.fControlInstance">
            <summary>
            Storage for <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.ControlConnection.ControlInstance"/>.
            </summary>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.ControlConnection.fParentNamingObject">
            <summary>
            Storage for <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.ControlConnection.ParentNamingObject"/>.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.ControlConnection.GetInstance(System.Boolean)">
            <summary>
            GetInstance returns the instance of a control associated 
            with ControlInstance or ControlID.
            </summary>
            <remarks>
            <para>If ControlInstance is null and ControlID is assigned, it searches the Owner's 
            naming container and its parent naming containers to find a match for ControlID.
            It validates any control found, throwing exceptions when its not valid,
            not found or when AllowNoControl is false, ID is also blank.</para>
            <para>It updates fControlInstance and uses that value on later calls.</para>
            </remarks>
            <returns>Reference to the control identified by ControlID or ControlInstance or null.</returns>
            <exception cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.VAMException">When the control class isn't supported by 
            <see cref="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.ControlConnection.ValidateControl(System.Web.UI.Control)"/>.</exception>
            <exception cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.VAMException">When ControlID is assigned but cannot be found.</exception>
            <exception cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.VAMException">When AllowNoControl is false and no control was assigned.</exception>
            <param name="pAllowNoControl">When true, it returns null if no control is specified. When false, it throws an exception in this case.</param>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.ControlConnection.ValidateControl(System.Web.UI.Control)">
            <summary>
            ValidateControl determines that the control assigned matches the classes allowed.
            If not, it throws a VAMException. 
            <see cref="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.ControlConnection.IsValidControl(System.Web.UI.Control)"/> determines validity.
            </summary>
            <remarks>
            Uses <see cref="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.ControlConnection.ValidateControlException(System.Web.UI.Control)"/> to throw the exception.
            </remarks>
            <param name="pControl">The control instance to validate.</param>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.ControlConnection.IsValidControl(System.Web.UI.Control)">
            <summary>
            IsValidControl should determine if pControl is supported. Return true if so, false if not.
            </summary>
            <remarks>
            <para>This class returns true unless one of these conditions are met: </para>
            <list type="bullet">
            <item><description>Control.ID.Length = 0</description></item>
            <item><description>Control is a Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseFieldStateController</description></item>
            <item><description>Control is a System.Web.UI.WebControls.Literal</description></item>
            <item><description>Control is a System.Web.UI.WebControls.LiteralControl</description></item>
            <item><description>Control is a Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseValidator</description></item>
            </list>
            <para>Override to handle specific classes.</para>
            </remarks>
            <param name="pControl">The control instance to validate.</param>
            <returns>True when the class is supported; false when not.</returns>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.ControlConnection.ValidateControlException(System.Web.UI.Control)">
            <summary>
            ValidateControlException is simply the standard exception for 
            <see cref="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.ControlConnection.ValidateControl(System.Web.UI.Control)"/>.
            </summary>
            <remarks>
            When overriding ValidateControl, call this to get the standard message.
            You can also override this to develop a different message.
            </remarks>
            <exception cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.VAMException">Always</exception>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.ControlConnection.Clone">
            <summary>
            Supports the ICloneable interface. Uses <see cref="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.ControlConnection.CopyFrom(Jenzabar.Portal.Framework.Web.UI.Controls.Validation.ControlConnection)"/>.
            </summary>
            <returns>New ControlConnection class based on the type of the current instance.</returns>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.ControlConnection.CopyFrom(Jenzabar.Portal.Framework.Web.UI.Controls.Validation.ControlConnection)">
            <summary>
            CopyFrom copies the properties from another instance to this one.
            </summary>
            <param name="pSource">The source object whose fields will be copied.</param>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.ControlConnection.GetName">
            <summary>
            Implements INamingObject.GetName.
            </summary>
            <returns>The name for the error message.</returns>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.ControlConnection.Owner">
            <summary>
            Owner is a control on the page that defines
            the starting naming container for looking up the ControlID property.
            </summary>
            <value>
            It is required. The ID is searched in the Owner.NamingContainer or one of its parents.
            </value>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.ControlConnection.AllowNoControl">
            <summary>
            AllowNoControl determines if a validation error occurs when 
            <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.ControlConnection.ControlInstance"/> returns null.
            </summary>
            <value>
            <para>When true, no exception is thrown.</para>
            </value>
            <remarks>
            Set by the constructor.
            </remarks>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.ControlConnection.ControlID">
            <summary>
            ControlID is the ID to the control that is referenced by this class.
            </summary>
            <value>
            <para>It must be in the <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.ControlConnection.Owner"/>'s 
            namingcontainer or one of its parents.</para>
            <para>If "", the <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.ControlConnection.ControlInstance"/> property 
            must contain the reference to the control or the control is unknown.</para>
            <para>It defaults to "".</para>
            </value>
            <remarks>
            <para><b>EditorAttribute:</b><see cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.ControlConnectionTypeEditor"/></para>
            </remarks>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.ControlConnection.ControlInstance">
            <summary>
            ControlInstance is a reference to the control.
            </summary>
            <value>
            <para>Users can assign it directly instead of assigning ControlID.
            This allows the source control to be in a different namingcontainer from the state change control.
            Assignment must be done programmatically.</para>
            <para>Internally, it uses <see cref="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.ControlConnection.GetInstance(System.Boolean)"/> to retrieve
            the instance. </para>
            </value>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.ControlConnection.ParentNamingObject">
            <summary>
            A reference to the INamingObject that owns this object. Used in building names
            for error messages.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.TypeListControlConnection.#ctor(System.Web.UI.Control,System.Boolean,System.String,Jenzabar.Portal.Framework.Web.UI.Controls.Validation.INamingObject)">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.TypeListControlConnection.fControlTypes">
            <summary>
            Storage for <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.TypeListControlConnection.ControlTypes"/>.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.TypeListControlConnection.InitControlTypes">
            <summary>
            InitControlTypes allows you to add to the ControlTypes collection.
            It is called by the constructor. (Subclasses can assign to ControlTypes after this if needed.)
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.TypeListControlConnection.IsValidControl(System.Web.UI.Control)">
            <summary>
            Confirms that Control is a type within ControlTypes.
            </summary>
            <param name="pControl">The control to validate.</param>
            <returns>True when the control matches a type in the fControlTypes collection.</returns>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.TypeListControlConnection.ControlTypes">
            <summary>
            Gets a collection of Types of controls supported by this instance.
            </summary>
            <value>
            If you want to require specific classes of controls, add each control's type 
            to this ArrayList subclass. If the list is empty, no validation is applied.
            </value>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.RequiredListConditionControlConnection.#ctor(System.Web.UI.Control,System.Boolean,System.String,Jenzabar.Portal.Framework.Web.UI.Controls.Validation.INamingObject)">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.RequiredListConditionControlConnection.InitControlTypes">
            <summary>
            Adds ListControl and HtmlSelect
            </summary>
        </member>
        <member name="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseRangeCondition">
            <summary>
            BaseRangeCondition compares the value of any text field to a Minimum and Maximum value.
            </summary>
            <remarks>
            <para>Supports any field that supports <see cref="T:System.Web.UI.ValidationPropertyAttribute"/>.</para>
            <para>The properties Minimum and Maximum accept string representation of values that establish limits.</para>
            <para>Subclasses must provide a <see cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.VAMTypeConverter"/> 
            via the <see cref="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseOneFieldCondition.GetVAMTypeConverter"/> method
            to convert the strings in the text field value, Minimum and Maximum properties
            into a data type that can be compared.</para>
            </remarks>
            <seealso cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.RangeCondition"/>
            <seealso cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.CDTRangeCondition"/>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseRangeCondition.#ctor">
            <summary>
            Constructor with no parameters.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseRangeCondition.#ctor(System.Web.UI.Control)">
            <summary>
            Constructor which sets the Owner property.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseRangeCondition.#ctor(System.String)">
            <summary>
            Constructor which sets the ControlIDToEvaluate property.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseRangeCondition.#ctor(System.Web.UI.Control,System.String)">
            <summary>
            Constructor which sets the Owner and ControlIDToEvaluate properties.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseRangeCondition.#ctor(System.Web.UI.Control,System.Web.UI.Control)">
            <summary>
            Constructor which sets the Owner and ControlToEvaluate properties.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseRangeCondition.#ctor(System.Web.UI.Control,System.String,System.String,System.String)">
            <summary>
            Constructor which sets the Owner, ControlIDToEvaluate, Minimum, and Maximum properties.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseRangeCondition.#ctor(System.Web.UI.Control,System.Web.UI.Control,System.String,System.String)">
            <summary>
            Constructor which sets the Owner, ControlToEvaluate, Minimum, and Maximum properties.
            </summary>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseRangeCondition.fMinimum">
            <summary>
            Storage for <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseRangeCondition.Minimum"/>.
            </summary>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseRangeCondition.fMinObj">
            <summary>
            fMinObj is the converted equivalent of Minimum. 
            </summary>
            <value>
            Conversion happens at <see cref="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseRangeCondition.PrepareBody"/> using the VAMTypeConverter.
            It is the native datatype version of Minimum and is used in comparison to the native datatype representation
            of the ControlIDToEvaluate's data.
            </value>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseRangeCondition.fMaximum">
            <summary>
            Storage for <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseRangeCondition.Maximum"/>.
            </summary>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseRangeCondition.fMaxObj">
            <summary>
            fMaxObj is the converted equivalent of Maximum. 
            </summary>
            <value>
            Conversion happens at <see cref="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseRangeCondition.PrepareBody"/> using the VAMTypeConverter.
            It is the native datatype version of Maximum and is used in comparison to the native datatype representation
            of the ControlIDToEvaluate's data.
            </value>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseRangeCondition.PrepareBody">
            <summary>
            Converts Minimum to fMinObj and Maximum to fMaxObj.
            </summary>
            <remarks>
            Uses <see cref="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.VAMTypeConverter.ConvertFrom(System.Object)">VAMTypeConverter.ConvertFrom</see> to convert. If that function 
            returns null, indicating the text could not be converted, it throws an exception using
            <see cref="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseCondition.ValidatePropertyMatchesDataType(System.Object,System.String,System.String,System.String)"/>.
            </remarks>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseRangeCondition.EvaluateCondition">
            <summary>
            Evaluates as "success" when the value is within the range.
            Evaluates as "failed" when the value is out of range.
            Evaluates as "cannot evaluate" when the <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseOneFieldCondition.ControlToEvaluate"/> 
            has blank text for data or cannot convert its text into the desired data type.
            </summary>
            <returns>1 for success; 0 for failed; -1 for cannot evaluate.</returns>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseRangeCondition.DefineProperties(System.Text.StringBuilder)">
            <summary>
            Defines the following properties in the client-side representation of this object: ConvStr, Comparer, 
            MinTxt, MaxTxt, and anything VAMTypeConverter.AddCultureProperties contributes.
            </summary>
            <remarks>
            <list type="table">
            <listheader>
            <term>Property</term>
            <description>Server side source</description>
            </listheader>
            <item><term>ConvStr (function)</term>
            <description><see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.VAMTypeConverter.CSConvertFromFunction">VAMTypeConverter.CSConvertFromFunction</see>.</description></item>
            <item><term>Comparer (function)</term>
            <description><see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.VAMTypeConverter.CSComparerFunction">VAMTypeConverter.CSComparerFunction</see>.</description></item>
            <item><term>MinTxt</term><description>Minimum - will be converted to the Min property during the client-side Init function</description></item>
            <item><term>MaxTxt</term><description>Maximum - will be converted to the Max property during the client-side Init function</description></item>
            </list>
            <para>It also calls the <see cref="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.VAMTypeConverter.AddCultureProperties(Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseCondition,System.Text.StringBuilder)">VAMTypeConverter.AddCultureProperties</see>
            method to add properties.</para>
            </remarks>
            <param name="pJavaScript">Append the properties to this stringbuilder.</param>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseRangeCondition.DescribeBody">
            <summary>
            Includes the Minimum and Maximum. If either is blank, its not described.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseRangeCondition.CopyFrom(Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseCondition)">
            <summary>
            Copies the Minimum and Maximum.
            </summary>
            <param name="pSource">Get the properties from this object.</param>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseRangeCondition.Minimum">
            <summary>
            Minimum is a string representing the minimum value of the range. 
            </summary>
            <value>
            <para>If it is "", there is no minimum.</para>
            <para>This string must be compatible with the <see cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.VAMTypeConverter"/>
            defined by the subclass. (On the RangeCondition, 
            see the <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.RangeCondition.DataType"/> property.) For example,
            if the data type is an integer, this value can only contain digits.</para>
            </value>
            <remarks>
            <para><b>EditorAttribute:</b><see cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.StringTypeEditor"/></para>
            </remarks>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseRangeCondition.Maximum">
            <summary>
            Maximum is a string representing the maximum value of the range. 
            </summary>
            <value>
            <para>If it is "", there is no maximum.</para>
            <para>This string must be compatible with the <see cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.VAMTypeConverter"/>
            defined by the subclass. (On the RangeCondition, 
            see the <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.RangeCondition.DataType"/> property.) For example,
            if the data type is an integer, this value can only contain digits.</para>
            </value>
            <remarks>
            <para><b>EditorAttribute:</b><see cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.StringTypeEditor"/></para>
            </remarks>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseRangeCondition.InitFunctionName">
            <summary>
            The client-side Initialization function is "VAM_InitRangeCond".
            </summary>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseRangeCondition.EvalFunctionName">
            <summary>
            The client-side Evaluation function is "VAM_EvalRangeCond".
            </summary>
        </member>
        <member name="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.RangeCondition">
            <summary>
            RangeCondition compares the value of any text field to a range determined by  
            minimum and maximum values.
            </summary>
            <remarks>
            <para>Set the <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseOneFieldCondition.ControlIDToEvaluate"/> property
            to the control and the range with <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseRangeCondition.Minimum"/>
            and <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseRangeCondition.Maximum"/> properties.
            Set the <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.RangeCondition.DataType"/> property to determine
            the data type of ControlIDToEvaluate, Minimum and Maximum.</para>
            <para>See the <b>User's Guide</b> for an overview of using this condition.</para>
            <para>The base class, <see cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseRangeCondition"/>, does most of the work.</para>
            <para>This class introduces the DataType property by implementing <see cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.IDataTypeProperty"/>.</para>
            </remarks>
        </member>
        <member name="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.IDataTypeProperty">
            <summary>
            IDataTypeProperty should be assigned to any <see cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseCondition"/> 
            or <see cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseValidator"/> subclass that
            uses a DataType property. The DataType property gives a name of a VAMTypeConverter
            (specifically a match to <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.VAMTypeConverter.Name">VAMTypeConverter.Name</see> property)
            and allows the Condition to convert from the Name to the VAMTypeConverter at runtime.
            </summary>
            <remarks>
            <para>It is used by the BaseCondition subclasses to automatically set this property
            when attaching the ControlToEvaluate to a control that supports the 
            <see cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.IGetDataTypeName"/> interface.</para>
            <code>
            if ((ControlToEvaluate is IGetDataTypeName) &amp;&amp; (this is IDataTypeProperty))
               ((IDataTypeProperty) this).DataType = ((IGetDataTypeName)ControlToEvaluate).GetDataType().Name;
            </code>
            </remarks>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.IDataTypeProperty.DataType">
            <summary>
            Allows the user to assign the name of a data type here.
            The name must match a VAMTypeConverter in the <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.Globals.DataTypes">Globals.DataTypes</see>
            collection.
            </summary>
            <remarks>
            <para>Assign the UITypeEditor <see cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.DataType_TypeEditor"/> to your
            implementation of DataType to allow the user to pick from a list of data types.</para>
            </remarks>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.RangeCondition.#ctor">
            <summary>
            Constructor with no parameters.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.RangeCondition.#ctor(System.Web.UI.Control)">
            <summary>
            Constructor which sets the Owner property.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.RangeCondition.#ctor(System.String)">
            <summary>
            Constructor which sets the ControlIDToEvaluate property.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.RangeCondition.#ctor(System.Web.UI.Control,System.String)">
            <summary>
            Constructor which sets the Owner and ControlIDToEvaluate properties.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.RangeCondition.#ctor(System.Web.UI.Control,System.Web.UI.Control)">
            <summary>
            Constructor which sets the Owner and ControlToEvaluate properties.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.RangeCondition.#ctor(System.Web.UI.Control,System.String,System.String,System.String,System.String)">
            <summary>
            Constructor which sets the Owner, ControlIDToEvaluate, Minimum, Maximum and DataType properties.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.RangeCondition.#ctor(System.Web.UI.Control,System.Web.UI.Control,System.String,System.String,System.String)">
            <summary>
            Constructor which sets the Owner, ControlToEvaluate, Minimum, Maximum and DataType properties.
            </summary>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.RangeCondition.fDataType">
            <summary>
            Storage for <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.RangeCondition.DataType"/>.
            </summary>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.RangeCondition.DataType">
            <summary>
            DataType is the name of a data type.
            </summary>
            <value>
            <para>Implements the <see cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.IDataTypeProperty"/>.</para>
            <para>The name must match the Name property of a <see cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.VAMTypeConverter"/> in the
            <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.Globals.DataTypes">Globals.DataTypes</see> property which gets its
            values from the VAM.config and custom.VAM.config files. (The match is case insensitive.)</para>
            <para>It defaults to "".</para>
            </value>
            <remarks>
            <para><b>EditorAttribute:</b><see cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.DataType_TypeEditor"/></para>
            </remarks>
        </member>
        <member name="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.CDTRangeCondition">
            <summary>
            CDTRangeCondition provides a constructor for the developer to 
            assign their own <see cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.VAMTypeConverter"/> to the 
            <see cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseRangeCondition"/>
            without adding it to the custom.VAM.config or Globals.DataTypes collection.
            </summary>
            <remarks>
            <para>Avoids having users subclass when the only thing different is 
            a VAMTypeConverter. (CDT = "CustomDataType")</para>
            <para>Use this condition programmatically. (It should not be registered in custom.VAM.config.)
            In its constructor, assign your VAMTypeConverter class.</para>
            </remarks>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.CDTRangeCondition.#ctor(Jenzabar.Portal.Framework.Web.UI.Controls.Validation.VAMTypeConverter)">
            <summary>
            Constructor sets the VAMTypeConverter.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.CDTRangeCondition.#ctor(System.Web.UI.Control,Jenzabar.Portal.Framework.Web.UI.Controls.Validation.VAMTypeConverter)">
            <summary>
            Constructor sets the Owner and VAMTypeConverter properties.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.CDTRangeCondition.#ctor(System.String,Jenzabar.Portal.Framework.Web.UI.Controls.Validation.VAMTypeConverter)">
            <summary>
            Constructor sets the ControlIDToEvaluate and VAMTypeConverter properties.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.CDTRangeCondition.#ctor(System.Web.UI.Control,System.String,Jenzabar.Portal.Framework.Web.UI.Controls.Validation.VAMTypeConverter)">
            <summary>
            Constructor sets the Owner, ControlIDToEvaluate, and VAMTypeConverter properties.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.CDTRangeCondition.#ctor(System.Web.UI.Control,System.Web.UI.Control,Jenzabar.Portal.Framework.Web.UI.Controls.Validation.VAMTypeConverter)">
            <summary>
            Constructor sets the Owner, ControlToEvaluate, and VAMTypeConverter properties.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.CDTRangeCondition.#ctor(System.Web.UI.Control,System.String,System.String,System.String,Jenzabar.Portal.Framework.Web.UI.Controls.Validation.VAMTypeConverter)">
            <summary>
            Constructor sets the Owner, ControlIDToEvaluate, Minimum, Maximum, and VAMTypeConverter properties.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.CDTRangeCondition.#ctor(System.Web.UI.Control,System.Web.UI.Control,System.String,System.String,Jenzabar.Portal.Framework.Web.UI.Controls.Validation.VAMTypeConverter)">
            <summary>
            Constructor sets the Owner, ControlToEvaluate, Minimum, Maximum, and VAMTypeConverter properties.
            </summary>
        </member>
        <member name="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseCompareTwoFieldsCondition">
            <summary>
            BaseCompareTwoFieldsCondition compares the value of two data entry fields on the form.
            </summary>
            <remarks>
            <para>Supports any field that support <see cref="T:System.Web.UI.ValidationPropertyAttribute"/>.</para>
            <para>Subclasses must provide a <see cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.VAMTypeConverter"/> 
            via the <see cref="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseOneFieldCondition.GetVAMTypeConverter"/> method
            to convert the string in the text field value into a datatype that can be compared.</para>
            </remarks>
            <seealso cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.CompareTwoFieldsCondition"/>
            <seealso cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.CDTCompareTwoFieldsCondition"/>
        </member>
        <member name="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseTwoFieldCondition">
            <summary>
            This is a base class for any condition that allows the user to define two references to fields
            on the page containing data to evaluate.
            </summary>
            <remarks>
            <para>This class introduces the property 
            <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseTwoFieldCondition.SecondControlIDToEvaluate"/> and provides full client and 
            server side support of it.</para>
            <para>See the <b>Developer's Guide</b> for details on this class.</para>
            </remarks>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseTwoFieldCondition.#ctor">
            <summary>
            Constructor with no parameters. It gets the Owner when the instance is attached to
            a class with an owner or the owner control itself.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseTwoFieldCondition.#ctor(System.Web.UI.Control)">
            <summary>
            Constructor that establishes the owner control.
            </summary>
            <param name="pOwner">Reference to the owner control</param>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseTwoFieldCondition.#ctor(System.String,System.String)">
            <summary>
            Constructor that establishes the ControlIDToEvaluate. It must be an ID to a control
            in the same naming container.
            </summary>
            <param name="pControlIDToEvaluate">ID to a control in the same naming container.</param>
            <param name="pSecondControlIDToEvaluate">ID to a second control in the same naming container.</param>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseTwoFieldCondition.#ctor(System.Web.UI.Control,System.String,System.String)">
            <summary>
            Constructor that establishes the Owner, ControlIDToEvaluate and SecondControlIDToEvaluate. The IDs must be
            referencing controls in the same naming container.
            </summary>
            <param name="pOwner">Reference to the owner control</param>
            <param name="pControlIDToEvaluate">ID to a control in the same naming container.</param>
            <param name="pSecondControlIDToEvaluate">ID to a second control in the same naming container.</param>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseTwoFieldCondition.#ctor(System.Web.UI.Control,System.Web.UI.Control,System.Web.UI.Control)">
            <summary>
            Constructor that establishes the Owner, ControlToEvaluate and SecondControlToEvaluate.
            </summary>
            <param name="pOwner">Reference to the owner control</param>
            <param name="pControlToEvaluate">Reference to a control anywhere on the page.</param>
            <param name="pSecondControlToEvaluate">Reference to a second control anywhere on the page.</param>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseTwoFieldCondition.fSecondControlToEvaluateConnection">
            <summary>
            Storage for <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseTwoFieldCondition.SecondControlToEvaluateConnection"/>
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseTwoFieldCondition.SetOwner(System.Web.UI.Control)">
            <summary>
            Assigns the Owner to <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseTwoFieldCondition.SecondControlToEvaluateConnection"/>
            in addition to calling the ancestor.
            </summary>
            <param name="pOwner">The control which owns this condition.</param>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseTwoFieldCondition.EnsureControlConnections">
            <summary>
            Tests for <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseTwoFieldCondition.SecondControlToEvaluateConnection"/> to be null. 
            If null, it creates a new instance and assigns it to SecondControlToEvaluateConnection.
            </summary>
            <remarks>
            <para>Calls <see cref="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseTwoFieldCondition.GetSecondControlToEvaluateConnectionType"/>
            to get the class type for the ControlConnection. Then uses <see cref="M:System.Activator.CreateInstance(System.Type,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)"/>
            to create it. The parameters passed to Activator.Create instance are always {Owner, !SecondControlIsRequired, "SecondControlIDToEvaluate", this}
            so users cannot supply alternative parameters unless they explicitly subclass this method
            and assign their new instance to ControlToEvaluateConnection before calling the ancestor.
            </para>
            </remarks>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseTwoFieldCondition.ConvertToThirdPartyControlConnection">
            <summary>
            Assigns <see cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.ThirdPartyControlConnection"/> to
            <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseTwoFieldCondition.SecondControlToEvaluateConnection"/>.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseTwoFieldCondition.GetSecondControlToEvaluateConnectionType">
            <summary>
            GetSecondControlToEvaluateConnectionType determines the Type used to create
            the <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseTwoFieldCondition.SecondControlToEvaluateConnection"/>.
            </summary>
            <remarks>
            This class returns: <see cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.ValidationPropertyControlConnection"/>.
            This method is overridden when a different <see cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.ControlConnection"/> class is needed.
            </remarks>
            <returns>A type compatible with ControlConnection.</returns>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseTwoFieldCondition.DefineProperties(System.Text.StringBuilder)">
            <summary>
            Adds these properties to the client-side representation of the condition object:
            IDToEval2
            </summary>
            <remarks>
            <list type="table">
            <listheader>
            <term>Property</term>
            <description>Server side source</description>
            </listheader>
            <item>
            <term>IDToEval2 (string)
            </term>
            <description>The ClientID from the control identified by 
            <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseTwoFieldCondition.SecondControlIDToEvaluate"/> or 
            <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseTwoFieldCondition.SecondControlToEvaluate"/>.
            </description>
            </item>
            </list>
            </remarks>
            <param name="pJavaScript">The properties are appended to this stringbuilder.</param>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseTwoFieldCondition.GetControlID(System.Int32)">
            <summary>
            Supports <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseTwoFieldCondition.SecondControlIDToEvaluate"/>.
            </summary>
            <param name="pIndex">Index = 0 returns ControlIDToEvaluate, Index = 1 returns SecondControlIDToEvaluate. </param>
            <returns>Index = 0 returns ControlIDToEvaluate, Index = 1 returns SecondControlIDToEvaluate. Other values return "".</returns>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseTwoFieldCondition.GetControl(System.Int32)">
            <summary>
            Supports <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseTwoFieldCondition.SecondControlToEvaluate"/>.
            </summary>
            <param name="pIndex">Index = 0 returns ControlToEvaluate, Index = 1 returns SecondControlToEvaluate. </param>
            <returns>Index = 0 returns ControlToEvaluate, Index = 1 returns SecondControlToEvaluate. Other values return null.</returns>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseTwoFieldCondition.CanEvaluate">
            <summary>
            In addition to what the ancestor does, this will return false when SecondControlToEvaluate is unassigned
            while SecondControlToEvaluateConnection.AllowNoControl is false.
            </summary>
            <returns>True when the EvaluateCondition method is allowed to be used.</returns>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseTwoFieldCondition.GetConditionEventArgs">
            <summary>
            Returns <see cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.ConditionTwoFieldEventArgs"/>.
            </summary>
            <returns>ConditionTwoFieldEventArgs</returns>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseTwoFieldCondition.GetSecondControlTextValue">
            <summary>
            GetSecondControlTextValue returns the text value of the SecondControlToEvaluate.
            It will return "" if the SecondControlToEvaluate doesn't have a text value, like a list, drop list, 
            radio button or checkbox.
            </summary>
            <remarks>
            Applies the Trim property.
            </remarks>
            <returns>The data from the SecondControlToEvaluate or "" if the control doesn't have a text value.</returns>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseTwoFieldCondition.ValidateProperties">
            <summary>
            In addition to what the ancestor does, it validates the SecondControlToEvaluate using
            the <see cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.ControlConnection"/> in <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseTwoFieldCondition.SecondControlToEvaluateConnection"/>.
            It also confirms that the the SecondControlToEvaluate is visible and throws an exception if it is not (unless
            Owner.Visible is also false).
            </summary>
            <exception cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.VAMException"/>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseTwoFieldCondition.DescribeSecondControlToEvaluate">
            <summary>
            DescribeSecondControlToEvaluate returns the name of the SecondControlIDToEvaluate
            for use with the <see cref="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseCondition.DescribeBody"/> method in subclasses.
            </summary>
            <remarks>
            It does not support SecondControlToEvalaute because that property is set programmatically
            and is not available in design mode.
            </remarks>
            <returns>If SecondControlIDToEvaluate is assigned, its returned.
            Otherwise, it returns the string "[Unknown SecondControlIDToEvaluate]".</returns>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseTwoFieldCondition.GetDesignModeErrors">
            <summary>
            SecondControlIDToEvalute must be assigned.
            </summary>
            <returns>Ancestor text plus SecondControlIDToEvaluate="" when it is blank.</returns>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseTwoFieldCondition.CopyFrom(Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseCondition)">
            <summary>
            In addition to what the ancestor assigns, this copies the ControlToEvaluateConnection.
            </summary>
            <param name="pSource">The compatible class that supplies the source of the properties to copy.</param>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseTwoFieldCondition.SecondControlIDToEvaluate">
            <summary>
            Gets and sets the ID to the second control whose value will be evaluated. 
            </summary>
            <value>
            <para>This is ID property, not the ClientID or UniqueID. It will be translated 
            into the ClientID at runtime.</para>
            <para>If the control cannot be found in the current or any parent NamingContainer, 
            an exception is thrown at runtime.</para>
            <para><see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseTwoFieldCondition.SecondControlToEvaluate"/> overrides
            this property when it is not null.</para>
            </value>
            <remarks>
            <para>When you get or set, this property eventually calls 
            <see cref="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseTwoFieldCondition.EnsureControlConnections"/> to establish
            that the user has assigned a valid control class here.</para>
            <para><b>EditorAttribute:</b><see cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.ConditionSecondControlIDTypeEditor"/></para>
            </remarks>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseTwoFieldCondition.SecondControlToEvaluate">
            <summary>
            Gets and sets a reference to a control whose value will be evaluated. It is an 
            alternative to <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseTwoFieldCondition.SecondControlIDToEvaluate"/> that
            allows the control to be anywhere on the page instead of the same naming container as the Owner control.
            </summary>
            <value>
            <para>When assigned, it overrides any setting SecondControlIDToEvaluate.</para>
            <para>This can be a reference to the control anywhere on the page, not just in the same
            naming container.</para>
            <para>When you get or set, this property eventually calls 
            <see cref="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseTwoFieldCondition.EnsureControlConnections"/> to establish
            that the user has assigned a valid control class here.</para>
            </value>
            <exception cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.VAMException">When the control class is not validated
            by the <see cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.ControlConnection"/>.</exception>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseTwoFieldCondition.SecondControlToEvaluateConnection">
            <summary>
            SecondControlToEvaluateConnection is used by 
            <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseTwoFieldCondition.SecondControlIDToEvaluate"/> and 
            <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseTwoFieldCondition.SecondControlToEvaluate"/>
            for data storage and validation of the control class.
            </summary>
            <value>
            Calls <see cref="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseTwoFieldCondition.EnsureControlConnections"/>
            before returning the ControlConnection instance.
            </value>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseTwoFieldCondition.InitFunctionName">
            <summary>
            Returns the client-side condition initialization function "VAM_InitTwoFldCond".
            </summary>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseTwoFieldCondition.SecondControlIsRequired">
            <summary>
            Return true when the <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseTwoFieldCondition.SecondControlToEvaluate"/> is required, false when optional.
            </summary>
            <value>
            Some conditions require SecondControlIDToEvaluate/SecondControlToEvaluate to be assigned.
            Others consider it optional. This returns true, requiring the property is assigned. Override to return false.
            </value>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseCompareTwoFieldsCondition.#ctor">
            <summary>
            Constructor with no parameters.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseCompareTwoFieldsCondition.#ctor(System.Web.UI.Control)">
            <summary>
            Constructor that sets the Owner property.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseCompareTwoFieldsCondition.#ctor(System.String,System.String)">
            <summary>
            Constructor that sets the ControlIDToEvaluate and SecondControlIDToEvaluate property.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseCompareTwoFieldsCondition.#ctor(System.Web.UI.Control,System.String,System.String)">
            <summary>
            Constructor that sets the Owner, ControlIDToEvaluate and SecondControlIDToEvaluate properties.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseCompareTwoFieldsCondition.#ctor(System.Web.UI.Control,System.Web.UI.Control,System.Web.UI.Control)">
            <summary>
            Constructor that sets the Owner, ControlToEvaluate and SecondControlToEvaluate properties.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseCompareTwoFieldsCondition.#ctor(System.Web.UI.Control,System.String,System.String,Jenzabar.Portal.Framework.Web.UI.Controls.Validation.ConditionOperator)">
            <summary>
            Constructor that sets the Owner, ControlIDToEvaluate, SecondControlIDToEvaluate, and Operator properties.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseCompareTwoFieldsCondition.#ctor(System.Web.UI.Control,System.Web.UI.Control,System.Web.UI.Control,Jenzabar.Portal.Framework.Web.UI.Controls.Validation.ConditionOperator)">
            <summary>
            Constructor that sets the Owner, ControlToEvaluate, SecondControlToEvaluate, and Operator properties.
            </summary>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseCompareTwoFieldsCondition.fOperator">
            <summary>
            Storage for <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseCompareTwoFieldsCondition.Operator"/>
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseCompareTwoFieldsCondition.EvaluateCondition">
            <summary>
            Returns success when both fields can be converted, are not blank, and match based on the operator rule.
            </summary>
            <remarks>
            Returns -1 if either text values couldn't be converted to their datatype.
            </remarks>
            <returns>1 when success; 0 when failed; -1 when it cannot evaluate.</returns>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseCompareTwoFieldsCondition.DefineProperties(System.Text.StringBuilder)">
            <summary>
            Defines the following properties in the client-side representation of this object: 
            ConvStr, Comparer, Op, and anything VAMTypeConverter.AddCultureProperties contributes.
            </summary>
            <remarks>
            <list type="table">
            <listheader>
            <term>Property</term>
            <description>Server side source</description>
            </listheader>
            <item><term>ConvStr (function)</term>
            <description><see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.VAMTypeConverter.CSConvertFromFunction">VAMTypeConverter.CSConvertFromFunction</see>.</description></item>
            <item><term>Comparer (function)</term>
            <description><see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.VAMTypeConverter.CSComparerFunction">VAMTypeConverter.CSComparerFunction</see>.</description></item>
            <item><term>Op (integer)</term><description>Number assigned to each value in Operator. Uses <see cref="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseCondition.RegisterOperator(System.Text.StringBuilder,Jenzabar.Portal.Framework.Web.UI.Controls.Validation.ConditionOperator)"/>.</description></item>
            </list>
            <para>It also calls the <see cref="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.VAMTypeConverter.AddCultureProperties(Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseCondition,System.Text.StringBuilder)">VAMTypeConverter.AddCultureProperties</see>
            method to add properties.</para>
            </remarks>
            <param name="pJavaScript">Append the properties to this stringbuilder.</param>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseCompareTwoFieldsCondition.DescribeBody">
            <summary>
            DescribeControlToEvaluate() + DescribeOperator(Operator)+ DescribeSecondControlToEvaluate()
            </summary>
            <returns></returns>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseCompareTwoFieldsCondition.CopyFrom(Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseCondition)">
            <summary>
            Copies Operator
            </summary>
            <param name="pSource">Source object to get the properties.</param>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseCompareTwoFieldsCondition.Operator">
            <summary>
            Operator determines how the two fields are compared.
            </summary>
            <value>
            Defaults to ConditionOperator.Equal.
            </value>
            <seealso cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.ConditionOperator"/>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseCompareTwoFieldsCondition.EvalFunctionName">
            <summary>
            The client-side evaluation function is "VAM_EvalComp2FldsCond".
            </summary>
        </member>
        <member name="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.CompareTwoFieldsCondition">
            <summary>
            CompareTwoFieldsCondition compares two text fields against each other given an 
            operator and a datatype determined by the user.
            </summary>
            <remarks>
            <para>Set the <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseOneFieldCondition.ControlIDToEvaluate"/> property
            to the first control, <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseTwoFieldCondition.SecondControlIDToEvaluate"/>
            to the second control, and a comparison operator with the 
            <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseCompareTwoFieldsCondition.Operator"/> property.
            Set the <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.CompareTwoFieldsCondition.DataType"/> property to determine
            the data type of ControlIDToEvaluate and SecondControlIDToEvaluate.</para>
            <para>The base class, <see cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseCompareTwoFieldsCondition"/>, does most of the work.</para>
            <para>This class introduces the DataType property by implementing 
            <see cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.IDataTypeProperty"/>.</para>
            <para>See the <b>User's Guide</b> for an overview of using this condition.</para>
            </remarks>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.CompareTwoFieldsCondition.#ctor">
            <summary>
            Constructor with no parameters.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.CompareTwoFieldsCondition.#ctor(System.Web.UI.Control)">
            <summary>
            Constructor which sets the Owner property.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.CompareTwoFieldsCondition.#ctor(System.String,System.String)">
            <summary>
            Constructor which sets the ControlIDToEvaluate and SecondControlIDToEvaluate properties.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.CompareTwoFieldsCondition.#ctor(System.Web.UI.Control,System.String,System.String)">
            <summary>
            Constructor which sets the Owner, ControlIDToEvaluate and SecondControlIDToEvaluate properties.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.CompareTwoFieldsCondition.#ctor(System.Web.UI.Control,System.Web.UI.Control,System.Web.UI.Control)">
            <summary>
            Constructor which sets the Owner, ControlToEvaluate and SecondControlToEvaluate properties.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.CompareTwoFieldsCondition.#ctor(System.Web.UI.Control,System.String,System.String,Jenzabar.Portal.Framework.Web.UI.Controls.Validation.ConditionOperator,System.String)">
            <summary>
            Constructor which sets the Owner, ControlIDToEvaluate, SecondControlIDToEvaluate, Operator, and DataType properties.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.CompareTwoFieldsCondition.#ctor(System.Web.UI.Control,System.Web.UI.Control,System.Web.UI.Control,Jenzabar.Portal.Framework.Web.UI.Controls.Validation.ConditionOperator,System.String)">
            <summary>
            Constructor which sets the Owner, ControlToEvaluate, SecondControlToEvaluate, Operator, and DataType properties.
            </summary>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.CompareTwoFieldsCondition.fDataType">
            <summary>
            Storage for <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.CompareTwoFieldsCondition.DataType"/>.
            </summary>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.CompareTwoFieldsCondition.DataType">
            <summary>
            DataType is the name of a data type.
            </summary>
            <value>
            <para>Implements the <see cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.IDataTypeProperty"/>.</para>
            <para>The name must match a <see cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.VAMTypeConverter"/> in the
            <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.Globals.DataTypes">Globals.DataTypes</see> property which gets its
            values from the VAM.config and custom.VAM.config files. (The match is case insensitive.)</para>
            <para>It defaults to "".</para>
            </value>
            <remarks>
            <para><b>EditorAttribute:</b><see cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.DataType_TypeEditor"/></para>
            </remarks>
        </member>
        <member name="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.CDTCompareTwoFieldsCondition">
            <summary>
            CDTCompareTwoFieldsCondition provides a constructor for the developer to 
            assign their own <see cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.VAMTypeConverter"/> to the 
            <see cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseCompareTwoFieldsCondition"/>
            without adding it to the custom.VAM.config or Globals.DataTypes collection.
            </summary>
            <remarks>
            <para>Avoids having users subclass when the only thing different is 
            a VAMTypeConverter. (CDT = "CustomDataType")</para>
            <para>Use this condition programmatically. (It should not be registered in custom.VAM.config.)
            In its constructor, assign your VAMTypeConverter class.</para>
            </remarks>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.CDTCompareTwoFieldsCondition.#ctor(Jenzabar.Portal.Framework.Web.UI.Controls.Validation.VAMTypeConverter)">
            <summary>
            Constructor that sets the VAMTypeConverter property.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.CDTCompareTwoFieldsCondition.#ctor(System.Web.UI.Control,Jenzabar.Portal.Framework.Web.UI.Controls.Validation.VAMTypeConverter)">
            <summary>
            Constructor that sets the Owner and VAMTypeConverter properties.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.CDTCompareTwoFieldsCondition.#ctor(System.String,System.String,Jenzabar.Portal.Framework.Web.UI.Controls.Validation.VAMTypeConverter)">
            <summary>
            Constructor that sets the ControlIDToEvaluate, SecondControlIDToEvaluate, and VAMTypeConverter properties.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.CDTCompareTwoFieldsCondition.#ctor(System.Web.UI.Control,System.String,System.String,Jenzabar.Portal.Framework.Web.UI.Controls.Validation.VAMTypeConverter)">
            <summary>
            Constructor that sets the Owner, ControlIDToEvaluate, SecondControlIDToEvaluate, and VAMTypeConverter properties.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.CDTCompareTwoFieldsCondition.#ctor(System.Web.UI.Control,System.Web.UI.Control,System.Web.UI.Control,Jenzabar.Portal.Framework.Web.UI.Controls.Validation.VAMTypeConverter)">
            <summary>
            Constructor that sets the Owner, ControlToEvaluate, SecondControlToEvaluate, and VAMTypeConverter properties.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.CDTCompareTwoFieldsCondition.#ctor(System.Web.UI.Control,System.String,System.String,Jenzabar.Portal.Framework.Web.UI.Controls.Validation.ConditionOperator,Jenzabar.Portal.Framework.Web.UI.Controls.Validation.VAMTypeConverter)">
            <summary>
            Constructor that sets the Owner, ControlIDToEvaluate, SecondControlIDToEvaluate, Operator, and VAMTypeConverter properties.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.CDTCompareTwoFieldsCondition.#ctor(System.Web.UI.Control,System.Web.UI.Control,System.Web.UI.Control,Jenzabar.Portal.Framework.Web.UI.Controls.Validation.ConditionOperator,Jenzabar.Portal.Framework.Web.UI.Controls.Validation.VAMTypeConverter)">
            <summary>
            Constructor that sets the Owner, ControlToEvaluate, SecondControlToEvaluate, Operator, and VAMTypeConverter properties.
            </summary>
        </member>
        <member name="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseCompareToValueCondition">
            <summary>
            BaseCompareToValueCondition compares the value of a text field to the
            value in the <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseCompareToValueCondition.ValueToCompare"/> property.
            The user selects a comparison operator with the 
            <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseCompareToValueCondition.Operator"/> property.
            </summary>
            <remarks>
            <para>Supports any field that support <see cref="T:System.Web.UI.ValidationPropertyAttribute"/>.</para>
            <para>Subclasses must provide a <see cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.VAMTypeConverter"/> 
            via the <see cref="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseOneFieldCondition.GetVAMTypeConverter"/> method
            to convert the string in the text field value into a datatype that can be compared.</para>
            </remarks>
            <seealso cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.CompareToValueCondition"/>
            <seealso cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.CDTCompareToValueCondition"/>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseCompareToValueCondition.#ctor">
            <summary>
            Constructor with no parameters.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseCompareToValueCondition.#ctor(System.Web.UI.Control)">
            <summary>
            Constructor that sets the Owner property.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseCompareToValueCondition.#ctor(System.String)">
            <summary>
            Constructor that sets the ControlIDToEvaluate property.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseCompareToValueCondition.#ctor(System.Web.UI.Control,System.String)">
            <summary>
            Constructor that sets both the Owner and ControlIDToEvaluate properties.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseCompareToValueCondition.#ctor(System.Web.UI.Control,System.Web.UI.Control)">
            <summary>
            Constructor that sets both the Owner and ControlToEvaluate properties.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseCompareToValueCondition.#ctor(System.Web.UI.Control,System.String,Jenzabar.Portal.Framework.Web.UI.Controls.Validation.ConditionOperator,System.String)">
            <summary>
            Constructor that sets the Owner, ControlIDToEvaluate, Operator, and ValueToCompare properties.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseCompareToValueCondition.#ctor(System.Web.UI.Control,System.Web.UI.Control,Jenzabar.Portal.Framework.Web.UI.Controls.Validation.ConditionOperator,System.String)">
            <summary>
            Constructor that sets the Owner, ControlToEvaluate, Operator, and ValueToCompare properties.
            </summary>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseCompareToValueCondition.fOperator">
            <summary>
            Storage for <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseCompareToValueCondition.Operator"/>.
            </summary>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseCompareToValueCondition.fValueToCompare">
            <summary>
            Storage for <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseCompareToValueCondition.ValueToCompare"/>.
            </summary>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseCompareToValueCondition.fValueObj">
            <summary>
            fValueObj is the converted equivalent of ValueToCompare. 
            </summary>
            <value>
            Conversion happens at <see cref="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseCompareToValueCondition.PrepareBody"/> using the VAMTypeConverter.
            It is the native datatype version of ValueToCompare and is used in comparison to the native datatype representation
            of the ControlIDToEvaluate's data.
            </value>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseCompareToValueCondition.PrepareBody">
            <summary>
            In addition to calling the ancestor, converts ValueToCompare to its native form and stores the result in 
            <see cref="F:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseCompareToValueCondition.fValueObj"/>.
            </summary>
            <remarks>
            Uses <see cref="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.VAMTypeConverter.ConvertFrom(System.Object)">VAMTypeConverter.ConvertFrom</see> to handle the conversion.
            </remarks>
            <exception cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.VAMException">When conversion results in fValueObj = null (it could not convert)</exception>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseCompareToValueCondition.EvaluateCondition">
            <summary>
            Evaluates as "success" when the <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseOneFieldCondition.ControlToEvaluate"/>'s 
            data compares the to 
            <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseCompareToValueCondition.ValueToCompare"/> 
            based on the <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseCompareToValueCondition.Operator"/>. 
            Evaluates as "failed" when it does not. 
            Evaluates as "cannot evaluate" when the ControlToEvaluate's data is blank or cannot be converted into the
            native data type using the VAMTypeConverter.
            </summary>
            <returns>1 when success; 0 when failed; -1 when cannot evaluate.</returns>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseCompareToValueCondition.DefineProperties(System.Text.StringBuilder)">
            <summary>
            Defines the following properties in the client-side representation of this object: 
            ConvStr, Comparer, Op, ValTxt, and anything VAMTypeConverter.AddCultureProperties contributes.
            </summary>
            <remarks>
            <list type="table">
            <listheader>
            <term>Property</term>
            <description>Server side source</description>
            </listheader>
            <item>
            <term>ConvStr (function)</term>
            <description><see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.VAMTypeConverter.CSConvertFromFunction">VAMTypeConverter.CSConvertFromFunction</see>.</description></item>
            <item>
            <term>Comparer (function)</term>
            <description><see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.VAMTypeConverter.CSComparerFunction">VAMTypeConverter.CSComparerFunction</see>.</description></item>
            <item>
            <term>Op (integer)</term><description>Number assigned to each value in 
            Operator. Uses <see cref="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseCondition.RegisterOperator(System.Text.StringBuilder,Jenzabar.Portal.Framework.Web.UI.Controls.Validation.ConditionOperator)"/>.</description></item>
            <item>
            <term>ValTxt (string)</term>
            <description><see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseCompareToValueCondition.ValueToCompare"/>. 
            (It will be converted to its native data type on the 
            client side via InitFunctionName and stored in the Val property.)</description>
            </item>
            </list>
            <para>It also calls the <see cref="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.VAMTypeConverter.AddCultureProperties(Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseCondition,System.Text.StringBuilder)">VAMTypeConverter.AddCultureProperties</see>
            method to add properties.</para>
            </remarks>
            <param name="pJavaScript">Append the properties to this stringbuilder.</param>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseCompareToValueCondition.DescribeBody">
            <summary>
            DescribeControlToEvaluate() + DescribeOperator(Operator) + ValueToCompare
            </summary>
            <returns></returns>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseCompareToValueCondition.CopyFrom(Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseCondition)">
            <summary>
            Copies Operator and ValueToCompare
            </summary>
            <param name="pSource">Get the source properties from this object.</param>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseCompareToValueCondition.Operator">
            <summary>
            Operator determines how the two fields are compared.
            </summary>
            <value>
            Defaults to ConditionOperator.Equal.
            </value>
            <seealso cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.ConditionOperator"/>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseCompareToValueCondition.ValueToCompare">
            <summary>
            ValueToCompare is a string representing the value to be compared.
            </summary>
            <value>
            <para>The value is required. If it is blank, an exception will thrown at runtime.</para>
            <para>This string must be compatible with the VAMTypeConverter used on this condition. For example,
            if the datatype is an integer, this value can only contain digits.</para>
            <para>This value is the right side of the expression. The control's value is on the left side.</para>
            </value>
            <remarks>
            <para><b>EditorAttribute:</b><see cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.StringTypeEditor"/></para>
            </remarks>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseCompareToValueCondition.InitFunctionName">
            <summary>
            The client-side initialization function is "VAM_InitCompValCond".
            </summary>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseCompareToValueCondition.EvalFunctionName">
            <summary>
            The client-side evaluation function is "VAM_EvalCompValCond".
            </summary>
        </member>
        <member name="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.CompareToValueCondition">
            <summary>
            CompareToValueCondition compares the value of a text field to a string.
            </summary>
            <remarks>
            <para>Set the <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseOneFieldCondition.ControlIDToEvaluate"/> property
            to the control, a comparison operator with the 
            <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseCompareToValueCondition.Operator"/> property and the value
            for comparison with the <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseCompareToValueCondition.ValueToCompare"/> property.
            Set the <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.CompareToValueCondition.DataType"/> property to determine
            the data type of ControlIDToEvaluate and ValueToCompare.</para>
            The base class, <see cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseCompareToValueCondition"/>, does most of the work.
            This class introduces the DataType property by implementing <see cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.IDataTypeProperty"/>.
            <para>See the <b>User's Guide</b> for an overview of using this condition.</para>
            </remarks>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.CompareToValueCondition.#ctor">
            <summary>
            Constructor with no parameters.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.CompareToValueCondition.#ctor(System.Web.UI.Control)">
            <summary>
            Constructor that sets the Owner property.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.CompareToValueCondition.#ctor(System.String)">
            <summary>
            Constructor that sets the ControlIDToEvaluate property.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.CompareToValueCondition.#ctor(System.Web.UI.Control,System.String)">
            <summary>
            Constructor that sets the Owner and ControlIDToEvaluate properties.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.CompareToValueCondition.#ctor(System.Web.UI.Control,System.Web.UI.Control)">
            <summary>
            Constructor that sets the Owner and ControlToEvaluate properties.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.CompareToValueCondition.#ctor(System.Web.UI.Control,System.String,Jenzabar.Portal.Framework.Web.UI.Controls.Validation.ConditionOperator,System.String,System.String)">
            <summary>
            Constructor that sets the Owner, ControlIDToEvaluate, Operator, ValueToCompare, 
            and DataType properties.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.CompareToValueCondition.#ctor(System.Web.UI.Control,System.Web.UI.Control,Jenzabar.Portal.Framework.Web.UI.Controls.Validation.ConditionOperator,System.String,System.String)">
            <summary>
            Constructor that sets the Owner, ControlToEvaluate, Operator, ValueToCompare, 
            and DataType properties.
            </summary>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.CompareToValueCondition.fDataType">
            <summary>
            Storage for <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.CompareToValueCondition.DataType"/>.
            </summary>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.CompareToValueCondition.DataType">
            <summary>
            DataType is the name of a data type.
            </summary>
            <value>
            <para>Implements the <see cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.IDataTypeProperty"/>.</para>
            <para>The name must match a <see cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.VAMTypeConverter"/> in the
            <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.Globals.DataTypes">Globals.DataTypes</see> property which gets its
            values from the VAM.config and custom.VAM.config files. (The match is case insensitive.)</para>
            <para>It defaults to "".</para>
            </value>
            <remarks>
            <para><b>EditorAttribute:</b><see cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.DataType_TypeEditor"/></para>
            </remarks>
        </member>
        <member name="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.CDTCompareToValueCondition">
            <summary>
            CDTCompareToValueCondition provides a constructor for the developer to 
            assign their own <see cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.VAMTypeConverter"/> to the <see cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseCompareToValueCondition"/>
            without adding it to the custom.VAM.config or Globals.DataTypes collection.
            </summary>
            <remarks>
            <para>Avoids having users subclass when the only thing different is 
            a VAMTypeConverter. (CDT = "CustomDataType")</para>
            <para>Use this condition programmatically. (It should not be registered in custom.VAM.config.)
            In its constructor, assign your VAMTypeConverter class.</para>
            </remarks>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.CDTCompareToValueCondition.#ctor(Jenzabar.Portal.Framework.Web.UI.Controls.Validation.VAMTypeConverter)">
            <summary>
            Constructor that sets the VAMTypeConverter.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.CDTCompareToValueCondition.#ctor(System.Web.UI.Control,Jenzabar.Portal.Framework.Web.UI.Controls.Validation.VAMTypeConverter)">
            <summary>
            Constructor that sets the Owner and VAMTypeConverter properties.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.CDTCompareToValueCondition.#ctor(System.String,Jenzabar.Portal.Framework.Web.UI.Controls.Validation.VAMTypeConverter)">
            <summary>
            Constructor that sets the ControlIDToEvaluate and VAMTypeConverter properties.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.CDTCompareToValueCondition.#ctor(System.Web.UI.Control,System.String,Jenzabar.Portal.Framework.Web.UI.Controls.Validation.VAMTypeConverter)">
            <summary>
            Constructor that sets the Owner, ControlIDToEvaluate and VAMTypeConverter properties.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.CDTCompareToValueCondition.#ctor(System.Web.UI.Control,System.Web.UI.Control,Jenzabar.Portal.Framework.Web.UI.Controls.Validation.VAMTypeConverter)">
            <summary>
            Constructor that sets the Owner, ControlToEvaluate, and VAMTypeConverter properties.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.CDTCompareToValueCondition.#ctor(System.Web.UI.Control,System.String,Jenzabar.Portal.Framework.Web.UI.Controls.Validation.ConditionOperator,System.String,Jenzabar.Portal.Framework.Web.UI.Controls.Validation.VAMTypeConverter)">
            <summary>
            Constructor that sets the Owner, ControlIDToEvaluate, Operator, ValueToCompare,
            and VAMTypeConverter properties.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.CDTCompareToValueCondition.#ctor(System.Web.UI.Control,System.Web.UI.Control,Jenzabar.Portal.Framework.Web.UI.Controls.Validation.ConditionOperator,System.String,Jenzabar.Portal.Framework.Web.UI.Controls.Validation.VAMTypeConverter)">
            <summary>
            Constructor that sets the Owner, ControlToEvaluate, Operator, ValueToCompare,
            and VAMTypeConverter properties. 
            </summary>
        </member>
        <member name="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseDifferenceCondition">
            <summary>
            BaseDifferenceCondition compares the difference between two fields (numerically)
            to some other value. 
            </summary>
            <remarks>
            <para>It is used to determine that two fields are separated by
            some value. For example, field 1 differs from field 2 by less than 5.
            The user selects a comparison operator with the 
            <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseCompareTwoFieldsCondition.Operator"/> property.</para>
            <para>Supports any field that support <see cref="T:System.Web.UI.ValidationPropertyAttribute"/>.</para>
            <para>Subclasses must provide a <see cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.VAMTypeConverter"/> 
            via the <see cref="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseOneFieldCondition.GetVAMTypeConverter"/> method
            to convert the string in the text field value into a datatype that can be compared.</para>
            </remarks>
            <seealso cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.DifferenceCondition"/>
            <seealso cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.CDTDifferenceCondition"/>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseDifferenceCondition.#ctor">
            <summary>
            Constructor with no parameters.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseDifferenceCondition.#ctor(System.Web.UI.Control)">
            <summary>
            Constructor that sets the Owner property.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseDifferenceCondition.#ctor(System.String,System.String)">
            <summary>
            Constructor that sets the ControlIDToEvaluate and SecondControlIDToEvaluate properties.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseDifferenceCondition.#ctor(System.Web.UI.Control,System.String,System.String)">
            <summary>
            Constructor that sets the Owner, ControlIDToEvaluate and SecondControlIDToEvaluate properties.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseDifferenceCondition.#ctor(System.Web.UI.Control,System.Web.UI.Control,System.Web.UI.Control)">
            <summary>
            Constructor that sets the Owner, ControlToEvaluate and SecondControlToEvaluate properties.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseDifferenceCondition.#ctor(System.Web.UI.Control,System.String,System.String,Jenzabar.Portal.Framework.Web.UI.Controls.Validation.ConditionOperator,System.Double)">
            <summary>
            Constructor that sets the Owner, ControlIDToEvaluate, SecondControlIDToEvaluate,
            Operator, and DifferenceValue properties.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseDifferenceCondition.#ctor(System.Web.UI.Control,System.Web.UI.Control,System.Web.UI.Control,Jenzabar.Portal.Framework.Web.UI.Controls.Validation.ConditionOperator,System.Double)">
            <summary>
            Constructor that sets the Owner, ControlToEvaluate, SecondControlToEvaluate,
            Operator, and DifferenceValue properties.
            </summary>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseDifferenceCondition.fDifferenceValue">
            <summary>
            Storage for <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseDifferenceCondition.DifferenceValue"/>.
            </summary>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseDifferenceCondition.fDiffResult">
            <summary>
            The resulting difference calculated by EvaluateCondition.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseDifferenceCondition.PrepareBody">
            <exception cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.VAMException">When the VAMTypeConverter does not 
            support DifferenceCondition. (VAMTypeConverter.OneMultiplier = 0)</exception>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseDifferenceCondition.EvaluateCondition">
            <summary>
            Evaluates as "success" when the data of the two fields compares based on the 
            <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseCompareTwoFieldsCondition.Operator"/> and 
            <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseDifferenceCondition.DifferenceValue"/>.
            Evaluates as "failed" when it does not. Evaluates as "cannot evaluate" when it cannot convert any of the text fields to the datatype expected or 
            either text field is blank.
            </summary>
            <returns>1 when success; 0 when failed; -1 when cannot evaluate.</returns>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseDifferenceCondition.DefineJavaScript(Jenzabar.Portal.Framework.Web.UI.Controls.Validation.VAMPage)">
            <summary>
            Installs the VAM_XVF.js file for the "VAM_EvalDiffCond" function.
            </summary>
            <param name="pPage"></param>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseDifferenceCondition.DefineProperties(System.Text.StringBuilder)">
            <summary>
            Defines the following properties in the client-side representation of this object: Diff, OneMult
            </summary>
            <remarks>
            <list type="table">
            <listheader>
            <term>Property</term>
            <description>Server side source</description>
            </listheader>
            <item>
            <term>Diff (real or integer)</term><description>DifferenceValue</description></item>
            <item>
            <term>OneMult (real)</term>
            <description>fVAMTypeConverter.CSOneMultiplier</description>
            </item>
            </list>
            </remarks>
            <param name="pJavaScript">Append the properties to this stringbuilder.</param>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseDifferenceCondition.DescribeBody">
            <summary>
            DescribeControlToEvaluate() + " minus " + DescribeSecondControlToEvaluate()
                   + DescribeOperator(Operator) + DifferenceValue;
            </summary>
            <returns></returns>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseDifferenceCondition.CopyFrom(Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseCondition)">
            <summary>
            Copies DifferenceValue.
            </summary>
            <param name="pSource">The source for the properties to copy.</param>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseDifferenceCondition.DifferenceValue">
            <summary>
            DifferenceValue is the value to be compared to the difference between the two values. 
            (The diff is always absolute value)
            </summary>
            <value>
            <para>It must be 0 or higher. When you use 0, you are effectively using a
            <see cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.CompareTwoFieldsCondition"/>.</para>
            <para>This string must be compatible with the <see cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.VAMTypeConverter"/>
            that is attached. For example,
            if the data type is an integer, this value can only contain digits.</para>
            <para>This value is the right side of the expression. The control's value is on the left side.</para>
            </value>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseDifferenceCondition.EvalFunctionName">
            <summary>
            The client-side Evaluation function is "VAM_EvalDiffCond".
            </summary>
        </member>
        <member name="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.DifferenceCondition">
            <summary>
            DifferenceCondition compares the difference between two fields (numerically)
            to some other value. It is used to determine that two fields are separated by
            some value. For example, field 1 differs from field 2 by less than 5.
            </summary>
            <remarks>
            <para>Set the <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseOneFieldCondition.ControlIDToEvaluate"/> property
            to the first control, <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseTwoFieldCondition.SecondControlIDToEvaluate"/>
            to the second control, a comparison operator with the 
            <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseCompareTwoFieldsCondition.Operator"/> property,
            and the difference with <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseDifferenceCondition.DifferenceValue"/>.
            Set the <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.DifferenceCondition.DataType"/> property to determine
            the data type of ControlIDToEvaluate and SecondControlIDToEvaluate.</para>
            <para>See the <b>User's Guide</b> for an overview of using this condition.</para>
            <para>The base class, <see cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseDifferenceCondition"/>, 
            does most of the work.</para>
            <para>This class introduces the DataType property by implementing 
            <see cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.IDataTypeProperty"/>.</para>
            </remarks>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.DifferenceCondition.#ctor">
            <summary>
            Constructor with no parameters.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.DifferenceCondition.#ctor(System.Web.UI.Control)">
            <summary>
            Constructor that sets the Owner property.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.DifferenceCondition.#ctor(System.String,System.String)">
            <summary>
            Constructor the sets the ControlIDToEvaluate and SecondControlIDToEvaluate properties.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.DifferenceCondition.#ctor(System.Web.UI.Control,System.String,System.String)">
            <summary>
            Constructor the sets the Owner, ControlIDToEvaluate and SecondControlIDToEvaluate properties.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.DifferenceCondition.#ctor(System.Web.UI.Control,System.Web.UI.Control,System.Web.UI.Control)">
            <summary>
            Constructor the sets the Owner, ControlToEvaluate and SecondControlToEvaluate properties.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.DifferenceCondition.#ctor(System.Web.UI.Control,System.String,System.String,Jenzabar.Portal.Framework.Web.UI.Controls.Validation.ConditionOperator,System.Double,System.String)">
            <summary>
            Constructor the sets the Owner, ControlIDToEvaluate, SecondControlIDToEvaluate,
            Operator, DifferenceValue, and DataType properties.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.DifferenceCondition.#ctor(System.Web.UI.Control,System.Web.UI.Control,System.Web.UI.Control,Jenzabar.Portal.Framework.Web.UI.Controls.Validation.ConditionOperator,System.Double,System.String)">
            <summary>
            Constructor the sets the Owner, ControlToEvaluate, SecondControlToEvaluate,
            Operator, DifferenceValue, and DataType properties.
            </summary>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.DifferenceCondition.fDataType">
            <summary>
            Storage for <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.DifferenceCondition.DataType"/>.
            </summary>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.DifferenceCondition.DataType">
            <summary>
            DataType is the name of a data type.
            </summary>
            <value>
            <para>Implements the <see cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.IDataTypeProperty"/>.</para>
            <para>The name must match a <see cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.VAMTypeConverter"/> in the
            <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.Globals.DataTypes">Globals.DataTypes</see> property which gets its
            values from the VAM.config and custom.VAM.config files. (The match is case insensitive.)</para>
            <para>It defaults to "".</para>
            </value>
            <remarks>
            <para><b>EditorAttribute:</b><see cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.DataType_TypeEditor"/></para>
            </remarks>
        </member>
        <member name="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.CDTDifferenceCondition">
            <summary>
            CDTDifferenceCondition provides a constructor for the developer to 
            assign their own <see cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.VAMTypeConverter"/> to the 
            <see cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseDifferenceCondition"/>
            without adding it to the custom.VAM.config or Globals.DataTypes collection.
            </summary>
            <remarks>
            <para>Avoids having users subclass when the only thing different is 
            a VAMTypeConverter. (CDT = "CustomDataType")</para>
            <para>Use this condition programmatically. (It should not be registered in custom.VAM.config.)
            In its constructor, assign your VAMTypeConverter class.</para>
            </remarks>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.CDTDifferenceCondition.#ctor(Jenzabar.Portal.Framework.Web.UI.Controls.Validation.VAMTypeConverter)">
            <summary>
            Constructor that sets the VAMTypeConverter property.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.CDTDifferenceCondition.#ctor(System.Web.UI.Control,Jenzabar.Portal.Framework.Web.UI.Controls.Validation.VAMTypeConverter)">
            <summary>
            Constructor that sets the Owner and VAMTypeConverter properties.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.CDTDifferenceCondition.#ctor(System.String,System.String,Jenzabar.Portal.Framework.Web.UI.Controls.Validation.VAMTypeConverter)">
            <summary>
            Constructor that sets the ControlIDToEvaluate, SecondControlIDToEvaluate, 
            and VAMTypeConverter properties.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.CDTDifferenceCondition.#ctor(System.Web.UI.Control,System.String,System.String,Jenzabar.Portal.Framework.Web.UI.Controls.Validation.VAMTypeConverter)">
            <summary>
            Constructor that sets the Owner, ControlIDToEvaluate, SecondControlIDToEvaluate, 
            and VAMTypeConverter properties.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.CDTDifferenceCondition.#ctor(System.Web.UI.Control,System.Web.UI.Control,System.Web.UI.Control,Jenzabar.Portal.Framework.Web.UI.Controls.Validation.VAMTypeConverter)">
            <summary>
            Constructor that sets the Owner, ControlToEvaluate, SecondControlToEvaluate, 
            and VAMTypeConverter properties.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.CDTDifferenceCondition.#ctor(System.Web.UI.Control,System.String,System.String,Jenzabar.Portal.Framework.Web.UI.Controls.Validation.ConditionOperator,System.Double,Jenzabar.Portal.Framework.Web.UI.Controls.Validation.VAMTypeConverter)">
            <summary>
            Constructor that sets the Owner, ControlIDToEvaluate, SecondControlIDToEvaluate, 
            Operator, DifferenceValue, and VAMTypeConverter properties.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.CDTDifferenceCondition.#ctor(System.Web.UI.Control,System.Web.UI.Control,System.Web.UI.Control,Jenzabar.Portal.Framework.Web.UI.Controls.Validation.ConditionOperator,System.Double,Jenzabar.Portal.Framework.Web.UI.Controls.Validation.VAMTypeConverter)">
            <summary>
            Constructor that sets the Owner, ControlToEvaluate, SecondControlToEvaluate, 
            Operator, DifferenceValue, and VAMTypeConverter properties.
            </summary>
        </member>
        <member name="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseDataTypeCheckCondition">
            <summary>
            BaseDataTypeCheckCondition determines if the contents of a text field
            represent the data type. It is a format checker. For example, if the datatype is
            an integer, it attempts to convert the data into an integer. If that fails,
            the condition fails.
            </summary>
            <remarks>
            <para>Supports any field that support <see cref="T:System.Web.UI.ValidationPropertyAttribute"/>.</para>
            <para>Subclasses must provide a <see cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.VAMTypeConverter"/> 
            via the <see cref="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseOneFieldCondition.GetVAMTypeConverter"/> method
            to convert the string in the text field value into a datatype that can be compared.</para>
            </remarks>
            <seealso cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.DataTypeCheckCondition"/>
            <seealso cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.CDTDataTypeCheckCondition"/>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseDataTypeCheckCondition.#ctor">
            <summary>
            Constructor with no parameters.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseDataTypeCheckCondition.#ctor(System.Web.UI.Control)">
            <summary>
            Constructor that sets the Owner property.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseDataTypeCheckCondition.#ctor(System.String)">
            <summary>
            Constructor that sets the ControlIDToEvaluate property.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseDataTypeCheckCondition.#ctor(System.Web.UI.Control,System.String)">
            <summary>
            Constructor that sets the Owner and ControlIDToEvaluate properties.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseDataTypeCheckCondition.#ctor(System.Web.UI.Control,System.Web.UI.Control)">
            <summary>
            Constructor that sets the Owner and ControlToEvaluate properties.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseDataTypeCheckCondition.EvaluateCondition">
            <summary>
            Evaluates as "success" if it can convert the data using the VAMTypeConverter;
            evaluates as "failed" if it cannot; evaluates "cannot evaluate" if the ControlIDToEvaluate's data is blank.
            </summary>
            <returns>1 for success; 0 for failed; -1 for cannot evaluate.</returns>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseDataTypeCheckCondition.DefineProperties(System.Text.StringBuilder)">
            <summary>
            Defines the following properties in the client-side representation of this object:
            ConvStr and anything VAMTypeConverter.AddCultureProperties contributes
            </summary>
            <remarks>
            <list type="table">
            <listheader>
            <term>Property</term>
            <description>Server side source</description>
            </listheader>
            <item><term>ConvStr (function)</term>
            <description><see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.VAMTypeConverter.CSConvertFromFunction">VAMTypeConverter.CSConvertFromFunction</see>.</description></item>
            </list>
            <para>It also calls the <see cref="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.VAMTypeConverter.AddCultureProperties(Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseCondition,System.Text.StringBuilder)">VAMTypeConverter.AddCultureProperties</see>
            method to add properties.</para>
            </remarks>
            <param name="pJavaScript">Append the properties to this stringbuilder.</param>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseDataTypeCheckCondition.DescribeBody">
            <summary>
            DescribeControlToEvaluate() + " is a valid" (ancestor adds the data type name here)
            </summary>
            <returns></returns>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseDataTypeCheckCondition.EvalFunctionName">
            <summary>
            Client-side evaluation function is "VAM_EvalDTCheckCond"
            </summary>
        </member>
        <member name="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.DataTypeCheckCondition">
            <summary>
            DataTypeCheckCondition determines if the contents of a text field
            represent the data type. It is a format checker. For example, if the data type is
            an integer, it attempts to convert the data into an integer. If that fails,
            the condition fails.
            </summary>
            <remarks>
            <para>Specify the control in <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseOneFieldCondition.ControlIDToEvaluate"/>
            and the DataType in <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.DataTypeCheckCondition.DataType"/>.</para>
            <para>See the <b>User's Guide</b> for an overview of using this condition.</para>
            <para>The base class, <see cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseDataTypeCheckCondition"/>, 
            does most of the work.
            This class introduces the DataType property by implementing 
            <see cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.IDataTypeProperty"/>.</para>
            </remarks>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.DataTypeCheckCondition.#ctor">
            <summary>
            Constructor with no parameters.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.DataTypeCheckCondition.#ctor(System.Web.UI.Control)">
            <summary>
            Constructor that sets the Owner property.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.DataTypeCheckCondition.#ctor(System.String)">
            <summary>
            Constructor that sets the ControlIDToEvaluate property.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.DataTypeCheckCondition.#ctor(System.Web.UI.Control,System.String)">
            <summary>
            Constructor that sets the Owner and ControlIDToEvaluate properties.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.DataTypeCheckCondition.#ctor(System.Web.UI.Control,System.Web.UI.Control)">
            <summary>
            Constructor that sets the Owner and ControlToEvaluate properties.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.DataTypeCheckCondition.#ctor(System.Web.UI.Control,System.String,System.String)">
            <summary>
            Constructor that sets the Owner, ControlIDToEvaluate, and DataType properties.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.DataTypeCheckCondition.#ctor(System.Web.UI.Control,System.Web.UI.Control,System.String)">
            <summary>
            Constructor that sets the Owner, ControlToEvaluate, and DataType properties.
            </summary>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.DataTypeCheckCondition.fDataType">
            <summary>
            Storage for <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.DataTypeCheckCondition.DataType"/>.
            </summary>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.DataTypeCheckCondition.DataType">
            <summary>
            DataType is the name of a data type.
            </summary>
            <value>
            <para>Implements the <see cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.IDataTypeProperty"/>.</para>
            <para>The name must match a <see cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.VAMTypeConverter"/> in the
            <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.Globals.DataTypes">Globals.DataTypes</see> property which gets its
            values from the VAM.config and custom.VAM.config files. (The match is case insensitive.)</para>
            <para>It defaults to "".</para>
            </value>
            <remarks>
            <para><b>EditorAttribute:</b><see cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.DataType_TypeEditor"/></para>
            </remarks>
        </member>
        <member name="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.CDTDataTypeCheckCondition">
            <summary>
            CDTDataTypeCheckCondition provides a constructor for the developer to 
            assign their own <see cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.VAMTypeConverter"/> to the 
            <see cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseDataTypeCheckCondition"/>
            without adding it to the custom.VAM.config or Globals.DataTypes collection.
            </summary>
            <remarks>
            <para>Avoids having users subclass when the only thing different is 
            a VAMTypeConverter. (CDT = "CustomDataType")</para>
            <para>Use this condition programmatically. (It should not be registered in custom.VAM.config.)
            In its constructor, assign your VAMTypeConverter class.</para>
            </remarks>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.CDTDataTypeCheckCondition.#ctor(Jenzabar.Portal.Framework.Web.UI.Controls.Validation.VAMTypeConverter)">
            <summary>
            Constructor that sets the VAMTypeConverter.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.CDTDataTypeCheckCondition.#ctor(System.Web.UI.Control,Jenzabar.Portal.Framework.Web.UI.Controls.Validation.VAMTypeConverter)">
            <summary>
            Constructor that sets the Owner and VAMTypeConverter properties.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.CDTDataTypeCheckCondition.#ctor(System.String,Jenzabar.Portal.Framework.Web.UI.Controls.Validation.VAMTypeConverter)">
            <summary>
            Constructor that sets the ControlIDToEvaluate and VAMTypeConverter properties.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.CDTDataTypeCheckCondition.#ctor(System.Web.UI.Control,System.String,Jenzabar.Portal.Framework.Web.UI.Controls.Validation.VAMTypeConverter)">
            <summary>
            Constructor that sets the Owner, ControlIDToEvaluate and VAMTypeConverter properties.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.CDTDataTypeCheckCondition.#ctor(System.Web.UI.Control,System.Web.UI.Control,Jenzabar.Portal.Framework.Web.UI.Controls.Validation.VAMTypeConverter)">
            <summary>
            Constructor that sets the Owner, ControlToEvaluate, and VAMTypeConverter properties.
            </summary>
        </member>
        <member name="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.RegexCondition">
            <summary>
            RegexCondition compares a string from any field supporting <see cref="T:System.Web.UI.ValidationPropertyAttribute"/>
            to a Regex expression. If Regex returns a match, the condition evaluates as "success".
            </summary>
            <remarks>
            <para>Set the <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseOneFieldCondition.ControlIDToEvaluate"/> property
            to the control and the expression with <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.RegexCondition.Expression"/>.</para>
            <para>See the <b>User's Guide</b> for an overview of using this condition.</para>
            <para>The regular expression must be compatible with both .Net and JavaScript. JavaScript's RegEx
            syntax is a subset of .Net so that description should be used. See:
            <a href="http://devedge.netscape.com/library/manuals/2000/javascript/1.5/reference/regexp.html#1193136">
            http://devedge.netscape.com/library/manuals/2000/javascript/1.5/reference/regexp.html#1193136</a></para>
            <para>One of the more powerful features of Regular expressions is 
            the OR condition, using the | operator.
            For example, you can match US and internation phone number strings: (USRegEx)|(IntRegEx)</para>
            </remarks>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.RegexCondition.#ctor">
            <summary>
            Constructor with no parameters.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.RegexCondition.#ctor(System.Web.UI.Control)">
            <summary>
            Constructor that sets the Owner property.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.RegexCondition.#ctor(System.String)">
            <summary>
            Constructor that sets the ControlIDToEvaluate property.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.RegexCondition.#ctor(System.Web.UI.Control,System.String)">
            <summary>
            Constructor that sets the Owner and ControlIDToEvaluate properties.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.RegexCondition.#ctor(System.Web.UI.Control,System.Web.UI.Control)">
            <summary>
            Constructor that sets the Owner and ControlToEvaluate properties.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.RegexCondition.#ctor(System.Web.UI.Control,System.String,System.String)">
            <summary>
            Constructor that sets the Owner, ControlIDToEvaluate, and Expression properties.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.RegexCondition.#ctor(System.Web.UI.Control,System.Web.UI.Control,System.String)">
            <summary>
            Constructor that sets the Owner, ControlToEvaluate, and Expression properties.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.RegexCondition.#ctor(System.Web.UI.Control,System.String,System.String,System.Boolean,System.Boolean)">
            <summary>
            Constructor that sets the Owner, ControlIDToEvaluate, Expression,
            CaseInsensitive, and Multiline properties.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.RegexCondition.#ctor(System.Web.UI.Control,System.Web.UI.Control,System.String,System.Boolean,System.Boolean)">
            <summary>
            Constructor that sets the Owner, ControlToEvaluate, Expression,
            CaseInsensitive, and Multiline properties.
            </summary>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.RegexCondition.fExpression">
            <summary>
            Storge for <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.RegexCondition.Expression"/>.
            </summary>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.RegexCondition.fCaseInsensitive">
            <summary>
            Storge for <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.RegexCondition.CaseInsensitive"/>.
            </summary>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.RegexCondition.fMultiline">
            <summary>
            Storge for <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.RegexCondition.Multiline"/>.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.RegexCondition.CanEvaluate">
            <summary>
            Takes <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.RegexCondition.CanEvaluateNeedsExpressionAssigned"/> into account.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.RegexCondition.EvaluateCondition">
            <summary>
            Evaluates as "success" when the ControlToEvaluate's text matches the regular expression.
            Evaluates as "failed" when it does not.
            Evaluates as "cannot evaluate" when the text is blank.
            </summary>
            <returns>1 when success; 0 when failed; -1 when cannot evaluate.</returns>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.RegexCondition.DefineProperties(System.Text.StringBuilder)">
            <summary>
            Adds these properties to the client-side representation of the condition object:
            Expr, Flags
            </summary>
            <remarks>
            <list type="table">
            <listheader>
            <term>Property</term>
            <description>Server side source</description>
            </listheader>
            <item><term>Expr (string)</term>
            <description>Expression</description></item>
            <item><term>Flags (string)</term>
            <description>Javascript Regex flags parameter formatted from CaseInsensitive and Multiline.</description></item>
            </list>
            </remarks>
            <param name="pJavaScript">Append the properties to this stringbuilder.</param>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.RegexCondition.DescribeBody">
            <summary>
            Attempts to use the VAM.Config name for the expression if its 
            found in the Globals.ConfigFile.RegExPatterns.
            Otherwise, it states the Expression property.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.RegexCondition.CopyFrom(Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseCondition)">
            <summary>
            Copies Expression, CaseInsensitive, Multiline
            </summary>
            <param name="pSource">Source of properties.</param>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.RegexCondition.Expression">
            <summary>
            Expression is a Regular Expression that is valid for both JavaScript
            and .Net RegEx parsers.
            </summary>
            <value>
            <para>This condition evaluates as "success" when the Regular Expression parser 
            matches the control to this expression.</para>
            <para>When left blank, the condition evaluates as "cannot evaluate".</para>
            <para>The regular expression must be compatible with both .Net and JavaScript. JavaScript's RegEx
            syntax is a subset of .Net so that description should be used. See:
            <a href="http://devedge.netscape.com/library/manuals/2000/javascript/1.5/reference/regexp.html#1193136">
            http://devedge.netscape.com/library/manuals/2000/javascript/1.5/reference/regexp.html#1193136</a></para>
            <para>One of the more powerful features of Regular expressions is 
            the OR condition, using the | operator.
            For example, you can match US and internation phone number strings: (USRegEx)|(IntRegEx)</para>
            </value>
            <remarks>
            <para><b>EditorAttribute:</b><see cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.RegExpressionTypeEditor"/></para>
            </remarks>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.RegexCondition.CaseInsensitive">
            <summary>
            CaseInsenstive determines if the matching uses a case insensitive
            match or not.
            </summary>
            <value>
            <para>When true, it is case insensitive.</para>
            <para>Defaults to true.</para>
            </value>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.RegexCondition.Multiline">
            <summary>
            Multiline changes the meaning of ^ and $ so they match at the beginning and end, 
            respectively, of any line, and not just the beginning and end of the entire string.
            </summary>
            <value>
            <para>It defaults to false.</para>
            <para><b>Note:</b>Many browsers do not support this option during client-side regular
            expression parsing. Only set this to true when you are certain your user's browsers
            will support it. Browsers found to support it include IE for Windows and Netscape 6+.
            IE for Mac and Netscape 4 definitely do not. Others have not been tested by PeterBlum.com.</para>
            </value>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.RegexCondition.EvalFunctionName">
            <summary>
            The client-side evaluation function is "VAM_EvalRegexCond".
            </summary>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.RegexCondition.CanEvaluateNeedsExpressionAssigned">
            <summary>
            CanEvaluateNeedsExpressionAssigned determines if CanEvaluate requires Expression != ""
            to be true. Subclasses may set this to false.
            </summary>
            <value>
            This class returns true.
            </value>
        </member>
        <member name="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.CompareToStringsCondition">
            <summary>
            CompareToStringsCondition compares the contents of a textbox to a list of strings.
            If it matches one of the strings, the condition succeeds.
            </summary>
            <remarks>
            <para>Matching provides the <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.CompareToStringsCondition.MatchTextRule"/> 
            property, which permits non-exact matches such as the string must
            be contained, start or end the item in the list.</para>
            <para>This class is based on <see cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.RegexCondition"/> to use 
            the regex parser to accomplish this.
            It builds an expression on <see cref="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.CompareToStringsCondition.PrepareBody"/> 
            that looks like this:</para>
            <para>(ListItem1)|(ListItem2)|(ListItem3)|etc</para>
            <para>When using MatchTextRule.Exact, ListItem = ^ListItem&amp; </para>
            <para>When using MatchTextRule.StartsWith, ListItem = ^ListItem</para>
            <para>When using MatchTextRule.EndsWith, ListItem = ListItem&amp;</para>
            <para>The base class properties Expression and Multiline are hidden and ignored if set.</para>
            <para>See the <b>User's Guide</b> for an overview of using this condition.</para>
            </remarks>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.CompareToStringsCondition.#ctor">
            <summary>
            Constructor with no parameters.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.CompareToStringsCondition.#ctor(System.Web.UI.Control)">
            <summary>
            Constructor that sets the Owner property.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.CompareToStringsCondition.#ctor(System.Web.UI.Control,System.String)">
            <summary>
            Constructor that sets the Owner and ControlIDToEvaluate properties.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.CompareToStringsCondition.#ctor(System.Web.UI.Control,System.Web.UI.Control)">
            <summary>
            Constructor that sets the Owner and ControlToEvaluate properties.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.CompareToStringsCondition.#ctor(System.Web.UI.Control,System.String,Jenzabar.Portal.Framework.Web.UI.Controls.Validation.MatchTextRule)">
            <summary>
            Constructor that sets the Owner, ControlIDToEvaluate, and MatchTextRule properties.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.CompareToStringsCondition.#ctor(System.Web.UI.Control,System.Web.UI.Control,Jenzabar.Portal.Framework.Web.UI.Controls.Validation.MatchTextRule)">
            <summary>
            Constructor that sets the Owner, ControlToEvaluate, and MatchTextRule properties.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.CompareToStringsCondition.#ctor(System.Web.UI.Control,System.String,Jenzabar.Portal.Framework.Web.UI.Controls.Validation.MatchTextRule,System.Boolean)">
            <summary>
            Constructor that sets the Owner, ControlIDToEvaluate, MatchTextRule,
            and CaseInsensitive properties.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.CompareToStringsCondition.#ctor(System.Web.UI.Control,System.Web.UI.Control,Jenzabar.Portal.Framework.Web.UI.Controls.Validation.MatchTextRule,System.Boolean)">
            <summary>
            Constructor that sets the Owner, ControlToEvaluate, MatchTextRule,
            and CaseInsensitive properties.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.CompareToStringsCondition.#ctor(System.Web.UI.Control,System.String,Jenzabar.Portal.Framework.Web.UI.Controls.Validation.CompareToStringsCollection,Jenzabar.Portal.Framework.Web.UI.Controls.Validation.MatchTextRule)">
            <summary>
            Constructor that sets the Owner, ControlIDToEvaluate, Items, and MatchTextRule
            properties.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.CompareToStringsCondition.#ctor(System.Web.UI.Control,System.Web.UI.Control,Jenzabar.Portal.Framework.Web.UI.Controls.Validation.CompareToStringsCollection,Jenzabar.Portal.Framework.Web.UI.Controls.Validation.MatchTextRule)">
            <summary>
            Constructor that sets the Owner, ControlIDToEvaluate, Items, and MatchTextRule
            properties.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.CompareToStringsCondition.#ctor(System.Web.UI.Control,System.String,Jenzabar.Portal.Framework.Web.UI.Controls.Validation.CompareToStringsCollection,Jenzabar.Portal.Framework.Web.UI.Controls.Validation.MatchTextRule,System.Boolean)">
            <summary>
            Constructor that sets the Owner, ControlIDToEvaluate, Items, MatchTextRule,
            and CaseInsensitive properties.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.CompareToStringsCondition.#ctor(System.Web.UI.Control,System.Web.UI.Control,Jenzabar.Portal.Framework.Web.UI.Controls.Validation.CompareToStringsCollection,Jenzabar.Portal.Framework.Web.UI.Controls.Validation.MatchTextRule,System.Boolean)">
            <summary>
            Constructor that sets the Owner, ControlToEvaluate, Items, MatchTextRule,
            and CaseInsensitive properties.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.CompareToStringsCondition.#ctor(System.Web.UI.Control,System.String,System.Object,System.String,System.String,Jenzabar.Portal.Framework.Web.UI.Controls.Validation.MatchTextRule)">
            <summary>
            Constructor that sets the Owner, ControlIDToEvaluate, DataSource,
            DataMember, DataTextField, and MatchTextRule properties.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.CompareToStringsCondition.#ctor(System.Web.UI.Control,System.Web.UI.Control,System.Object,System.String,System.String,Jenzabar.Portal.Framework.Web.UI.Controls.Validation.MatchTextRule)">
            <summary>
            Constructor that sets the Owner, ControlToEvaluate, DataSource,
            DataMember, DataTextField, and MatchTextRule, properties.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.CompareToStringsCondition.#ctor(System.Web.UI.Control,System.String,System.Object,System.String,System.String,Jenzabar.Portal.Framework.Web.UI.Controls.Validation.MatchTextRule,System.Boolean)">
            <summary>
            Constructor that sets the Owner, ControlIDToEvaluate, DataSource,
            DataMember, DataTextField, MatchTextRule,
            and CaseInsensitive properties.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.CompareToStringsCondition.#ctor(System.Web.UI.Control,System.Web.UI.Control,System.Object,System.String,System.String,Jenzabar.Portal.Framework.Web.UI.Controls.Validation.MatchTextRule,System.Boolean)">
            <summary>
            Constructor that sets the Owner, ControlToEvaluate, DataSource,
            DataMember, DataTextField, MatchTextRule,
            and CaseInsensitive properties.
            </summary>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.CompareToStringsCondition.fMatchTextRule">
            <summary>
            Storage for <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.CompareToStringsCondition.MatchTextRule"/>.
            </summary>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.CompareToStringsCondition.fItems">
            <summary>
            Storage for <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.CompareToStringsCondition.Items"/>.
            </summary>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.CompareToStringsCondition.fDataSource">
            <summary>
            Storage for <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.CompareToStringsCondition.DataSource"/>.
            </summary>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.CompareToStringsCondition.fDataMember">
            <summary>
            Storage for <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.CompareToStringsCondition.DataMember"/>.
            </summary>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.CompareToStringsCondition.fDataTextField">
            <summary>
            Storage for <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.CompareToStringsCondition.DataTextField"/>.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.CompareToStringsCondition.PrepareBody">
            <summary>
            Convert the Items collection into the Expression. Set Multiline to false.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.CompareToStringsCondition.CanEvaluate">
            <summary>
            In addition to the ancestor, this requires Items.Count > 0 to return true.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.CompareToStringsCondition.AppendDataSourceToItems">
            <summary>
            AppendDataSourceToItems is called by the user to transfer the contents of the 
            <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.CompareToStringsCondition.DataSource"/> into
            <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.CompareToStringsCondition.Items"/>.
            </summary>
            <remarks> 
            <para>It does not clear Items before doing this.</para>
            <para><see cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.CompareToStringsValidator"/> automatically calls this
            for you in its <see cref="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.CompareToStringsValidator.TransferProperties"/> method.</para>
            <para>If you use this condition from any other place, you must call this method.</para>
            </remarks>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.CompareToStringsCondition.DescribeBody">
            <summary>
            Identifies whether the data comes from Items, DataSource, or has yet to be setup.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.CompareToStringsCondition.CopyFrom(Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseCondition)">
            <summary>
            Copies DataSource, DataMember, DataTextField, and Items.
            </summary>
            <param name="pSource">Source object of these properties.</param>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.CompareToStringsCondition.MatchTextRule">
            <summary>
            MatchTextRule determines how the text in the TextBox is compared to
            items in the <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.CompareToStringsCondition.Items"/> list.
            </summary>
            <value>
            Defaults to MatchTextRule.Exact.
            </value>
            <seealso cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.MatchTextRule"/>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.CompareToStringsCondition.Expression">
            <summary>
            Hidden from the properties browser. If set by the user, it is ignored as CompareToStringsCondition
            reassigns it.
            </summary>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.CompareToStringsCondition.Multiline">
            <summary>
            Hidden from the properties browser. If set by the user, it is ignored.
            </summary>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.CompareToStringsCondition.Items">
            <summary>
            Items is the collection of strings which will be compared against the contents of the textbox.
            It can optionally be set by the <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.CompareToStringsCondition.DataSource"/>,
            <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.CompareToStringsCondition.DataMember"/>, and
            <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.CompareToStringsCondition.DataTextField"/> properties.
            </summary>
            <value>
            <para>You must add at least one string to this collection although it really
            should have two or more strings because the CompareToValueCondition is better for comparing
            one string.</para>
            <para>There are several ways to establish the contents of this list:</para>
            <list type="table">
            <item>
            <term>Design Mode</term>
            <description>The Properties Editor supports a UITypeEditor for this property.</description>
            </item>
            <item>
            <term>Programmatically</term>
            <description>This property is a collection. 
            Add a string by calling the Add method like this: Add("string value")</description>
            </item>
            <item>
            <term>DataSource</term>
            <description>Establish the <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.CompareToStringsCondition.DataSource"/>,
            <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.CompareToStringsCondition.DataMember"/>, and 
            <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.CompareToStringsCondition.DataTextField"/> properties then call
            the <see cref="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.CompareToStringsCondition.AppendDataSourceToItems"/> method.
            The <see cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.CompareToStringsValidator"/> automatically calls
            AppendDataSourceToItems() for you.</description>
            </item>
            </list>
            </value>
            <remarks>
            <para><b>EditorAttribute:</b><see cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.CompareToStringsCollectionEditor"/></para>
            </remarks>
            <seealso cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.CompareToStringsCollection"/>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.CompareToStringsCondition.DataSource">
            <summary>
            Gets or sets the data source that populates the 
            <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.CompareToStringsCondition.Items"/> property on the Owner's
            OnPreRender method.
            </summary>
            <value>
            Use this property to specify a source of data to populate the Items collection.
            </value>
            <remarks>
            <para>The items in the Items collection are initialized from <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.CompareToStringsCondition.DataTextField"/>
            and <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.CompareToStringsCondition.DataMember"/>.</para>
            <para>Unlike other controls, you do not need to call DataBind() on the control
            to convert your DataSource into Items. The <see cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.CompareToStringsValidator"/> 
            automatically calls its <see cref="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.CompareToStringsCondition.AppendDataSourceToItems"/>
            method during OnPreRender. If you add this condition to any other validator or FieldStateController,
            you must call AppendDataSourceToItems() after setting up the DataSource and related properties.</para>
            </remarks>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.CompareToStringsCondition.DataMember">
            <summary>
            DataMember gets or sets the specific table in the DataSource to bind to the control
            to the <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.CompareToStringsCondition.Items"/> collection.
            </summary>
            <value>
            <para>If the DataSource contains more than one table, use this 
            property to specify the exact table to bind to the control.</para>
            <para>It defaults to "".</para>
            </value>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.CompareToStringsCondition.DataTextField">
            <summary>
            DataTextField gets or sets the field of the data source that provides the strings for the 
            <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.CompareToStringsCondition.Items"/> collection.
            </summary>
            <value>
            <para>A string that specifies the field of the data source that 
            provides the text content of the list items. </para>
            <para>The default is "".</para>
            </value>
            <remarks>
            Use this property to specify a field in the <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.CompareToStringsCondition.DataSource"/>
            to display as the items of the list in a list control.
            </remarks>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.CompareToStringsCondition.CanEvaluateNeedsExpressionAssigned">
            <summary>
            Returns False
            </summary>
        </member>
        <member name="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.MatchTextRule">
            <summary>
            MatchTextRule is used by <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.CompareToStringsCondition.MatchTextRule"/> to determine
            how each text item is compared to a text string. 
            </summary>
            <remarks>
            Matching is case sensitive or insensitive
            depending on the owning class's rules.
            </remarks>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.MatchTextRule.Exact">
            <summary>
            Strings must exactly match
            </summary>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.MatchTextRule.Contains">
            <summary>
            The Control's data must contain one of the strings
            </summary>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.MatchTextRule.StartsWith">
            <summary>
            The Control's data must start with one of the strings.
            </summary>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.MatchTextRule.EndsWith">
            <summary>
            The Control's data must end with one of the strings.
            </summary>
        </member>
        <member name="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.CompareToStringsItem">
            <summary>
            CompareToStringsItem is an item representing a value in the 
            CompareToStringsCondition.<see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.CompareToStringsCondition.Items"/> collection
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.CompareToStringsItem.#ctor">
            <summary>
            Constructor with no parameters.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.CompareToStringsItem.#ctor(System.String)">
            <summary>
            Constructor that sets the Value property.
            </summary>
            <param name="pValue"></param>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.CompareToStringsItem.fValue">
            <summary>
            Storage for <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.CompareToStringsItem.Value"/>.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.CompareToStringsItem.Clone">
            <summary>
            Implements the <see cref="T:System.ICloneable"/> interface.
            </summary>
            <returns>A new instance with the same property values.</returns>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.CompareToStringsItem.Value">
            <summary>
            The string that will be compared.
            </summary>
        </member>
        <member name="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.CompareToStringsCollection">
            <summary>
            CompareToStringsCollection is a collection of <see cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.CompareToStringsItem"/> instances.
            </summary>
            <remarks>
            <para>It validates that it is passed <see cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.CompareToStringsItem"/> objects.</para>
            <para><b>TypeConverterAttribute:</b><see cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.CompareToStringsTypeConverter"/></para>
            </remarks>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.CompareToStringsCollection.#ctor">
            <summary>
            Constructor with no parameters.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.CompareToStringsCollection.Add(System.Object)">
            <summary>
            Validates that it is passed <see cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.CompareToStringsItem"/> objects.
            </summary>
            <param name="pValue">Must be a CompareToStringsItem.</param>
            <returns>The position added into the collection, starting at 0.</returns>
            <exception cref="T:System.ArgumentException">When the Value is not a CompareToStringsItem.</exception>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.CompareToStringsCollection.Clone">
            <summary>
            Supports the <see cref="T:System.ICloneable"/> interface.
            </summary>
            <returns>A clone of this instance.</returns>
        </member>
        <member name="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseIntMinMaxCondition">
            <summary>
            BaseIntMinMaxCondition is a base class for classes that provide an integer minimum
            and maximum property.
            </summary>
            <remarks>
            <para>It defines the properties <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseIntMinMaxCondition.Minimum"/> 
            and <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseIntMinMaxCondition.Maximum"/>.</para>
            <para>By default, Mimimum = 0 turns off minimum. Maximum = 0 turns off maximum.
            Override these properties to define alternative defaults and argument validation.</para>
            <para>It handles the DescribeBody and DefineProperties methods.</para>
            <para>It supports up to two controls to evaluate. The second is optional.</para>
            </remarks>
            <seealso cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseTextLengthCondition"/>
            <seealso cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.CountSelectionsCondition"/>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseIntMinMaxCondition.#ctor">
            <summary>
            Constructor with no parameters.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseIntMinMaxCondition.#ctor(System.Web.UI.Control)">
            <summary>
            Constructor that sets the Owner property.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseIntMinMaxCondition.#ctor(System.String,System.String)">
            <summary>
            Constructor that sets the ControlIDToEvaluate and SecondControlIDToEvaluate properties.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseIntMinMaxCondition.#ctor(System.Web.UI.Control,System.String,System.String)">
            <summary>
            Constructor that sets the Owner, ControlIDToEvaluate and SecondControlIDToEvaluate properties.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseIntMinMaxCondition.#ctor(System.Web.UI.Control,System.Web.UI.Control,System.Web.UI.Control)">
            <summary>
            Constructor that sets the Owner, ControlToEvaluate and SecondControlToEvaluate properties.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseIntMinMaxCondition.#ctor(System.Web.UI.Control,System.String,System.String,System.Int32,System.Int32)">
            <summary>
            Constructor that sets the Owner, ControlIDToEvaluate, SecondControlIDToEvaluate,
            Minimum, and Maximum properties.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseIntMinMaxCondition.#ctor(System.Web.UI.Control,System.Web.UI.Control,System.Web.UI.Control,System.Int32,System.Int32)">
            <summary>
            Constructor that sets the Owner, ControlToEvaluate, SecondControlToEvaluate,
            Minimum, and Maximum properties.
            </summary>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseIntMinMaxCondition.fMinimum">
            <summary>
            Storage for <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseIntMinMaxCondition.Minimum"/>.
            </summary>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseIntMinMaxCondition.fMaximum">
            <summary>
            Storage for <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseIntMinMaxCondition.Maximum"/>.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseIntMinMaxCondition.DefineProperties(System.Text.StringBuilder)">
            <summary>
            Adds these properties to the client-side representation of the condition object:
            Min, Max
            </summary>
            <remarks>
            <list type="table">
            <listheader>
            <term>Property</term>
            <description>Server side source</description>
            </listheader>
            <item><term>Min (integer)</term>
            <description>Minimum</description></item>
            <item><term>Max (integer)</term>
            <description>Maximum.</description></item>
            </list>
            </remarks>
            <param name="pJavaScript">Append the properties to this stringbuilder.</param>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseIntMinMaxCondition.DescribeBody">
            <summary>
            Describes how the value is compared to the Minimum and Maximum. If either are 0,
            they are omitted because they are at their default state. If SecondControlIDToEvaluate
            is assigned, it is included in the expression.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseIntMinMaxCondition.DescribeEvaluationTerm(System.Boolean)">
            <summary>
            DescribeEvaluationTerm provides the term that we are evaluating against
            the min/max. For example: characters, words, items. 
            </summary>
            <remarks>
            <para>Can be "".</para>
            <para>It should be able to return both singular and plural versions of the string
            depending on the Plural parameter.</para>
            <para>It defaults to "".</para>
            </remarks>
            <returns>Singular or plural version of the evaluation term.</returns>
            <param name="pPlural">When false, return singular version; when true, return plural version.</param>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseIntMinMaxCondition.CopyFrom(Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseCondition)">
            <summary>
            Copies Minimum and Maximum.
            </summary>
            <param name="pSource">Source object whose properties are copied.</param>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseIntMinMaxCondition.Minimum">
            <summary>
            Minimum is the minimum value of the range. 
            If it is 0, there is no minimum.
            </summary>
            <value>
            Defaults to 0.
            </value>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseIntMinMaxCondition.Maximum">
            <summary>
            Maximum is the maximum value of the range. 
            If it is 0, there is no maximum.
            </summary>
            <value>
            Defaults to 0.
            </value>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseIntMinMaxCondition.SecondControlIsRequired">
            <summary>
            SecondControlToEvaluate is optional. This returns false.
            </summary>
        </member>
        <member name="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseTextLengthCondition">
            <summary>
            BaseTextLengthCondition compares a number of elements in a text field to a minimum
            and maximum. The user can test against one or both.
            </summary>
            <remarks>
            <para>This is an abstract base class. Subclass to determine if the number of elements is 
            determined in characters, words or something else. You will supply
            the client and server side evaluation functions in 
            <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseTextLengthCondition.CountElementFunctionName"/>
            and <see cref="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseTextLengthCondition.CountElements(System.String)"/> respectively.
            This class provides a framework with the main evaluation functions.</para>
            <para>See the <b>Developer's Guide</b> for details.</para>
            </remarks>
            <seealso cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.TextLengthCondition"/>
            <seealso cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.WordCountCondition"/>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseTextLengthCondition.#ctor">
            <summary>
            Constructor with no parameters.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseTextLengthCondition.#ctor(System.Web.UI.Control)">
            <summary>
            Constructor that sets the Owner property.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseTextLengthCondition.#ctor(System.String,System.String)">
            <summary>
            Constructor that sets the ControlIDToEvaluate and SecondControlIDToEvaluate properties.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseTextLengthCondition.#ctor(System.Web.UI.Control,System.String,System.String)">
            <summary>
            Constructor that sets the Owner, ControlIDToEvaluate and SecondControlIDToEvaluate properties.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseTextLengthCondition.#ctor(System.Web.UI.Control,System.Web.UI.Control,System.Web.UI.Control)">
            <summary>
            Constructor that sets the Owner, ControlToEvaluate and SecondControlToEvaluate properties.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseTextLengthCondition.#ctor(System.Web.UI.Control,System.String,System.String,System.Int32,System.Int32)">
            <summary>
            Constructor that sets the Owner, ControlIDToEvaluate, SecondControlIDToEvaluate,
            Minimum, and Maximum properties.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseTextLengthCondition.#ctor(System.Web.UI.Control,System.Web.UI.Control,System.Web.UI.Control,System.Int32,System.Int32)">
            <summary>
            Constructor that sets the Owner, ControlToEvaluate, SecondControlToEvaluate,
            Minimum, and Maximum properties.
            </summary>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseTextLengthCondition.fExceedLimitBy">
            <summary>
            Set by EvaluateCondition to represent the amount the text exceeded either
            start or end limit by. For use within the ErrorMessage tokens.
            </summary>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseTextLengthCondition.fElementCount">
            <summary>
            Set by EvaluateCondition to represent the current length of the text.
            Can be in characters, words, etc, as determined by the CountElements method.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseTextLengthCondition.EvaluateCondition">
            <summary>
            Evaluates as "success" when <see cref="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseTextLengthCondition.CountElements(System.String)"/>
            returns a value that is between the minimum and maximum.
            Evaluates as "failed" otherwise. There is no "cannot evaluate" result.
            </summary>
            <remarks>
            <para>If both <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseOneFieldCondition.ControlIDToEvaluate"/> and 
            <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseTwoFieldCondition.SecondControlIDToEvaluate"/> are assigned,
            it adds the total element count of each before comparing to the minimum and maximum.</para>
            <para>Minimum and Maximum must be non-zero to be evaluated.</para>
            </remarks>
            <returns>1 for success; 0 for failed</returns>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseTextLengthCondition.CountElements(System.String)">
            <summary>
            CountElements is subclassed to determine the number of elements in the text.
            </summary>
            <returns>The number of elements found in the text passed in.</returns>
            <param name="pText">The text to parse as the count is established.</param>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseTextLengthCondition.GetControlToEvaluateConnectionType">
            <returns><see cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.TextBoxOnlyControlConnection"/></returns>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseTextLengthCondition.GetSecondControlToEvaluateConnectionType">
            <returns><see cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.TextBoxOnlyControlConnection"/></returns>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseTextLengthCondition.DefineProperties(System.Text.StringBuilder)">
            <summary>
            Adds the following properties to the client-side representation of the condition object: CntElFnc.
            </summary>
            <remarks>
            <list type="table">
            <listheader>
            <term>Property</term>
            <description>Server side source</description>
            </listheader>
            <item><term>CntElFnc (method)</term>
            <description>CountElementFunctionName</description></item>
            </list>
            </remarks>
            <param name="pJavaScript">Append the properties to this stringbuilder.</param>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseTextLengthCondition.CountElementFunctionName">
            <summary>
            CountElementFunctionName is a client-side Count Element Function name that is called
            from the Evaluation Function to determine the element count within a text buffer.
            </summary>
            <value>
            <para>Code your Count Element Function in JavaScript, usually by overriding
            the <see cref="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseCA.DefineJavaScript(Jenzabar.Portal.Framework.Web.UI.Controls.Validation.VAMPage)"/> method.</para>
            <para><i>Parameters:</i></para>
              <para>Condition object</para>
              <para>Text (trimming already applied if user requested it)</para>
            <para><i>Returns:</i></para>
              <para>Integer with the number of elements found. </para>
            <para>See the <b>Developer's Guide</b> for details and example.</para>
            </value>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseTextLengthCondition.EvalFunctionName">
            <summary>
            This client-side evaluation function is "VAM_EvalBTxtLenCond".
            Subclasses should not override this. Instead, define a Count Element function in
            <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseTextLengthCondition.CountElementFunctionName"/>.
            </summary>
        </member>
        <member name="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.TextBoxOnlyControlConnection">
            <summary>
            TextBoxOnlyControlConnection is used by controls that only work on textboxes.
            </summary>
            <remarks>
            <para>Considers <see cref="T:System.Web.UI.WebControls.TextBox"/> and 
            <see cref="T:System.Web.UI.HtmlControls.HtmlInputText"/> to be valid.
            </para>
            <para>This class is reusable in other validators and conditions that support only the TextBox and HmtlInputText
            controls.</para>
            </remarks>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.TextBoxOnlyControlConnection.#ctor(System.Web.UI.Control,System.Boolean,System.String,Jenzabar.Portal.Framework.Web.UI.Controls.Validation.INamingObject)">
            <summary>
            Constructor
            </summary>
            <param name="pOwner">Control which owns the property that holds this class.
            It can be null only when you don't use the GetInstance method (or retrieve the ControlInstance property).
            This case is used by TextBoxOnlyControlTypeEditor to get to the IsValidControl method.</param>
            <param name="pAllowNoControl">When false, exception is thrown when no control is defined and the user calls GetInstance().</param>
            <param name="pPropertyName">The name of the property on pOwner which holds this class. Used in the default error message.</param>
            <param name="pParentNamingObject">A reference to the owner object that implements INamingObject.</param>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.TextBoxOnlyControlConnection.#ctor">
            <summary>
            Constructor used when the page creates an ASP.NET version of this class.
            It lacks an owner and parent naming object.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.TextBoxOnlyControlConnection.InitControlTypes">
            <summary>
            Adds the classes System.Web.UI.WebControls.TextBox and System.Web.UI.HtmlControls.HtmlInputText.
            </summary>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.TextBoxOnlyControlConnection.ControlID">
            <summary>
            Overridden to supply the UITypeEditor <see cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.TextBoxOnlyControlTypeEditor"/>.
            </summary>
            <remarks>
            <para><b>EditorAttribute:</b><see cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.TextBoxOnlyControlTypeEditor"/></para>
            </remarks>
        </member>
        <member name="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.TextLengthCondition">
            <summary>
            TextLengthCondition compares the length of a text field to a minimum
            and maximum number of characters.
            </summary>
            <remarks>
            <para>See the <b>User's Guide</b> for an overview of using this condition.</para>
            <para>Establish the minimum with <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseIntMinMaxCondition.Minimum"/>
            and maximum with <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseIntMinMaxCondition.Maximum"/>.</para>
            <para>This condition supports up to two textboxes in
            <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseOneFieldCondition.ControlIDToEvaluate"/> and
            <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseTwoFieldCondition.SecondControlIDToEvaluate"/>. When both are used,
            the total characters of the two are compared to the Minimum and Maximum.</para>
            <para>While &lt;input type='text' /&gt; fields support a maxlength, &lt;textarea&gt;
            elements do not. This condition is very useful to limit the entry in multiline TextBoxes.</para>
            </remarks>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.TextLengthCondition.#ctor">
            <summary>
            Constructor with no parameters.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.TextLengthCondition.#ctor(System.Web.UI.Control)">
            <summary>
            Constructor that sets the Owner property.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.TextLengthCondition.#ctor(System.String,System.String)">
            <summary>
            Constructor that sets the ControlIDToEvaluate and SecondControlIDToEvaluate properties.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.TextLengthCondition.#ctor(System.Web.UI.Control,System.String,System.String)">
            <summary>
            Constructor that sets the Owner, ControlIDToEvaluate and SecondControlIDToEvaluate properties.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.TextLengthCondition.#ctor(System.Web.UI.Control,System.Web.UI.Control,System.Web.UI.Control)">
            <summary>
            Constructor that sets the Owner, ControlToEvaluate and SecondControlToEvaluate properties.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.TextLengthCondition.#ctor(System.Web.UI.Control,System.String,System.String,System.Int32,System.Int32)">
            <summary>
            Constructor that sets the Owner, ControlIDToEvaluate, SecondControlIDToEvaluate,
            Minimum, and Maximum properties.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.TextLengthCondition.#ctor(System.Web.UI.Control,System.Web.UI.Control,System.Web.UI.Control,System.Int32,System.Int32)">
            <summary>
            Constructor that sets the Owner, ControlToEvaluate, SecondControlToEvaluate,
            Minimum, and Maximum properties.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.TextLengthCondition.CountElements(System.String)">
            <summary>
            Returns the number of characters in the text.
            </summary>
            <param name="pText">Count the characters in this string.</param>
            <returns>The number of characters found.</returns>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.TextLengthCondition.DescribeEvaluationTerm(System.Boolean)">
            <summary>
            Returns "characters" or "character".
            </summary>
            <param name="pPlural">When false, return the singular form; when true, return the plural.</param>
            <returns>"characters" or "character"</returns>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.TextLengthCondition.CountElementFunctionName">
            <summary>
            The client-side Count Element Function is "VAM_CntChars".
            </summary>
        </member>
        <member name="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.WordCountCondition">
            <summary>
            WordCountCondition compares the number of words in a text field to a minimum
            and maximum. The user can test against one or both.
            </summary>
            <remarks>
            <para>A "word" is a sequential string of characters that are all letters, numbers,
            the underscore and single quote. Single quote allows possessive and contraction
            terms to be one word. All other characters are word separators. Thus characters
            like punctuation and double quotes are no different than spaces.</para>
            <para>See the <b>User's Guide</b> for an overview of using this condition.</para>
            <para>Establish the minimum with <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseIntMinMaxCondition.Minimum"/>
            and maximum with <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseIntMinMaxCondition.Maximum"/>.</para>
            <para>This condition supports up to two textboxes in
            <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseOneFieldCondition.ControlIDToEvaluate"/> and
            <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseTwoFieldCondition.SecondControlIDToEvaluate"/>. When both are used,
            the total words of the two are compared to the Minimum and Maximum.</para>
            </remarks>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.WordCountCondition.#ctor">
            <summary>
            Constructor with no parameters.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.WordCountCondition.#ctor(System.Web.UI.Control)">
            <summary>
            Constructor that sets the Owner property.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.WordCountCondition.#ctor(System.String,System.String)">
            <summary>
            Constructor that sets the ControlIDToEvaluate and SecondControlIDToEvaluate properties.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.WordCountCondition.#ctor(System.Web.UI.Control,System.String,System.String)">
            <summary>
            Constructor that sets the Owner, ControlIDToEvaluate and SecondControlIDToEvaluate properties.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.WordCountCondition.#ctor(System.Web.UI.Control,System.Web.UI.Control,System.Web.UI.Control)">
            <summary>
            Constructor that sets the Owner, ControlToEvaluate and SecondControlToEvaluate properties.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.WordCountCondition.#ctor(System.Web.UI.Control,System.String,System.String,System.Int32,System.Int32)">
            <summary>
            Constructor that sets the Owner, ControlIDToEvaluate, SecondControlIDToEvaluate,
            Minimum, and Maximum properties.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.WordCountCondition.#ctor(System.Web.UI.Control,System.Web.UI.Control,System.Web.UI.Control,System.Int32,System.Int32)">
            <summary>
            Constructor that sets the Owner, ControlToEvaluate, SecondControlToEvaluate,
            Minimum, and Maximum properties.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.WordCountCondition.CountElements(System.String)">
            <summary>
            Returns the number of words. 
            </summary>
            <remarks>
            A "word" is a sequential string of characters that are all letters, numbers,
            the underscore and single quote. Single quote allows possessive and contraction
            terms to be one word. All other characters are word separators. Thus characters
            like punctuation and double quotes are no different than spaces.
            </remarks>
            <param name="pText">Count the number of words in this text.</param>
            <returns>The number of words found.</returns>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.WordCountCondition.DescribeEvaluationTerm(System.Boolean)">
            <summary>
            Returns "words" or "word".
            </summary>
            <param name="pPlural">When false, return the singular form; when true, return the plural.</param>
            <returns>"words" or "word"</returns>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.WordCountCondition.CountElementFunctionName">
            <summary>
            The client-side Count Element Function is "VAM_CntWords".
            </summary>
        </member>
        <member name="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.CheckStateCondition">
            <summary>
            CheckStateCondition evaluates CheckBox and RadioButton fields (including HtmlInput types) 
            to determine if the checked state matches one you supply.
            </summary>
            <remarks>
            <para>The property <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.CheckStateCondition.Checked"/>
            is compared to the same-named property on the control specified in
            <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseOneFieldCondition.ControlIDToEvaluate"/>
            or <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseOneFieldCondition.ControlToEvaluate"/>.
            When the values match, the condition evaluates as "success".</para>
            <para>Supports these controls: 
            <see cref="T:System.Web.UI.WebControls.CheckBox"/>,
            <see cref="T:System.Web.UI.WebControls.RadioButton"/>, 
            <see cref="T:System.Web.UI.HtmlControls.HtmlInputCheckBox"/>,
            and <see cref="T:System.Web.UI.HtmlControls.HtmlInputRadioButton"/>.</para>
            <para>See the <b>User's Guide</b> for an overview of using this condition.</para>
            </remarks>
            <seealso cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.RequiredListCondition"/>
            <seealso cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.SelectedIndexCondition"/>
            <seealso cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.CountTrueConditions"/>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.CheckStateCondition.#ctor">
            <summary>
            Constructor with no parameters.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.CheckStateCondition.#ctor(System.Web.UI.Control)">
            <summary>
            Constructor that sets the Owner property.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.CheckStateCondition.#ctor(System.String)">
            <summary>
            Constructor that sets the ControlIDToEvaluate property.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.CheckStateCondition.#ctor(System.Web.UI.Control,System.String)">
            <summary>
            Constructor that sets the Owner and ControlIDToEvaluate properties.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.CheckStateCondition.#ctor(System.Web.UI.Control,System.Web.UI.Control)">
            <summary>
            Constructor that sets the Owner and ControlToEvaluate properties.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.CheckStateCondition.#ctor(System.Web.UI.Control,System.String,System.Boolean)">
            <summary>
            Constructor that sets the Owner, ControlIDToEvaluate, and Checked properties.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.CheckStateCondition.#ctor(System.Web.UI.Control,System.Web.UI.Control,System.Boolean)">
            <summary>
            Constructor that sets the Owner, ControlToEvaluate, and Checked properties.
            </summary>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.CheckStateCondition.fChecked">
            <summary>
            Storage for <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.CheckStateCondition.Checked"/>.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.CheckStateCondition.GetControlToEvaluateConnectionType">
            <returns><see cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.CheckStateConditionControlConnection"/></returns>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.CheckStateCondition.EvaluateCondition">
            <summary>
            Evaluates as "success" when the checkbox or radiobutton's mark matches the Checked state.
            Evaluates as "failed" otherwise. It does not have a "cannot evaluate" state.
            </summary>
            <returns>1 for success; 0 for failed.</returns>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.CheckStateCondition.DefineProperties(System.Text.StringBuilder)">
            <summary>
            Adds the Chk property to the client-side representation of the condition object.
            </summary>
            <remarks>
            <list type="table">
            <listheader>
            <term>Property</term>
            <description>Server side source</description>
            </listheader>
            <item><term>Chk (boolean)</term>
            <description>Checked</description></item>
            </list>
            </remarks>
            <param name="pJavaScript">Append the properties to this stringbuilder.</param>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.CheckStateCondition.DescribeBody">
            <returns>" is checked" or " is not checked"</returns>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.CheckStateCondition.CopyFrom(Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseCondition)">
            <summary>
            Copies the Checked property.
            </summary>
            <param name="pSource">The source object whose properties are copied.</param>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.CheckStateCondition.Checked">
            <summary>
            Checked will be matched to the Checked property on a CheckBox, RadioButton,
            HtmlInputCheckBox, or HtmlInputRadioButton. When both match, the condition
            evaluates as "success".
            </summary>
            <value>
            <para>It defaults to true.</para>
            </value>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.CheckStateCondition.EvalFunctionName">
            <summary>
            The client-side evaluation function is "VAM_EvalCheckStateCond".
            </summary>
        </member>
        <member name="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.CheckStateConditionControlConnection">
            <summary>
            CheckStateConditionControlConnection considers these controls to be valid:
            System.Web.UI.WebControl.CheckBox,
            System.Web.UI.WebControl.RadioButton, System.Web.UI.HtmlControl.HtmlInputCheckBox,
            and System.Web.UI.HtmlControl.HtmlInputRadioButton. 
            </summary>
            <remarks>
            <para>Used by <see cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.CheckStateCondition"/> 
            for its ControlConnection and SecondControlConnection properties.</para>
            </remarks>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.CheckStateConditionControlConnection.#ctor(System.Web.UI.Control,System.Boolean,System.String,Jenzabar.Portal.Framework.Web.UI.Controls.Validation.INamingObject)">
            <summary>
            Constructor
            </summary>
            <param name="pOwner">Control which owns the property that holds this class.
            It can be null only when you don't use the GetInstance method (or retrieve the ControlInstance property).
            This case is used by ControlConnectionTypeEditor to get to the IsValidControl method.</param>
            <param name="pAllowNoControl">When false, exception is thrown when no control is defined and the user calls GetInstance().</param>
            <param name="pPropertyName">The name of the property on pOwner which holds this class. Used in the default error message.</param>
            <param name="pParentNamingObject">A reference to the owner object that implements INamingObject.</param>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.CheckStateConditionControlConnection.InitControlTypes">
            <summary>
            Adds CheckBox (which covers RadioButton), HtmlInputCheckBox, and HtmlInputRadioButton.
            </summary>
        </member>
        <member name="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.SelectedIndexCondition">
            <summary>
            SelectedIndexCondition evaluates all ListControl subclasses (RadioButtonList,
            Listbox, CheckBoxList, DropDownList) to see if the selected item has
            the state that the user wants.
            </summary>
            <remarks>
            <para>The user identifies an <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.SelectedIndexCondition.Index"/>
            into the list which will be evaluated, starting at 0.
            They identify a state in the <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.SelectedIndexCondition.Selected"/> 
            property, true or false, indicating if its selected/checked.
            When the values match, the condition evaluates as "success".</para>
            <para>See the <b>User's Guide</b> for an overview of using this condition.</para>
            </remarks>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.SelectedIndexCondition.#ctor">
            <summary>
            Constructor with no parameters.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.SelectedIndexCondition.#ctor(System.Web.UI.Control)">
            <summary>
            Constructor that sets the Owner property.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.SelectedIndexCondition.#ctor(System.String)">
            <summary>
            Constructor that sets the ControlIDToEvaluate property.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.SelectedIndexCondition.#ctor(System.Web.UI.Control,System.String)">
            <summary>
            Constructor that sets the Owner and ControlIDToEvaluate properties.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.SelectedIndexCondition.#ctor(System.Web.UI.Control,System.Web.UI.Control)">
            <summary>
            Constructor that sets the Owner and ControlToEvaluate properties.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.SelectedIndexCondition.#ctor(System.Web.UI.Control,System.String,System.Int32,System.Boolean)">
            <summary>
            Constructor that sets the Owner, ControlIDToEvaluate, Index, and Selected properties.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.SelectedIndexCondition.#ctor(System.Web.UI.Control,System.Web.UI.Control,System.Int32,System.Boolean)">
            <summary>
            Constructor that sets the Owner, ControlToEvaluate, Index, and Selected properties.
            </summary>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.SelectedIndexCondition.fIndex">
            <summary>
            Storage for <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.SelectedIndexCondition.Index"/>.
            </summary>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.SelectedIndexCondition.fSelected">
            <summary>
            Storage for <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.SelectedIndexCondition.Selected"/>.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.SelectedIndexCondition.GetControlToEvaluateConnectionType">
            <returns><see cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.SelectedIndexConditionControlConnection"/></returns>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.SelectedIndexCondition.CanEvaluate">
            <summary>
            Don't evaluate when Index exceeds the top bounds. (Bottom bounds were checked in the Index property.)
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.SelectedIndexCondition.EvaluateCondition">
            <summary>
            Evaluates as "success" when the item identified by 
            <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.SelectedIndexCondition.Index"/> matches the state
            at <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.SelectedIndexCondition.Selected"/>. 
            Evaluates as "failed: otherwise. This method does not return "cannot evaluate".
            </summary>
            <returns>1 for success; 0 for failed.</returns>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.SelectedIndexCondition.DefineProperties(System.Text.StringBuilder)">
            <summary>
            Adds these properties to the client-side representation of the condition object:
            Sel, Idx.
            </summary>
            <remarks>
            <list type="table">
            <listheader>
            <term>Property</term>
            <description>Server side source</description>
            </listheader>
            <item><term>Sel (boolean)</term>
            <description>Selected</description></item>
            <item><term>Idx (integer)</term>
            <description>Index</description></item>
            </list>
            </remarks>
            <param name="pJavaScript">Append the properties to this stringbuilder.</param>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.SelectedIndexCondition.DescribeBody">
            <summary>
            DescribeControlToEvaluate() + " index at " + Index.ToString() + " is " ["not "] + "selected"
            </summary>
            <returns></returns>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.SelectedIndexCondition.CopyFrom(Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseCondition)">
            <summary>
            Copies Selected and Index
            </summary>
            <param name="pSource"></param>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.SelectedIndexCondition.Index">
            <summary>
            Gets and sets the position within the list to have its state evaluated.
            The state at that position is compared to <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.SelectedIndexCondition.Selected"/>.
            </summary>
            <value>
            <para>Starts at 0. If you supply an index beyond the end of the list,
            it will not evaluate.</para>
            <para>It defaults to 0.</para>
            </value>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.SelectedIndexCondition.Selected">
            <summary>
            Gets and sets the state of the list's selection at the position in Index.
            </summary>
            <value>
            <para>If the state at the position of <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.SelectedIndexCondition.Index"/> 
            matches this value, the condition evaluates as "success".</para>
            <para>When evaluating to a CheckBoxList or RadioButtonList, it compares to the Checked property
            on the control. Otherwise, it compares the SelectedIndex property to Index.</para>
            <para>It defaults to true.</para>
            </value>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.SelectedIndexCondition.EvalFunctionName">
            <summary>
            The client-side evaluation function depends on the class of control.
            For CheckBoxList and RadioButton list, this returns "VAM_EvalSelIdxCheckCond".
            For list boxes and drop down lists, this returns "VAM_EvalSelIdxListCond".
            </summary>
        </member>
        <member name="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.SelectedIndexConditionControlConnection">
            <summary>
            SelectedIndexConditionControlConnection considers any subclass of
            <see cref="T:System.Web.UI.WebControls.ListControl"/> to be valid.
            </summary>
            <remarks>
            <para>Used by <see cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.SelectedIndexCondition"/>
            for its ControlConnection and SecondControlConnection properties.</para>
            </remarks>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.SelectedIndexConditionControlConnection.#ctor(System.Web.UI.Control,System.Boolean,System.String,Jenzabar.Portal.Framework.Web.UI.Controls.Validation.INamingObject)">
            <summary>
            Constructor.
            </summary>
            <param name="pOwner">Control which owns the property that holds this class.
            It can be null only when you don't use the GetInstance method (or retrieve the ControlInstance property).
            This case is used by ControlConnectionTypeEditor to get to the IsValidControl method.</param>
            <param name="pAllowNoControl">When false, exception is thrown when no control is defined and the user calls GetInstance().</param>
            <param name="pPropertyName">The name of the property on pOwner which holds this class. Used in the default error message.</param>
            <param name="pParentNamingObject">A reference to the owner object that implements INamingObject.</param>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.SelectedIndexConditionControlConnection.InitControlTypes">
            <summary>
            Adds System.Web.UI.WebControls.ListControl.
            </summary>
        </member>
        <member name="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.CountSelectionsCondition">
            <summary>
            CountSelectionsCondition evaluates CheckBoxLists and ListBoxes to determine
            if the number of selections is between a minimum and maximum.
            </summary>
            <remarks>
            <para>Since it is based on <see cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseTwoFieldCondition"/>, 
            the user can select up to two fields whose
            combined total will be evaluated. The two controls must be of the same control class
            because the client side code sets up one evaluation function and it differs
            depending on the control.</para>
            <para>Set the <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseOneFieldCondition.ControlIDToEvaluate"/>
            property to the control whose selection to count. If desired, set a second control
            with the <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseTwoFieldCondition.SecondControlIDToEvaluate"/> property.
            Set the <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseIntMinMaxCondition.Minimum"/> and 
            <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseIntMinMaxCondition.Maximum"/> properties to establish the valid
            range of selections. </para>
            <para>See the <b>User's Guide</b> for an overview of using this condition.</para>
            </remarks>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.CountSelectionsCondition.#ctor">
            <summary>
            Constructor with no parameters.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.CountSelectionsCondition.#ctor(System.Web.UI.Control)">
            <summary>
            Constructor that sets the Owner property.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.CountSelectionsCondition.#ctor(System.String,System.String)">
            <summary>
            Constructor that sets the ControlIDToEvaluate and SecondControlIDToEvaluate properties.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.CountSelectionsCondition.#ctor(System.Web.UI.Control,System.String,System.String)">
            <summary>
            Constructor that sets the Owner, ControlIDToEvaluate and SecondControlIDToEvaluate properties.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.CountSelectionsCondition.#ctor(System.Web.UI.Control,System.Web.UI.Control,System.Web.UI.Control)">
            <summary>
            Constructor that sets the Owner, ControlToEvaluate and SecondControlToEvaluate properties.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.CountSelectionsCondition.#ctor(System.Web.UI.Control,System.String,System.String,System.Int32,System.Int32)">
            <summary>
            Constructor that sets the Owner, ControlIDToEvaluate, SecondControlIDToEvaluate,
            Minimum, and Maximum properties.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.CountSelectionsCondition.#ctor(System.Web.UI.Control,System.Web.UI.Control,System.Web.UI.Control,System.Int32,System.Int32)">
            <summary>
            Constructor that sets the Owner, ControlToEvaluate, SecondControlToEvaluate,
            Minimum, and Maximum properties.
            </summary>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.CountSelectionsCondition.fCount">
            <summary>
            fCount is the number of selected items found during EvaluateCondition.
            Used for token replacement in the ErrorMessage.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.CountSelectionsCondition.GetControlToEvaluateConnectionType">
            <returns><see cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.CountSelectionsConditionControlConnection"/></returns>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.CountSelectionsCondition.GetSecondControlToEvaluateConnectionType">
            <returns><see cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.CountSelectionsConditionControlConnection"/></returns>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.CountSelectionsCondition.EvaluateCondition">
            <summary>
            Evaluates as "success" when the total of selected items is within the range. 
            Evaluates as "failed" otherwise.
            It does not have a "cannot evaluate" case.
            </summary>
            <remarks>
            <para>If both <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseOneFieldCondition.ControlIDToEvaluate"/>
            and <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseTwoFieldCondition.SecondControlIDToEvaluate"/> are assigned,
            the combined total of selections is compared.</para>
            <para><see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.CountSelectionsCondition.Maximum"/>
             is ignored when it equals 0.</para>
            </remarks>
            <returns>1 for success; 0 for failure.</returns>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.CountSelectionsCondition.DescribeEvaluationTerm(System.Boolean)">
            <summary>
            Returns "selected items" or "selected item".
            </summary>
            <param name="pPlural">When false, return singular term; false returns plural.</param>
            <returns>"selected items" or "selected item"</returns>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.CountSelectionsCondition.DefineJavaScript(Jenzabar.Portal.Framework.Web.UI.Controls.Validation.VAMPage)">
            <summary>
            Uses VAM_XFV.js which contains the evaluation functions 
            "VAM_EvalCountChecksCond" and "VAM_EvalCountSelsCond".
            </summary>
            <param name="pPage">Current VAMPage</param>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.CountSelectionsCondition.Maximum">
            <summary>
            Maximum is the maximum value of the range. 
            </summary>
            <value>
            <para>When 0 or 99999, this property is not used.</para>
            <para>It defaults to 99999.</para>
            </value>
            <seealso cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseIntMinMaxCondition.Maximum"/>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.CountSelectionsCondition.EvalFunctionName">
            <summary>
            The client side evaluation function depends on the control class.
            When it is a System.Web.UI.WebControls.CheckBoxList or subclass, this
            is "VAM_EvalCountChecksCond". Otherwise it is "VAM_EvalCountSelsCond".
            </summary>
            <exception cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.VAMException">When SecondControlIDToEvaluate is 
            assigned and refers to a different class of control than ControlIDToEvaluate.</exception>
        </member>
        <member name="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.CountSelectionsConditionControlConnection">
            <summary>
            CountSelectionsConditionControlConnection considers any subclass of
            System.Web.UI.WebControl.ListBox and System.Web.UI.WebControl.CheckBoxList to be valid.
            </summary>
            <remarks>
            Used by CountSelectionsCondition
            for its ControlConnection and SecondControlConnection properties.
            </remarks>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.CountSelectionsConditionControlConnection.#ctor(System.Web.UI.Control,System.Boolean,System.String,Jenzabar.Portal.Framework.Web.UI.Controls.Validation.INamingObject)">
            <summary>
            Constructor
            </summary>
            <param name="pOwner">Control which owns the property that holds this class.
            It can be null only when you don't use the GetInstance method (or retrieve the ControlInstance property).
            This case is used by ControlConnectionTypeEditor to get to the IsValidControl method.</param>
            <param name="pAllowNoControl">When false, exception is thrown when no control is defined and the user calls GetInstance().</param>
            <param name="pPropertyName">The name of the property on pOwner which holds this class. Used in the default error message.</param>
            <param name="pParentNamingObject">A reference to the owner object that implements INamingObject.</param>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.CountSelectionsConditionControlConnection.InitControlTypes">
            <summary>
            Adds System.Web.UI.WebControl.ListBox and System.Web.UI.WebControl.CheckBoxList.
            </summary>
        </member>
        <member name="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.CustomCondition">
            <summary>
            The page developer defines the client side evaluation function, identified in 
            <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseCondition.CustomEvalFunctionName"/>, and the server side evaluation method
            using the  <see cref="F:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseCondition.ServerCondition"/> event.
            </summary>
            <remarks>
            <para>CustomCondition is one way to allow users to provide custom Conditions
            without subclassing. All Conditions have the ServerCondition event handler
            and CustomEvalFunctionName property. This allows you to use any existing condition
            class and override both client and server side evaluation functions.
            You would do this if the properties offered on the condition are useful to your condition
            evaluation function.</para>
            <para>This class provides <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseOneFieldCondition.ControlIDToEvaluate"/> 
            and <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseTwoFieldCondition.SecondControlIDToEvaluate"/> as properties
            which can optionally be used within the client- and server-side evaluation functins.</para>
            <para>The base class, <see cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseOneFieldCondition"/>, 
            normally requires both ControlID properties to be
            assigned. This class overrides that behavior.</para>
            <para>The ControlIDToEvaluate and SecondConrolIDToEvaluate properties allow 
            ALL control classes to be assigned because the user's
            logic will figure out how to evaluate these controls.</para>
            <para>See the <b>User's Guide</b> for an overview of using this condition.</para>
            </remarks>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.CustomCondition.#ctor">
            <summary>
            Constructor with no parameters.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.CustomCondition.#ctor(System.Web.UI.Control)">
            <summary>
            Constructor that sets the Owner property.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.CustomCondition.#ctor(System.String,System.String)">
            <summary>
            Constructor that sets the ControlIDToEvaluate and SecondControlIDToEvaluate properties.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.CustomCondition.#ctor(System.Web.UI.Control,System.String,System.String)">
            <summary>
            Constructor that sets the Owner, ControlIDToEvaluate and SecondControlIDToEvaluate properties.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.CustomCondition.#ctor(System.Web.UI.Control,System.Web.UI.Control,System.Web.UI.Control)">
            <summary>
            Constructor that sets the Owner, ControlToEvaluate and SecondControlToEvaluate properties.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.CustomCondition.EvaluateCondition">
            <summary>
            Not allowed to be called. Here to force the user to assign ServerCondition property through
            an exception.
            </summary>
            <exception cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.VAMException">Always.</exception>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.CustomCondition.EnsureControlConnections">
            <summary>
            Assigns <see cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.CustomConditionControlConnection"/> to
            both <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseOneFieldCondition.ControlToEvaluateConnection"/> and
            <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseTwoFieldCondition.SecondControlToEvaluateConnection"/>.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.CustomCondition.DescribeBody">
            <summary>
            Since there are no major properties, it only lists the ControlIDToEvaluate 
            and SecondControlIDToEvaluate if they are assigned or returns 
            "No ControlIDToEvaluate properties are set".
            </summary>
        </member>
        <member name="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.CustomConditionControlConnection">
            <summary>
            CustomConditionControlConnection considers all controls to be valid
            except Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseValidator and Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseFieldStateController.
            </summary>
            <remarks>
            Used by CustomCondition
            for its ControlConnection and SecondControlConnection properties.
            </remarks>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.CustomConditionControlConnection.#ctor(System.Web.UI.Control,System.Boolean,System.String,Jenzabar.Portal.Framework.Web.UI.Controls.Validation.INamingObject)">
            <summary>
            Constructor
            </summary>
            <param name="pOwner">Control which owns the property that holds this class.
            It can be null only when you don't use the GetInstance method (or retrieve the ControlInstance property).
            This case is used by ControlConnectionTypeEditor to get to the IsValidControl method.</param>
            <param name="pAllowNoControl">When false, exception is thrown when no control is defined and the user calls GetInstance().</param>
            <param name="pPropertyName">The name of the property on pOwner which holds this class. Used in the default error message.</param>
            <param name="pParentNamingObject">A reference to the owner object that implements INamingObject.</param>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.CustomConditionControlConnection.IsValidControl(System.Web.UI.Control)">
            <returns>True when anything except BaseValidator or BaseFieldStateController.</returns>
        </member>
        <member name="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.FixedResultCondition">
            <summary>
            FixedResultCondition always evaluates to a fixed value of "success" or "failed"
            based on the setting in <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.FixedResultCondition.Result"/>.
            </summary>
            <remarks>
            <para>FixedResultCondition is used by the <see cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.IgnoreConditionValidator"/>. It is never
            available in the vam.config file (for selection within the Properties Editor).</para>
            <para>Its <see cref="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.FixedResultCondition.EvaluateCondition"/> 
            method always returns 1 when Result is true and 0 when Result is false.</para>
            <para>The idea is that IgnoreConditionValidator does not evaluate on the client-side
            or in <see cref="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.VAMPage.ValidateGroup(System.String)">VAMPage.ValidateGroup</see>. 
            Instead, the ValidatorAction class initializes the 
            <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseValidatorAction.IsValid">BaseValidatorAction.IsValid</see> 
            property to true and expects the page developer to set that property to false
            within their post back code as needed. The client-side maintains that setting with the
            client side evaluation function VAM_EvalFixed().</para>
            <para>For example, they compare a string in a textbox
            to a database lookup. If that comparision does not match, the validator is IsValid=false
            which shows the error message.</para>
            <para>In traditional conditions, you would split your logic
            between two places, the condition and the code that would take the data look up an use it
            for something. Why not simply let the user perform the look-up on the post back event handler
            and if there is a problem, simply set IsValid=false and regenerate the page?</para>
            </remarks>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.FixedResultCondition.fResult">
            <summary>
            Storage for <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.FixedResultCondition.Result"/>.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.FixedResultCondition.EvaluateCondition">
            <summary>
            Evaluates as success when Result = true. Evaluates as failed when Result = false.
            Does not have an 'cannot evaluate' state.
            </summary>
            <returns>1 for success; 0 for failed.</returns>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.FixedResultCondition.DefineProperties(System.Text.StringBuilder)">
            <summary>
            Adds these properties to the client-side representation of the condition object:
            Res.
            </summary>
            <remarks>
            <list type="table">
            <listheader>
            <term>Property</term>
            <description>Server side source</description>
            </listheader>
            <item><term>Res (integer)</term>
            <description>1 when Result = true; 0 when Result = false</description></item>
            </list>
            </remarks>
            <param name="pJavaScript">Append the properties to this stringbuilder.</param>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.FixedResultCondition.Result">
            <summary>
            Determines whether the evaluation function returns "success" or "failed".
            </summary>
            <value>
            <para>Set to true to return "success". Set to false to return "failed".</para>
            <para>Supports both client and server side Evaluation functions.</para>
            <para>It defaults to true (success).</para>
            </value>      
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.FixedResultCondition.EvalFunctionName">
            <summary>
            Client-side evaluation function is named "VAM_EvalFixed".
            </summary>
        </member>
        <member name="T:Jenzabar.Portal.Framework.Web.UI.PortletSessionScope">
            <summary>
            The possible scopes for session data within the portal
            </summary>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Web.UI.PortletSessionScope.PortletShortcut">
            <summary>
            Specific to an portlet occurrence (a particular portlet on a particular page)
            </summary>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Web.UI.PortletSessionScope.PortletTemplate">
            <summary>
            Specific to a portlet  in a particular context, regarldess of the page
            </summary>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Web.UI.PortletSessionScope.Global">
            <summary>
            Global to all instances and occurrences of the portlet, regardless of context or page
            </summary>
        </member>
        <member name="T:Jenzabar.Portal.Framework.Web.UI.PortletSession">
            <summary>
            A portal-safe version of the session collection
            </summary>
            <remarks>
            The session is a name/value pair store that is specific to a user.
            The data is perserved only for the current session. As soon as the user
            logs off or their session expires all the data is lost.
            
            Any serializable object may be stored in the session
            </remarks>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.PortletSession.#ctor(Jenzabar.Portal.Framework.PortletDisplay,System.Web.SessionState.HttpSessionState)">
            <summary>
            Constructs a portlet session object
            </summary>
            <param name="portletDisplay">The occurrence to construct the session for</param>
            <param name="session">The HTTP session, typically obtained through the System.Web.HttpContext.Current.Session property</param>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.PortletSession.Remove(System.String)">
            <summary>
            Removes a session variable from the store
            </summary>
            <param name="name">The name of the session variable to remove</param>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.PortletSession.Remove(System.String,Jenzabar.Portal.Framework.Web.UI.PortletSessionScope)">
            <summary>
            Removes a sessoin variable from the store
            </summary>
            <param name="name">The name of the session variable to remove</param>
            <param name="scope">The scope at which the session variable was stored</param>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.PortletSession.Item(System.String)">
            <summary>
            Gets or sets an object to or from the session
            </summary>
            <remarks>
            The scope of this data is automatically set to PortletSessionScope.PortletShortcut
            </remarks>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.PortletSession.Item(System.String,Jenzabar.Portal.Framework.Web.UI.PortletSessionScope)">
            <summary>
            Gets or sets an object to or from the session
            </summary>
            <remarks>
            Storing data with different scopes allows different instances or occurrences of
            the same portlet to share data.
            
            Data stored at the PortletSessionScope.PortletShortcut level can only be read by the
            same occurrence that stored the data, where as data stored at the
            PortletSessionScope.Portlet level could be retrieved or modified by any 
            occurrence of that portlet . Similarly, data stored at the PortletSessionScope.Global
            level is accessible by all instances and occurrences of that portlet
            
            All names are unique to their scope and do not interfere with each other in any way.
            For instance, data stored with the name "MyData" at the scope of
            PortletSessionScope.PortletShortcut has no affect on data stored with the same name but with
            a scope of PortletSessionScope.Portlet. They are treated as completely distinct
            pieces of data.
            </remarks>
        </member>
        <member name="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.MSStyle.BaseValidator">
            <remarks>
            BaseValidator mimics System.Web.UI.WebControls.BaseValidator.
            It is subclassed from VAM.BaseAnyValidator which means it inherits the many
            new properties automatically. So the user can start using the new features right away.
            There are only a few properties that use the same name but have a different implementation:
            * Display - Different enumerated types but they have matching names. Issue: programmatic
               assignment of the property will require changing System.Web.UI.WebControls.ValidatorDisplay
               to Jenzabar.Portal.Framework.Web.UI.Controls.Validation.ValidatorDisplay
            * ErrorMessage - When the BaseValidator.Text property is assigned, it becomes the error message
               and this becomes the SummaryErrorMessage. This rule will be enforced here, potentially
               overwriting anything already in SummaryErrorMessage when Text is assigned.
            * ForeColor - VAM uses the style sheet to "VAMErrorText" to define color red as a default. 
               MS.BaseValidator assigns ForeColor to red as a default. We'll assign ForeColor to red as well.
               This will allow the user to use the control without the style sheet file.
            </remarks>
        </member>
        <member name="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseAnyValidator">
            <summary>
            A base class for building Validator controls.
            </summary>
            <remarks>
            <para>BaseAnyValidator is subclassed from <see cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseValidator"/> to expose the properties
            found on the base classes of <see cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseValidatorAction"/>, 
            <see cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseCondition"/>, <see cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseErrorFormatter"/>,
            and <see cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseImageErrorFormatter"/>.</para>
            <para>It must be subclassed to define which instances of these classes belong.</para>
            <para>It does not specify a ControlIDToEvaluate property. If you want that property,
            subclass from <see cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseOneFldValidator"/>.</para>
            <para>See the <b>Developer's Guide</b> for an overview of subclassing this class.</para>
            </remarks>
            <seealso cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseOneFldValidator"/><seealso cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseTwoFldValidator"/>
        </member>
        <member name="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseValidator">
            <summary>
            BaseValidator is a control that shows an error message HTML
            in its desired position on the page when its Condition indicates "failure".
            </summary>
            <remarks>
            <para>Most of the work is
            done by the <see cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseValidatorAction"/> subclass assigned to the 
            <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseValidator.ValidatorAction"/> property.
            That class contains the <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseAction.Condition"/> property
            that supplies the <see cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseCondition"/> subclass
            used to determine if the error message is shown or hidden.</para>
            <para>Aside from providing a location for the error message on the page,
            the BaseValidator control exposes properties on the ValidatorAction and
            Condition so the user can easily edit them in the Properties Editor and have
            them written into the control's attributes instead of innertext in the ASP.NET text
            representation of the control. Properties are transferred to the ValidatorAction
            and Condition during OnPreRender through the 
            <see cref="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseValidator.TransferProperties"/> method.</para>
            <para>Each BaseValidator subclass generally has its own ValidatorAction subclass.
            If you create a new Condition or ValidatorAction and want to avoid building
            a BaseValidator subclass, use the <see cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.ProgrammersValidator"/>.</para>
            <para>See the <b>Developer's Guide</b> documentation for extensive details on creating
            your own Validator controls.</para>
            <para>This class is very lightweight. Generally you will use or subclass
            the <see cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseAnyValidator"/> class because it exposes
            the properties found on BaseCondition and BaseValidationAction. BaseValidator
            should only be subclassed when you want to re-invent the Validator control.
            It only features validation capabilities. It doesn't even have an ErrorFormatter.</para>
            </remarks>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseValidator.fInDesignModeB">
            <summary>
            fInDesignModeB tells the OnPreRender method and others that it is being
            called from design mode. When true, its not necessary to setup client side script
            code.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseValidator.#ctor">
            <summary>
            Constructor with no parameters. It calls <see cref="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseValidator.CreateAction"/>
            and assigns the result to <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseValidator.ValidatorAction"/>.
            </summary>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseValidator.fValidatorAction">
            <summary>
            Storage for <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseValidator.ValidatorAction"/>.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseValidator.Validate">
            <summary>
            Validate runs server side validation on this control. Evaluates the condition 
            and sets IsValid based on the result.
            </summary>
            <remarks>
            <para>It calls <see cref="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseValidator.TransferProperties"/>.
            Then it calls Validate on  
            <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseValidator.ValidatorAction"/>.</para>
            </remarks>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseValidator.ValidateGroup(System.String)">
            <summary>
            ValidateGroup runs server side validation on this control if
            the group name passed in matches the Group property or is "*". Evaluates the condition 
            and sets IsValid based on the result.
            </summary>
            <remarks>
            <para>It calls <see cref="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseValidator.TransferProperties"/>.
            Then it calls Validate(group) on  
            <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseValidator.ValidatorAction"/>.</para>
            </remarks>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseValidator.CreateAction">
            <summary>
            Subclass to return an instance of a BaseValidatorAction. This is called by 
            the constructor to assign the ValidatorAction.
            Returns null when not subclassed.
            </summary>
            <remarks>
            Called by the constructor.
            </remarks>
            <returns>null</returns>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseValidator.CheckValidatorActionProperty">
            <summary>
            CheckValidatorActionProperty confirms ValidatorAction is assigned.
            If not, it throws an exception.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseValidator.OnPreRender(System.EventArgs)">
            <remarks>
            <para>In addition to calling the parent OnPreRender method, this calls the 
            following methods:</para>
            <list type="bullet">
            <item>
            <description>
            <see cref="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseValidator.CheckValidatorActionProperty"/>
            </description>
            </item>
            <item>
            <description>
            <see cref="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseValidator.TransferProperties"/>
            </description>
            </item>
            <item>
            <description>
            ValidatorAction.<see cref="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseCA.Prepare"/>
            </description>
            </item>
            <item>
            <description>
            ValidatorAction.<see cref="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseValidatorAction.AddToPage(System.Boolean)"/>
            </description>
            </item>
            </list>
            </remarks>
            <param name="pE"></param>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseValidator.TransferProperties">
            <summary>
            TransferProperties is called during OnPreRender to allow the class to transfer
            its properties to the ValidatorAction and ValidatorAction.Condition objects.
            </summary>
            <remarks>
            <para>If your subclass of BaseValidator exposes new properties on your
            ValidatorAction or ValidatorAction.Condition object, store their settings
            in your control instead of directly into the Action or Condition object.
            Override this method to transfer the properties from the control to the
            Action and Condition objects.</para>
            <para>Subclasses must call their ancestor.</para>
            </remarks>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseValidator.RenderAtDesignTime">
            <summary>
            RenderAtDesignTime is used by the control designer to draw the control.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseValidator.GetName">
            <summary>
            Implements INamingObject.GetName.
            </summary>
            <returns><see cref="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.Globals.GetControlName(System.Web.UI.Control)">Globals.GetControlName</see>.</returns>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseValidator.LoadViewState(System.Object)">
            <summary>
            LoadViewState entirely abandons using the ViewState as it is very ineffecient.
            Users can store selected properties in the Page.ViewState for manual retrieval on PostBack.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseValidator.SaveViewState">
            <summary>
            SaveViewState entirely abandons using the ViewState as it is very ineffecient.
            Users can store selected properties in the Page.ViewState for manual retrieval on PostBack.
            </summary>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseValidator.ValidatorAction">
            <summary>
            ValidatorAction is the <see cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseValidatorAction"/> subclass to be used. 
            </summary>
            <value>
            <para>You must assign this property, either through an overridden 
            <see cref="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseValidator.CreateAction"/> method or assignment
            to this property.</para>
            </value>
            <exception cref="T:System.ArgumentException">When 
            <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseValidator.CanSetValidationAction"/> is false.</exception>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseValidator.IsValid">
            <summary>
            IsValid indicates that the validator is valid or not. In other words,
            the condition evaluates as success or failed.
            </summary>
            <value>
            <para>It is set by a call to <see cref="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseValidator.Validate"/>. 
            Prior to that, its value is true.
            You can change the value of this property manually after 
            validation has taken place. This allows you to override the validation result, if necessary.
            The <see cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.IgnoreConditionValidator"/> uses this technique.</para>
            <para>The <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.VAMPage.IsValid">VAMPage.IsValid</see> property is 
            set to true only if the IsValid property for each 
            validation action on the page is also set to true.</para>
            <para>This property directly gets and sets the 
            <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseValidatorAction.IsValid">BaseValidatorAction.IsValid</see> property.</para>
            </value>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseValidator.HasValidated">
            <summary>
            HasValidated indicates if the <see cref="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseValidator.Validate"/>
            method has been run.
            </summary>
            <value>
            <para>It is initially false. Validate will set it to true.</para>
            <para>You can still call Validate after this is true to reevaluate the validation.</para>
            <para>This property directly gets the 
            BaseValidatorAction.<see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseValidatorAction.HasValidated">BaseValidatorAction.HasValidated</see> property.</para>
            </value>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseValidator.CanSetValidationAction">
            <summary>
            CanSetValidationAction determines whether ValidationAction can be set. When true, it can.
            </summary>
            <value>
            Defaults to true. Subclasses override to set to false.
            </value>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseValidator.ParentNamingObject">
            <summary>
            Implements the INamingObject.ParentNamingObject interface.
            Returns null as the control is the root NamingObject.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseAnyValidator.#ctor">
            <summary>
            Constructor with no parameters.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseAnyValidator.#ctor(System.String,System.String)">
            <summary>
            Constructor that sets the ErrorMessage and Group properties.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseAnyValidator.#ctor(Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseCondition,Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseErrorFormatter,System.String,System.String,System.String)">
            <summary>
            Constructor that sets the Enabler, ErrorFormatter, ErrorMessage,
            SummaryErrorMessage, and Group properties.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseAnyValidator.#ctor(Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseCondition,Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseErrorFormatter,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Constructor that sets the Enabler, ErrorFormatter, ErrorMessage,
            SummaryErrorMessage, ErrorMessageLookupID, SummaryErrorMessageLookupID, and Group properties.
            </summary>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseAnyValidator.fEnabled">
            <summary>
            Storage for <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseAnyValidator.Enabled"/>.
            </summary>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseAnyValidator.fEnableClientScript">
            <summary>
            Storage for <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseAnyValidator.EnableClientScript"/>.
            </summary>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseAnyValidator.fEnablerContainer">
            <summary>
            Storage for <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseAnyValidator.EnablerContainer"/>.
            </summary>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseAnyValidator.fSupportClientSideLookupByID">
            <summary>
            Storage for <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseAnyValidator.SupportClientSideLookupByID"/>.
            </summary>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseAnyValidator.fNotCondition">
            <summary>
            Storage for <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseAnyValidator.NotCondition"/>.
            </summary>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseAnyValidator.fTrim">
            <summary>
            Storage for <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseAnyValidator.Trim"/>.
            </summary>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseAnyValidator.ServerCondition">
            <summary>
            ServerCondition is an event handler that allows users to replace
            the built-in EvaluateCondition method on the Condition with custom code.
            </summary>
            <remarks>
            <para>Users can instantiate any of the non-base Condition classes and use it.
            The idea is to select one whose properties are useful to your condition.
            Often, the user writes very specific code that knows every condition in the code
            and doesn't need any user configuration settings on the property. They'd use
            CustomCondition, a child class of BaseCondition, because it lacks other properties.</para>
            <para>While this event handler passes pArg as ConditionEventArgs, subclasses of
            BaseCondition may provide a subclass of ConditionEventArgs.</para>
            <list type="bullet">
            <item><description><see cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseOneFieldCondition"/> 
            uses <see cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.ConditionOneFieldEventArgs"/> which provides
              references to the control and its textual value.</description></item>
            <item><description><see cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseTwoFieldCondition"/> 
            uses <see cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.ConditionTwoFieldEventArgs"/> which provides
              references to both controls and their textual values.</description></item>
            </list>
            <para>When writing a ServerCondition function, access all public properties
            directly from the pSourceCondition parameter (after typecasting).</para>
            
            <para>The task of this event handler is to set either the IsMatch or CannotEvaluate
            properties based on what is detected from fields on the page.</para>
            <para>Transferred to Condition.ServerCondition in 
            <see cref="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseAnyValidator.TransferProperties"/>.</para>
            </remarks>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseAnyValidator.fCustomEvalFunctionName">
            <summary>
            Storage for <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseAnyValidator.CustomEvalFunctionName"/>.
            </summary>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseAnyValidator.fOverrideClientSideEvaluation">
            <summary>
            Storage for <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseCondition.OverrideClientSideEvaluation"/>.
            </summary>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseAnyValidator.fErrorFormatterContainer">
            <summary>
            Storage for <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseAnyValidator.ErrorFormatterContainer"/>.
            </summary>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseAnyValidator.fErrorMessage">
            <summary>
            Storage for <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseAnyValidator.ErrorMessage"/>.
            </summary>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseAnyValidator.fErrorMessageLookupID">
            <summary>
            Storage for <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseAnyValidator.ErrorMessageLookupID"/>.
            </summary>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseAnyValidator.fSummaryErrorMessage">
            <summary>
            Storage for <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseAnyValidator.SummaryErrorMessage"/>.
            </summary>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseAnyValidator.fSummaryErrorMessageLookupID">
            <summary>
            Storage for <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseAnyValidator.SummaryErrorMessageLookupID"/>.
            </summary>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseAnyValidator.fGroup">
            <summary>
            Storage for <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseAnyValidator.Group"/>.
            </summary>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseAnyValidator.fEventsThatValidate">
            <summary>
            Storage for <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseAnyValidator.EventsThatValidate"/>.
            </summary>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseAnyValidator.fShowRequiredFieldMarker">
            <summary>
            Storage for <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseAnyValidator.ShowRequiredFieldMarker"/>.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseAnyValidator.TransferProperties">
            <summary>
            TransferProperties is called during OnPreRender to allow the control to transfer
            its properties to the ValidatorAction and Condition.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseAnyValidator.RenderBeginTag(System.Web.UI.HtmlTextWriter)">
            <summary>
            Since we are subclassed from WebControl, it adds the overhead of tags surrounding
            our control's HTML. But our ErrorFormatter has that job exclusively.
            So we do not output anything in this method.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseAnyValidator.RenderEndTag(System.Web.UI.HtmlTextWriter)">
            <summary>
            Since we are subclassed from WebControl, it adds the overhead of tags surrounding
            our control's HTML. But our ErrorFormatter has that job exclusively.
            So we do not output anything in this method.
            </summary>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseAnyValidator.Enabled">
            <summary>
            Enabled determines if the Validator control is used or not. When true, its available for use.
            </summary>
            <value>
            <para>Users can turn off an action or condition by setting this to false.</para>
            <para>It defaults to true.</para>
            <para>You must set this to false when another control whose Visible property is false
            is referenced by this control. For example, Condition.ControlIDToEvaluate. 
            Otherwise a runtime exception will occur.
            </para>
            <para>Transferred to ValidatorAction.Enabled in 
            <see cref="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseAnyValidator.TransferProperties"/>.</para>
            </value>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseAnyValidator.EnableClientScript">
            <summary>
            EnableClientScript determines if client-side functionality is setup.
            When true, it sets up client-side scripting for this control.
            When false, no client-side code is written.
            </summary>
            <value>
            This is part of several flags that can shut off client-side code. The 
            <see cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.TrueBrowser"/> class has several options to disable client-side scripting.
            <para>It defaults to true.</para>
            <para>Transferred to ValidatorAction.EnableClientScript in 
            <see cref="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseAnyValidator.TransferProperties"/>.</para>
            </value>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseAnyValidator.Enabler">
            <summary>
            Enabler is a condition which runs prior to the rest of the conditions.
            Use it to turn on and off the validator based on conditions on the page.
            </summary>
            <value>
            <para>For example, this validator should not run unless a certain checkbox is checked.
            VAM supplies a number of conditions including the Specialized Conditions that test
            non-data attributes like Visibility (<see cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.VisibleCondition"/>)
            and Enabled (<see cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.EnabledCondition"/>) to support this property.</para>
            <para>When no enabler is needed, it is null.</para>
            <para>It defaults to null.</para>
            <para>Transferred to ValidatorAction.Enabler in 
            <see cref="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseAnyValidator.TransferProperties"/>.</para>
            <para>It provides the UITypeEditor <see cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.OneConditionTypeConverter"/>
            to select the condition in the Properties Editor.</para>
            <para>The Properties Editor and ASP.NET Attributes do not support a way
            to write out a polymorphic property. So this property is not
            written into the ASP.NET text. Instead, the object is kept in the collection
            <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseAnyValidator.EnablerContainer"/> and limits
            that collection to one item. ASP.NET attributes can write out a collection
            and provides with a workaround to the polymorphism problem.
            </para>
            <para>It uses this ASP.NET format:</para>
            <code>
            &lt;vam:ValidatorName id=[id] runat=server [properties]&gt;
               &lt;EnablerContainer&gt;
                  &lt;vam:conditionclass runat=server [properties] /&gt;
               &lt;/EnablerContainer&gt;
            &lt;/vam:ValidatorName&gt;
            </code>
            </value>
            <remarks>
            <para><b>EditorAttribute:</b><see cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.EnablerConditionUITypeEditor"/></para>
            <para><b>TypeConverterAttribute:</b><see cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.OneConditionTypeConverter"/></para>
            </remarks>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseAnyValidator.EnablerContainer">
            <summary>
            EnablerContainer is a hack to allow the  <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseAnyValidator.Enabler"/>
            property to stream between ASP.NET and an object. 
            </summary>
            <value>
            <para>The Enabler property itself doesn't stream but modifies this list as a hack
            to work around a limitation in the ASP.NET attributes that don't know how to
            handle a polymorphic property.</para>
            <para>This class streams to the ASP.NET text but does not appear in the Properties Editor. </para>
            <para>You shouldn't attempt to add more than one condition
            as only the first will be applied to Enabler.</para>
            <para>It uses this ASP.NET format:</para>
            <code>
            &lt;vam:ValidatorName id=[id] runat=server [properties]&gt;
               &lt;EnablerContainer&gt;
                  &lt;vam:conditionclass runat=server [properties] /&gt;
               &lt;/EnablerContainer&gt;
            &lt;/vam:ValidatorName&gt;
            </code>
            </value>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseAnyValidator.SupportClientSideLookupByID">
            <summary>
            SupportClientSideLookupByID allows JavaScript programmers to get to the
            Action object on the client side by calling the VAM_FindAOById function with the ClientID 
            of the owner control.
            </summary>
            <value>
            <para>Use the client-side function VAM_FindAOById to search for the action that
            matches the clientID you specify. That function will return null if not found.
            Use the Action object to modify it, such as changing the Enabled property.</para>
            <para>When this property is true, two things happen:</para>
            <para>1. The ID is written as a property, CID, into the control.</para>
            <para>2. If the Enabled property is false, normally no code is written to the client side.
               This is overridden and code is generated so users can toggle the enabled property.
               Note that client-side code is NEVER generated when the browser doesn't support it
               or the EnableClientScript property is false.</para>
            </value>
            <example>
            <para>This shows how to use the VAM_FindAOById() function to retrieve an action object
            and change its Enabled property. This is JavaScript code.</para>
            <code>
            function ChangeActionEnabled(pClientID, pEnabled)
            {
              var vAction = VAM_FindAOById(pClientID);
              if (vAction != null) // found it
                 vAction.Enabled = pEnabled;
            }
            </code>
            </example>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseAnyValidator.NotCondition">
            <summary>
            NotCondition reverses the result of the ValidatorAction.Condition.<see cref="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseCondition.EvaluateCondition"/> 
            method and its client side equivalent.
            </summary>
            <value>
            <para>EvaluateCondition should not do anything with this property. 
            ValidatorAction.Condition.<see cref="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseCondition.Evaluate"/> applies it. Similarly,
            your client-side evaluation condition should not do anything with this property.</para>
            <para>It defaults to false.</para>
            <para>Transferred to Condition.NotCondition in 
            <see cref="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseAnyValidator.TransferProperties"/>.</para>
            </value>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseAnyValidator.Trim">
            <summary>
            Determines that the evaluation should occur after trimming lead and trailing spaces
            from text values of fields.
            </summary>
            <value>
            <para>When true, it should trim.</para>
            <para>Set to false when your server side retrieval code for the field doesn't trim, thus
            would be tripped up by the lead and trailing spaces.</para>
            <para>It defaults to true.</para>
            <para>Transferred to Condition.Trim in 
            <see cref="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseAnyValidator.TransferProperties"/>.</para>
            </value>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseAnyValidator.CustomEvalFunctionName">
            <summary>
            CustomEvalFunctionName allows a user to provide their own client-side 
            evaluation function. When blank, the subclass supplies its function in EvalFunctionName.
            </summary>
            <value>
            <para>This is usually used when setting up a custom condition with ServerCondition on the
            server side.</para>
            <para><i>Parameters</i></para>
            <para>Condition (object) - client-side representation of the Condition object.
            Its properties can be useful in your custom function.</para>
            <para><i>Returns</i></para>
            <para>It returns one of three values:</para>
            <para>0 = failed</para>
            <para>1 = succeeded</para>
            <para>-1 = cannot evaluate. (For example, the field is invisible.)</para>
            <para>See the User's Guide for details and example.</para>
            <para>Transferred to Condition.CustomEvalFunctionName in 
            <see cref="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseAnyValidator.TransferProperties"/>.</para>
            </value>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseAnyValidator.OverrideClientSideEvaluation">
            <summary>
            When set to a value other than 'No', the client-side evaluation function
            supplied by this class is replaced with one that has special properties
            to show and hide the error message regardless of the data on the page.
            </summary>
            <remarks>
            <para>Useful when writing custom server side functions that don't have an equivalent
            client-side function. This gives a slight client-side behavior, including
            blinking the error message on postback and hiding it after edits.</para>
            <para>When 'No', the ValidatorAction.Condition.<see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseCondition.EvalFunctionName"/>
            property provides the client-side evaluation function. Otherwise,
            this property causes the ValidatorAction.Condition.<see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseCondition.CustomEvalFunctionName"/>
            to be set to "VAM_EvalAltCS" and the OCSMode property to be added
            to the client-side object for use by VAM_EvalAltCS.</para>
            <para>Transferred to Condition.OverrideClientSideEvaluation in 
            <see cref="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseAnyValidator.TransferProperties"/>.</para>
            </remarks>
            <seealso cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.OverrideClientSideEvaluationType"/>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseAnyValidator.ErrorFormatter">
            <summary>
            Gets and sets the ErrorFormatter that controls the appearance of the error message
            in the location of the Validator control.
            </summary>
            <value>
            <para>User can instantiate a <see cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseErrorFormatter"/> class
            or use one found in the 
            <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.Globals.ErrorFormatters">Globals.ErrorFormatters</see> collection.</para>
            <para>It defaults to a <see cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.TextErrorFormatter"/>.</para>
            <para>Transferred to ValidatorAction.Enabler in 
            <see cref="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseAnyValidator.TransferProperties"/>.</para>
            <para>It provides the UITypeEditor <see cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.ErrorFormatterUITypeEditor"/>
            to select the ErrorFormatter class and its properties in the Properties Editor.</para>
            <para>The Properties Editor and ASP.NET Attributes do not support a way
            to write out a polymorphic property. So this property is not
            written into the ASP.NET text. Instead, the object is kept in the collection
            <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseAnyValidator.ErrorFormatterContainer"/> and limits
            that collection to one item. ASP.NET attributes can write out a collection
            and provides with a workaround to the polymorphism problem.
            </para>
            <para>It uses this ASP.NET format:</para>
            <code>
            &lt;vam:ValidatorName id=[id] runat=server [properties]&gt;
               &lt;ErrorFormatterContainer&gt;
                  &lt;vam:errorformatterclass runat=server [properties] /&gt;
               &lt;/ErrorFormatterContainer&gt;
            &lt;/vam:ValidatorName&gt;
            </code>
            </value>
            <remarks>
            <para><b>EditorAttribute:</b><see cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.ErrorFormatterUITypeEditor"/></para>
            <para><b>TypeConverterAttribute:</b><see cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.ErrorFormatterTypeConverter"/></para>
            </remarks>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseAnyValidator.ErrorFormatterContainer">
            <summary>
            ErrorFormatterContainer is a hack to allow the  <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseAnyValidator.ErrorFormatter"/>
            property to stream between ASP.NET and an object. 
            </summary>
            <value>
            <para>The ErrorFormatter property itself doesn't stream but modifies this list as a hack
            to work around a limitation in the ASP.NET attributes that don't know how to
            handle a polymorphic property.</para>
            <para>This class streams to the ASP.NET text but does not appear in the Properties Editor. </para>
            <para>You shouldn't attempt to add more than one BaseErrorFormatter subclass
            as only the first will be applied to ErrorFormatter.</para>
            <para>It uses this ASP.NET format:</para>
            <code>
            &lt;vam:ValidatorName id=[id] runat=server [properties]&gt;
               &lt;ErrorFormatterContainer&gt;
                  &lt;vam:errorformatterclass runat=server [properties] /&gt;
               &lt;/ErrorFormatterContainer&gt;
            &lt;/vam:ValidatorName&gt;
            </code>
            </value>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseAnyValidator.ErrorMessage">
            <summary>
            Gets and sets the message shown by the ErrorFormatter when it determines an invalid case.
            </summary>
            <value>
            <para>It is a string, which optionally can contain HTML. However, HTML is recommended
            to be used carefully. VAM attempts to allow you to separate the HTML from the error
            message using the ErrorFormatter and style properties for tokens on the VAMPage class.
            This way, your error messages do not break the formatting when someone wants to change
            the wording.</para>
            <para>The string can contain tokens, all uppercase one-word text enclosed in
            brackets.</para>
            <para>It defaults to "".</para>
            <para>It provides the UITypeEditor <see cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.ErrorMessageTypeEditor"/>
            to edit the property in a large textbox and select tokens.</para>
            <para>Transferred to BaseValidatorAction.ErrorMessage in 
            <see cref="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseAnyValidator.TransferProperties"/>.</para>
            </value>
            <remarks>
            <para><b>EditorAttribute:</b><see cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.ErrorMessageTypeEditor"/></para>
            </remarks>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseAnyValidator.ErrorMessageLookupID">
            <summary>
            ErrorMessageLookupID provides an alternative to 
            <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseAnyValidator.ErrorMessage"/>. When used, the error message
            is looked up from another source, such as a resource file or database to use as
            the ErrorMessage.
            </summary>
            <value>
            <para>This allows you to define a common set of error messages so the programmer doesn't uniquely
            define them each time. It also provides localization based on the current culture.</para>
            <para>To use it, assign a key string that represents the ErrorMessage that you want.
            This key will be used to search your data source for the correct string.</para>
            <para>When you are using the default Resource Manager system of VAM, it looks
            at the Name field of the ResX file for a match. The Value field of that row is returned.
            If no match is found OR this is blank, ErrorMessage will be used.</para>
            <para>This property uses the StringGroup of 
            <see cref="F:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.StringLookup.cMessageGroupName">StringLookup.cMessageGroupName</see>.</para>
            <para>It defaults to "".</para>
            <para>Transferred to BaseValidatorAction.ErrorMessageLookupID in 
            <see cref="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseAnyValidator.TransferProperties"/>.</para>
            </value>
            <remarks>
            <para><b>EditorAttribute:</b><see cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.StringTypeEditor"/></para>
            </remarks>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseAnyValidator.SummaryErrorMessage">
            <summary>
            SummaryErrorMessage is the message shown in the <see cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.ValidationSummary"/>
            control when this validator has a condition that reports "failure". 
            If blank, the ValidationSummary control uses the 
            <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseAnyValidator.ErrorMessage"/> instead.
            </summary>
            <value>
            <para>It is a string, which optionally can contain HTML. However, HTML is recommended
            to be used carefully. VAM attempts to allow you to separate the HTML from the error
            message using style sheets and style properties for tokens on the VAMPage class.
            This way, your error messages do not break the formatting when someone wants to change
            the wording.</para>
            <para>The string can contain tokens, all uppercase one-word text enclosed in
            brackets.</para>
            <para>It defaults to "".</para>
            <para>Transferred to BaseValidatorAction.ErrorMessageLookupID in 
            <see cref="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseAnyValidator.TransferProperties"/>.</para>
            </value>
            <remarks>
            <para><b>EditorAttribute:</b><see cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.ErrorMessageTypeEditor"/></para>
            </remarks>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseAnyValidator.SummaryErrorMessageLookupID">
            <summary>
            SummaryErrorMessageLookupID provides an alternative to 
            <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseAnyValidator.SummaryErrorMessage"/>. 
            When used, the summary error message
            is looked up from another source, such as a resource file or database to use as
            the SummaryErrorMessage.
            </summary>
            <value>
            <para>This allows you to define a common set of summary error messages so the programmer doesn't uniquely
            define them each time.</para>
            <para>It also provides localization based on the current culture.</para>
            <para>To use it, assign a key string that represents the SummaryErrorMessage that you want.
            This key will be used to search your data source for the correct string.</para>
            <para>When you are using the default Resource Manager system of VAM, it looks
            at the Name field of the ResX file for a match. The Value field of that row is returned.</para>
            <para>If no match is found OR this is blank, SummaryErrorMessage will be used.</para>
            <para>This property uses the StringGroup of 
            <see cref="F:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.StringLookup.cMessageGroupName">StringLookup.cMessageGroupName</see>.</para>
            <para>It defaults to "".</para>
            <para>Transferred to BaseValidatorAction.SummaryErrorMessageLookupID in 
            <see cref="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseAnyValidator.TransferProperties"/>.</para>
            </value>
            <remarks>
            <para><b>EditorAttribute:</b><see cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.StringTypeEditor"/></para>
            </remarks>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseAnyValidator.Group">
            <summary>
            Gets and sets a group name for the validator. Validators are only validated
            when their group name matches the group name of the button that submits them.
            </summary>
            <value>
            <para>The group name "" is a valid name and all validators, validator summary
            and submit buttons default to "".</para>
            <para>It defaults to "".</para>
            <para>Transferred to BaseValidatorAction.Group in 
            <see cref="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseAnyValidator.TransferProperties"/>.</para>
            </value>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseAnyValidator.EventsThatValidate">
            <summary>
            EventsThatValidate determines which client side events are fired to validate.
            </summary>
            <value>
            <para>There are two events: onchange and onsubmit. By default, both fire to validate.
            When you setup the validator to display an alert or other feedback on change, 
            the message may not be needed. Use this to determine which of these events activate 
            the message.</para>
            <para>When set to OnChange, no server side validation is performed.
            Use this state to show a warning message about the data without preventing
            the user from submitting the page.</para>
            <para>It defaults to All.</para>
            <para>Transferred to BaseValidatorAction.EventsThatValidate in 
            <see cref="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseAnyValidator.TransferProperties"/>.</para>
            </value>
            <seealso cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.ValidationEvents"/>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseAnyValidator.ShowRequiredFieldMarker">
            <summary>
            ShowRequiredFieldMarker adds a 
            <see cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.RequiredFieldMarker"/> control to the left
            of the error message.
            </summary>
            <value>
            <para>Use it as a shortcut to setting
            up the RequiredFieldMarker. The marker is always visible.</para>
            <para>Always place it on the leftmost validator.
            Otherwise, it may be pushed to the right as a validator is shown between
            the field and the RequiredFieldMarker.</para>
            <para>It uses the system wide defaults found in <see cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.Globals"/>.
            If you need to customize the settings, manually add a RequiredFieldMarker.</para>
            <para>Transferred to BaseValidatorAction.ShowRequiredFieldMarker in 
            <see cref="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseAnyValidator.TransferProperties"/>.</para>
            </value>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseAnyValidator.BackColor">
            <summary>
            Hidden from the Properties Editor and streaming as ASP.NET text
            because it is not used. The WebControl base class adds them
            but this property is on the ErrorFormatter, not on the control itself.
            </summary>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseAnyValidator.BorderColor">
            <summary>
            Hidden from the Properties Editor and streaming as ASP.NET text
            because it is not used. The WebControl base class adds them
            but this property is on the ErrorFormatter, not on the control itself.
            </summary>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseAnyValidator.BorderStyle">
            <summary>
            Hidden from the Properties Editor and streaming as ASP.NET text
            because it is not used. The WebControl base class adds them
            but this property is on the ErrorFormatter, not on the control itself.
            </summary>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseAnyValidator.BorderWidth">
            <summary>
            Hidden from the Properties Editor and streaming as ASP.NET text
            because it is not used. The WebControl base class adds them
            but this property is on the ErrorFormatter, not on the control itself.
            </summary>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseAnyValidator.CssClass">
            <summary>
            Hidden from the Properties Editor and streaming as ASP.NET text
            because it is not used. The WebControl base class adds them
            but this property is on the ErrorFormatter, not on the control itself.
            </summary>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseAnyValidator.ForeColor">
            <summary>
            Hidden from the Properties Editor and streaming as ASP.NET text
            because it is not used. The WebControl base class adds them
            but this property is on the ErrorFormatter, not on the control itself.
            </summary>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseAnyValidator.Font">
            <summary>
            Hidden from the Properties Editor and streaming as ASP.NET text
            because it is not used. The WebControl base class adds them
            but this property is on the ErrorFormatter, not on the control itself.
            </summary>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseAnyValidator.Height">
            <summary>
            Hidden from the Properties Editor and streaming as ASP.NET text
            because it is not used. The WebControl base class adds them
            but this property is on the ErrorFormatter, not on the control itself.
            </summary>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseAnyValidator.Width">
            <summary>
            Hidden from the Properties Editor and streaming as ASP.NET text
            because it is not used. The WebControl base class adds them
            but this property is on the ErrorFormatter, not on the control itself.
            </summary>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseAnyValidator.ToolTip">
            <summary>
            Hidden from the Properties Editor and streaming as ASP.NET text
            because it is not used. The WebControl base class adds them
            but this property is on the ErrorFormatter, not on the control itself.
            </summary>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseAnyValidator.AccessKey">
            <summary>
            Hidden from the Properties Editor and streaming as ASP.NET text
            because it is not used. The WebControl base class adds them
            but this property is on the ErrorFormatter, not on the control itself.
            </summary>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseAnyValidator.TabIndex">
            <summary>
            Hidden from the Properties Editor and streaming as ASP.NET text
            because it is not used. The WebControl base class adds them
            but this property is on the ErrorFormatter, not on the control itself.
            </summary>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseAnyValidator.Visible">
            <summary>
            Visible is meaningless on a control that changes its visibility dynamically. The 
            <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseAnyValidator.Enabled"/> property
            turns on and off this control.
            </summary>
            <value>
            The Microsoft BaseValidator uses Visible to entirely remove the control while Enabled
            generates client side code with the Enabled flag set to false so the user can turn it on, client side.
            VAM uses the Enabled flag the same way but the EnabledClientScript property 
            will turn off client-side generation.
            </value>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.MSStyle.BaseValidator.#ctor">
            <summary>
            Base Validator Constructor
            </summary>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.MSStyle.BaseValidator.fControlToValidate">
            <summary>
            Member variable - fControlToValidate
            </summary>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.MSStyle.BaseValidator.fText">
            <summary>
            Member variable - fControlToValidate
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.MSStyle.BaseValidator.CreateValidatorCondition">
            <summary>
            CreateValidatorCondition creates the conditions and assigns one to the Condition property.
            It should transfer any properties on this class to properties on the fValidator.Conditions.
            This is used instead of ValidatorAction.CreateCondition because CreateCondition is called
            before properties are finalized. We must allow the user to assign properties. Then
            create the condition during the TransferProperties phase, which can be called twice:
            during Validate and OnPreRender.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.MSStyle.BaseValidator.TransferProperties">
            <summary>
            Apply the new properties
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.MSStyle.BaseValidator.CreateAction">
            <summary>
            The validationAction must be created early because the Validate method depends on
            its presence in the VAMPage. So we'll use the standard ValidatorAction which
            requires us to assign the Condition at some later point (in CreateValidationCondition).
            </summary>
            <returns></returns>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.MSStyle.BaseValidator.AddParsedSubObject(System.Object)">
            <summary>
            !bf v1.0.0.5001 handle innertext. Pass to Text property
            </summary>
            <param name="obj">obj</param>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.MSStyle.BaseValidator.BackColor">
            <summary>
            Overrides color property of base control
            </summary>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.MSStyle.BaseValidator.BorderColor">
            <summary>
            Overrides BorderColor property of base control
            </summary>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.MSStyle.BaseValidator.BorderStyle">
            <summary>
            Overrides BorderStyle property of base control
            </summary>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.MSStyle.BaseValidator.BorderWidth">
            <summary>
            Overrides BorderWidth property of base control
            </summary>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.MSStyle.BaseValidator.CssClass">
            <summary>
            Overrides CssClass property of base control
            </summary>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.MSStyle.BaseValidator.ForeColor">
            <summary>
            Overrides ForeColor property of base control
            </summary>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.MSStyle.BaseValidator.Font">
            <summary>
            Overrides Font property of base control
            </summary>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.MSStyle.BaseValidator.Height">
            <summary>
            Overrides Height property of base control
            </summary>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.MSStyle.BaseValidator.Width">
            <summary>
            Overrides Width property of base control
            </summary>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.MSStyle.BaseValidator.ToolTip">
            <summary>
            ToolTip adds a tooltip to the TextErrorFormatter .
            Defaults to "".
            </summary>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.MSStyle.BaseValidator.AccessKey">
            <summary>
            Overrides AccessKey property of base control
            </summary>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.MSStyle.BaseValidator.TabIndex">
            <summary>
            TabIndex gets or sets the tab index of the Web server control.
            Useless on validators. Here for property compatibility.
            </summary>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.MSStyle.BaseValidator.Display">
            <summary>
            Display determines how to show the ErrorMessage.
            ·	None – Never shows. Use when you only want the message in the 
              SummaryValidator or to let other validation rules indicate the 
              error (such as alert or flashing the field with the error.)
            ·	Static – The field always takes up space on the page when invisible. 
              Uses the style display:block and visibility to toggle.
            · Dynamic – The field doesn’t take up space on the page when invisible. 
              Uses the style display to toggle.
            Defaults to Static
            </summary>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.MSStyle.BaseValidator.ErrorFormatter">
            <summary>
            The compatible controls don't offer alternative error message formatters.
            They always use Text (TextErrorFormatter).
            Don't permit writing the ErrorFormatter or its ErrorFormatterContainer.
            </summary>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.MSStyle.BaseValidator.ErrorFormatterContainer">
            <summary>
            Overrides ErrorFormatterContainer property of base control
            </summary>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.MSStyle.BaseValidator.ControlToValidate">
            <summary>
            ControlToValidate gets or sets the input control to validate.
            Its value is assigned to BaseOneFieldCondition.ControlIDToEvaluate
            </summary>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.MSStyle.BaseValidator.Text">
            <summary>
            Text is used when you want a different message in the ValidationSummary.
            VAM already provides a clear property of SummaryErrorMessage. Since
            we are emulating Microsoft's behavior, when this property is assigned, the following
            will happen:
            1. ErrorMessage will be used for the SummaryErrorMessage
            2. SummaryErrorMessage is ignored
            3. This is the error appearing within the error formatter.
            Defaults to "".
            </summary>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.MSStyle.BaseValidator.CanSetValidationAction">
            <summary>
            Overrides CanSetValidationAction property of base control
            </summary>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.MSStyle.BaseValidator.Visible">
            <summary>
            When false, MS BaseValidator uses Visible to disable the control AND prevent client side code.
            VAM lets this set Enabled=false and EnableClientState= false.
            </summary>
        </member>
        <member name="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.MSStyle.BaseCompareValidator">
            <remarks>
            BaseCompareValidator is an abstract base class for validators that handle
            comparisions: CompareValidator and RangeValidator.
            These validators evaluate strings where the user selects a Type.
            To maintain compatibility with MS Validators, the Type will continue to use
            the ValidationDataType enumeration instead of VAM's VAMTypeConverters.
            We will map ValidationDataTypes to VAMTypeConverters with MapType().
            Supported:
            CanConvert static method
            Not supported:
            CutoffYear property and GetFullYear method because they are protected.
            </remarks>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.MSStyle.BaseCompareValidator.fType">
            <summary>
            Member variable - fType
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.MSStyle.BaseCompareValidator.MapType">
            <summary>
            MapType converts the value of Type into an equivalent VAMTypeConverter
            </summary>      
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.MSStyle.BaseCompareValidator.MapType(System.Web.UI.WebControls.ValidationDataType)">
            <summary>
            MapType converts the value of pType into an equivalent VAMTypeConverter
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.MSStyle.BaseCompareValidator.CanConvert(System.String,System.Web.UI.WebControls.ValidationDataType)">
            <summary>
            CanConvert determines whether the specified string can be converted to the specified data type.
            </summary>
            <param name="pText">String to evaluate</param>
            <param name="pType">The expected datatype contained within the string</param>
            <returns></returns>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.MSStyle.BaseCompareValidator.Type">
            <summary>
            Type gets or sets the data type that the values being compared are converted 
            to before the comparison is made.
            Defaults to String.
            </summary>
        </member>
        <member name="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.MSStyle.CompareValidator">
            <remarks>
            CompareValidator emulates the Microsoft CompareValidator control.
            </remarks>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.MSStyle.CompareValidator.#ctor">
            <summary>
            Constructor for Campare Validator class
            </summary>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.MSStyle.CompareValidator.fControlToCompare">
            <summary>
            Member variable - fControlToCompare
            </summary>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.MSStyle.CompareValidator.fOperator">
            <summary>
            Member variable - fOperator
            </summary>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.MSStyle.CompareValidator.fValueToCompare">
            <summary>
            Member variable - fValueToCompare
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.MSStyle.CompareValidator.MapOperator">
            <summary>
            MapOperator converts the Operator property to a ConditionOperator value.
            It does not support ValidationCompareOperator.DataTypeCheck and throws an exception when passed.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.MSStyle.CompareValidator.MapOperator(System.Web.UI.WebControls.ValidationCompareOperator)">
            <summary>
            Compares validation operator enumerations
            </summary>
            <param name="pOperator">The Operator enumeration to compare</param>
            <returns>A ConditionOperator value</returns>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.MSStyle.CompareValidator.CreateValidatorCondition">
            <summary>
            There are three possible conditions:
            1. If Operator = DataTypeCheck, use CDTDataTypeCheckCondition
            2. If ControlToCompare is assigned, use CDTCompareTwoFieldsCondition
            3. Else use CDTCompareToValueCondition
            </summary>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.MSStyle.CompareValidator.ControlToCompare">
            <summary>
            ControlToCompare gets or sets the input control to compare with the input control being validated.
            When both this and ValueToCompare are assigned, this takes precedence.
            When this is used, it is assigned to BaseTwoFieldCondition.SecondControlIDToEvaluate.
            When assigned, the CompareTwoFieldsCondition is used.
            Defaults to "".
            </summary>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.MSStyle.CompareValidator.Operator">
            <summary>
            Operator gets or sets the comparison operation to perform.
            Defaults to ValidationCompareOperator.Equal.
            VAM uses a different enumerated type, ConditionOperator.
            The static method MapOperator converts between the two.
            </summary>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.MSStyle.CompareValidator.ValueToCompare">
            <summary>
            ValueToCompare gets or sets a constant value to compare with the value 
            entered by the user into the input control being validated.
            Defaults to "".
            When assigned, the CompareToValueCondition is used.
            When ControlToCompare is also assigned, it takes precidence over ValueToCompare.
            </summary>
        </member>
        <member name="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.MSStyle.RangeValidator">
            <remarks>
            RangeValidator implements the Microsoft RangeValidator.
            It maps to the RangeCondition.
            </remarks>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.MSStyle.RangeValidator.#ctor">
            <summary>
            Range Validator Constructor
            </summary>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.MSStyle.RangeValidator.fMinimumValue">
            <summary>
            member variable - fMinimumValue
            </summary>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.MSStyle.RangeValidator.fMaximumValue">
            <summary>
            member variable - fMaximumValue
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.MSStyle.RangeValidator.CreateValidatorCondition">
            <summary>
            Create the CDTRangeCondition first.
            </summary>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.MSStyle.RangeValidator.MinimumValue">
            <summary>
            MinimumValue gets or sets the minimum value of the validation range.
            Defaults to "".
            If the format is not compatible with the Type, an exception will be thrown at runtime.
            Dates should be in the culture specific short date format or yyyy-MM-dd (culture neutral).
            </summary>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.MSStyle.RangeValidator.MaximumValue">
            <summary>
            MaximumValue gets or sets the maximum value of the validation range.
            Defaults to "".
            If the format is not compatible with the Type, an exception will be thrown at runtime.
            Dates should be in the culture specific short date format or yyyy-MM-dd (culture neutral).
            </summary>
        </member>
        <member name="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.MSStyle.CustomValidator">
            <remarks>
            CustomValidator emulates the Microsoft CustomValidator class.
            It supports both client and server side code provided by the end user
            to the ServerValidate and ClientValidationFunction.
            Since the calling methods of these events differ in VAM, VAM implements
            the MSCompatCustomCondition to translate one into the other.
            </remarks>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.MSStyle.CustomValidator.#ctor">
            <summary>
            Constructor for CustomValidator class
            </summary>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.MSStyle.CustomValidator.fDOMCompatible">
            <summary>
            member variable - fDOMCompatible
            </summary>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.MSStyle.CustomValidator.fClientValidationFunction">
            <summary>
            member variable - fClientValidationFunction
            </summary>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.MSStyle.CustomValidator.ServerValidateCollection">
            <summary>
            member variable - ServerValidateCollection
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.MSStyle.CustomValidator.CreateValidatorCondition">
            <summary>
            Create the MSCompatCustomCondition or MSCompatOneFieldCustomCondition first.
            </summary>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.MSStyle.CustomValidator.DOMCompatible">
            <summary>
            DOMCompatible indicates that the client-side function is valid in DOM-only browsers like Netscape 6+.
            The developer of the function must make this evaluation.
            When false, EnableClientScript is automatically set to false when the browser isn't IE.
            When true, it is compliant.
            It defaults to true.
            </summary>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.MSStyle.CustomValidator.ClientValidationFunction">
            <summary>
            ClientValidationFunction is the name of the javascript client side function
            that implements the validation function using Microsoft's function definition.
            It is called by a javascript wrapper function, VAM_MSCompatCustomCond or 
            VAM_MSCompatOneFldCustomCond, which translates VAM's EvalFunctionMethod to Microsoft's parameters.
            Defaults to "".
            </summary>
        </member>
        <member name="E:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.MSStyle.CustomValidator.ServerValidate">
            <summary>
            The Microsoft version of the event. An event handler must be attached
            for anything to be evaluated during VAMConditionEventHandler.
            </summary>
        </member>
        <member name="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.MSStyle.MSCompatCustomCondition">
            <remark>
            MSCompatCustomCondition is used when CustomValidator.ControlToValidate is blank.
            It maps the server side and client side evaluation functions from their
            Microsoft style to VAM.
            Server side - System.Web.UI.WebControls.ServerValidateEventArgs contains
               two properties.
               * Value - will be blank because ControlToValidate is blank
               * IsValid - event must set it to true or false depending on the evaluation
            </remark>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.MSStyle.MSCompatCustomCondition.#ctor">
            <summary>
            Constructor for MSCompatCustomCondidtion class
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.MSStyle.MSCompatCustomCondition.#ctor(System.Web.UI.Control)">
            <summary>
            OVerloaded Contructor for MSCompatCustomCondition
            </summary>
            <param name="pOwner">The control that will be the parent of this validator</param>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.MSStyle.MSCompatCustomCondition.fDOMCompatible">
            <summary>
            member variable - fDOMCompatible
            </summary>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.MSStyle.MSCompatCustomCondition.fClientValidationFunction">
            <summary>
            member variable - fClientValidationFunction
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.MSStyle.MSCompatCustomCondition.EvaluateCondition">
            <summary>
            Overrides base class member variable - EvaluateCondition
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.MSStyle.MSCompatCustomCondition.GetServerArgsValue">
            <summary>
            GetServerArgsValue returns the string to be used in ServerValidateEventArgs.Value
            This class returns "".
            Subclass uses the text result of the ControlID
            </summary>
            <returns></returns>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.MSStyle.MSCompatCustomCondition.DefineProperties(System.Text.StringBuilder)">
            <summary>
            Defines Properties for Validator to validate and registers Client-Side Javascript
            </summary>
            <param name="pJavaScript">The Javascript to register</param>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.MSStyle.MSCompatCustomCondition.CanEnableClientScript">
            <summary>
            If not DOMCompliant and its NOT IE, set EnableClientScript to false.
            </summary>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.MSStyle.MSCompatCustomCondition.DOMCompatible">
            <summary>
            DOMCompatible indicates that the client-side function is valid in DOM-only browsers like Netscape 6+.
            The developer of the function must make this evaluation.
            When false, EnableClientScript is automatically set to false when the browser isn't IE.
            When true, it is compliant.
            It defaults to true.
            </summary>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.MSStyle.MSCompatCustomCondition.ClientValidationFunction">
            <summary>
            ClientValidationFunction is the name of the javascript client side function
            that implements the validation function using Microsoft's function definition.
            It is called by a javascript wrapper function, VAM_MSCompatCustomCond or 
            VAM_MSCompatOneFldCustomCond, which translates VAM's EvalFunctionMethod to Microsoft's parameters.
            Defaults to "".
            </summary>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.MSStyle.MSCompatCustomCondition.EvalFunctionName">
            <summary>
            Overrides EvalFunctionName property of base class
            </summary>
        </member>
        <member name="E:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.MSStyle.MSCompatCustomCondition.ServerValidate">
            <summary>
            The Microsoft version of the event. An event handler must be attached
            for anything to be evaluated during VAMConditionEventHandler.
            </summary>
        </member>
        <member name="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.MSStyle.MSCompatOneFieldCustomCondition">
            <remark>
            MSCompatOneFieldCustomCondition is used when CustomValidator.ControlToValidate is assigned.
            It maps the server side and client side evaluation functions from their
            Microsoft style to VAM.
            Server side - System.Web.UI.WebControls.ServerValidateEventArgs contains
               two properties.
               * Value - will be the text value from ControlToValidate
               * IsValid - event must set it to true or false depending on the evaluation
            By having a ControlToValidate, the client-side will hookup a event
            to fire when ControlToValidate is changed.
            </remark>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.MSStyle.MSCompatOneFieldCustomCondition.#ctor">
            <summary>
            Constructor for MSCompatOneFieldCustomCondition class
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.MSStyle.MSCompatOneFieldCustomCondition.#ctor(System.Web.UI.Control)">
            <summary>
            Overloaded constructor for MSCompatOneFieldCustomCondition class, takes control that will be validator's parent
            </summary>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.MSStyle.MSCompatOneFieldCustomCondition.fControlIDToEvaluate">
            <summary>
            Member variable - fControlIDToEvaluate
            </summary>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.MSStyle.MSCompatOneFieldCustomCondition.fControlToEvaluate">
            <summary>
            Member variable - fControlToEvaluate
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.MSStyle.MSCompatOneFieldCustomCondition.GetServerArgsValue">
            <summary>
            Overrides base controls GetServerArgsValue method
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.MSStyle.MSCompatOneFieldCustomCondition.GetControlToEvaluate">
            <summary>
            GetControlToEvaluate returns the instance of a control associated 
            with ControlIDToEvaluate. Returns null if ControlIDToEvaluate is blank. 
            Throws a VAMException if its not a match to ControlTypes (via ValidateControlID).
            </summary>
            <returns></returns>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.MSStyle.MSCompatOneFieldCustomCondition.DefineProperties(System.Text.StringBuilder)">
            <summary>
            Defines Properties for Validator to validate and registers Client-Side Javascript
            </summary>
            <param name="pJavaScript">The Javascript to register</param>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.MSStyle.MSCompatOneFieldCustomCondition.ControlIDToEvaluate">
            <summary>
            ControlIDToEvaluate The ID to the control whose value will be evaluated. 
            This is ID property, not the ClientID or UniqueID. It will be translated 
            into the ClientID at runtime.
            If this ID is unassigned, the condition is disabled.
            If the control cannot be found in the current or any parent NamingContainer, 
            an exception is thrown at runtime.
            </summary>   
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.MSStyle.MSCompatOneFieldCustomCondition.EvalFunctionName">
            <summary>
            Overrides base controls EvalFunctionName property
            </summary>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.MSStyle.MSCompatOneFieldCustomCondition.InitFunctionName">
            <summary>
            Overrides base controls InitFunctionName property
            </summary>
        </member>
        <member name="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.MSStyle.RegularExpressionValidator">
            <remarks>
            RegularExpressionValidator emulates the Microsoft control of the same name.
            </remarks>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.MSStyle.RegularExpressionValidator.#ctor">
            <summary>
            Constructor for RegularExpressionValidator class
            </summary>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.MSStyle.RegularExpressionValidator.fValidationExpression">
            <summary>
            member variable - fValidationExpression
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.MSStyle.RegularExpressionValidator.CreateValidatorCondition">
            <summary>
            Overrides base method CreateValidatorCondition - Adds new condition to validator
            </summary>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.MSStyle.RegularExpressionValidator.ValidationExpression">
            <summary>
            ValidationExpression gets or sets the regular expression that determines 
            the pattern used to validate a field.
            </summary>
        </member>
        <member name="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.MSStyle.RequiredFieldValidator">
            <remarks>
            RequiredFieldValidator emulates the Microsoft control of the same name.
            </remarks>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.MSStyle.RequiredFieldValidator.#ctor">
            <summary>
            Constructor for RequiredFieldValidator class
            </summary>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.MSStyle.RequiredFieldValidator.fInitialValue">
            <summary>
            member variable - fInitialValue
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.MSStyle.RequiredFieldValidator.CreateValidatorCondition">
            <summary>
            Overrides base method CreateValidatorCondition - Adds new condition to validator
            </summary>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.MSStyle.RequiredFieldValidator.InitialValue">
            <summary>
            InitialValue gets or sets the initial value of the associated input control.
            </summary>
        </member>
        <member name="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.MSStyle.ValidationSummary">
            <remarks>
            ValidationSummary emulates the Microsoft Validation summary.
            It adds the these properties which are part of Microsoft ValidationSummary.
            - EnableClientScript
            - DisplayMode. Uses System.Web.UI.WebControls.ValidationSummaryDisplayMode. Maps to the same named
              property on VAM.ValidationSummary
            - HeaderText
            - ShowSummary. When true, creates a VAM.ValidationSummary as a child to handle the actual task.
            - ShowMessagebox. When true, sets VAMPage.ShowAlertOnSubmit
            In addition, we include the Group property because that control is exposed throughout the other controls.
            </remarks>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.MSStyle.ValidationSummary.fInDesignModeB">
            <summary>
            member variable - fInDesignModeB
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.MSStyle.ValidationSummary.#ctor">
            <summary>
            Constructor for ValidationSummary class
            </summary>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.MSStyle.ValidationSummary.fGroup">
            <summary>
            member variable - fGroup
            </summary>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.MSStyle.ValidationSummary.fHeaderText">
            <summary>
            member variable - fHeaderText
            </summary>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.MSStyle.ValidationSummary.fDisplayMode">
            <summary>
            member variable - fDisplayMode
            </summary>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.MSStyle.ValidationSummary.fEnableClientScript">
            <summary>
            member variable - fEnableClientScript
            </summary>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.MSStyle.ValidationSummary.fShowSummary">
            <summary>
            member variable - fShowSummary
            </summary>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.MSStyle.ValidationSummary.fShowMessageBox">
            <summary>
            member variable - fShowMessageBox
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.MSStyle.ValidationSummary.OnPreRender(System.EventArgs)">
            <summary>
            Overrides OnPreRender event of base control
            </summary>
            <param name="pArgs">EventArgs</param>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.MSStyle.ValidationSummary.MapDisplayMode">
            <summary>
            Returns a corresponding Validation.ValidationSummaryDisplayMode for the current WebControls.ValidationSummaryDisplayMode
            </summary>
            <returns>ValidationSummaryDisplayMode</returns>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.MSStyle.ValidationSummary.RenderAtDesignTime">
            <summary>
            Forces an OnPreRender Event
            </summary>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.MSStyle.ValidationSummary.Group">
            <summary>
            Group is the group name to which this ValidationSummary is associated.
            Submit buttons are assigned group names, including "", "*" and a name.
            The button group must match this value or match "*" to show this validation summary.
            One ValidationSummary can support multiple groups by providing a pipe delimited
            list of group names. For example: "Group1|Group2". Lead and trailing spaces
            around each group name will be ignored and can be used for formatting.
            Defaults to "".
            </summary>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.MSStyle.ValidationSummary.HeaderText">
            <summary>
            HeaderText is text that appears before the list. If defined, it will automatically
            add a BR tag between it and the list.
            Defaults to "".
            </summary>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.MSStyle.ValidationSummary.DisplayMode">
            <summary>
            DisplayMode determines how the list of error messages is formatted.
            Defaults to System.Web.UI.WebControls.ValidationSummaryDisplayMode.BulletList.
            </summary>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.MSStyle.ValidationSummary.EnableClientScript">
            <summary>
            EnableClientScript determines if the validation summary updates itself using 
            client side scripting. When false, its server side only. When true, it will
            use client side scripting unless the browser doesn't support the client side
            scripting.
            Defaults to true.
            </summary>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.MSStyle.ValidationSummary.ShowSummary">
            <summary>
            ShowSummary gets or sets a value indicating whether the validation summary is displayed inline.
            </summary>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.MSStyle.ValidationSummary.ShowMessageBox">
            <summary>
            ShowMessageBox gets or sets a value indicating whether the validation summary is displayed in a message box.
            </summary>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.MSStyle.ValidationSummary.CssClass">
            <summary>
            Overrides base control property - CssClass
            </summary>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.MSStyle.ValidationSummary.ForeColor">
            <summary>
            Overrides base control property - ForeColor
            </summary>
        </member>
        <member name="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.MSStyle.ValidationSummaryDesigner">
            <remarks>
            ValidationSummaryDesigner is the ControlDesigner for MSCompat.ValidationSummary.
            It routes to MSCompat.ValidationSummary.RenderAtDesignTime.
            </remarks>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.MSStyle.ValidationSummaryDesigner.GetDesignTimeHtml">
            <summary>
            Returns the HTML for this Validator
            </summary>
        </member>
        <member name="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.MSStyle.BaseValidatorControlBuilder">
            <remarks>
            BaseValidatorControlBuilder is for the BaseValidator. It allows inner content
            </remarks>
        </member>
        <member name="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseAnyValidatorControlBuilder">
            <summary>
            BaseAnyValidatorControlBuilder is a ControlBuilder for 
            <see cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseAnyValidator"/>.
            </summary>
            <remarks>
            It implements a hack to ignore the Enabler and ErrorFormatter properties within the main tag.
            </remarks>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseAnyValidatorControlBuilder.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseAnyValidatorControlBuilder.Init(System.Web.UI.TemplateParser,System.Web.UI.ControlBuilder,System.Type,System.String,System.String,System.Collections.IDictionary)">
            <summary>
            Removes the attributes "Enabler" and "ErrorFormatter" because they do not contain
            real data.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseAnyValidatorControlBuilder.GetChildControlType(System.String,System.Collections.IDictionary)">
            <summary>
            Calls the ancestor.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseAnyValidatorControlBuilder.AllowWhitespaceLiterals">
            <returns>false</returns>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.MSStyle.BaseValidatorControlBuilder.#ctor">
            <summary>
            Constructor for BaseValidatorControlBuilder class
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.MSStyle.BaseValidatorControlBuilder.GetChildControlType(System.String,System.Collections.IDictionary)">
            <summary>
            Overrides base control's GetChildControlType method
            Returns the type of control 
            </summary>
            <param name="pTagName">Name of the tag</param>
            <param name="pAttribs">Attributes associated with the tag</param>
            <returns>Type</returns>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.MSStyle.BaseValidatorControlBuilder.AllowWhitespaceLiterals">
            <summary>
            Overrides AllowWhitespaceLiterals() in base class. - Forces False.
            </summary>
            <returns>False, always</returns>
        </member>
        <member name="T:Jenzabar.Portal.Framework.Web.UI.PortletPreferencesCollection">
            <summary>
            A collection of portlet preferences for a particular portlet and user
            
            The collection class will automatically return the defaults for a preference
            if no values are returned from the data source
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.PortletPreferencesCollection.#ctor(Jenzabar.Portal.Framework.Web.UI.PortletBase,Jenzabar.Portal.Framework.PortalUser)">
            <summary>
            Constructs a portlet preference collection
            </summary>
            <param name="portletBase">The portlet</param>
            <param name="user">The user to obtain the preferences for</param>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.PortletPreferencesCollection.GetStringValue(System.String)">
            <summary>
            Gets the preference value as a string
            </summary>
            <param name="preferenceName">The preference's name index</param>
            <returns>The string value of the preference</returns>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.PortletPreferencesCollection.GetIntValue(System.String)">
            <summary>
            Gets the preference value as an int
            </summary>
            <param name="preferenceName">The preference's name index</param>
            <returns>The int value of the preference</returns>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.PortletPreferencesCollection.GetBoolValue(System.String)">
            <summary>
            Gets the preference value as a bool
            </summary>
            <param name="preferenceName">The preference's name index</param>
            <returns>True if the value of the preference is not the empty string</returns>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.PortletPreferencesCollection.GetBoolValue(System.String,System.String)">
            <summary>
            Gets the preference value as a bool
            </summary>
            <param name="preferenceName">The preference's name index</param>
            <param name="correctValue">The value to which to compare the preference's string value</param>
            <returns>True if the value of the preference is equal to the correctValue parameter (not case-sensitive)</returns>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.PortletPreferencesCollection.GetBoolValue(System.String,System.String,System.Boolean)">
            <summary>
            Gets the preference value as a bool
            </summary>
            <param name="preferenceName">The preference's name index</param>
            <param name="correctValue">The value to which to compare the preference's string value</param>
            <param name="isCaseSensitive">If true, the string comparison returns false if the cases don't match</param>
            <returns>True if the value of the preference is equal to the correctValue parameter</returns>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.PortletPreferencesCollection.Item(System.String)">
            <summary>
            Gets or sets the value of a preference by its name
            </summary>
            <remarks>
            If the preference has not be set by the user, the defaults specified in the meta control attribute will be returned
            </remarks>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.PortletPreferencesCollection.Item(System.String,System.Boolean)">
            <summary>
            Gets or sets the value of a preference by its name
            </summary>
            <remarks>
            Specifying true for noCache will force the preference value to be obtained from the data source instead of the cache
            
            If the preference has not be set by the user, the defaults specified in the meta control attribute will be returned
            </remarks>
        </member>
        <member name="T:Jenzabar.Portal.Framework.Web.LoginResult">
            <summary>
            information about the login.
            </summary>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Web.LoginResult.Invalid">
            <summary>
            The username or password is invalid, the user is not authenticated.
            </summary>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Web.LoginResult.Valid">
            <summary>
            The username and password are valid, the user is now loggedin and authenticated.
            </summary>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Web.LoginResult.ValidFirstLogin">
            <summary>
            The username and password are valid, the user is now loggedin and authenticated, and this is the first time the user is logging in.
            </summary>
        </member>
        <member name="T:Jenzabar.Portal.Framework.Web.PortalGlobalBase">
            <summary>
            The base class for the HTTP Application for the portal
            </summary>
            <remarks>
            Contains various methods and properties useful throughout the portal
            </remarks>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.PortalGlobalBase.Application_OnStart">
            <summary>
            
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.PortalGlobalBase.Application_OnEnd">
            <summary>
            free application-live events
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.PortalGlobalBase.Application_Error(System.Object,System.EventArgs)">
            <summary>
            log error
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.PortalGlobalBase.Application_BeginRequest(System.Object,System.EventArgs)">
            <summary>
            Handles the event fired at the beginning of a request to the application
            </summary>
            <param name="sender">Object Sender</param>
            <param name="e">EventArgs e</param>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.PortalGlobalBase.Application_EndRequest(System.Object,System.EventArgs)">
            <summary>
            Handles the event fired at the end of a request to the application
            </summary>
            <param name="sender">Object Sender</param>
            <param name="e">EventArgs e</param>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.PortalGlobalBase.Session_End(System.Object,System.EventArgs)">
            <summary>
            Handles the event fired when the session ends
            </summary>
            <param name="sender">Object Sender</param>
            <param name="e">EventArgs e</param>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.PortalGlobalBase.Session_Start(System.Object,System.EventArgs)">
            <summary>
            Handles the event fired when the session starts
            </summary>
            <param name="sender">Object Sender</param>
            <param name="e">EventArgs e</param>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.PortalGlobalBase.IsRequestFromDroppedSessionOfLoggedInUser(System.Web.HttpContext)">
            <summary>
            Checks to see if the request is the first request from a session that has timed out.
            </summary>
            <param name="ctx">The context of the http request to check.</param>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.PortalGlobalBase.IsLoginValid(System.String,System.String)">
            <summary>
            Tests to see if a user has provided the correct username and password.
            </summary>
            <param name="userName">The username the user supplied (not case sensitive)</param>
            <param name="password">The user's password (case sensitive)</param>
            <returns>LoginResult.Invalid if the username or password are incorrect, LoginResult.Valid if the username and password are valid, and this is not the first time the user has logged in. LoginResult.ValidFirstLogin if the username and password are correct, and this is the first time the user is logging in.</returns>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.PortalGlobalBase.GetUserGuid(System.String,System.String)">
            <summary>
            Gets the unique id for the user that is logging in, make sure to call IsLoginValid and check the return value before caling this.
            </summary>
            <param name="userName">The user's name</param>
            <param name="password">The user's password</param>
            <returns>The unique id for the user, or Guid.Empty if the username or password are invalid.</returns>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.PortalGlobalBase.GetUserEntry(System.String,System.String)">
            <summary>
            If made ever made public, this MUST have the external authentication catch added (see login method)
            </summary>
            <param name="userName"></param>
            <param name="password"></param>
            <returns></returns>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.PortalGlobalBase.Login(System.String,System.String)">
            <summary>
            Loggs a user into the system. The login username and password should be verified first by calling the IsLoginValid method first.
            </summary>
            <param name="userName">The username of the user to log in as</param>
            <param name="password">The password for the user, this will be used to access any active directory objects.</param>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.PortalGlobalBase.AssignUserCredentials(Jenzabar.Portal.Framework.Security.UserCredentials)">
            <summary>
            Assigns the user credentials passed to this method to the Current Thread's Principal
            </summary>
            <param name="uc">The user credentials to set the current thread's principal to</param>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.PortalGlobalBase.RedirectUser">
            <summary>
            This method determines which page to redirect a user to after login.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.PortalGlobalBase.Logout">
            <summary>
            Logs out the current user and redirects to the portal homepage
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.PortalGlobalBase.Application_PreSendRequestHeaders(System.Object,System.EventArgs)">
            <summary>
            Handles the PreSendRequestHeaders event and changes the Response ContentType accordingly
            </summary>
            <param name="sender">Object sender</param>
            <param name="e">EventArgs e</param>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.PortalGlobalBase.ResetSiteSettings">
            <summary>
            Clears the cached SiteSettings hashtable to force a new DB request
            for fresh settings
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.PortalGlobalBase.UseExternalAuthentication(System.String)">
            <summary>
            This method will determine whether current user should use external auth
            </summary>
            <param name="userName">current username</param>
            <returns>whether to user external auth</returns>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.PortalGlobalBase.UserCredentials">
            <summary>
            Gets or sets the current user's credentials
            </summary>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.PortalGlobalBase.PortalURL">
            <summary>
            Gets or sets the current URL for the portal. This is stored on a per-request basis and will not be shared across contexts.
            </summary>
            <remarks>
            This should not be used to change the URL.
            Instead, a Response.Redirect should be performed.
            </remarks>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.PortalGlobalBase.Settings">
            <summary>
            collection of site settings
            </summary>
        </member>
        <member name="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.RegExListForm">
            <summary>
            RegExListForm is used by the <see cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.RegExEditorForm"/>
            to interact with the expressions defined in the VAM.config and custom.VAM.config files.
            </summary>
            <remarks>
            <para>- Select an existing Regular Expression from a list.</para>
            <para>- Delete an item in the list (and in the custom.VAM.config file at the same time)</para>
            <para>- Restore an item in the list to its VAM.config default, removing any overridden
            copy in the custom.VAM.config file.</para>
            </remarks>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.RegExListForm.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.RegExListForm.fExpression">
            <summary>
            Exchange the Expression data between the caller form and this one.
            Assign it after creating the form. Retrieve from it on DialogResult.OK.
            </summary>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.RegExListForm.fEditor">
            <summary>
            The <see cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.ConfigFileEditor"/> used to edit the custom.VAM.config file.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.RegExListForm.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.RegExListForm.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.RegExListForm.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.RegExListForm.RegExListForm_Load(System.Object,System.EventArgs)">
            <summary>
            OnLoad event handler. Sets up the form.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.RegExListForm.OKBtn_Click(System.Object,System.EventArgs)">
            <summary>
            OK Button click event handler. Sets fExpression with the selected expression.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.RegExListForm.listBox1_SelectedIndexChanged(System.Object,System.EventArgs)">
            <summary>
            Listbox SelectedIndexChanged event handler. Updates the buttons and the PatternLabel.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.RegExListForm.listBox1_DoubleClick(System.Object,System.EventArgs)">
            <summary>
            Listbox DoubleClick event handler. Works like clicking OK.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.RegExListForm.RestoreBtn_Click(System.Object,System.EventArgs)">
            <summary>
            Restore Button click event handler.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.RegExListForm.DeleteBtn_Click(System.Object,System.EventArgs)">
            <summary>
            Delete button click event handler.
            </summary>
        </member>
        <member name="T:Jenzabar.Portal.Framework.Web.UI.Controls.Secured.SImage">
            <summary>
            A secured, operation aware version of the Image control
            </summary>
            <remarks>
            Secured controls can be used to make interface elements aware of whether or not
            a user has access to a particular operation assigned to the control
            
            If the user does not have access to the operation(s) assigned to the control, the
            control can be set to render differently (or not at all) to prevent the user from
            using the control to perform the secured operation
            
            In addition, events normally raised by the control will not be raised if the control
            detects that the access check has failed. This prevents users from "spoofing" access
            by simulating a postback.
            </remarks>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Web.UI.Controls.Secured.SImage.m_OperationNames">
            <summary>
            Member variable m_OperationNames
            </summary>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Web.UI.Controls.Secured.SImage.m_IsSecured">
            <summary>
            Member variable m_IsSecured
            </summary>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Web.UI.Controls.Secured.SImage.m_AccessCheckType">
            <summary>
            Member variable AccessCheckType
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Secured.SImage.#ctor">
            <summary>
            Constructor for the SImage class
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Secured.SImage.OnPreRender(System.EventArgs)">
            <summary>
            Overrides the OnPreRender event in base control
            </summary>
            <param name="e">EventArgs</param>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Secured.SImage.SecureControl">
            <summary>
            Used internally to secure the control
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Secured.SImage.Render(System.Web.UI.HtmlTextWriter)">
            <summary>
            Overrides the Render event in base control
            </summary>
            <param name="writer">HtmlTextWriter to render control with</param>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Secured.SImage.AccessCheckFailedText">
            <summary>
            Gets or sets the text to display if an access check fails.
            </summary>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Secured.SImage.AccessCheckFailedTextCSSClass">
            <summary>
            Gets or sets the style to apply to the text if displayed if the access check fails and the display type is 'Text'.
            </summary>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Secured.SImage.OperationNames">
            <summary>
            Member Property - OperationNames
            </summary>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Secured.SImage.IsSecured">
            <summary>
            Member Property - IsSecured
            </summary>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Secured.SImage.AccessCheckType">
            <summary>
            Member Property - AccessCheckType
            </summary>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Secured.SImage.DisplayType">
            <summary>
            Member Property - m_DisplayType
            </summary>
        </member>
        <member name="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.PickInstancePropertyGridForm">
            <summary>
            PickInstancePropertyGridForm lets the user choose the object instance from 
            a drop down list and edit its properties.
            </summary>
            <remarks>
            <para>It is a base class used by <see cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.EnablerConditionPropertyGridForm"/>
            and <see cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.ErrorFormatterPropertyGridForm"/>.</para>
            </remarks>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.PickInstancePropertyGridForm.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.PickInstancePropertyGridForm.fInstance">
            <summary>
            Storage for Instance.
            </summary>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.PickInstancePropertyGridForm.fPropertyName">
            <summary>
            Storage for PropertyName.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.PickInstancePropertyGridForm.#ctor(System.Object,System.String)">
            <summary>
            Constructor.
            </summary>
            <param name="pInstance">The data of this property grid.</param>
            <param name="pPropertyName">The name of the property. Used in the title.</param>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.PickInstancePropertyGridForm.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.PickInstancePropertyGridForm.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.PickInstancePropertyGridForm.PickInstancePropertyGridForm_Load(System.Object,System.EventArgs)">
            <summary>
            The OnLoad event handler. Sets up the form.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.PickInstancePropertyGridForm.fSelectedIndexChangedOn">
            <summary>
            Prevents re-entrancy on SetupList.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.PickInstancePropertyGridForm.SetupList">
            <summary>
            Fills in the AvailableTypes list.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.PickInstancePropertyGridForm.FillInList(System.Windows.Forms.ComboBox)">
            <summary>
            FillInList is called by PickInstancePropertyGridForm_Load to let the subclass fill
            in ListOfTypes and assign an initial SelectedIndex value.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.PickInstancePropertyGridForm.UseSaveSystem">
            <summary>
            When true, the Save, Revert and Delete buttons are shown to the user.
            </summary>
            <returns>false</returns>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.PickInstancePropertyGridForm.Save">
            <summary>
            Called by the Save button. Subclasses define the action.
            Should clone Instance and if it saves, replace Instance with the clone.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.PickInstancePropertyGridForm.GetSelectedInstance(System.Windows.Forms.ComboBox)">
            <summary>
            GetSelectedInstance lets the subclass create and return an instance associated with the 
            current selection in the listbox.
            </summary>
            <param name="pListBox">The listbox to specify the current selection.</param>
            <returns>The object associated with the selection in the list box.</returns>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.PickInstancePropertyGridForm.AvailableTypes_SelectedIndexChanged(System.Object,System.EventArgs)">
            <summary>
            Event handler for AvailableTypes.SelectedIndexChanged.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.PickInstancePropertyGridForm.SaveBtn_Click(System.Object,System.EventArgs)">
            <summary>
            Save Button event handler.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.PickInstancePropertyGridForm.RevertBtn_Click(System.Object,System.EventArgs)">
            <summary>
            Revert button event handler.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.PickInstancePropertyGridForm.DeleteBtn_Click(System.Object,System.EventArgs)">
            <summary>
            Delete button event handler.
            </summary>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.PickInstancePropertyGridForm.Instance">
            <summary>
            Instance is the instance we are working with. It can be null to represent "None".
            It should be set by the form creator to pass along the current value and pass
            back the result.
            </summary>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.PickInstancePropertyGridForm.PropertyName">
            <summary>
            PropertyName should be assigned by the caller to the name of the property that we are editing.
            </summary>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.PickInstancePropertyGridForm.TypeName">
            <summary>
            TypeName gives a name to the type of data we are editing. It will be used
            on labels. For example: Condition, ErrorFormatter. Must subclass
            </summary>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.PickInstancePropertyGridForm.AllowNone">
            <summary>
            AllowNone determines if the DropDownList allows setting "None"
            and Instance will accept null. Defaults to false. Subclass to change to true.
            </summary>
        </member>
        <member name="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.ErrorFormatterPropertyGridForm">
            <summary>
            This form is used by the UITypeEditor <see cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.ErrorFormatterUITypeEditor"/>
            on the <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseAnyValidator.ErrorFormatter"/> property.
            </summary>
            <remarks>
            <para>ErrorFormatterPropertyGridForm supports the BaseErrorFormatter subclasses
            and gets its data from <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.Globals.ErrorFormatters"/>.</para>
            <para>It does not support the None option.</para>
            </remarks>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.ErrorFormatterPropertyGridForm.#ctor(Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseErrorFormatter,System.String)">
            <summary>
            Constructor.
            </summary>
            <param name="pPropertyName">The property nane to show on the form.</param>
            <param name="pInstance">Requires a BaseErrorFormatter subclass.</param>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.ErrorFormatterPropertyGridForm.FillInList(System.Windows.Forms.ComboBox)">
            <summary>
            Fills in the list from <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.Globals.ErrorFormatters"/>.
            Assigns the Name property on each ErrorFormatter to the list.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.ErrorFormatterPropertyGridForm.GetSelectedInstance(System.Windows.Forms.ComboBox)">
            <summary>
            Creates an ErrorFormatter instance. The offset into the list matches the offset into
            <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.Globals.ErrorFormatters"/>. Always clones the ErrorFormatter.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.ErrorFormatterPropertyGridForm.UseSaveSystem">
            <returns>true</returns>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.ErrorFormatterPropertyGridForm.Save">
            <summary>
            Uses <see cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.SaveErrorFormatterForm"/> to save the current
            error formatter.
            </summary>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.ErrorFormatterPropertyGridForm.ErrorFormatter">
            <summary>
            ErrorFormatter is the instance we are working with.
            It should be set by the form creator to pass along the current value and pass
            back the result.
            </summary>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.ErrorFormatterPropertyGridForm.TypeName">
            <summary>
            Returns "ErrorFormatter"
            </summary>
        </member>
        <member name="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.EnablerConditionPropertyGridForm">
            <summary>
            This form is used by the UITypeEditor <see cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.EnablerConditionUITypeEditor"/>
            which is associated with BaseAnyValidator.Enabler.
            </summary>
            <remarks>
            <para>EnablerConditionPropertyGridForm supports the BaseCondition subclasses
            and gets its data from <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.ConfigFile.Conditions"/>.</para>
            <para>It supports the None option.</para>
            </remarks>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.EnablerConditionPropertyGridForm.#ctor(Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseCondition,System.String)">
            <summary>
            Constructor
            </summary>
            <param name="pInstance">Must be a BaseCondition instance.</param>
            <param name="pPropertyName">The property nane to show on the form.</param>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.EnablerConditionPropertyGridForm.FillInList(System.Windows.Forms.ComboBox)">
            <summary>
            Adds conditions from <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.ConfigFile.Conditions"/>.
            Assigns the Condition.Name property to the list.
            </summary>
            <param name="pListBox"></param>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.EnablerConditionPropertyGridForm.GetSelectedInstance(System.Windows.Forms.ComboBox)">
            <summary>
            Creates an BaseCondition instance. The offset into the list matches the offset into
            <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.ConfigFile.Conditions"/>. Always clones the Condition.
            </summary>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.EnablerConditionPropertyGridForm.AllowNone">
            <summary>
            Returns true.
            </summary>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.EnablerConditionPropertyGridForm.Condition">
            <summary>
            Condition is the instance we are working with.
            It should be set by the form creator to pass along the current value and pass
            back the result.
            </summary>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.EnablerConditionPropertyGridForm.TypeName">
            <summary>
            Returns "Condition".
            </summary>
        </member>
        <member name="T:Jenzabar.Portal.Framework.Web.UI.UserCustomizeablePortletText">
            <summary>
            Summary description for UserCustomizeableText.
            </summary>
        </member>
        <member name="T:Jenzabar.Portal.Framework.Web.UI.Controls.ContextualBreadCrumb">
            <summary>
            Displays a clickable (optionally) path to a context
            </summary>
            <example>
            By setting the target context to "context3", the following might be displayed:
            "/context1/context2/context3/"
            </example>
        </member>
        <member name="T:Jenzabar.Portal.Framework.Web.UI.Controls.CompositeControlBase">
            <summary>
            A base for composite controls used within the portal
            </summary>
            <remarks>
            Any custom server controls created for the portal should inherit from CompositeControlBase
            </remarks>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.CompositeControlBase.OnPreRender(System.EventArgs)">
            <summary>
            Overrides OnPreRender event of base control
            </summary>
            <param name="e">EventArgs</param>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.CompositeControlBase.LoadTemplate(System.String,System.String)">
            <summary>
            Loads a template based on a given path and control
            </summary>
            <param name="basePath">The path of the template to be loaded</param>
            <param name="userControl">The name of the control</param>
            <returns>An object of interface type ITemplate</returns>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.CompositeControlBase.IsFirstLoad">
            <summary>
            Returns whether or not this is the first load of the control
            </summary>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.CompositeControlBase.Controls">
            <summary>
            Returns the base control's list of child controls.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.ContextualBreadCrumb.SaveViewState">
            <summary>
            Saves the state of this control so it can be re-created when the page is posted back
            </summary>
            <returns>All state information for this control</returns>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.ContextualBreadCrumb.LoadViewState(System.Object)">
            <summary>
            loads previously saved view state information
            </summary>
            <param name="savedState">The state of the control when it was rendered.</param>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.ContextualBreadCrumb.TrailingText">
            <summary>
            Gets or sets the text to append to the breadcrumb trail
            </summary>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.ContextualBreadCrumb.MaxDisplayWidth">
            <summary>
            Gets or sets the maximum width that the bread crumb trail should take up
            </summary>
            <remarks>
            Leave empty for no maximum.
            </remarks>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.ContextualBreadCrumb.DisplayPathLinks">
            <summary>
            Gets or sets whether or not all nodes in the context will be links to that context
            </summary>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.ContextualBreadCrumb.DisplayEndPointLink">
            <summary>
            Gets or sets whether or not the last node in the path will be a link to the context
            </summary>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.ContextualBreadCrumb.AppendSeperator">
            <summary>
            Gets or sets whether or not the seperator character is appended to the end of the path
            </summary>
            <example>
            When true:
            "/context1/context2/context3/"
            
            When false:
            "/context1/context2/context3"
            </example>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.ContextualBreadCrumb.PrependSeperator">
            <summary>
            Gets or sets whether or not the seperator character is prepended to the start of the path
            </summary>
            <example>
            When true:
            "/context1/context2/context3/"
            
            When false:
            "context1/context2/context3/"
            </example>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.ContextualBreadCrumb.Seperator">
            <summary>
            Gets or sets the character(s) placed between nodes in the path
            </summary>
            <example>
            If the seperator character is "/" then:
            "/context1/context2/context3/"
            
            If the seperator character is " - " then:
            " - context1 - context2 - context3 - "
            </example>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.ContextualBreadCrumb.TargetPortalContext">
            <summary>
            Gets or sets the target portal context to display
            </summary>
        </member>
        <member name="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.CollectionsLibrary.AutoSortArrayList">
            <remarks>
            <para>AutoSortArrayList extends the ArrayList to manage a list that is always sorted.
            For details, see the header of this file.
            </para>
            <para>You can retrieve this  with documentation and sort at
            http://www.peterblum.com/CollectionsLibrary/AutoSortArrayList.aspx.</para>
            </remarks>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.CollectionsLibrary.AutoSortArrayList.fAutoSortB">
            <summary>
            Storage for xAutoSortB.
            </summary>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.CollectionsLibrary.AutoSortArrayList.fIComparer">
            <summary>
            Storage for xIComparer.
            </summary>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.CollectionsLibrary.AutoSortArrayList.fDuplicatesAllowedB">
            <summary>
            Storage for xDuplicatesAllowedB.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.CollectionsLibrary.AutoSortArrayList.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.CollectionsLibrary.AutoSortArrayList.#ctor(System.Boolean)">
            <summary>
            Constructor which sets xAutoSortB.
            </summary>
            <param name="pAutoSortB"></param>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.CollectionsLibrary.AutoSortArrayList.#ctor(System.Boolean,System.Collections.IComparer)">
            <summary>
            Constructor which sets xAutoSortB and xIComparer.
            </summary>
            <param name="pAutoSortB"></param>
            <param name="pIComparer"></param>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.CollectionsLibrary.AutoSortArrayList.#ctor(System.Collections.IComparer)">
            <summary>
            Constructor which sets xIComparer.
            </summary>
            <param name="pIComparer"></param>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.CollectionsLibrary.AutoSortArrayList.#ctor(System.Boolean,System.Collections.IComparer,System.Boolean)">
            <summary>
            Constructor which sets xAutoSortB, xIComparer, and xDuplicatesAllowedB
            </summary>
            <param name="pAutoSortB"></param>
            <param name="pIComparer"></param>
            <param name="pDuplicatesAllowedB"></param>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.CollectionsLibrary.AutoSortArrayList.Add(System.Object)">
            <summary>
            Inserts an item into the collection.
            </summary>
            <remarks>
            <para>It adds to the end if xAutoSortB is false.</para>
            <para>Otherwise, it adds in the sorted order as determined by BinarySearch(xIComparer).</para>
            </remarks>
            <exception cref="T:System.InvalidOperationException">If called when xDuplicatesAllowedB is false
            and you add a duplicate instance.</exception>
            <returns>The position inserted into the list, starting at 0.</returns>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.CollectionsLibrary.AutoSortArrayList.AddRange(System.Collections.ICollection)">
            <summary>
            AddRange is overridden to enforce sorting when xAutoSortB is true.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.CollectionsLibrary.AutoSortArrayList.Contains(System.Object)">
            <summary>
            Contains is overridden to use BinarySearch when xAutoSort is true.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.CollectionsLibrary.AutoSortArrayList.BinarySearch(System.Object)">
            <summary>
            BinarySearch is overridden to enforce the xIComparer property.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.CollectionsLibrary.AutoSortArrayList.IndexOf(System.Object)">
            <summary>
            IndexOf is overridden to optimize the search using BinarySearch when xAutoSortB is true.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.CollectionsLibrary.AutoSortArrayList.IndexOf(System.Object,System.Int32)">
            <summary>
            IndexOf is overridden to optimize the search using BinarySearch when xAutoSortB is true.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.CollectionsLibrary.AutoSortArrayList.IndexOf(System.Object,System.Int32,System.Int32)">
            <summary>
            IndexOf is overridden to optimize the search using BinarySearch when xAutoSortB is true.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.CollectionsLibrary.AutoSortArrayList.Insert(System.Int32,System.Object)">
            <summary>
            Insert is overridden to prevent inserting when xAutoSortB is true.
            You should use Add() instead.
            Will throw the exception InvalidOperationException if called when xAutoSortB is true.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.CollectionsLibrary.AutoSortArrayList.InsertRange(System.Int32,System.Collections.ICollection)">
            <summary>
            InsertRange is overridden to prevent inserting when xAutoSortB is true.
            You should use AddRange instead.
            Will throw the exception InvalidOperationException if called when xAutoSortB is true.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.CollectionsLibrary.AutoSortArrayList.Sort">
            <summary>
            Sort is overridden to enforce the xIComparer property
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.CollectionsLibrary.AutoSortArrayList.Reverse">
            <summary>
            Reverse is overridden to prevent reversing when xAutoSortB is true.
            You should supply an IComparer that reverses the sort and call Sort().
            </summary>
            <exception cref="T:System.InvalidOperationException"> If called when xAutoSortB is true</exception>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.CollectionsLibrary.AutoSortArrayList.Reverse(System.Int32,System.Int32)">
            <summary>
            Reverse is overridden to prevent reversing when xAutoSortB is true.
            You should supply an IComparer that reverses the sort and call Sort().
            </summary>
            <exception cref="T:System.InvalidOperationException"> If called when xAutoSortB is true</exception>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.CollectionsLibrary.AutoSortArrayList.SetRange(System.Int32,System.Collections.ICollection)">
            <summary>
            SetRange is overridden to prevent its use when xAutoSortB is true.
            You must delete the original items in the range and call AddRange.
            This could have been done automatically here but that changes the definition
            of SetRange where order is implied.
            </summary>
            <exception cref="T:System.InvalidOperationException"> If called when xAutoSortB is true</exception>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.CollectionsLibrary.AutoSortArrayList.xAutoSortB">
            <summary>
            xAutoSortB indicates if auto sorting is on.
            </summary>
            <remarks>
            <para>When true, Add() and AddRange() will insert the object in the position provided by BinarySearch.
            A number of methods will raise InvalidOperationException when true: Insert(), InsertRange(), and Reverse().
            When false, all methods follow use their ancestor's functionality.</para>
            <para>If set to false and you add items, when you set it back to true, Add() and AddRange() can
            incorrectly position data as a binary search is used to position data. So if switching from false
            to true, call Sort().</para>
            </remarks>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.CollectionsLibrary.AutoSortArrayList.xIComparer">
            <summary>
            xIComparer provides an IComparer interface for use with Sort() and BinarySearch().
            </summary>
            <remarks>
            <para>By default, these methods use the IComparer methods of the objects you insert into the list.
            For primitive values, this works well. For strings, you may consider 
            <see cref="T:System.Collections.CaseInsensitiveComparer"/>.</para>
            <para>But for custom objects, you'll need to help with an IComparer.</para>
            <para>It defaults to null.</para>
            </remarks>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.CollectionsLibrary.AutoSortArrayList.xDuplicatesAllowedB">
            <summary>
            xDuplicatesAllowedB determines if a duplicate is allowed into the list.
            </summary>
            <remarks>
            <para>This only applies with xAutoSortB is true.</para>
            <para>If Add() detects a duplicate when this is false, an InvalidOperationException is thrown.</para>
            <para>It defaults to false.</para>
            </remarks>
        </member>
        <member name="T:Jenzabar.Portal.Framework.Web.UI.Controls.MetaControls.DropDownListMetaControl">
            <summary>
            A meta-data aware version of the DropDownList control
            </summary>
            <remarks>
            Meta-data aware controls can be used for rendering preference and settings based
            on meta data attributes.
            </remarks>
        </member>
        <member name="T:Jenzabar.Portal.Framework.Web.UI.Controls.MetaControls.MetaControlBase">
            <summary>
            A base class used for all meta controls
            </summary>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Web.UI.Controls.MetaControls.MetaControlBase.m_NameValueObjectIdentifier">
            <summary>
            Member Variable m_NameValueObjectIdentifier
            </summary>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Web.UI.Controls.MetaControls.MetaControlBase.m_NameValueScope">
            <summary>
            Member Variable m_NameValueScope
            </summary>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Web.UI.Controls.MetaControls.MetaControlBase.m_DataSourceValue">
            <summary>
            Member Variable m_DataSourceValue
            </summary>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Web.UI.Controls.MetaControls.MetaControlBase.m_Key">
            <summary>
            Member Variable m_Key
            </summary>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Web.UI.Controls.MetaControls.MetaControlBase.m_LoadError">
            <summary>
            Member Variable m_LoadError
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.MetaControls.MetaControlBase.HasControls">
            <summary>
            Overrides base control method HasControls()
            </summary>
            <returns></returns>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.MetaControls.MetaControlBase.CreateNameValueScopeDropDownList">
            <summary>
            Used internally to generate a drop down list of possible name value scopes
            </summary>
            <returns>The drop down list</returns>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.MetaControls.MetaControlBase.CreateNameValueScopeRadioButtonList">
            <summary>
            Used internally to generate a radio button list of possible name value scopes
            </summary>
            <returns>The radio button list</returns>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.MetaControls.MetaControlBase.LoadViewState(System.Object)">
            <summary>
            Overrides the base control implemention of LoadViewState to implement custom MetaControl ViewState
            </summary>
            <param name="savedState">A ViewState object</param>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.MetaControls.MetaControlBase.SaveViewState">
            <summary>
            Saves View State for this control
            </summary>
            <returns>View State Object</returns>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.MetaControls.MetaControlBase.Render(System.Web.UI.HtmlTextWriter)">
            <summary>
            Overrides the Render method of the base control
            </summary>
            <param name="output">The content to render</param>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.MetaControls.MetaControlBase.GetInfoRow(System.Web.UI.WebControls.Label,System.Web.UI.WebControls.WebControl,System.Web.UI.WebControls.WebControl)">
            <summary>
            Compose infor row from Name, Value, Description controls
            using DL tags
            </summary>
            <param name="ctlName"></param>
            <param name="ctlValue"></param>
            <param name="ctlDescription"></param>
            <returns></returns>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.MetaControls.MetaControlBase.GetResourceText(System.String)">
            <summary>
            look in resource file for text for given key; if nothing is found - return key 
            </summary>
            <param name="key">key for resource file (WebText)</param>
            <returns>resource text or key</returns>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.MetaControls.MetaControlBase.CompareTo(System.Object)">
            <summary>
            Allows for easy sorting of meta controls depending on their sort order
            </summary>
            <param name="obj">The meta control to compare to</param>
            <returns>0, 1, or -1 depending on the results of the comparison</returns>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.MetaControls.MetaControlBase.Controls">
            <summary>
            Returns the child control collection for this control
            </summary>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.MetaControls.MetaControlBase.MetaControlAttribute">
            <summary>
            Gets or sets the attribute for the meta control
            </summary>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.MetaControls.MetaControlBase.Name">
            <summary>
            Gets the name of the meta control
            </summary>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.MetaControls.MetaControlBase.Value">
            <summary>
            Gets the value of the meta control
            </summary>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.MetaControls.MetaControlBase.Scope">
            <summary>
            Gets the scope of the meta control
            </summary>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.MetaControls.MetaControlBase.NameValueID">
            <summary>
            Gets the ID of the NameValue object
            </summary>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.MetaControls.MetaControlBase.NameValueScope">
            <summary>
            Gets the scope of the NameValue object
            </summary>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.MetaControls.MetaControlBase.DataSourceValue">
            <summary>
            Gets the value from the NameValue object
            </summary>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.MetaControls.MetaControlBase.NameValueDataSource">
            <summary>
            Sets the NameValueDataSource
            </summary>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.MetaControls.MetaControlBase.Key">
            <summary>
            Gets the key of the meta control
            </summary>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.MetaControls.MetaControlBase.LoadError">
            <summary>
            Whether NameValueDataSource was populated correctly.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.MetaControls.DropDownListMetaControl.#ctor(Jenzabar.Portal.Framework.Web.UI.Controls.MetaControls.Attributes.DropDownListMetaControlAttribute,System.Object)">
            <summary>
            Constructs a DropDownList meta control
            </summary>
            <param name="dropDownListMetaControlAttribute">The attribute for the DropDownList meta control</param>
            <param name="key">The key used to retrieve dynamic values from a NameValueProvider, typically the object to which the attribute is attached</param>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.MetaControls.DropDownListMetaControl.CreateChildControls">
            <summary>
            Builds children control for this control
            </summary>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.MetaControls.DropDownListMetaControl.MetaControlAttribute">
            <summary>
            Gets or sets the attribute for the meta control
            </summary>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.MetaControls.DropDownListMetaControl.Name">
            <summary>
            Gets the name of the meta control
            </summary>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.MetaControls.DropDownListMetaControl.Value">
            <summary>
            Gets the value of the meta control
            </summary>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.MetaControls.DropDownListMetaControl.Scope">
            <summary>
            Gets the scope of the meta control
            </summary>
        </member>
        <member name="T:Jenzabar.Portal.Framework.Web.UI.PageDisplayMode">
            <summary>
            Enumeration of page display modes
            </summary>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Web.UI.PageDisplayMode.Standard">
            <summary>
            Enum value - Standard (0)
            </summary>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Web.UI.PageDisplayMode.ApplicationPreferences">
            <summary>
            Enum value - ApplicationPreferences (1)
            </summary>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Web.UI.PageDisplayMode.ApplicationSettings">
            <summary>
            Enum value - ApplicationSettings (2)
            </summary>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Web.UI.PageDisplayMode.PortalContextProperties">
            <summary>
            Enum value - PortalContextProperties (3)
            </summary>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Web.UI.PageDisplayMode.PageProperties">
            <summary>
            Enum value - PageProperties (4)
            </summary>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Web.UI.PageDisplayMode.PortalContextAndPageSecurity">
            <summary>
            Enum value - PortalContextAndPageSecurity (5)
            </summary>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Web.UI.PageDisplayMode.PagePortlets">
            <summary>
            Enum value - PagePortlets (6)
            </summary>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Web.UI.PageDisplayMode.PortalContextPages">
            <summary>
            Enum value - PortalContextPages (7)
            </summary>
        </member>
        <member name="T:Jenzabar.Portal.Framework.Web.UI.CustomizationLevel">
            <summary>
            Informs the portal page what type oc customization page should be displayed.
            </summary>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Web.UI.CustomizationLevel.Page">
            <summary>
            The UI to configure a specific page should be displayed.
            </summary>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Web.UI.CustomizationLevel.Site">
            <summary>
            The UI to configure the entire site should be displayed.
            </summary>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Web.UI.CustomizationLevel.Portlet">
            <summary>
            The UI to configure a specific portlet should be displayed.
            </summary>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Web.UI.CustomizationLevel.Context">
            <summary>
            The UI to configure a specific context should be displayed.
            </summary>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Web.UI.CustomizationLevel.AddPage">
            <summary>
            The UI to add a page to the context should be displayed
            </summary>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Web.UI.CustomizationLevel.AllCampusGroups">
            <summary>
            The UI to manage the list of campus groups should be displayed.
            </summary>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Web.UI.CustomizationLevel.CampusGroup">
            <summary>
            The UI to manage the current campus group should be displayed
            </summary>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Web.UI.CustomizationLevel.CurrentUser">
            <summary>
            The UI to manage the current user should be displayed
            </summary>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Web.UI.CustomizationLevel.Login">
            <summary>
            The UI to show login and other information should be shown.
            </summary>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Web.UI.CustomizationLevel.CampusDirectory">
            <summary>
            The UI to show campus directory.
            </summary>
        </member>
        <member name="T:Jenzabar.Portal.Framework.Web.UI.PortletDisplayMode">
            <summary>
            Enumeration of possible display modes for a portlet
            </summary>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Web.UI.PortletDisplayMode.Default">
            <summary>
            Standard view of the portlet
            </summary>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Web.UI.PortletDisplayMode.PrintView">
            <summary>
            The printable view of the portlet
            </summary>
        </member>
        <member name="T:Jenzabar.Portal.Framework.Web.UI.PortalPageBase">
            <summary>
            The base class for portal pages
            </summary>
            <remarks>
            All pages used to display portlets within the portal must inherit
            from PortalPageBase.
            
            The portal page lifecycle is as follows:
            
            1.)	OnInit
            2.) ProcessPortalURL
            3.) InitializePortalPage
            4.) BuildOutterGrid
            5.) BuildPortletGrid
            6.) SyncronizePortletStates
            7.) LoadPostData
            8.) OnLoad
            9.) Control Events (Button clicks, etc.)
            10.) OnPreRender
            11.) RenderPageSSLScript
            12.) AppendPageCredentialControls
            13.) AppendBrowserRefreshDetectionControls
            14.) SaveViewState
            15.) Render
            16.) Dispose
            17.) OnUnload
            </remarks>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.PortalPageBase.#ctor">
            <summary>
            Constructor for PortalPageBase class
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.PortalPageBase.OnInit(System.EventArgs)">
            <summary>
            Overrides the OnInit method of the base Page
            </summary>
            <param name="e">EventArgs</param>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.PortalPageBase.ProcessPortalURL">
            <summary>
            Used internally to process the URL to ensure the proper page is loaded
            </summary>
            <remarks>
            If no context is specified in the URL an automatically redirection to the root context will occur
            
            Additional URL processing rules are documented in the PortalURL class
            </remarks>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.PortalPageBase.InitializePortalPage">
            <summary>
            Used internally to initialze the page
            </summary>
            <remarks>
            The base path for the page and certain page state is set in this method
            </remarks>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.PortalPageBase.OnLoad(System.EventArgs)">
            <summary>
            Overrides the OnLoad method of the base Page
            </summary>
            <param name="e">EventArgs</param>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.PortalPageBase.BuildPortletGrid">
            <summary>
            Used internally to build the grid that contains the portlets
            </summary>
            <remarks>Addopted by JS to load the CustomizeThisPage control if needed</remarks>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.PortalPageBase.UpdatePortletGrid">
            <summary>
            Used internally to update the portlet grid when a portlet changes state
            </summary>
            <remarks>
            This method is called whenever a state change on a portlet is detected
            </remarks>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.PortalPageBase.AppendBrowserRefreshDetectionControls">
            <summary>
            Used internally to render the controls to the page that support the IsBrowserRefresh property
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.PortalPageBase.GenerateBrowserRefreshIDKey(System.Guid)">
            <summary>
            Used internally to generate the key for the browser refresh ID
            </summary>
            <param name="refreshID">The ID of the page refresh</param>
            <returns>The key</returns>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.PortalPageBase.LoadPortlet(Jenzabar.Portal.Framework.PortletDisplay)">
            <summary>
            Used internally to load a portlet control
            </summary>
            <param name="portletDisplay">The portlet occurrence for the portlet to load</param>
            <returns>The portlet control if the load was successful, an error control otherwise</returns>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.PortalPageBase.LoadPortletFromTemplate(Jenzabar.Portal.Framework.PortletTemplate)">
            <summary>
            Used internally to load a portlet control
            </summary>
            <param name="portletTemplate">The PortletTemplate for the portlet to load</param>
            <returns>The portlet control if the load was successful, an error control otherwise</returns>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.PortalPageBase.GenerateViewStatePreservationControlID(Jenzabar.Portal.Framework.PortletShortcut)">
            <summary>
            Generates a uniqe id for a view state preservation container based on the portlet that it is containing.
            </summary>
            <param name="portletOccurance">The portlet occurance to use as the basis for creating the unique id.</param>
            <returns></returns>
            <remarks>A uniqe ID is guaranteed to be created for each portlet occurance on the current page. The unique id is not guaranteed to be the same between renderings of the page.</remarks>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.PortalPageBase.GeneratePortletControlID(Jenzabar.Portal.Framework.PortletDisplay)">
            <summary>
            Used internally to generate a unique control ID for a portlet
            </summary>
            <param name="portletDisplay"></param>
            <returns>A unique control ID for the portlet</returns>
            <remarks>A uniqe ID is guaranteed to be created for each portlet occurance on the current page. The unique id is not guaranteed to be the same between renderings of the page.</remarks>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Web.UI.PortalPageBase._usedGuids">
            <summary>
            Keeps track of the guids that have been used on the page to generate id's for controls.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.PortalPageBase.GenerateControlIDFromGUID(System.Guid)">
            <summary>
            Used internally to generate a control ID from a guid. This is used to uniquly identify the portals and view state preservation controls on the page.
            </summary>
            <param name="guid">The id to use as the basis for creating a client friendly unique id.</param>
            <returns>A short unique id for the specified guid on this page</returns>
            <remarks>A uniqe ID is guaranteed to be created for each portlet occurance on the current page. The unique id is not guaranteed to be the same between renderings of the page.</remarks>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.PortalPageBase.OnPreRender(System.EventArgs)">
            <summary>
            Overrides the OnPreRender event in base control
            </summary>
            <param name="e">EventArgs</param>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.PortalPageBase.RefreshPageInfo">
            <summary>
            used to refresh page info; Ex - after customization control 
            run and pageInfo properties got changed
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.PortalPageBase.ShowCustomizeControl(Jenzabar.Portal.Framework.Web.UI.CustomizationLevel,Jenzabar.Portal.Framework.Data.ObjectIdentifier)">
            <summary>
            Unloads all portlets and displays the a customize this ___ portlet where the blank is the level specified.
            </summary>
            <param name="level">What to show the customize dialogue for. eithere Page, Site, or Portlet.</param>
            <param name="id">The ObjectIdentifier for the Page, or Portlet that is to be customized.</param>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.PortalPageBase.LoadCustomizeControl(Jenzabar.Portal.Framework.Web.UI.CustomizationLevel,Jenzabar.Portal.Framework.Data.ObjectIdentifier)">
            <summary>
            Does the loading of the customization portlet, and the unloading of anything else that was being displayed in the portlet grid
            </summary>
            <param name="level">What to show the customize dialogue for. eithere Page, Site, or Portlet.</param>
            <param name="id">The ObjectIdentifier for the Page, or Portlet that is to be customized.</param>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.PortalPageBase.CreateCustomizeControl(Jenzabar.Portal.Framework.Web.UI.CustomizationLevel)">
            <summary>
            Called from the base class to get the control to be used in customizing an object at a specific level.
            </summary>
            <param name="level">What to show the customize dialogue for. eithere Page, Site, or Portlet.</param>
            <returns>A portlet that can be used to customize objects for the level specified.</returns>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.PortalPageBase.HideCustomizeControl">
            <summary>
            Unloads a currently visible Customize this ___ portlet, and displayed the portlets on the page again.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.PortalPageBase.CreateLoginPortlet">
            <summary>
            Creates an instance of the login portlet to be included on a page if the user is not logged in.
            </summary>
            <returns>A portlet that the user can use to log into the site</returns>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.PortalPageBase.ChangeDisplayMode(Jenzabar.Portal.Framework.Web.UI.PortletDisplayMode)">
            <summary>
            Sets the DisplayMode of the current page.
            </summary>
            <param name="displayMode"></param>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.PortalPageBase.LoadViewState(System.Object)">
            <summary>
            Loads view state by calling the base class method and then checks to see if we need to load a customization portlet
            </summary>
            <param name="savedState">The state that was saved from the last rendering of the page.</param>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.PortalPageBase.SaveViewState">
            <summary>
            Saves the state information for this page
            </summary>
            <returns>saved state info</returns>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.PortalPageBase.GetMaximizedPortlet">
            <summary>
            Returns the portlet that is maximized on the page ot null if page contains no maximized portlets.
            </summary>
            <returns>The portlet that is maximized on the page, or null</returns>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.PortalPageBase.HasMaximizedPortlet">
            <summary>
            returns trus if one of the portlets on the page is in the maximized state.
            </summary>
            <returns>true if the page has a maximized portlet, otherwise false</returns>
            <remarks>This is not an extremly fast check, and should not be called from within a loop.</remarks>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.PortalPageBase.BasePathControl">
            <summary>
            Virtual Literal Control - BasePathControl
            </summary>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.PortalPageBase.OverlayContainer">
            <summary>
            Virtual Literal Control - OverlayContainer
            </summary>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.PortalPageBase.OutterGrid">
            <summary>
            Virtual Literal Control - OutterGrid
            </summary>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.PortalPageBase.PortletGrid">
            <summary>
            Virtual Literal Control - PortletGrid
            </summary>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.PortalPageBase.BrowserRefreshID">
            <summary>
            Gets the current browser refresh ID
            </summary>
            <remarks>
            The refresh ID is used to determine whether or not the current postback was caused by a user hitting
            their browser refresh button
            
            To determine this check the IsBrowserRefresh property
            
            The ID is unique for each instance of the page that is created and is written down to
            the resulting html page
            
            The ID is also stored in session and is removed when a postback occurs.
            
            The property returns an empty guid (Guid.Empty) if the page has not experienced a postback
            </remarks>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.PortalPageBase.IsBrowserRefresh">
            <summary>
            Gets whether or not the current page instance was created in response to a user clicking the
            refresh button in their browser window after doing a postback
            </summary>
            <remarks>
            This property makes it easier to prevent events from being fired in response to a browser
            refresh. If the property returns true then event handling code (such as that in an
            button click event hanlder) should probably be bypassed to prevent unexpected behavior.
            
            This property will only return true if IsPostBack is true. (Page refreshes that occur when
            no previous postback has occured are not tracked.)
            </remarks>
            <example>
            private void btnMyButton_Click(object sender, System.EventArgs e)
            {
            	//If this event was fired due to the browser being refreshed, don't execute the code for the event handler
            	if(!((PortalPageInfo)this.Page).IsBrowserRefresh)
            	{
            		//Execute code normally
            	}
            }
            </example>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.PortalPageBase.PortalGlobal">
            <summary>
            Gets the HTTP application for the portal
            </summary>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.PortalPageBase.PageInfo">
            <summary>
            Gets the PageInfo for the current page
            </summary>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.PortalPageBase.PageBasePath">
            <summary>
            Used internally to get the base path to the page file (typically default.aspx)
            </summary>
            <remarks>
            This method is necessary because the URL will often be a process PortalURL that does
            not corrispond to a physical file on the server
            </remarks>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.PortalPageBase.IsCustomizingSomething">
            <summary>
            Returns true if this page is customizing a page, context, the site, or a portlet.
            </summary>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.PortalPageBase.CustomizationPortlet">
            <summary>
            Member property - CustomizationPortlet (returns PortletBase)
            </summary>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.PortalPageBase.DisplayMode">
            <summary>
            Gets the DisplayMode of the current page.
            </summary>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.PortalPageBase.IsFirstRequestAfterDroppedSession">
            <summary>
            true if the current request for a portal page is comming from a user that was logged in, but has had their session time out
            </summary>
        </member>
        <member name="T:Jenzabar.Portal.Framework.Web.UI.PortletBase">
            <summary>
            The base class for portlets within the portal
            </summary>
            <remarks>
            </remarks>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.PortletBase.OnPortletDisplayModeChanged(Jenzabar.Portal.Framework.Web.UI.PortletDisplayModeEventArgs)">
            <summary>
            Method for portlet display mode change
            </summary>
            <param name="e">Event args for the portlet display mode change</param>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Web.UI.PortletBase._zIndex">
            <summary>
            Used to make the menu work properly for IE
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.PortletBase.#ctor">
            <summary>
            Constructor for PortletBase class
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.PortletBase.Refresh">
            <summary>
            Raises a portlet action event that allows for portlet views to clear any caches they are maintaining
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.PortletBase.AccessCheck(System.String[])">
            <summary>
            Performs an operation access check for the current user
            </summary>
            <param name="operationNames">The names of the operations to check access for</param>
            <returns>True if the check succeeds, false otherwise</returns>
            <remarks>
            This will perform an access check using a check type of AccessCheckType.Intersection)
            </remarks>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.PortletBase.AccessCheck(System.String[],Jenzabar.Portal.Framework.Security.Authorization.AccessCheckType)">
            <summary>
            Performs an operation access check for the current user
            </summary>
            <param name="operationNames">The names of the operations to check access for</param>
            <param name="accessCheckType">The type of access check to perform</param>
            <returns>True if the check succeeds, false otherwise</returns>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.PortletBase.AccessCheck(System.String)">
            <summary>
            Performs an operation access check for the current user
            </summary>
            <param name="operationName">The name of the operation to check access for</param>
            <returns>True if the check succeeds, false otherwise</returns>
            <remarks>
            This will perform an access check using a check type of AccessCheckType.Intersection)
            </remarks>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.PortletBase.AccessCheck(System.String,Jenzabar.Portal.Framework.Security.Authorization.AccessCheckType)">
            <summary>
            Performs an operation access check for the current user
            </summary>
            <param name="operationName">The name of the operation to check access for</param>
            <param name="accessCheckType">The type of access check to perform</param>
            <returns>True if the check succeeds, false otherwise</returns>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.PortletBase.GetCurrentScreen">
            <summary>
            Overridden to load the current portlet screen
            </summary>
            <remarks>
            Examine the CurrentPortletScreenName property in the overridden method to determine
            what screen to load
            </remarks>
            <returns>The current portlet screen</returns>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.PortletBase.GetCurrentViewHelpUserControl">
            <summary>
            Gets the help control for the inline help for the current view
            </summary>
            <remarks>
            Override this method to implement a custom help control for the view
            
            If not overridden, the default help control is loaded
            </remarks>
            <returns></returns>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.PortletBase.ShowFeedback(Jenzabar.Portal.Framework.Web.UI.FeedbackType,System.String)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.PortletBase.UpdateDisplay(Jenzabar.Portal.Framework.Web.UI.PortletContainer)">
            <summary>
            This function is called when an event causes the content of the portlet
            to change after the OnInit function has already been called. The function
            updates the content of the portlet by re-calling the GetCurrentScreen() function,
            GetCurrentViewHelpUserControl() function, and Get*Overlay() functions as necessary.
            </summary>
            <param name="updatedContainer">
            Specifying exactly what content has changed allows for the function to better
            optimize the loading and unloading of portlet content, and can help
            preserve the viewstate of loaded controls.
            </param>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.PortletBase.DisplayError(System.Web.HttpException)">
            <summary>
            Call this when there is a catastrophic error that only developers should be seeing. This is to prevent the whole page from going .net crash colors when there is an error in a specific portlet.
            </summary>
            <param name="oops">The exception to display the error information for.</param>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.PortletBase.ChangeDisplayMode">
            <summary>
            Call this to trigger the Portlet's Display Mode Change event.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.PortletBase.LoadAll">
            <summary>
            A worker function called to do the actual UserControl loading for
            the content of the portlet.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.PortletBase.LoadCurrentScreen">
            <summary>
            Used internally to load the current screen's control into the portlet's control collection
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.PortletBase.LoadTitleBar">
            <summary>
            Used internally to load the titlebar for the portlet
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.PortletBase.LoadHelp">
            <summary>
            Used internally to load the help for the portlet view
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.PortletBase.ClearContentContainer">
            <summary>
            Clears out the current view and any other controls that migh be loaded in the "PortletContentContainer" section. This will have no effect if there are no controls in the section.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.PortletBase.OnInit(System.EventArgs)">
            <summary>
            The portlet's views, overlays, help status, and other content are loaded into
            place during this method. If it is overridden in a child class, base.OnInit(e)
            must be called to ensure proper operation.
            </summary>
            <param name="e">Event arguments</param>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.PortletBase.OnLoad(System.EventArgs)">
            <summary>
            Overrides OnLoad method of the base control
            </summary>
            <param name="e">EventArgs</param>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.PortletBase.OnPreRender(System.EventArgs)">
            <summary>
            Overrides the OnPreRender event in base control
            </summary>
            <param name="e">EventArgs</param>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.PortletBase.Render(System.Web.UI.HtmlTextWriter)">
            <summary>
            Overrides the Render event in base control
            </summary>
            <param name="writer">HtmlTextWriter to render control with</param>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.PortletBase.SetValidationGroup(System.Web.UI.Control,System.String)">
            <summary>
            Used internally to ensure that the validation group for all validation controls
            on the portlet screen are scoped to fire only for that portlet
            </summary>
            <param name="control">The control the contains the validation controls (typically the portlet view)</param>
            <param name="group">The group string to use to scope the controls</param>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.PortletBase.LoadPortletView(System.String)">
            <summary>
            Loads the view (a screen or an overlay) from the filename of a UserControl specified by the argument.
            </summary>
            <param name="viewFileName">
            The filename of the UserControl that makes up the view.
            </param>
            <returns>
            An instance of the loaded UserControl.
            </returns>
            <example>
            UserControl someScreen = this.LoadPortletView("myview.ascx");
            </example>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.PortletBase.LoadExternalPortletView(System.String)">
            <summary>
            Loads the view (a screen or an overlay) from the path and filename of a UserControl specified by the argument.
            </summary>
            <param name="viewFilePathAndName">
            The path filename of the UserControl that makes up the view.
            </param>
            <returns>
            An instance of the loaded UserControl.
            </returns>
            <example>
            UserControl someScreen = this.LoadPortletView("~/clientconfig/myscreens/myscreen.ascx");
            </example>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.PortletBase.SetBaseCurrentScreen(Jenzabar.Portal.Framework.Web.UI.PortletViewBase)">
            <summary>
            External way of setting the m_CurrentScreen variable
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.PortletBase.LoadControl(System.String)">
            <summary>
            Used interally to load user controls into the portlet
            </summary>
            <param name="virtualPath">The virtual path to the user control to load</param>
            <returns>The control</returns>
            <example>
            this.LoadControl("~/controls/ui/somecontrol.ascx");
            </example>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.PortletBase.PopulateToolbarInternal">
            <summary>
            Clears the toolbar if needed, then makes a call to PopulateToolbar on subclasses to fill the menuitems of the toolbar. The visibility of the toolbar is set to the return value of the call to PopulateToolbar(toolbar)
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.PortletBase.PopulateToolbar(Jenzabar.Common.Web.UI.Controls.Toolbar)">
            <summary>
            Called at the end of initialization of the portlet, this mehtod when overridden in sub class will add all the menuitems to the toolbar, and hook up events for when the user selects an item from the toolbar.
            </summary>
            <param name="toolbar">The <see cref="T:Jenzabar.Common.Web.UI.Controls.Toolbar"/> to add items to.</param>
            <returns>false by default, override to true to indicate that the toolbar should be visible.</returns>
            <remarks>
            This method by default will turn off the toolbar by default. Override it to populate the toolbar with menuitems.
            </remarks>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.PortletBase.OnTabClicked(Jenzabar.Common.Web.UI.Controls.SuperTabClickEventArgs)">
            <summary>
            Override this to provide custom handeling of the TabClick event. By default this implementation will change the screen to the screenname specified.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.PortletBase.OnBreadcrumbClicked(Jenzabar.Common.Web.UI.Controls.SuperBreadcrumbClickEventArgs)">
            <summary>
            Override this to provide custom handeling of the BreadcrumbClick event. By default this implementation will change the screen to the screenname specified.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.PortletBase.PopulateBreadcrumbs(Jenzabar.Common.Web.UI.Controls.SuperBreadcrumbs)">
            <summary>
            Generates breadcrumbs for the portlet.
            </summary>
            <param name="breadcrumbs">The breadcrumb control that will house the breadcrumbs</param>
            <returns>true to show the breadcrumbs, false to hide them</returns>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.PortletBase.NextScreen(System.String)">
            <summary>
            Changes the view that is displayed by the portlet. This will append to the history of views visited by the user.
            </summary>
            <param name="newScreen">The name of the screen to switch to.</param>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.PortletBase.NextScreen(System.String,System.Boolean)">
            <summary>
            Changes the view that is displayed by the portlet. This will append to the history of views visited by the user, or if cleanUpHistory is true then it will search for a matching screen in the history and go back to that view.
            </summary>
            <param name="newScreen">The name of the screen to switch to.</param>
            <param name="cleanUpHistory">true to roll back in the history to find a matching view name, and go to it, otherwise this behaves exactly like NextScreen</param>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.PortletBase.NextScreen(System.String,System.Collections.Hashtable)">
            <summary>
            Overloaded method - Changes screen and retains a screen history
            1. Adds current screen to the ScreenHistory
            2. Loads the newScreen specified
            </summary>
            <param name="newScreen">The new screen to load</param>
            <param name="screenState">The state the screen is in</param>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.PortletBase.NextScreenToEmailView(System.String,System.String,Jenzabar.Portal.Framework.PortalPrincipal)">
            <summary>
            Changes the screen to the Email View, adding to the screen history, so that when the user is finished with the email view they will be taken back to the current view.
            </summary>
            <param name="subject">The subject for the email that will be generated, or null if there is no pre-defined subject.</param>
            <param name="message">The body of the email, or null if there is no predefined message.</param>
            <param name="userOrRole">The user or group that will recieve the email.</param>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.PortletBase.NextScreenToEmailView(System.String,System.String,Jenzabar.Portal.Framework.PortalPrincipal[])">
            <summary>
            Changes the screen to the Email View, adding to the screen history, so that when the user is finished with the email view they will be taken back to the current view.
            </summary>
            <param name="subject">The subject for the email that will be generated, or null if there is no pre-defined subject.</param>
            <param name="message">The body of the email, or null if there is no predefined message.</param>
            <param name="usersAndRoles">The users and groups that will recieve the email.</param>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.PortletBase.PreviousScreen">
            <summary>
            Returns to the last screen that was loaded. If there was no previous screen then the default view will be loaded.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.PortletBase.PreviousScreen(System.String)">
            <summary>
            Goes to a previous screen where the screen name is the same as the one passed as targetScreenName
            </summary>
            <param name="targetScreenName">The name ofthe screen to go to in the Screen History</param>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.PortletBase.PreviousScreen(System.Int32)">
            <summary>
            Goes to a previous screen, moving back a number of screens in the history equal to moveBackCount
            </summary>
            <param name="moveBackCount">The number of screens to go back in the history</param>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.PortletBase.ChangeScreen(System.String)">
            <summary>
            Changes the current view to the view specified, replacing the last view in the history of all the views that the user has navigated to.
            </summary>
            <param name="targetScreenName">The name of the screen to use as the new view.</param>
            <remarks>
            Changing a view will cause all state held by the previous view to be lost.
            </remarks>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.PortletBase.ChangeScreen(System.String,System.Boolean)">
            <summary>
            Changes the current view to the specified view, replacing the last view ni the history of views or clearing the entire history of views.
            </summary>
            <param name="targetScreenName">The name of the screen to show</param>
            <param name="clearHistory">true to clear the history of previous screens, false to replace the current screen</param>
            <remarks>
            Changing a view will cause all state held by the previous view to be lost.
            </remarks>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.PortletBase.ChangeScreenToDefaultView">
            <summary>
            changes portlet screen to default view,
            will be called from portlet as well as from views controls.
            Need to be overriden.
            </summary>
            <remarks>assumes in GenerateMenu case
            statement has default: operator</remarks>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.PortletBase.ChangeScreenToMainView">
            <summary>
            Changes the current view to the "Main View" for the portlet. The main view is the view that is designed to be viewed maximized, kinda like th home page.
            </summary>
            <remarks>Override this method to change screens to the main view for the portlet.</remarks>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.PortletBase.ReturnToContext">
            <summary>
            Loads the Parent Context view up.
            This leaves a particualr portlet all-together where Maximizing/Minimizing
            isn't an option.  
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.PortletBase.LoadViewState(System.Object)">
            <summary>
            Overrides LoadViewState method in base class
            </summary>
            <returns>Object representing the viewstate to load</returns>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.PortletBase.SaveViewState">
            <summary>
            Overrides SaveViewState method in base class
            </summary>
            <returns>Object representing the viewstate that was saved</returns>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.PortletBase.StartLongRunningProcess(Jenzabar.Common.RunTime.LongRunningProcess)">
            <summary>
            Starts a long running process, locking the user out of the portal untill the process finishes. When the process finishes the LongRunningProcessEnded event will be raised.
            </summary>
            <param name="process">The long running process to start and monitor.</param>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.PortletBase.GetScreenState">
            <summary>
            Retrieves the currentScreenState info from ViewState
            </summary>
            <returns>A Hashtable representing the ScreenState</returns>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.PortletBase.GetOwnerID">
            <summary>
            return potlet owner id; 
            if setting PortletType set to Shared - owner will be context;
            if setting PortletType set to Personal - owner will be user;
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.PortletBase.MaximizeCheck">
            <summary>
            check if portlet state should be maximized
            Should be overridden in child classes
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.PortletBase.GetGlobalSettings(System.Type)">
            <summary>
            Loads the global settings for this portlet.
            </summary>
            <param name="settingsType"></param>
            <returns></returns>
            <remarks>Global settings are shared by all instances of a portlet. They are read from XML files in the ClientConfig directory.</remarks>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.PortletBase.GetGlobalSettings(System.Type,System.Type)">
            <summary>
            
            </summary>
            <param name="portletType"></param>
            <param name="settingsType"></param>
            <returns></returns>
            <remarks>Global settings are shared by all instances of a portlet. They are read from XML files in the ClientConfig directory.</remarks>
        </member>
        <member name="E:Jenzabar.Portal.Framework.Web.UI.PortletBase.PortletActionOccured">
            <summary>
            A custom event for Portlets - PortletActionEventHandler
            </summary>
        </member>
        <member name="E:Jenzabar.Portal.Framework.Web.UI.PortletBase.PortletDisplayModeChanged">
            <summary>
            A custom event for Portlets - PortletDisplayModeEventHandler
            </summary>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.PortletBase.DisplayMode">
            <summary>
            Gets the mode that this portlet is being displayed in. This will indicate if the portlet is being displayed for printing or for normal viewing on a screen.
            </summary>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.PortletBase.ZIndex">
            <summary>
            Used for properly positioning the layers so that the menu does not appear beneath the portlet below it. (I hope)
            </summary>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.PortletBase.IsValid">
            <summary>
            Gets whether or not all the validation controls on the current portlet view have validated all the data entered
            </summary>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.PortletBase.PortalGlobal">
            <summary>
            Gets the HTTP application for the portal
            </summary>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.PortletBase.ParentPortalContext">
            <summary>
            Virtual member property  - ParentPortalContext
            </summary>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.PortletBase.Preferences">
            <summary>
            Gets a collection of preferences for the portlet
            </summary>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.PortletBase.Settings">
            <summary>
            Gets a collection of settings for the portlet
            </summary>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.PortletBase.Maximizable">
            <summary>
            Virtual member property  - Maximizable
            </summary>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.PortletBase.PortletDisplay">
            <summary>
            Gets or sets the portlet display for the portlet control
            </summary>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.PortletBase.PortalPage">
            <summary>
            Gets the page that this portlet is on.
            </summary>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.PortletBase.PortletViewState">
            <summary>
            Gets the viewstate for a portlet that is accessible to the screens and overlays for that portlet
            </summary>
            <remarks>
            This is useful for storing values when going from one screen or view to another. While the viewtate
            for a screen is lost when a new screen is loaded, the parent portlet's viewstate is maintained as 
            long as the portlet is loaded on the page.
            
            Only when the portlet is unloaded from the page, a new page is visited, or a Response.Redirect occurs
            will the viewstate for the parent portlet be lost.
            </remarks>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.PortletBase.State">
            <summary>
            Gets or sets the state of the portlet
            </summary>
            <remarks>
            When the state of the portlet is changed using this property,
            the PortletStateChanged event is raised
            </remarks>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.PortletBase.Session">
            <summary>
            Gets a scoped, portal-safe version of the ASP.NET session object
            </summary>
            <remarks>
            Data that is portlet-specific should never be stored using the ASP.NET sessoin object
            The PortletSession object ensures data is stored on a per-portlet basis and that
            portlets cannot corrupt each other's session data
            </remarks>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.PortletBase.PersistantState">
            <summary>
            Gets a <see cref="T:Jenzabar.Portal.Framework.State.PortletState"/> object that can save state between sessions for data within the portlet.
            </summary>
            <remarks></remarks>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.PortletBase.Title">
            <summary>
            Gets the text that is shown in the portlet's title bar
            </summary>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.PortletBase.DisplayPortletHelp">
            <summary>
            Gets or sets whether or not the inline help is visible in the portlet
            </summary>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.PortletBase.IsBrowserRefresh">
            <summary>
            Gets whether or not the current page instance was created in response to a user clicking the
            refresh button in their browser window after doing a postback
            </summary>
            <remarks>
            This property makes it easier to prevent events from being fired in response to a browser
            refresh. If the property returns true then event handling code (such as that in an
            button click event hanlder) should probably be bypassed to prevent unexpected behavior.
            
            This property will only return true if IsPostBack is true. (Page refreshes that occur when
            no previous postback has occured are not tracked.)
            </remarks>
            <example>
            private void btnMyButton_Click(object sender, System.EventArgs e)
            {
            	//If this event was fired due to the browser being refreshed, don't execute the code for the event handler
            	if(!this.IsBrowserRefresh)
            	{
            		//Execute code normally
            	}
            }
            </example>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.PortletBase.PortletTitleBarContainer">
            <summary>
            Exposes the control collection of the container for the title bar of the portlet.
            </summary>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.PortletBase.PortletHelpContainer">
            <summary>
            Exposes the control collection of the container for the help for the current screen.
            </summary>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.PortletBase.PortletContentContainer">
            <summary>
            Exposes the control collection of the container for the content of the portlet.
            </summary>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.PortletBase.Toolbar">
            <summary>
            Get the toolbar for this portlet.
            </summary>
            <remarks>A Portlet always has a toolbar, it is just not visible by default. For more information about the toolbar see the PopulateToolbar method of this class.</remarks>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.PortletBase.EnableHistoricalBreadcrumbs">
            <summary>
            True to turn aotomatic historical breadcrumbs on in the portlet, otherwise no breadcrumbs will be shown, or if a portlet view has custom locational breadcrumbs they will be shown. Default value is false, to have no auto breadcrumbs.
            </summary>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.PortletBase.Breadcrumbs">
            <summary>
            Gets the breadcrumb control for this portlet.
            </summary>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.PortletBase.ScreenHistory">
            <summary>
            A listing of the screens that have been shown.
            </summary>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.PortletBase.CurrentPortletScreenName">
            <summary>
            Gets the name of the screen proposed by the ChangeScreen function.
            </summary>
            <remarks>
            If ChangeScreen has never been called, an empty string is returned.
            </remarks>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.PortletBase.CurrentPortletView">
            <summary>
            Gets the current portlet view
            </summary>
            <remarks>
            This will return either the current screen or the current overlay, depending on which is visible
            
            This may be null if no view is currently loaded
            </remarks>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.PortletBase.PreviousPortletViewName">
            <summary>
            Gets the name of the portlet view that was previously loaded
            </summary>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.PortletBase.CurrentPortletViewName">
            <summary>
            Gets the name of the current portlet view
            </summary>
            <remarks>
            This property can be used to determine what view to load in the GetCurrentScreen method
            
            This may be an empty string if no view has been loaded
            </remarks>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.PortletBase.CanCustomize">
            <summary>
            True by default if the portlet can be customized via the Customize icon in the upper left corner of the portlet. If this is set to false in an inheriting class the portal rendering framework will not render the customize icon for the portlet.
            </summary>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.PortletBase.GlobalMessages">
            <summary>
            Provides custom editable text for all portlets of the same type. Text changes here will effect all of the portlets of the same type everywhere in the whole site.
            </summary>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.PortletBase.Messages">
            <summary>
            Provides custom editable text for this instance of a portlet. If text is changed here other portets of this type on other pages in the site will still retain their own versions of the text.
            </summary>
        </member>
        <member name="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseValidatorDesigner">
            <summary>
            BaseValidatorDesigner is the ControlDesigner for <see cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseValidator"/>.
            </summary>
            <remarks>
            It calls <see cref="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseValidator.RenderAtDesignTime">BaseValidator.RenderAtDesignTime</see>
            to establish the design mode HTML.
            </remarks>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseValidatorDesigner.GetDesignTimeHtml">
            <summary>
            Builds design mode HTML from 
            <see cref="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseValidator.RenderAtDesignTime">BaseValidator.RenderAtDesignTime</see>.
            Internally, BaseValidator uses the <see cref="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseValidatorAction.AddToPage(System.Boolean)">BaseValidatorAction.AddToPage</see>
            method to create a representation which includes info on erroneous parameter settings
            as well as the WYSIWYG appearance.
            </summary>
            <returns>Design mode HTML.</returns>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseValidatorDesigner.AllowResize">
            <summary>
            Returns false
            </summary>
        </member>
        <member name="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.CompareToStringsValidatorDesigner">
            <summary>
            CompareToStringsValidatorDesigner is the ControlDesigner for 
            <see cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.CompareToStringsValidator"/>.
            </summary>
            <remarks>
            It adds the PreFilterProperties method to give DataSource and DataMember databinging information.
            The technique comes from "Designing Microsoft ASP.NET Server Controls and Components"
            on page 442 "Implementing a Data-Bound Control Designer".
            </remarks>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.CompareToStringsValidatorDesigner.PreFilterProperties(System.Collections.IDictionary)">
            <summary>
            Modifies the DataSource, DataMember and DataTextField properties
            to provide new TypeConverterAttributes: System.Web.UI.Design.DataSourceConverter,
            System.Web.UI.Design.DataMemberConverter, and System.Web.UI.Design.DataTextFieldConverter.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.CompareToStringsValidatorDesigner.System#Web#UI#Design#IDataSourceProvider#GetSelectedDataSource">
            <summary>
            Gets a reference to the selected data source of this data source provider.
            </summary>
            <returns>The data source object.</returns>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.CompareToStringsValidatorDesigner.System#Web#UI#Design#IDataSourceProvider#GetResolvedSelectedDataSource">
            <summary>
            Gets the selected data member from the selected data source.
            </summary>
            <returns>The data source object.</returns>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.CompareToStringsValidatorDesigner.DataMember">
            <summary>
            Exposes the DataMember property.
            </summary>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.CompareToStringsValidatorDesigner.DataTextField">
            <summary>
            Exposes the DataTextField property.
            </summary>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.CompareToStringsValidatorDesigner.DataSource">
            <summary>
            Exposes the DataSource property.
            </summary>
        </member>
        <member name="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.ValidationSummaryDesigner">
            <summary>
            ValidationSummaryDesigner is the ControlDesigner for 
            <see cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.ValidationSummary"/>.
            </summary>
            <remarks>
            It calls <see cref="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.ValidationSummary.RenderAtDesignTime">ValidationSummary.RenderAtDesignTime</see>
            to create its controls.
            </remarks>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.ValidationSummaryDesigner.GetDesignTimeHtml">
            <summary>
            It calls <see cref="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.ValidationSummary.RenderAtDesignTime">ValidationSummary.RenderAtDesignTime</see> 
            to create its controls.
            </summary>
            <returns>HTML representation of this control.</returns>
        </member>
        <member name="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.ProgrammersValidatorDesigner">
            <summary>
            ProgrammersValidatorDesigner is the ControlDesigner for 
            <see cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.ProgrammersValidator"/>.
            </summary>
            <remarks>
            <para>ProgrammersValidator requires the user to plug in ValidatorAction and Condition objects.
            So it has very few properties and no real information to format it.
            When added to the design surface, it is much like a PlaceHolder. So we'll format
            it like a placeholder:</para>
            <code>[ProgrammersValidator "ID"]</code>
            </remarks>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.ProgrammersValidatorDesigner.GetDesignTimeHtml">
            <returns>"[ProgrammersValidator "ID"]</returns>
        </member>
        <member name="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseNoHTMLDesigner">
            <summary>
            BaseNoHTMLDesigner is a ControlDesigner used by controls that don't supply their own HTML
            to the page. In VAM, its used by the FieldStateControllers. 
            </summary>
            <remarks>
            <para>It builds an element that contains an image and the field ID
            on a solid background. The field ID uses Arial 8pt.</para>
            <para>Subclass to define the image file name and background.</para>
            </remarks>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseNoHTMLDesigner.GetDesignTimeHtml">
            <summary>
            Builds a &lt;span&gt; tag with an image, the ID and a color background.
            </summary>
            <returns>HTML to show in design mode.</returns>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseNoHTMLDesigner.GetBackgroundColor">
            <summary>
            Supplies the background color of this control. Color should be a textual
            match to what the style=background-color: attribute supports.
            </summary>
            <returns>This class returns "lightblue".</returns>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseNoHTMLDesigner.GetImageURL">
            <summary>
            Override to supply a file name to an image found in the [webapp]\VAM\Appearance folder
            that will appear on the left of the design mode representation of the control.
            </summary>
            <returns>A file name or "". This class returns "".</returns>
        </member>
        <member name="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.FieldStateControllerDesigner">
            <summary>
            FieldStateControllerDesigner is a ControlDesigner used by 
            <see cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.FieldStateController"/>.
            </summary>
            <remarks>
            It subclasses BaseNoHTMLDesigner to supply the background color "lightblue"
            and image file "FSADesignMode2.bmp".
            </remarks>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.FieldStateControllerDesigner.GetBackgroundColor">
            <returns>"lightblue"</returns>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.FieldStateControllerDesigner.GetImageURL">
            <returns>"FSADesignMode2.bmp"</returns>
        </member>
        <member name="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.MultiFieldStateControllerDesigner">
            <summary>
            FieldStateControllerDesigner is a ControlDesigner used by 
            <see cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.MultiFieldStateController"/>.
            </summary>
            <remarks>
            It subclasses BaseNoHTMLDesigner to supply the background color "lightyellow"
            and image file "FSADesignMode2.bmp".
            </remarks>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.MultiFieldStateControllerDesigner.GetBackgroundColor">
            <returns>"lightyellow"</returns>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.MultiFieldStateControllerDesigner.GetImageURL">
            <returns>"FSADesignMode2.bmp"</returns>
        </member>
        <member name="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.LocalizableLabelDesigner">
            <summary>
            LocalizableLabelDesigner is the ControlDesigner for 
            <see cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.LocalizableLabel"/> and its subclasses.
            </summary>
            <remarks>
            <para>It calls <see cref="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.LocalizableLabel.PrepareText">LocalizableLabel.PrepareText</see>
            to get the initial text. That will internally use the String Lookup System
            and even add URLs to graphic images, based on the subclass.
            If the text is blank, it returns either:</para>
            <code>[<i>ID</i> LookupID: <i>LookupID</i>]</code>
            <para>or</para>
            <code>[<i>ID</i>]</code>
            <para>Otherwise it converts the control into its HTML representation and returns that.</para>
            </remarks>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.LocalizableLabelDesigner.GetDesignTimeHtml">
            <remarks>
            <para>It calls <see cref="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.LocalizableLabel.PrepareText">LocalizableLabel.PrepareText</see>
            to get the initial text. That will internally use the String Lookup System
            and even add URLs to graphic images, based on the subclass.
            If the text is blank, it returns either:</para>
            <code>[<i>ID</i> LookupID: <i>LookupID</i>]</code>
            <para>or</para>
            <code>[<i>ID</i>]</code>
            <para>Otherwise it converts the control into its HTML representation and returns that.</para>
            </remarks>
        </member>
        <member name="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.ConditionCollectionEditor">
            <summary>
            ConditionCollectionEditor provides a UITypeEditor for 
            <see cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.ConditionCollection"/>.
            </summary>
            <remarks>
            It is based on the <see cref="T:System.ComponentModel.Design.CollectionEditor"/> 
            and has the job of defining which Condition types the user
            can add. It gets the list from the <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.Globals.Conditions">Globals.Conditions</see>
            property. This list originates in the VAM.config and custom.VAM.config files.
            </remarks>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.ConditionCollectionEditor.fTypes">
            <summary>
            Contains all possible types supported. Set in the constructor using FillInTypes().
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.ConditionCollectionEditor.#ctor(System.Type)">
            <summary>
            Constructor. The Type parameter is ignored.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.ConditionCollectionEditor.FillInTypes">
            <summary>
            Gets the list of types from <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.Globals.Conditions">Globals.Conditions</see>, 
            in the order of that list.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.ConditionCollectionEditor.EditValue(System.ComponentModel.ITypeDescriptorContext,System.IServiceProvider,System.Object)">
            <summary>
            Sets and clears the BaseDropDownListTypeEditor.OverrideContainer property.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.ConditionCollectionEditor.CreateNewItemTypes">
            <returns>fTypes</returns>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.ConditionCollectionEditor.CreateInstance(System.Type)">
            <summary>
            Calls Activator.CreateInstance on the type, with no parameters for the constructor.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.ConditionCollectionEditor.CreateCollectionItemType">
            <summary>
            CreateCollectionItemType, by default, returns System.Object which doesn't display
            separate properties in the Properties view. Simply by providing it with one of the classes
            we use makes it work with all of them!
            </summary>
        </member>
        <member name="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.TypeSorter">
            <remarks>
            TypeSorter is used to keep an AutoSortArrayList sorted by the name of the type.
            The comparer expects two Type instances.
            </remarks>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.TypeSorter.Compare(System.Object,System.Object)">
            <summary>
            Implements the IComparer.Compare method.
            </summary>
        </member>
        <member name="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.ConditionCollectionConverter">
            <summary>
            ConditionCollectionConverter provides a TypeConverter for 
            <see cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.ConditionCollection"/>.
            </summary>
            <remarks>
            <para>It is based on the CollectionConverter.</para>
            <para>If the Value is a ConditionCollection and the DestinationType is string, 
            it returns "1 item" or "[count] items". Otherwise it calls the ancestor.</para>
            </remarks>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.ConditionCollectionConverter.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.ConditionCollectionConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <remarks>
            <para>If the Value is a ConditionCollection and the DestinationType is string, 
            it returns "1 item" or "[count] items". Otherwise it calls the ancestor.</para>
            </remarks>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.ConditionCollectionConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Calls ancestor.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.ConditionCollectionConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Calls ancestor.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.ConditionCollectionConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <summary>
            Calls ancestor.
            </summary>
        </member>
        <member name="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.ControlConnectionCollectionConverter">
            <summary>
            ControlConnectionCollectionConverter provides a TypeConverter for 
            <see cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.ControlConnectionCollection"/>.
            </summary>
            <remarks>
            <para>It is based on the CollectionConverter.</para>
            <para>If the Value is a ControlConnectionCollection and the DestinationType is string, 
            it returns "1 control" or "[count] controls". Otherwise it calls the ancestor.</para>
            </remarks>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.ControlConnectionCollectionConverter.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.ControlConnectionCollectionConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <remarks>
            <para>If the Value is a ConditionCollection and the DestinationType is string, 
            it returns "1 control" or "[count] controls". Otherwise it calls the ancestor.</para>
            </remarks>
        </member>
        <member name="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseDropDownListTypeEditor">
            <summary>
            BaseDropDownListTypeEditor can be subclassed to build UITypeEditors that show
            a drop down list in the Visual Studio.Net property editor.
            You only need to override the <see cref="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseDropDownListTypeEditor.FillInList(System.ComponentModel.ITypeDescriptorContext,System.IServiceProvider,System.Windows.Forms.ListBox)"/> method.
            </summary>
            <remarks>
            <para>NOTE: Extracted from UITypeEditorClasses.cs in the PeterBlum.com UITypeEditors prodect.
            </para>
            <para>It provides the internal global <see cref="F:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseDropDownListTypeEditor.OverrideContainer"/> that is used
            by most of VAM's UITypeEditors to work properly in a nested Property Grid form.
            These UITypeEditors assign their Context.Container to OverrideContainer
            in their EditValue method and restore it to null when that method finishes.</para>
            </remarks>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseDropDownListTypeEditor.OverrideContainer">
            <summary>
            Normally, EditValue is passed pContext with a value Container property.
            However, when nested within a Property Grid (including from a CollectionEditor),
            pContext.Container = null. Since Container is essential for building a list
            of controls found on the page, we use OverrideContainer to get the container.
            It is assigned by any class I develop using a Property Grid to contain
            the Container passed to that Property Grid UITypeEditor.
            If null, continue to use pContext.Container.
            </summary>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseDropDownListTypeEditor.fEdSvc">
            <summary>
            fEdSrc is created and nulled in EditValue. It is here only to allow the value
            to be shared with the List_Click event handler
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseDropDownListTypeEditor.GetEditStyle(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            GetEditStyle must be overridden for any UITypeEditor.
            In this case, we are using a DropDown style.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseDropDownListTypeEditor.EditValue(System.ComponentModel.ITypeDescriptorContext,System.IServiceProvider,System.Object)">
            <summary>
            EditValue must be overridden from UITypeEditor to install a control that appears in the drop down.
            </summary>
            <remarks>
            <para>For UITypeEditorEditStyle.DropDown, here is the general procedure:</para>
            <para>1. Get the Edit Service from pProvider.GetService(typeof(IWindowsFormsEditorService)).
               It contains methods to run the DropDown and Forms interfaces.</para>
            <para>2. Get a Window control instance that reflects the UI you want. In this case, its a ListBox.
               If you wanted multiple controls, consider something like the Panel class and add controls to its Controls list.</para>
            <para>3. We want the ListBox to close on a Click event much like boolean and enum dropdowns do.
               So we set up a Click event handler that calls CloseDropDown on the Edit Service.</para>
            <para>4. Add data to the ListBox.</para>
            <para>5. Set the initial value of the list. pValue contains that value.</para>
            <para>6. Let the Edit Service open and manage the DropDown interface.</para>
            <para>7. Return the value from the list.</para>
            </remarks>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseDropDownListTypeEditor.GetSelectedItem(System.Object)">
            <summary>
            GetSelectedItem is called before popping up the list to convert pValue
            into an item that will be selected in the list. This version
            simply returns pValue which means the list contains pValue itself.
            </summary>
            <param name="pValue"></param>
            <returns></returns>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseDropDownListTypeEditor.GetResult(System.Object)">
            <summary>
            GetResult is called after the user closes the list only when there is a selection. 
            It is passed the value of ListBox.SelectedItem. It should return an object
            that will be returned to the Property Editor. In this class, it returns pSelectedItem.
            </summary>
            <param name="pSelectedItem"></param>
            <returns></returns>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseDropDownListTypeEditor.List_Click(System.Object,System.EventArgs)">
            <summary>
            List_Click is a click event handler for the ListBox. We want the have the list
            close when the user clicks, just like the Enum and Bool types do in their UITypeEditors.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseDropDownListTypeEditor.FillInList(System.ComponentModel.ITypeDescriptorContext,System.IServiceProvider,System.Windows.Forms.ListBox)">
            <summary>
            FillInList must be overriden to supply properties to the ListBox.
            </summary>
            <remarks>
            <para>It is essential to assign objects to the ListBox.Items collection.
            You can also customize other properties.</para>
            <para>Your data does not need to be strings. Window forms list boxes offer
            customizable drawing rules which you can use to represent any kind of object. </para>
            </remarks>
        </member>
        <member name="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseControlConnectionTypeEditor">
            <summary>
            BaseControlConnectionTypeEditor is an abstract base class UITypeEditor for
            properties that let you select a Control on the page by its ID. The ID property
            must be associated with a <see cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.ControlConnection"/> class
            to filter the controls shown.
            </summary>
            <remarks>
            Override the <see cref="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseControlConnectionTypeEditor.GetControlConnection(System.Object)"/>
            method to supply the ControlConnection class that performs the filtering.
            </remarks>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseControlConnectionTypeEditor.FillInList(System.ComponentModel.ITypeDescriptorContext,System.IServiceProvider,System.Windows.Forms.ListBox)">
            <summary>
            FillInList box gathers the controls found on the page and after filtering out those
            not in supported by the ControlConnection, adds their ID to the list box.
            </summary>
            <param name="pContext">Get the list of components on the page from Context.Container.Components.</param>
            <param name="pProvider">Not used</param>
            <param name="pListBox">The listbox to update.</param>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseControlConnectionTypeEditor.GetControlConnection(System.Object)">
            <summary>
            GetControlConnection returns a <see cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.ControlConnection"/> 
            to be used to filter the controls on this page by its IsValidControl method.
            </summary>
            <remarks>
            Subclasses can supply an existing one or create a new one as needed.
            pInstance is the object whose property we are editing. Use it to extract
            an existing ControlConnection instance.
            </remarks>
            <param name="pInstance">The class that contains the ID property to be modified.
            Any BaseOneFldCondition supplies its own ControlConnection in the
            ControlToEvaluateConnection method.</param>
            <returns>A ControlConnection subclass.</returns>
        </member>
        <member name="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.ConditionControlIDTypeEditor">
            <summary>
            ConditionControlIDTypeEditor provides a droplist of controls associated with
            the <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseOneFieldCondition.ControlIDToEvaluate">BaseOneFieldCondition.ControlIDToEvaluate</see> property.
            </summary>
            <remarks>
            The <see cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.ControlConnection"/> is determined by 
            BaseOneFieldCondition.ControlToEvaluateConnection.
            </remarks>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.ConditionControlIDTypeEditor.GetControlConnection(System.Object)">
            <summary>
            GetControlConnection returns the <see cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.ControlConnection"/> 
            associated with the Condition
            identified by pInstance. pInstance can be subclassed from BaseOneFldValidator,
            BaseOneFldValidatorAction or BaseOneFieldCondition.
            </summary>
            <exception cref="T:System.Exception">If an invalid class is supplied in pInstance.</exception>
            <returns>BaseOneFieldCondition.ControlToEvaluateConnection</returns>
        </member>
        <member name="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.ConditionSecondControlIDTypeEditor">
            <summary>
            ConditionSecondControlIDTypeEditor provides a droplist of controls associated with
            the <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseTwoFieldCondition.SecondControlIDToEvaluate">BaseTwoFieldCondition.SecondControlIDToEvaluate</see> property.
            </summary>
            <remarks>
            The <see cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.ControlConnection"/> is determined by 
            BaseTwoFieldCondition.SecondControlToEvaluateConnection.
            </remarks>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.ConditionSecondControlIDTypeEditor.GetControlConnection(System.Object)">
            <summary>
            GetControlConnection returns the 
            <see cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.ControlConnection"/>  associated with the Condition
            identified by pInstance. pInstance can be subclassed from BaseTwoFldValidator,
            BaseTwoFldValidatorAction or BaseTwoFieldCondition.
            </summary>
            <exception cref="T:System.Exception">If an invalid class is supplied in pInstance.</exception>
            <returns>BaseTwoFieldCondition.SecondControlToEvaluateConnection</returns>
        </member>
        <member name="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.ValidationPropertyControlConnectionTypeEditor">
            <summary>
            ValidationPropertyControlConnectionTypeEditor provides a droplist of controls for a property
            that hosts a ControlID and uses <see cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.ValidationPropertyControlConnection"/>
            to filter the controls.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.ValidationPropertyControlConnectionTypeEditor.GetControlConnection(System.Object)">
            <returns><see cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.ValidationPropertyControlConnection"/></returns>
        </member>
        <member name="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.FSAControlConnectionTypeEditor">
            <summary>
            FSAControlConnectionTypeEditor provides a droplist of controls for any property
            that hosts a ControlID on a FieldStateController.
            It uses <see cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.FSAControlConnection"/>
            to filter the controls.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.FSAControlConnectionTypeEditor.GetControlConnection(System.Object)">
            <returns><see cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.FSAControlConnection"/></returns>
        </member>
        <member name="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.ControlConnectionTypeEditor">
            <summary>
            ControlConnectionTypeEditor provides a droplist of controls for a property
            that hosts a ControlID and uses <see cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.ControlConnection"/>
            to filter the controls.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.ControlConnectionTypeEditor.GetControlConnection(System.Object)">
            <returns>A new instance of <see cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.ControlConnection"/>.</returns>
        </member>
        <member name="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.LabelControlTypeEditor">
            <summary>
            LabelControlTypeEditor provides a droplist of controls for a property
            that hosts a ControlID and uses <see cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.LabelTextControlConnection"/>
            to filter the controls. This is used by <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.LabelText.LabelControlID">LabelText.LabelControlID</see>.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.LabelControlTypeEditor.GetControlConnection(System.Object)">
            <returns><see cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.LabelTextControlConnection"/></returns>
        </member>
        <member name="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.TextBoxOnlyControlTypeEditor">
            <summary>
            TextBoxOnlyControlTypeEditor provides a droplist of controls for a property
            that hosts a ControlID and uses <see cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.TextBoxOnlyControlConnection"/>
            to filter the controls. This is used by <see cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseDataTypeTextBox"/>.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.TextBoxOnlyControlTypeEditor.GetControlConnection(System.Object)">
            <returns><see cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.TextBoxOnlyControlConnection"/></returns>
        </member>
        <member name="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.LabelTextTypeConverter">
            <summary>
            LabelTextTypeConverter provides a TypeConverter for a the 
            <see cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.LabelText"/> control.
            </summary>
            <remarks>
            <para>It provides text for the Property Editor to description some of the major
            settings of a Label property, similar to how the FontInfo structure is 
            described on a control.</para>
            <para>If the destinationType is a string, it identifies how the text
            will be retrieved from the Text, TextLookupID, or LabelControlID properties
            on LabelText. If none are assigned, it returns "Not set".</para>
            </remarks>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.LabelTextTypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <remarks>
            <para>If the destinationType is a string, it identifies how the text
            will be retrieved from the Text, TextLookupID, or LabelControlID properties
            on LabelText. If none are assigned, it returns "Not set".</para>
            </remarks>
        </member>
        <member name="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.MultiFSACollectionEditor">
            <summary>
            MultiFSACollectionEditor provides a UITypeEditor for the
            <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.MultiFieldStateController.ControlConnections"/> property.
            </summary>
            <remarks>
            It is based on the CollectionEditor that allows the Add button
            to create <see cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.FSAControlConnection"/> objects to the collection.
            </remarks>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.MultiFSACollectionEditor.#ctor(System.Type)">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.MultiFSACollectionEditor.EditValue(System.ComponentModel.ITypeDescriptorContext,System.IServiceProvider,System.Object)">
            <summary>
            Sets and clears the BaseDropDownListTypeEditor.OverrideContainer property.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.MultiFSACollectionEditor.CreateInstance(System.Type)">
            <returns>A new instance of <see cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.FSAControlConnection"/>.</returns>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.MultiFSACollectionEditor.CreateCollectionItemType">
            <returns><see cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.FSAControlConnection"/></returns>
        </member>
        <member name="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.CSAttributeDescTypeConverter">
            <summary>
            CSAttributeDescTypeConverter provides a TypeConverter for a 
            <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.StateSettings.Other">StateSettings.Other</see> property.
            </summary>
            <remarks>
            It describes the attribute that has been assigned or returns "Not set".
            </remarks>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.CSAttributeDescTypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <returns>If the destinationType is string, it returns either "Not set",
            "AttributeName = AttributeValue", or "style.AttributeName = AttributeValue". Otherwise
            it calls the ancestor.</returns>
        </member>
        <member name="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.CompareToStringsCollectionEditor">
            <summary>
            CompareToStringsCollectionEditor provides a UITypeEditor for the
            <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.CompareToStringsCondition.Items">CompareToStringsCondition.Items</see> and
            <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.CompareToStringsValidator.Items">CompareToStringsValidator.Items</see> properties.
            </summary>
            <remarks>
            It is based on the CollectionEditor that allows the Add button
            to create <see cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.CompareToStringsItem"/> objects to the collection.
            </remarks>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.CompareToStringsCollectionEditor.#ctor(System.Type)">
            <summary>
            Constructor
            </summary>
            <param name="pType"></param>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.CompareToStringsCollectionEditor.EditValue(System.ComponentModel.ITypeDescriptorContext,System.IServiceProvider,System.Object)">
            <summary>
            Sets and clears the BaseDropDownListTypeEditor.OverrideContainer property.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.CompareToStringsCollectionEditor.CreateInstance(System.Type)">
            <returns>A new instance of <see cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.CompareToStringsItem"/></returns>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.CompareToStringsCollectionEditor.CreateCollectionItemType">
            <returns><see cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.CompareToStringsItem"/></returns>
        </member>
        <member name="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.CompareToStringsTypeConverter">
            <summary>
            CompareToStringsTypeConverter provides a TypeConverter for 
            <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.CompareToStringsCondition.Items">CompareToStringsCondition.Items</see> and
            <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.CompareToStringsValidator.Items">CompareToStringsValidator.Items</see> properties.
            </summary>
            <remarks>
            <para>If destinationType is string, it returns "None" (when Value=null), "1 item",
            or "[count] items".</para>
            </remarks>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.CompareToStringsTypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <summary>
            If destinationType is string, it returns "None" (when Value=null), "1 item",
            or "[count] items". Otherwise it calls the ancestor.
            </summary>
        </member>
        <member name="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.DataType_TypeEditor">
            <summary>
            DataType_TypeEditor is a droplist that shows all <see cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.VAMTypeConverter"/>
            objects defined in the VAM.config and custom.VAM.config files.
            It is used on DataType properties throughout VAM.
            </summary>
            <remarks>
            <para>The VAMTypeConverters from the config files are accessed from 
            <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.Globals.DataTypes">Globals.DataTypes</see>.</para>
            </remarks>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.DataType_TypeEditor.FillInList(System.ComponentModel.ITypeDescriptorContext,System.IServiceProvider,System.Windows.Forms.ListBox)">
            <summary>
            FillInList box assigns the items in <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.Globals.DataTypes">Globals.DataTypes</see>
            by their key (name) in the order they were defined in the config files.
            </summary>
        </member>
        <member name="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.ErrorFormatterUITypeEditor">
            <summary>
            ErrorFormatterUITypeEditor is the UITypeEditor for the 
            <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseAnyValidator.ErrorFormatter">BaseAnyValidator.ErrorFormatter</see> property.
            </summary>
            <remarks>
            This UITypeEditor lets the user choose a BaseErrorFormatter instance and changes its properties
            in the modal form, <see cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.ErrorFormatterPropertyGridForm"/>.
            The Editor is very sophisticated with the ability to read and edit the config files.
            It gets its list of ErrorFormatters from both config files through
            <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.Globals.ErrorFormatters">Globals.ErrorFormatters</see>. It allows the user to Add,
            edit properties, and delete items all in the custom.VAM.config file.
            </remarks>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.ErrorFormatterUITypeEditor.fEdSvc">
            <summary>
            fEdSrc is created and nulled in EditValue. It is here only to allow the value
            to be shared with the List_Click event handler
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.ErrorFormatterUITypeEditor.GetEditStyle(System.ComponentModel.ITypeDescriptorContext)">
            <returns>UITypeEditorEditStyle.Modal</returns>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.ErrorFormatterUITypeEditor.EditValue(System.ComponentModel.ITypeDescriptorContext,System.IServiceProvider,System.Object)">
            <summary>
            Edits a clone of the current value in the modal firm,
            <see cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.ErrorFormatterPropertyGridForm"/>.
            </summary>
            <remarks>
            <para>If the user OKs the edit, the current object is replaced with the edited
            clone. As a result, developers of BaseErrorFormatter classes must
            be sure to override the <see cref="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseErrorFormatter.Copy(Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseErrorFormatter)">BaseErrorFormatter.Copy</see>
            method to copy every property they introduce.</para>
            <para>Sets and clears the BaseDropDownListTypeEditor.OverrideContainer property.</para>
            </remarks>
        </member>
        <member name="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.ErrorFormatterTypeConverter">
            <summary>
            ErrorFormatterTypeConverter provides a TypeConverter for the
            <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseAnyValidator.ErrorFormatter">BaseAnyValidator.ErrorFormatter</see> property.
            </summary>
            <remarks>
            <para>If the DestinationType is string, return the ErrorFormatter.Name and class
            like this:</para>
            <code>Text (class:TextErrorFormatter)</code>
            <para>If the Value is null, it indicates that the default TextErrorFormatter 
            will be used so return "Text (class:TextErrorFormatter)".</para>
            </remarks>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.ErrorFormatterTypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <remarks>
            <para>If the DestinationType is string, return the ErrorFormatter.Name and class
            like this:</para>
            <code>Text (class:TextErrorFormatter)</code>
            <para>If the Value is null, it indicates that the default TextErrorFormatter 
            will be used so return "Text (class:TextErrorFormatter)".</para>
            </remarks>
        </member>
        <member name="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.OneConditionUITypeEditor">
            <summary>
            OneConditionUITypeEditor provides a two form UITypeEditor for selecting 
            the type and editing the properties of a BaseCondition.
            It is used by <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseFieldStateController.Condition">BaseFieldStateController.Condition</see>.
            </summary>
            <remarks>
            <para>The value passed in must be a BaseCondition instance or null.
            When null, it represents none selected and the editor must first
            prompt the user with the <see cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.PickConditionForm"/> 
            which they select the condition class or "None".</para>
            <para>If not None, open the <see cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.OneConditionPropertyGridForm"/> 
            to edit the properties.
            That form has a Change button to re-open the PickConditionForm.</para>
            </remarks>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.OneConditionUITypeEditor.fEdSvc">
            <summary>
            fEdSrc is created and nulled in EditValue. It is here only to allow the value
            to be shared with the List_Click event handler
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.OneConditionUITypeEditor.GetEditStyle(System.ComponentModel.ITypeDescriptorContext)">
            <returns>UITypeEditorEditStyle.Modal</returns>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.OneConditionUITypeEditor.EditValue(System.ComponentModel.ITypeDescriptorContext,System.IServiceProvider,System.Object)">
            <remarks>
            <para>The value passed in must be a BaseCondition instance or null.
            When null, it represents none selected and the editor must first
            prompt the user with the <see cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.PickConditionForm"/> 
            which they select the condition class or "None".</para>
            <para>If not None, open the <see cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.OneConditionPropertyGridForm"/> 
            to edit the properties.
            That form has a Change button to re-open the PickConditionForm.</para>
            <para>Sets and clears the BaseDropDownListTypeEditor.OverrideContainer property.</para>
            </remarks>
        </member>
        <member name="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.OneConditionTypeConverter">
            <summary>
            OneConditionTypeConverter provides a TypeConverter for properties that 
            provide let you select a BaseCondition:
            <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseAnyValidator.Enabler">BaseAnyValidator.Enabler</see>,
            <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseFieldStateController.Condition">BaseFieldStateController.Condition</see>, and
            <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseFieldStateController.Enabler">BaseFieldStateController.Enabler</see>.
            </summary>
            <remarks>
            <para>If destinationType is string, it returns "None" when the value is null
            and the BaseCondition.Name + ": " + BaseCondition.Describe().</para>
            <para>As a side effect of the design (hack to make polymorphic properties work), 
            this string is written to the ASP.NET text. But is harmless.</para>
            </remarks>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.OneConditionTypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <remarks>
            <para>If destinationType is string, it returns "None" when the value is null
            and the BaseCondition.Name + ": " + BaseCondition.Describe().</para>
            </remarks>
        </member>
        <member name="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.EnablerConditionUITypeEditor">
            <summary>
            EnablerConditionUITypeEditor is the UITypeEditor for the
            <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseAnyValidator.Enabler">BaseAnyValidator.Enabler</see>
            and <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseFieldStateController.Enabler">BaseFieldStateController.Enabler</see> property.
            </summary>
            <remarks>
            That property contains an instance of BaseCondition or null. This UITypeEditor
            lets the user choose a BaseCondition instance and changes its properties
            in the modal form, <see cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.EnablerConditionPropertyGridForm"/>.
            </remarks>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.EnablerConditionUITypeEditor.fEdSvc">
            <summary>
            fEdSrc is created and nulled in EditValue. It is here only to allow the value
            to be shared with the List_Click event handler
            </summary> 
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.EnablerConditionUITypeEditor.GetEditStyle(System.ComponentModel.ITypeDescriptorContext)">
            <returns>UITypeEditorEditStyle.Modal</returns>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.EnablerConditionUITypeEditor.EditValue(System.ComponentModel.ITypeDescriptorContext,System.IServiceProvider,System.Object)">
            <summary>
            Clones the initial condition and passes it to the form
            <see cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.EnablerConditionPropertyGridForm"/>.
            If the user OKs the form, the clone replaces the original condition object.
            </summary>
            <remarks>
            <para>Due to cloning, developers of new Condition classes
            must override the <see cref="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseCondition.CopyFrom(Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseCondition)">BaseCondition.CopyFrom</see>
            method to copy all properties they introduce.</para>
            <para>Sets and clears the BaseDropDownListTypeEditor.OverrideContainer property.</para>
            </remarks>
        </member>
        <member name="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.FieldStateControllerControlBuilder">
            <summary>
            FieldStateControllerControlBuilder is a ControlBuilder for 
            <see cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseFieldStateController"/>.
            </summary>
            <remarks>
            It implements a hack to ignore the Enabler and Condition properties within the main tag.
            These properties are written by the Properties Editor but are not supported as strings.
            Instead those properties are reflected in the EnablerContainer and ConditionContainer tags
            in the ASP.NET text.
            </remarks>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.FieldStateControllerControlBuilder.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.FieldStateControllerControlBuilder.Init(System.Web.UI.TemplateParser,System.Web.UI.ControlBuilder,System.Type,System.String,System.String,System.Collections.IDictionary)">
            <summary>
            Removes the attributes "Condition" and "Enabler".
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.FieldStateControllerControlBuilder.GetChildControlType(System.String,System.Collections.IDictionary)">
            <summary>
            Calls the ancestor.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.FieldStateControllerControlBuilder.AllowWhitespaceLiterals">
            <returns>false</returns>
        </member>
        <member name="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.MultiFieldStateControllerControlBuilder">
            <summary>
            MultiFieldStateControllerControlBuilder is a ControlBuilder for 
            <see cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.MultiFieldStateController"/>.
            It maps the &lt;FSAControlConnection&gt; children to 
            <see cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.FSAControlConnection"/> so they can be added
            to the  <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.MultiFieldStateController.ControlConnections">MultiFieldStateController.ControlConnections</see> property.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.MultiFieldStateControllerControlBuilder.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.MultiFieldStateControllerControlBuilder.GetChildControlType(System.String,System.Collections.IDictionary)">
            <summary>
            It maps the &lt;FSAControlConnection&gt; children to 
            <see cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.FSAControlConnection"/> so they can be added
            to the <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.MultiFieldStateController.ControlConnections">MultiFieldStateController.ControlConnections</see> property.
            </summary>
        </member>
        <member name="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.RegExpressionTypeEditor">
            <summary>
            RegExpressionTypeEditor is a UITypeEditor for the Expression property on
            <see cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.RegexValidator"/> and
            <see cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.RegexCondition"/>.
            </summary>
            <remarks>
            <para>It provides the modal dialog <see cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.RegExEditorForm"/>
            where the user can define the expression, test it, choose an existing
            expression from the config files or modify the custom.VAM.config file.</para>
            <para>Config file data is stored in <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.ConfigFile.RegExPatterns"/>.</para>
            </remarks>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.RegExpressionTypeEditor.fEdSvc">
            <summary>
            fEdSrc is created and nulled in EditValue. It is here only to allow the value
            to be shared with the List_Click event handler
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.RegExpressionTypeEditor.GetEditStyle(System.ComponentModel.ITypeDescriptorContext)">
            <returns>UITypeEditorEditStyle.Modal</returns>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.RegExpressionTypeEditor.EditValue(System.ComponentModel.ITypeDescriptorContext,System.IServiceProvider,System.Object)">
            <summary>
            Provides the form <see cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.RegExEditorForm"/> to
            edit the regular expression string.
            </summary>
            <remarks>
            <para>The form supports numerous tools to edit and test the expression,
            retrieve expressions stored in the config files and add and delete the
            expressions list in the custom.VAM.config file.</para>
            <para>Sets and clears the BaseDropDownListTypeEditor.OverrideContainer property.</para>
            </remarks>
        </member>
        <member name="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.ErrorMessageTypeEditor">
            <summary>
            ErrorMessageTypeEditor is the UITypeEditor for the 
            <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseAnyValidator.ErrorMessage">BaseAnyValidator.ErrorMessage</see> and 
            <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseAnyValidator.SummaryErrorMessage">BaseAnyValidator.SummaryErrorMessage</see> properties.
            </summary>
            <remarks>
            <para>It provides the modal form, <see cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.ErrorMessageForm"/>
            with plenty of room to enter the message.
            The user is given a context menu with the tokens
            defined in <see cref="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseValidatorAction.DescribeTokens(System.Collections.Specialized.NameValueCollection)">BaseValidatorAction.DescribeTokens</see>.</para>
            </remarks>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.ErrorMessageTypeEditor.fEdSvc">
            <summary>
            fEdSrc is created and nulled in EditValue. It is here only to allow the value
            to be shared with the List_Click event handler
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.ErrorMessageTypeEditor.GetEditStyle(System.ComponentModel.ITypeDescriptorContext)">
            <returns>UITypeEditorEditStyle.Modal</returns>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.ErrorMessageTypeEditor.EditValue(System.ComponentModel.ITypeDescriptorContext,System.IServiceProvider,System.Object)">
            <summary>
            Passes the string to the form <see cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.ErrorMessageForm"/>
            along with the ValidatorAction instance (which supplies the token list.)
            </summary>
            <remarks>
            Sets and clears the BaseDropDownListTypeEditor.OverrideContainer property.
            </remarks>
        </member>
        <member name="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.StringTypeEditor">
            <summary>
            StringTypeEditor is a UITypeEditor for any string-type property
            to provide a modal dialog with plenty of room to enter the message.
            </summary>
            <remarks>
            It uses the form <see cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.StringEditorForm"/>.
            </remarks>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.StringTypeEditor.fEdSvc">
            <summary>
            fEdSrc is created and nulled in EditValue. It is here only to allow the value
            to be shared with the List_Click event handler
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.StringTypeEditor.GetEditStyle(System.ComponentModel.ITypeDescriptorContext)">
            <returns>UITypeEditorEditStyle.Modal</returns>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.StringTypeEditor.EditValue(System.ComponentModel.ITypeDescriptorContext,System.IServiceProvider,System.Object)">
            <summary>
            Uses the <see cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.StringEditorForm"/> to edit the string.
            </summary>
            <remarks>
            Sets and clears the BaseDropDownListTypeEditor.OverrideContainer property.
            </remarks>
        </member>
        <member name="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.MultiConditionTypeEditor">
            <summary>
            MultiConditionTypeEditor is a UITypeEditor for the 
            <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseMultiConditionValidator.Conditions">BaseMultiConditionValidator.Conditions</see> property.
            </summary>
            <remarks>
            <para>It can be used by other controls that
            provide a Conditions property based on ConditionCollection. </para>
            <para>It uses the modal form <see cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.MultiConditionForm"/>
            to edit the tree of Conditions in the ConditionCollection.
            The TreeView control represents the tree.</para>
            </remarks>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.MultiConditionTypeEditor.GetEditStyle(System.ComponentModel.ITypeDescriptorContext)">
            <returns>UITypeEditorEditStyle.Modal</returns>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.MultiConditionTypeEditor.EditValue(System.ComponentModel.ITypeDescriptorContext,System.IServiceProvider,System.Object)">
            <summary>
            Edits a clone of the ConditionCollection in the <see cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.MultiConditionForm"/>.
            </summary>
            <remarks>
            <para>Uses the IDesignerHost.CreateTransaction method to implement transactions
            that allow undoing the changes.</para>
            <para>Sets and clears the BaseDropDownListTypeEditor.OverrideContainer property.</para>
            </remarks>
        </member>
        <member name="T:Jenzabar.Portal.Framework.Web.UI.Controls.Secured.SCheckBox">
            <summary>
            A secured, operation aware version of the CheckBox control
            </summary>
            <remarks>
            Secured controls can be used to make interface elements aware of whether or not
            a user has access to a particular operation assigned to the control
            
            If the user does not have access to the operation(s) assigned to the control, the
            control can be set to render differently (or not at all) to prevent the user from
            using the control to perform the secured operation
            
            In addition, events normally raised by the control will not be raised if the control
            detects that the access check has failed. This prevents users from "spoofing" access
            by simulating a postback.
            </remarks>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Web.UI.Controls.Secured.SCheckBox.m_OperationNames">
            <summary>
            Member variable - m_OperationNames
            </summary>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Web.UI.Controls.Secured.SCheckBox.m_IsSecured">
            <summary>
            Member variable - m_IsSecured
            </summary>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Web.UI.Controls.Secured.SCheckBox.m_AccessCheckType">
            <summary>
            Member variable - m_AccessCheckType
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Secured.SCheckBox.#ctor">
            <summary>
            Constructor for SCheckBox Control
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Secured.SCheckBox.OnCheckedChanged(System.EventArgs)">
            <summary>
            Overrides the OnCheckedChanged event in base control
            </summary>
            <param name="e">EventArgs</param>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Secured.SCheckBox.OnPreRender(System.EventArgs)">
            <summary>
            Overrides the OnPreRender event in base control
            </summary>
            <param name="e">EventArgs</param>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Secured.SCheckBox.SecureControl">
            <summary>
            Used internally to secure the control
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Secured.SCheckBox.Render(System.Web.UI.HtmlTextWriter)">
            <summary>
            Overrides the Render event in base control
            </summary>
            <param name="writer">HtmlTextWriter to render control with</param>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Secured.SCheckBox.AccessCheckFailedText">
            <summary>
            Gets or sets the text to display if an access check fails.
            </summary>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Secured.SCheckBox.AccessCheckFailedTextCSSClass">
            <summary>
            Gets or sets the style to apply to the text if displayed if the access check fails and the display type is 'Text'.
            </summary>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Secured.SCheckBox.OperationNames">
            <summary>
            Member Property - OperationNames
            </summary>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Secured.SCheckBox.IsSecured">
            <summary>
            Member Property - IsSecured
            </summary>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Secured.SCheckBox.AccessCheckType">
            <summary>
            Member Property - AccessCheckType
            </summary>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Secured.SCheckBox.DisplayType">
            <summary>
            Member Property - m_DisplayType
            </summary>
        </member>
        <member name="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseValidatorAction">
            <summary>
            BaseValidatorAction is an action specifically for Validators. It requires
            an owner control based on <see cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseValidator"/> and
            an Condition, either passed in or defined by the subclass.
            </summary>
            <remarks>
            <para>It is part of four classes that when connected build a validator:
            <see cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseValidator"/>, <see cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseCondition"/>,
            <see cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseErrorFormatter"/>, and BaseValidatorAction.</para>
            <para>This class focuses on connecting the behaviors of a validator to an action.</para>
            <para>The behaviors are:</para>
            <list type="bullet">
            <item>
            <description>
            create and format error messages shown at the location of the validator control
            including replacing tokens.
            </description>
            </item>
            <item>
            <description>
            show and hide error information on the web page based on a condition
            </description>
            </item>
            <item>
            <description>
            provide the error text to a ValidationSummary control
            </description>
            </item>
            </list>
            <para>It contributes heavily to the client-side VAM system. By being a subclass of
            BaseAction, it already creates client-side VAM objects that represent itself.
            That means client-side onchange or onclick events are hooked up to call 
            the client-side Action function "VAM_DoValidate". The Validator Action function builds
            the error message and shows or hides it based on the result of the condition.
            It offloads much of the work to client-side functions associated with the 
            ErrorFormatter.</para>
            <para>On the server side, it provides the <see cref="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseValidatorAction.Validate"/> 
            method which is a wrapper around the DoAction method. It provides the 
            <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseValidatorAction.IsValid"/> and 
            <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseValidatorAction.HasValidated"/> properties.</para>
            <para>BaseValidatorAction has several key properties:</para>
            <list type="bullet">
            <item>
            <description>
            Condition - the BaseCondition subclass in use. Subclasses define which instance is used 
              including letting the programmer decide.
            </description>
            </item>
            <item>
            <description>
            ErrorFormatter - the BaseErrorFormatter subclass in use. Users always can select which
              is used through the ErrorFormatterType property.
            </description>
            </item>
            <item>
            <description>
            Group - a name that associates validators together for a common submission.
            </description>
            </item>
            <item>
            <description>
            ErrorMessage - the actual text used for the error message. It actually is customizable
              with tokens and other rules by subclasses.
            </description>
            </item>
            <item>
            <description>
            SummaryErrorMessage - the text used by the ValidationSummary control. If not supplied, ErrorMessage
              is used. It too can support tokens and other rules by the subclasses.
            </description>
            </item>
            </list>
            </remarks>
        </member>
        <member name="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseAction">
            <summary>
            BaseAction defines the basics of an action. VAM defines these actions:
            <see cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseValidatorAction"/>, <see cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseFieldStateAction"/>,
            <see cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.DataTypeTextBoxAction"/>, and <see cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.MultiAction"/>.
            </summary>
            <remarks>
            <para>There are essentially two elements to an action:</para>
            <para>1.	A condition which determines the actions behavior based on a Boolean value.</para>
            <para>2.	An action method which really can do whatever you define, based on the result 
            of the condition's <see cref="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseCondition.EvaluateCondition"/> method. </para>
            <para>Subclasses will typically act on elements of a page but one can imagine 
            showing alerts, switching to another URL, or running some complex JavaScript 
            to change the appearance of the page.</para>
            <para>This class defines the <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseAction.Condition"/> 
            property and a methodology to run an action after 
            evaluating the condition.</para>
            <para>The constructor always registers the instance with <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.VAMPage.Actions">VAMPage.Actions</see>.</para>
            <para>See the <b>Developer's Guide</b> for details on this class.</para>
            </remarks>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseAction.#ctor">
            <summary>
            Constructor with no parameters. Calls <see cref="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseAction.CreateCondition"/>
            to define the initial value for Condition.
            </summary>
            <remarks>
            Adds itself to <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.VAMPage.Actions">VAMPage.Actions</see>.
            </remarks>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseAction.#ctor(System.Web.UI.Control)">
            <summary>
            Constructor which assigns the Owner property. Calls <see cref="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseAction.CreateCondition"/>
            to define the initial value for Condition.
            </summary>
            <remarks>
            Adds itself to <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.VAMPage.Actions">VAMPage.Actions</see>.
            </remarks>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseAction.#ctor(Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseCondition)">
            <summary>
            Constructor with the Condition parameter that assigns the Condition.
            </summary>
            <remarks>
            Adds itself to <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.VAMPage.Actions">VAMPage.Actions</see>.
            </remarks>
            <exception cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.VAMException">When <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseAction.CanSetCondition"/> is false.</exception>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseAction.#ctor(System.Web.UI.Control,Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseCondition)">
            <summary>
            Constructor with the Owner and Condition parameter that assigns the Condition.
            </summary>
            <remarks>
            Adds itself to <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.VAMPage.Actions">VAMPage.Actions</see>.
            </remarks>
            <exception cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.VAMException">When <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseAction.CanSetCondition"/> is false.</exception>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseAction.#ctor(Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseCondition,Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseCondition)">
            <summary>
            Constructor with the Condition parameter that assigns the Condition and Enabler.
            Pass null for Condition to use the default condition.
            </summary>
            <remarks>
            Adds itself to <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.VAMPage.Actions">VAMPage.Actions</see>.
            </remarks>
            <exception cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.VAMException">When <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseAction.CanSetCondition"/> is false.</exception>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseAction.#ctor(System.Web.UI.Control,Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseCondition,Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseCondition)">
            <summary>
            Constructor that assigns the Owner, Condition, and Enabler properties.
            Pass null for Condition to use the default condition.
            </summary>
            <remarks>
            Adds itself to <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.VAMPage.Actions">VAMPage.Actions</see>.
            </remarks>
            <exception cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.VAMException">When <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseAction.CanSetCondition"/> is false.</exception>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseAction.fSetupComplete">
            <summary>
            Storage for <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseAction.SetupComplete"/>.
            </summary>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseAction.fCondition">
            <summary>
            Storage for <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseAction.Condition"/>.
            </summary>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseAction.fEnabler">
            <summary>
            Storage for <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseAction.Enabler"/>.
            </summary>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseAction.fEnableClientScript">
            <summary>
            Storage for <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseAction.EnableClientScript"/>.
            </summary>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseAction.fSupportClientSideLookupByID">
            <summary>
            Storage for <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseAction.SupportClientSideLookupByID"/>.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseAction.PrepareBody">
            <remarks>
            In addition to what its ancestor does, it:
            <list type="bullet">
            <item><description>Calls <see cref="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseCA.Prepare"/>.</description></item>
            <item><description>If client-side scripting is enabled, it calls 
            <see cref="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseCA.ValidateProperties"/> on itself and the condition.</description></item>
            <item><description>Calls <see cref="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.VAMPage.RegisterWithPage">VAMPage.RegisterWithPage</see>.</description></item>
            </list>
            </remarks>
            <seealso cref="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseCA.PrepareBody"/>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseAction.SetOwner(System.Web.UI.Control)">
            <summary>
            Also assign to the Condition.Owner and Enabler.Owner.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseAction.NameChild(Jenzabar.Portal.Framework.Web.UI.Controls.Validation.INamingObject,System.String)">
            <summary>
            NameChild assigns the ParentNamingObject and ParentCallsThis properties of a child INamingObject object.
            It is called when Condition or Enabler properties are assigned.
            </summary>
            <param name="pChild"></param>
            <param name="pPropertyName"></param>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseAction.fIncludeConditionInJavaScript">
            <summary>
            DefineJavaScript writes the Condition's javascript when this is true.
            Set it to false by calling CreateClientSideObjectNoCondition. That special case
            is used by MultiAction.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseAction.DefineJavaScript(Jenzabar.Portal.Framework.Web.UI.Controls.Validation.VAMPage)">
            <summary>
            In addition to calling the ancester, this calls DefineJavaScript on the Condition
            and Enabler properties.
            </summary>
            <seealso cref="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseCA.DefineJavaScript(Jenzabar.Portal.Framework.Web.UI.Controls.Validation.VAMPage)"/>
            <param name="pPage">The current VAMPage, available from Globals.Page.</param>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseAction.CreateClientSideObjectNoCondition(System.Text.StringBuilder)">
            <summary>
            CreateClientSideObjectNoCondition is a special case of CreateClientSideObject
            which prevents writing the Condition into the JavaScript. This is designed
            for <see cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.MultiAction"/> to skip writing out conditions of its child actions.
            </summary>
            <param name="pJavaScript">Append client-side objects to this stringbuilder.</param>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseAction.CreateCondition">
            <summary>
            Subclass to return an instance of a Condition. This is called by 
            the constructor to assign the Condition.
            Returns null when not subclassed.
            </summary>
            <returns>null. Subclass to return a specific Condition class.</returns>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseAction.DoAction">
            <summary>
            DoAction evaluates the condition and runs the action via DoActionBody
            if the instance is enabled.
            </summary>
            <remarks>
            It calls <see cref="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseCA.Prepare"/> first. Then it
            tests <see cref="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseAction.CanDoAction"/> and 
            Condition.<see cref="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseCondition.CanEvaluate"/> to determine if it can
            evaluate the condition and run the action. Only then does it call 
            Condition.<see cref="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseCondition.Evaluate"/> on the Condition
            and call <see cref="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseAction.DoActionBody(System.Boolean)"/> to handle the result from the Condition.
            </remarks>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseAction.CanDoAction">
            <summary>
            CanDoAction returns true when the <see cref="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseAction.DoActionBody(System.Boolean)"/> can run.
            </summary>
            <remarks>
            <para>Called by <see cref="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseAction.DoAction"/>.</para>
            <para>In this class, it returns true when <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseCA.Enabled"/> and 
            <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseAction.Condition"/> != null and if the 
            <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseAction.Enabler"/> 
             is setup and returns true from its <see cref="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseCondition.Evaluate"/> method.</para>
            </remarks>
            <returns>True when the DoActionBody can run.</returns>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseAction.DoActionBody(System.Boolean)">
            <summary>
            Subclass to take an action based on pConditionResult. For some uses, 
            you may have two states which you select based on the condition. 
            For example, change the color of a field when condition is true 
            and return it to the original color when false.
            </summary>
            <param name="pSuccess">When true, the Condition evaluated to 1 (success)
            or -1 (cannot evaluate). When false, it evaluated to 0 (failed).</param>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseAction.CreateClientSideObject(System.Text.StringBuilder)">
            <summary>
            Does nothing when <see cref="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseAction.CanEnableClientScript"/> is false
            or both <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseAction.SupportClientSideLookupByID"/> and
            <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseCA.Enabled"/> are false.
            </summary>
            <seealso cref="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseCA.CreateClientSideObject(System.Text.StringBuilder)"/>
            <param name="pJavaScript">Append the client-side object script to this stringbuilder.</param>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseAction.RegisterMainFunction(System.Text.StringBuilder)">
            <summary>
            Installs the <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseAction.ActionFunctionName"/>
            as the method "ActnFnc" on the client-side representation of the Action object.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseAction.DefineProperties(System.Text.StringBuilder)">
            <summary>
            Adds these properties to the client-side representation of the condition object:
            CID, Enabler, Cond, CanRun, VT and AutoRun.
            </summary>
            <remarks>
            <list type="table">
            <listheader>
            <term>Property</term>
            <description>Server side source</description>
            </listheader>
            <item><term>Cond (object)</term>
            <description>Client-side representation of the Condition object. Calls
            <see cref="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseCA.CreateClientSideObject(System.Text.StringBuilder)"/>.</description></item>
            <item>
            <term>CID (string)</term>
            <description>If SupportClientSideLookupByID, this is the ClientID of the Owner</description>
            </item>
            <item>
            <term>Enabler (object)</term>
            <description>If Enabler is not null, the client-side condition object representing Enabler.</description>
            </item>
            <item>
            <term>CanRun (method)</term>
            <description>CanRunFunctionName. If "", not written</description>
            </item>
            <item>
            <term>VT (string)</term>
            <description>Stands for "VAM TYPE" uses GetActionType.</description>
            </item>
            <item>
            <term>AutoRun (bool)</term>
            <description>CSAutoRunAction. When true, VAM_InitActions() runs the action immediately.</description>
            </item>
            </list>
            </remarks>
            <param name="pJavaScript">Append the client-side script to this stringbuilder.</param>
            <exception cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.VAMException">When Condition is null.</exception>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseAction.CanEnableClientScript">
            <returns>Returns true when the ancestor and <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseAction.EnableClientScript"/>
            both are true.</returns>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseAction.GetName">
            <summary>
            Gets the name from fOwner.GetName or the ancestor.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseAction.GetActionType">
            <summary>
            GetActionType returns a string that uniquely identifies the Action class to the client-side
            script code.
            </summary>
            <remarks>It can be any string so long as you write client side code to look for the value
            supplied. It is case sensitive.
            </remarks>
            <returns>String that uniquely identifies the action object class to the client-side code.</returns>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseAction.Dispose">
            <summary>
            If disposed, remove it from VAMPage.Actions.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseAction.AddParsedSubObject(System.Object)">
            <summary>
            Handles BaseCondition objects by assigning the first to the Condition property.
            Any other BaseCondition class throws an exception.
            It ignores all other classes.
            </summary>
            <param name="pObj">The object to be added to the Condition.</param>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseAction.SetupComplete">
            <summary>
            The Action is not considered ready for client-side code generation
            until the Owner.OnPreRender method sets this to true.
            </summary>
            <value>
            <para>When the fPrepare flag indicates that the action is prepared,
            the <see cref="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseCA.Prepare"/> method can be run
            on a control that is never used on the page. This is due to the control
            being contained in a parent ASP.NET control that is invisible
            or it gets added to the page in a DataGrid but never gets used because
            the user switches from the non-editable row to editable row mode after
            the control is created.</para>
            <para>The Owner control must set this to true when its OnPreRender method
            runs successfully. Only when true will the <see cref="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.VAMPage.PagePreRegister(System.Object,System.EventArgs)">VAMPage.PagePreRegister</see>
            method use this Action object.</para>
            <para>It defaults to false.</para>
            </value>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseAction.Condition">
            <summary>
            Gets and sets the Condition used by this action.
            </summary>
            <value>
            If Owner is established on this Action object, it is immediately applied to the condition.
            </value>
            <exception cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.VAMException">When <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseAction.CanSetCondition"/> 
            returns false, you cannot set the condition.</exception>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseAction.CanSetCondition">
            <summary>
            CanSetCondition determines whether Condition can be set. When true, it can.
            </summary>
            <value>
            Defaults to true. Subclasses override to set to false.
            </value>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseAction.Enabler">
            <summary>
            Enabler is an optional condition that can turn on and off the evaluation of 
            <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseAction.Condition"/> on both the server and client-side.
            </summary>
            <value>
            <para>For example, this action should not run unless a certain checkbox is checked.</para>
            <para>When no enabler is needed, it is null.</para>
            <para>It defaults to null.</para>
            </value>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseAction.ActionFunctionName">
            <summary>
            ActionFunctionName is the name of the client side function that runs the action.
            </summary>
            <value>
            <para>It is assigned to the MainFnc property on the client side VAM object.</para>
            <para><i>Parameters:</i></para>
            <para>Action object - while 'this' can be used to get the properties, this parm
                allows subclassing. So don't use 'this', use the action object to properties.</para>
            <para>Condition Result (int) - the results of the Condition's evaluation.
                1 = success, 0 = fail, -1 = cannot evaluate
                Some actions need to use the -1 state to restore appearances (like validators to hide the error msg)</para>
            <para><i>Returns:</i></para>
            <para>Nothing.</para>
            <para>See the <b>Developer's Guide</b> for details and an example.</para>
            </value>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseAction.CanRunFunctionName">
            <summary>
            CanRunFunctionName is the name of the client side function that determines if
            the action can be run. It checks the Enabler condition.
            </summary>
            <value>
            <para>When its run, the Enabled property has already been verified.
            So this shouldn't handle Enabled.</para>
            <para>It is assigned to the CanRun property on the client side representation of the Action object.</para>
            <para><i>Parameters:</i></para>
              <para>Action object</para>
            <para><i>Returns:</i></para>
            <para>true - it can run; false - it cannot run.</para>
            <para>It defaults to "VAM_CanRunActn". If "", there is no CanRun method.</para>
            </value>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseAction.EnableClientScript">
            <summary>
            EnableClientScript determines if client-side functionality is setup.
            </summary>
            <value>
            <para>When true, it sets up client-side scripting for this control.
            When false, no client-side code is written.</para>
            <para>It defaults to true.</para>
            This is part of several flags that can shut off client-side code. The 
            <see cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.TrueBrowser"/> class has several options to disable client-side scripting.
            The <see cref="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseAction.CanEnableClientScript"/> method is used
            to consolidate all the flags and determine if scripting is disabled.
            </value>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseAction.SupportClientSideLookupByID">
            <summary>
            SupportClientSideLookupByID allows JavaScript programmers to get to the
            Action object on the client side by calling the VAM_FindAOById function with the ClientID 
            of the owner control.
            </summary>
            <value>
            <para>Use the client-side function VAM_FindAOById to search for the action that
            matches the clientID you specify. That function will return null if not found.
            Use the Action object to modify it, such as changing the Enabled property.
            When this is true, two things happen:</para>
            <para>1. The ID is written as a property, CID, into the control.</para>
            <para>2. If the Enabled property is false, normally no code is written to the client side.
               This is overridden and code is generated so users can toggle the enabled property.
               Note that client-side code is NEVER generated when the browser doesn't support it
               or the <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseAction.EnableClientScript"/> property is false.</para>
            </value>
            <example>
            <para>This shows how to use the VAM_FindAOById() function to retrieve an action object
            and change its Enabled property. This is JavaScript code.</para>
            <code>
            function ChangeActionEnabled(pClientID, pEnabled)
            {
              var vAction = VAM_FindAOById(pClientID);
              if (vAction != null) // found it
                 vAction.Enabled = pEnabled;
            }
            </code>
            </example>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseAction.AutoRunAction">
            <summary>
            AutoRunAction determines if <see cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.VAMPage"/> should run this class's server side
            <see cref="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseAction.DoAction"/> method automatically as part of preparing the page.
            </summary>
            <value>
            <para>It defaults to false.</para>
            <para>An example of when true: FieldStateAction must setup the ControlToChange
            on the server side based on the condition so the client side has the correct initial appearance.</para>
            </value>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseAction.CSAutoRunAction">
            <summary>
            CSAutoRunAction determines if the <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseAction.AutoRunAction"/>
             property is passed to the client side,
            instructing VAM_InitActions() to call VAM_DoAction() on this action immediately after all
            actions are initialized.
            </summary>
            <value>
            It defaults to false. Subclasses (FieldStateController)
            should set it to true if needed, often based on a user property.
            </value>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseValidatorAction.#ctor">
            <summary>
            Constructor with no parameters.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseValidatorAction.#ctor(System.Web.UI.Control)">
            <summary>
            Constructor that sets Owner property.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseValidatorAction.#ctor(Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseCondition)">
            <summary>
            Constructor that sets the Condition property.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseValidatorAction.#ctor(System.Web.UI.Control,Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseCondition)">
            <summary>
            Constructor that sets the Owner and Condition properties.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseValidatorAction.#ctor(System.Web.UI.Control,Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseCondition,Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseCondition,Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseErrorFormatter,System.String,System.String)">
            <summary>
            Constructor that sets the Owner, Condition, Enabler, ErrorFormatter,
            ErrorMessage, and SummaryErrorMessage properties. Condition, Enabler, 
            and ErrorFormatter can be passed as null to avoid setting them.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseValidatorAction.#ctor(System.Web.UI.Control,Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseCondition,Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseCondition,Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseErrorFormatter,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Constructor that sets the Owner, Condition, Enabler, ErrorFormatter,
            ErrorMessage, SummaryErrorMessage, ErrorMessageLookupID,
            SummaryErrorMessageLookupID, and Group properties. Condition, Enabler, 
            and ErrorFormatter can be passed as null to avoid setting them.
            </summary>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseValidatorAction.fErrorFormatter">
            <summary>
            Storage for <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseValidatorAction.ErrorFormatter"/>.
            </summary>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseValidatorAction.fErrorMessage">
            <summary>
            Storage for <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseValidatorAction.ErrorMessage"/>.
            </summary>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseValidatorAction.fErrorMessageLookupID">
            <summary>
            Storage for <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseValidatorAction.ErrorMessageLookupID"/>.
            </summary>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseValidatorAction.fLookedupErrorMessage">
            <summary>
            When null, GetLookedUpErrorMessage calls 
            <see cref="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.StringLookup.StringIDLookup(System.String,System.String,System.String)">StringLookup.StringIDLookup</see> to
            get the ErrorMessage. This holds the result of that for multiple uses.
            </summary>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseValidatorAction.fSummaryErrorMessage">
            <summary>
            Storage for <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseValidatorAction.SummaryErrorMessage"/>.
            </summary>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseValidatorAction.fSummaryErrorMessageLookupID">
            <summary>
            Storage for <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseValidatorAction.SummaryErrorMessageLookupID"/>.
            </summary>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseValidatorAction.fLookedupSummaryErrorMessage">
            <summary>
            When null, GetLookedUpSummaryErrorMessage calls 
            <see cref="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.StringLookup.StringIDLookup(System.String,System.String,System.String)">StringLookup.StringIDLookup</see> to
            get the SummaryErrorMessage. This holds the result of that for multiple uses.
            </summary>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseValidatorAction.fGroup">
            <summary>
            Storage for <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseValidatorAction.Group"/>.
            </summary>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseValidatorAction.fEventsThatValidate">
            <summary>
            Storage for <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseValidatorAction.EventsThatValidate"/>.
            </summary>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseValidatorAction.fShowRequiredFieldMarker">
            <summary>
            Storage for <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseValidatorAction.ShowRequiredFieldMarker"/>.
            </summary>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseValidatorAction.fIsValid">
            <summary>
            Storage for <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseValidatorAction.IsValid"/>.
            </summary>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseValidatorAction.fHasValidated">
            <summary>
            Storage for <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseValidatorAction.HasValidated"/>.
            </summary>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseValidatorAction.fPage">
            <summary>
            Storage for <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseValidatorAction.Page"/>.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseValidatorAction.CanEnableClientScript">
            <returns>If the ancestor returns true, it checks
            that <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.TrueBrowser.SupportsClientSideValidators">TrueBrowser.SupportsClientSideValidators</see>
            is true.</returns>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseValidatorAction.CanDoAction">
            <returns>Returns true when EventsThatValidate is not set to ValidationEvents.OnChange
            and the ancestor returns true.</returns>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseValidatorAction.Validate">
            <summary>
            Validate runs server side validation on this control.
            </summary>
            <remarks>
            <para>Evaluates the condition and sets <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseValidatorAction.IsValid"/>
            based on the result.</para>
            <para>This does not change any interface elements.</para>
            <para>The BaseValidator's OnPreRender method does that using 
            <see cref="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseValidatorAction.AddToPage(System.Boolean)"/>.</para>
            </remarks>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseValidatorAction.Validate(System.String)">
            <summary>
            Overloaded Validate method only validates when the group name matches
            the <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseValidatorAction.Group"/> property or contains "*".
            </summary>
            <remarks>
            <para>If the group name does not match, the values of 
            <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseValidatorAction.IsValid"/>
            and <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseValidatorAction.HasValidated"/> do not change.</para>
            <para>Once the group name is found to match, this calls the other Validate method.</para>
            </remarks>
            <param name="pGroup">The group name that must match to validator. If it
            contains "*", it always validates.</param>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseValidatorAction.DoActionBody(System.Boolean)">
            <summary>
            Applies the value of the success parameter to the
            <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseValidatorAction.IsValid"/> property.
            </summary>
            <remarks>
            <para>While you may think it makes sense that this changes the visibility
            of the ErrorFormatter, it leaves that to the owner control's OnPreRender
            method which calls <see cref="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseValidatorAction.AddToPage(System.Boolean)"/>.</para>
            </remarks>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseValidatorAction.AddToPage(System.Boolean)">
            <summary>
            AddToPage sets up the HTML and javascript from the <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseValidatorAction.ErrorFormatter"/>
            and all other elements shown in the Validator control.
            </summary>
            <remarks>
            <para>Assumes <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseValidatorAction.IsValid"/> is in the desired state. Either 
            <see cref="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseValidatorAction.Validate"/> has set it or its true
            to hide any validation information.</para>
            <para>All HTML is added as child controls to the Owner (Validator) control.</para>
            <para>This method does the following:</para>
            <list type="bullet">
            <item>
            <description>
            <para>Adds the <see cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.RequiredFieldMarker"/> control when 
            <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseValidatorAction.ShowRequiredFieldMarker"/> is true.
            The RequiredFieldMarker uses the default properties on <see cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.Globals"/>
            for the image and text.
            </para>
            <para>When the Validator control is absolutely positioned, the entire control is placed
            into an absolutely positioned &lt;span&gt; tag that uses the control's positioning
            so that the RequiredFieldMarker remains side-by-side with the ErrorFormatter.</para>
            </description>
            </item>
            <item>
            <description>
            <para>If in design mode, it calls 
            <see cref="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseErrorFormatter.AddDesignModeControls(System.Web.UI.Control,Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseValidatorAction)">BaseErrorFormatter.AddDesignModeControls</see>.</para>
            </description>
            </item>
            <item>
            <description>
            <para>If at runtime, it calls <see cref="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseErrorFormatter.AddControls(System.Web.UI.Control,System.Boolean,Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseValidatorAction)">BaseErrorFormatter.AddControls</see>. 
            If <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.Globals.OnAdjustValidatorActionToBrowser">Globals.OnAdjustValidatorActionToBrowser</see>
            is setup, that event is called first.</para>
            </description>
            </item>
            <item>
            <description>
            <para>Preserves the <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.VAMPage.ControlErrorCssClass">VAMPage.ControlErrorCssClass</see> in the attribute OrigCss for use
            on post back.</para>
            </description>
            </item>
            </list>
            </remarks>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseValidatorAction.GetErrorMessage(System.Boolean)">
            <summary>
            GetErrorMessage returns a fully prepared message to show on the page.
            </summary>
            <remarks>
            <para>Designed select alternative message string properties and replace tokens.</para>
            <para>Calls <see cref="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseValidatorAction.SelectErrorMessage"/> 
            to retrieve the initial string for the error message.
            This allows a subclass to offer multiple forms of the message in various properties.</para>
            <para>Calls <see cref="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseValidatorAction.ReplaceMessageTokens(System.String,System.Boolean,Jenzabar.Portal.Framework.Web.UI.Controls.Validation.MessageType)"/> 
            to replace some or all tokens found in the message.</para>
            </remarks>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseValidatorAction.GetLookedUpErrorMessage">
            <summary>
            Uses the String Lookup System to get the text associated
            with the <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseValidatorAction.ErrorMessage"/>
            and <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseValidatorAction.ErrorMessageLookupID"/>
            and sets fLookedupErrorMessage.
            </summary>
            <returns>fLookedupErrorMessage. If fLookedupErrorMessage == null,
            it calls <see cref="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.StringLookup.StringIDLookup(System.String,System.String,System.String)">StringLookup.StringIDLookup</see> with ErrorMessageLookupID first.</returns>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseValidatorAction.GetSummaryMessage(System.Boolean)">
            <summary>
            GetSummaryMessage returns a fully prepared message to show on the ValidationSummary.
            </summary>
            <remarks>
            <para>Designed select alternative message string properties and replace tokens.</para>
            <para>Calls <see cref="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseValidatorAction.SelectSummaryMessage"/> 
            to retrieve the initial string for the error message. 
            This allows a subclass to offer multiple forms of the message in various properties.
            If SelectSummaryMessage returns "", it calls 
            <see cref="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseValidatorAction.SelectErrorMessage"/> for the message.</para>
            <para>Calls <see cref="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseValidatorAction.ReplaceMessageTokens(System.String,System.Boolean,Jenzabar.Portal.Framework.Web.UI.Controls.Validation.MessageType)"/> 
            to replace some or all tokens found in the message.</para>
            </remarks>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseValidatorAction.GetLookedUpSummaryErrorMessage">
            <summary>
            Uses the String Lookup System to get the text associated
            with the <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseValidatorAction.SummaryErrorMessage"/>
            and <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseValidatorAction.SummaryErrorMessageLookupID"/>
            and sets fLookedupSummaryErrorMessage.
            </summary>
            <returns>fLookedupSummaryErrorMessage. If fLookedupSummaryErrorMessage == null,
            it calls <see cref="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.StringLookup.StringIDLookup(System.String,System.String,System.String)">StringLookup.StringIDLookup</see> 
            with SummaryErrorMessageLookupID first.</returns>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseValidatorAction.SelectErrorMessage">
            <summary>
            SelectErrorMessage returns the <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseValidatorAction.ErrorMessage"/> 
            or another property containing a string for the error message as defined by a subclass.
            </summary>
            <remarks>
            <para>When a subclass introduces more properties for various types of Error messages,
            it must override this method to select which error message is shown when
            the server side retrieves the error message.</para>
            <para>For example, you may have strings for singular and plural forms of a sentence
            whose tokens contain numbers. ("There is one item selected." "There are 2 items selected.")</para>
            <para>The client side has its own version of this method. See 
            <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseValidatorAction.SelErrMsgFunctionName"/>.</para>
            </remarks>
            <returns>The ErrorMessage property through 
            <see cref="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseValidatorAction.GetLookedUpErrorMessage"/>. 
            Override to return another property containing the appropriate error 
            message to show for the situation.</returns>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseValidatorAction.SelectSummaryMessage">
            <summary>
            SelectSummaryMessage returns the <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseValidatorAction.SummaryErrorMessage"/> 
            or another property containing a string for the summary error message as defined by a subclass.
            </summary>
            <remarks>
            <para>When a subclass introduces more properties for various types of error messages,
            it must override this method to select which error message is shown when
            the server side retrieves the error message.</para>
            <para>For example, you may have strings for singular and plural forms of a sentence
            whose tokens contain numbers. ("There is one item selected." "There are 2 items selected.")</para>
            <para>The client side has its own version of this method. See 
            <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseValidatorAction.SelSumMsgFunctionName"/>.</para>
            </remarks>
            <returns>The SummaryErrorMessage property through 
            <see cref="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseValidatorAction.GetLookedUpSummaryErrorMessage"/>. Override to return another property containing the appropriate error 
            message to show for the situation.</returns>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseValidatorAction.ReplaceMessageTokens(System.String,System.Boolean,Jenzabar.Portal.Framework.Web.UI.Controls.Validation.MessageType)">
            <summary>
            ReplaceMessageTokens is passed an error message and replaces some or all of its
            tokens.
            </summary>
            <remarks>
            <para>A token must be uppercase, alphanumeric, and enclosed in brackets.
            For example, "{COUNT}" or "{LABEL2}". A token can support singular and plural forms.
            It has the format {TOKENNAME:SINGULAR:PLURAL}. For example, "{COUNT:is:are}".</para>
            <para>Subclasses define the tokens and thus this class does nothing
            but return the message passed as is.</para>
            <para>Some tokens should always be processed on the server side. They include
            values that don't depend on conditions of fields. For example, properties
            on the validator - like a user supplied minimum value.
            Other tokens depend on the state of the control, such as showing the current
            length of a text field. They are called Runtime Tokens. 
            These should be handled by the client-side Replace Token Function
            defined in <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseValidatorAction.TokenReplacementFunctionName"/>.
            This method should update runtime tokens when the pApplyAllTokens parameter is true.
            In this case, the browser doesn't support client-side functions.</para>
            <para>Call the <see cref="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseValidatorAction.ReplaceMessageToken(System.String,System.String,System.String,Jenzabar.Portal.Framework.Web.UI.Controls.Validation.TokenType,Jenzabar.Portal.Framework.Web.UI.Controls.Validation.MessageType)"/>
            method to handle most tokens. 
            Call <see cref="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseValidatorAction.ReplaceSingularPluralToken(System.String,System.Int32,System.String)"/>
            to handle singular/plural tokens.</para>
            </remarks>
            <param name="pMsg">The message containing tokens.</param>
            <param name="pApplyAllTokens">When true, assign all token types. When false,
            assign all except runtime tokens.</param>
            <param name="pMessageType">Determines whether message is going to the validator
            or the ValidationSummary control.</param>
            <returns>The message with tokens replaced. This base class does not have
            any tokens defined and simply returns the original message.</returns>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseValidatorAction.ReplaceMessageToken(System.String,System.String,System.String,Jenzabar.Portal.Framework.Web.UI.Controls.Validation.TokenType,Jenzabar.Portal.Framework.Web.UI.Controls.Validation.MessageType)">
            <summary>
            ReplaceMessageToken replaces one token in pMsg with a new token.
            Call it from your overriden <see cref="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseValidatorAction.ReplaceMessageTokens(System.String,System.Boolean,Jenzabar.Portal.Framework.Web.UI.Controls.Validation.MessageType)"/>
            method.
            </summary>
            <remarks>
            <para>It replaces all instances of the token passed in with the replacement passed in.</para>
            <para>Optionally applies style sheet formatting around the token.
            The formatting uses the various style sheet properties on 
            <see cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.VAMPage"/> to build a &lt;span&gt; tag with a class= property
            around the token. The TokenType parameter determines the VAMPage property to use.</para>
            <para>MessageType.ErrorFormatter only applies formatting when the ErrorFormatter.CanFormatTokens
            is true.
            MessageType.Summary always formats.</para>
            <para>When you have a token that uses the singular:plural format, use
            <see cref="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseValidatorAction.ReplaceSingularPluralToken(System.String,System.Int32,System.String)"/>.</para>
            </remarks>
            <param name="pMsg">The text containing tokens to change.</param>
            <param name="pToken">The token to replace. It must exactly match the text to replace
            including the brackets and uppercase text.</param>
            <param name="pNewValue">The text that replaces the token.</param>
            <param name="pTokenType">Identifies the type of token: property, runtime, label or other
            to select the formatting property from the VAMPage class.</param>
            <param name="pMessageType">Determines if the text will appear
            in the validator or ValidationSummary control. When this is "ErrorFormatter",
            formatting is only applied when the current ErrorFormatter.CanFormatTokens is true.</param>
            <returns>The modified message with the one token specified replaced and optional formatting applied
            around that token.</returns>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseValidatorAction.ReplaceSingularPluralToken(System.String,System.Int32,System.String)">
            <summary>
            ReplaceSingularPluralToken replaces a special type of token that contains two
            strings. It evaluates a number. If the number = 1, it uses the first string.
            Otherwise it uses the second string. The result is this handles singular and plural
            forms and allows one message to switch to plural easily.
            </summary>
            <remarks>
            <para>This method should be called from your override 
            <see cref="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseValidatorAction.ReplaceMessageTokens(System.String,System.Boolean,Jenzabar.Portal.Framework.Web.UI.Controls.Validation.MessageType)"/> method.</para>
            <para>The format of the token is : { + pTokenName + : + word + : + word + }</para>
            <para>Examples: {COUNT:is:are} {EXCEEDS::s}</para>
            <para>The TokenName is matched case sensitively.</para>
            <para>The client-side code offers a similar function VAM_SPReplToken.</para>
            </remarks>
            <param name="pMsg">The text that contains the token.</param>
            <param name="pCount">The number to evaluate. If this is 1, the singular form is used. Otherwise
            the plural form is used.</param>
            <param name="pTokenName">The token name to find. It does not contain any brackets,
            colons or other parts of the complete token.</param>
            <returns>The message with the token replaced in all locations that it is found.</returns>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseValidatorAction.DefineProperties(System.Text.StringBuilder)">
            <summary>
            Adds these properties to the client-side representation of the condition object:
            ErrMsg, SumMsg, SelErrMsg, SelSumMsg, Group, TokenRepl, EvtToVal, and IsValid.
            Plus calls <see cref="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseErrorFormatter.DefineProperties(Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseAction,System.Text.StringBuilder)">BaseErrorFormatter.DefineProperties</see>.
            </summary>
            <remarks>
            <list type="table">
            <listheader>
            <term>Property</term>
            <description>Server side source</description>
            </listheader>
            <item>
            <term>ErrMsg (string)
            </term>
            <description>ErrorMessage with server side tokens assigned.
            </description>
            </item>
            <item>
            <term>SumMsg (string)
            </term>
            <description>SummaryErrorMessage with server side tokens assigned.
            </description>
            </item>
            <item>
            <term>SelErrMsg (method)
            </term>
            <description>SelErrMsgFunctionName
            </description>
            </item>
            <item>
            <term>SelSumMsg (method)
            </term>
            <description>SelSumMsgFunctionName
            </description>
            </item>
            <item>
            <term>Group (string)
            </term>
            <description>Group forced to uppercase
            </description>
            </item>
            <item>
            <term>TokenRepl (method)
            </term>
            <description>TokenReplacementFunctionName. If "", not written.
            </description>
            </item>
            <item>
            <term>EvtToVal (integer)
            </term>
            <description>EventsThatValidate converted to 0 = all, 1 = onsubmit, 2 = onchange
            </description>
            </item>
            <item>
            <term>IsValid (boolean)
            </term>
            <description>IsValid
            </description>
            </item>
            </list>
            </remarks>
            <param name="pJavaScript">The properties are appended to this stringbuilder.</param>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseValidatorAction.DefineJavaScript(Jenzabar.Portal.Framework.Web.UI.Controls.Validation.VAMPage)">
            <summary>
            Calls <see cref="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseErrorFormatter.DefineJavaScript(Jenzabar.Portal.Framework.Web.UI.Controls.Validation.VAMPage)">BaseErrorFormatter.DefineJavaScript</see>.
            </summary>
            <param name="pPage">The current VAMPage object.</param>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseValidatorAction.AddParsedSubObject(System.Object)">
            <summary>
            If the object is a BaseErrorFormatter subclass, it is assigned to ErrorFormatter.
            Otherwise, it is passed to the parent.
            </summary>
            <exception cref="T:System.ArgumentException">When ErrorFormatter is already assigned.</exception>
            <param name="pObj">The object to add.</param>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseValidatorAction.GetActionType">
            <returns>"VAL"</returns>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseValidatorAction.DescribeTokens(System.Collections.Specialized.NameValueCollection)">
            <summary>
            DescribeTokens allows the class to define a list of tokens and their
            descriptions for use within the Design Mode interface.
            </summary>
            <remarks>
            <para>The UITypeEditor for ErrorMessage and SummaryErrorMessage properties
            will call this with a NameValueCollection.
            The class should define each token by calling pTokens.Add with
            the token as the key and a description as the value.</para>
            <para>Descriptions should be kept short and not have any carriage returns because the interface
            shows it in one line.</para>
            <code>pTokens.Add("{LABEL}", "The label field defined in the xLabelControlID property.");</code>
            <para>When defining a token, the entire text you supply is inserted into
            the TextBox if it is selected from the context menu by the user. Singular/plural
            tokens should say "singular" and "plural" in the places for those words. 
            For example, "{COUNT:singular:plural}".</para>
            <para>Remember that tokens are case sensitive. So keep the token name
            all uppercase.</para>
            </remarks>
            <param name="pTokens">Add tokens into this collection where the name is the token
            itself and the value is a short description.</param>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseValidatorAction.TransferPropertiesFromControl(System.Web.UI.Control,System.Int32)">
            <summary>
            TransferPropertiesFromControl allows a third party control that is connected
            to ControlIDToEvaluate to provide some properties to this action, its condition,
            and its Condition.VAMTypeConverter.TransferPropertiesFromControl.
            </summary>
            <remarks>
            <para>Some third party controls already have the same property values as the validator.
            So why have the user enter them twice? For example, if the control has an error message,
            it can copy it into ErrorMessage when ErrorMessage and ErrorMessageLookupID are both blank.
            For example, if this is a RangeCondition and the control has a minimum and maximum range
            setting, transfer those to RangeCondition.Minimum and Maximum.
            For example, set the DataType property or VAMTypeConverter.</para>
            <para>This class only routes to the optional VAMTypeConverter. Subclass if you build a custom
            validator that uses a specialized control.</para>
            </remarks>
            <param name="pControl">The control that associated with ControlIDToEvaluate
            that may supply its properties to this ValidatorAction and its Condition.</param>
            <param name="pControlCount">When the validator has more than one ControlIDToEvaluate,
            this specifies which one it is where 1 is the first, 2 is the second, etc.</param>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseValidatorAction.ErrorFormatter">
            <summary>
            Gets and sets the ErrorFormatter that controls the appearance of the error message
            in the location of the Validator control.
            </summary>
            <value>
            <para>Users can instantiate <see cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseErrorFormatter"/> classes
            and pass them or they can pass one found in the 
            <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.Globals.ErrorFormatters">Globals.ErrorFormatters</see> collection.</para>
            <para>It defaults to a <see cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.TextErrorFormatter"/>.</para>
            </value>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseValidatorAction.ErrorMessage">
            <summary>
            Gets and sets the message shown by the ErrorFormatter when it determines an invalid case.
            </summary>
            <value>
            <para>It is a string, which optionally can contain HTML. However, HTML is recommended
            to be used carefully. VAM attempts to allow you to separate the HTML from the error
            message using the ErrorFormatter and style properties for tokens on the 
            <see cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.VAMPage"/> class.
            This way, your error messages do not break the formatting when someone wants to change
            the wording.</para>
            <para>The string can contain tokens, all uppercase one-word text enclosed in
            brackets. Subclasses define the supported tokens and provide translators
            in the client and server side. See 
            <see cref="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseValidatorAction.ReplaceMessageTokens(System.String,System.Boolean,Jenzabar.Portal.Framework.Web.UI.Controls.Validation.MessageType)"/> and 
            <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseValidatorAction.TokenReplacementFunctionName"/>.</para>
            <para>
            The method <see cref="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseValidatorAction.GetErrorMessage(System.Boolean)"/> 
            uses it to deliver the actual error message. 
            GetErrorMessage can be subclassed to retrieve 
            alternative messages and/or apply values into tokens.</para>
            <para>It defaults to "".</para>
            </value>
            <remarks>
            <para><b>EditorAttribute:</b><see cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.ErrorMessageTypeEditor"/></para>
            </remarks>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseValidatorAction.ErrorMessageLookupID">
            <summary>
            ErrorMessageLookupID provides an alternative to 
            <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseValidatorAction.ErrorMessage"/>. When used, the error message
            is looked up from another source, such as a resource file or database to use as
            the ErrorMessage.
            </summary>
            <value>
            <para>This allows you to define a common set of error messages so the programmer doesn't uniquely
            define them each time. It also provides localization based on the current culture.</para>
            <para>To use it, assign a key string that represents the ErrorMessage that you want.
            This key will be used to search your data source for the correct string.</para>
            <para>When you are using the default Resource Manager system of VAM, it looks
            at the Name field of the ResX file for a match. The Value field of that row is returned.
            If no match is found OR this is blank, ErrorMessage will be used.</para>
            <para>This property uses the StringGroup of <see cref="F:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.StringLookup.cMessageGroupName">StringLookup.cMessageGroupName</see>.</para>
            <para>It defaults to "".</para>
            </value>
            <remarks>
            <para><b>EditorAttribute:</b><see cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.StringTypeEditor"/></para>
            </remarks>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseValidatorAction.SummaryErrorMessage">
            <summary>
            SummaryErrorMessage is the message shown in the <see cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.ValidationSummary"/>
            control when this validator has a condition that reports "failure". 
            If blank, the ValidationSummary control uses the ErrorMessage instead.
            </summary>
            <value>
            <para>It is a string, which optionally can contain HTML. However, HTML is recommended
            to be used carefully. VAM attempts to allow you to separate the HTML from the error
            message using style sheets and style properties for tokens on the VAMPage class.
            This way, your error messages do not break the formatting when someone wants to change
            the wording.</para>
            <para>The string can contain tokens, all uppercase one-word text enclosed in
            brackets. Subclasses define the supported tokens and provide translators
            in the client and server side. See 
            <see cref="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseValidatorAction.ReplaceMessageTokens(System.String,System.Boolean,Jenzabar.Portal.Framework.Web.UI.Controls.Validation.MessageType)"/> and 
            <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseValidatorAction.TokenReplacementFunctionName"/>.
            Token definitions must be identical between ErrorMessage and SummaryErrorMessage.</para>
            <para>
            The method <see cref="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseValidatorAction.GetSummaryMessage(System.Boolean)"/> 
            uses it to deliver the actual error message. 
            GetSummaryMessage can be subclassed to retrieve 
            alternative messages and/or apply values into tokens.</para>
            <para>It defaults to "".</para>
            </value>
            <remarks>
            <para><b>EditorAttribute:</b><see cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.ErrorMessageTypeEditor"/></para>
            </remarks>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseValidatorAction.SummaryErrorMessageLookupID">
            <summary>
            SummaryErrorMessageLookupID provides an alternative to 
            <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseValidatorAction.SummaryErrorMessage"/>. 
            When used, the summary error message
            is looked up from another source, such as a resource file or database to use as
            the SummaryErrorMessage.
            </summary>
            <value>
            <para>This allows you to define a common set of summary error messages so the programmer doesn't uniquely
            define them each time.</para>
            <para>It also provides localization based on the current culture.</para>
            <para>To use it, assign a key string that represents the SummaryErrorMessage that you want.
            This key will be used to search your data source for the correct string.</para>
            <para>When you are using the default Resource Manager system of VAM, it looks
            at the Name field of the ResX file for a match. The Value field of that row is returned.</para>
            <para>If no match is found OR this is blank, SummaryErrorMessage will be used.</para>
            <para>This property uses the StringGroup of 
            <see cref="F:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.StringLookup.cMessageGroupName">StringLookup.cMessageGroupName</see>.</para>
            <para>It defaults to "".</para>
            </value>
            <remarks>
            <para><b>EditorAttribute:</b><see cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.StringTypeEditor"/></para>
            </remarks>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseValidatorAction.Group">
            <summary>
            Gets and sets a group name for the validator. Validators are only validated
            when their group name matches the group name of the button that submits them.
            </summary>
            <value>
            <para>The group name "" is a valid name and all validators, validator summary
            and submit buttons default to "".</para>
            <para>It defaults to "".</para>
            </value>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseValidatorAction.EventsThatValidate">
            <summary>
            EventsThatValidate determines which client side events are fired to validate.
            </summary>
            <value>
            <para>There are two events: onchange and onsubmit. By default, both fire to validate.
            When you setup the validator to display an alert or other feedback on change, 
            the message may not be needed. Use this to determine which of these events activate 
            the message.</para>
            <para>When set to OnChange, no server side validation is performed.
            Use this state to show a warning message about the data without preventing
            the user from submitting the page.</para>
            <para>It defaults to All.</para>
            </value>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseValidatorAction.ShowRequiredFieldMarker">
            <summary>
            ShowRequiredFieldMarker adds a 
            <see cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.RequiredFieldMarker"/> control to the left
            of the error message.
            </summary>
            <value>
            <para>Use it as a shortcut to setting
            up the RequiredFieldMarker. The marker is always visible.</para>
            <para>Always place it on the leftmost validator.
            Otherwise, it may be pushed to the right as a validator is shown between
            the field and the RequiredFieldMarker.</para>
            <para>It uses the system wide defaults found in <see cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.Globals"/>.
            If you need to customize the settings, manually add a RequiredFieldMarker.</para>
            </value>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseValidatorAction.InitFunctionName">
            <summary>
            The client-side Initialization function is "VAM_InitValAction".
            </summary>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseValidatorAction.ActionFunctionName">
            <summary>
            The client-side Action function is "VAM_DoValidate".
            </summary>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseValidatorAction.SelErrMsgFunctionName">
            <summary>
            SelErrMsgFunctionName is the client-side Select Error Message function that determines 
            the source of the error message string. 
            </summary>
            <value>
            <para>It is the client side equivalent of 
            <see cref="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseValidatorAction.SelectErrorMessage"/>.</para>
            <para>See the <b>Developer's Guide</b> for details, parameters, and examples of
            the Select Error Message function.</para>
            <para>Your function should not handle token replacement. 
            That's handled by TokenReplacementFunctionName.</para>
            <para>It defaults to "VAM_SelErrMsg" in VAM.js.</para>
            </value>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseValidatorAction.SelSumMsgFunctionName">
            <summary>
            SelSumMsgFunctionName is the client-side Select Summary Message function
            that determines the source of the ValidationSummary message string. 
            </summary>
            <value>
            <para>It is the client side equivalent of 
            <see cref="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseValidatorAction.SelectSummaryMessage"/>.</para>
            <para>See the <b>Developer's Guide</b> for details, parameters, and examples of
            the Select Summary Message function.</para>
            <para>Your function should not handle token replacement. 
            That's handled by TokenReplacementFunctionName.</para>
            <para>It defaults to "VAM_SelSumMsg" in VAM.js.</para>
            </value>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseValidatorAction.TokenReplacementFunctionName">
            <summary>
            TokenReplacementFunctionName is the client side Token Replacement function name 
            that replaces runtime tokens in the error message and summary error message strings.
            </summary>
            <value>
            <para>ValidatorAction classes that define new tokens must override
            this to supply their own function name. The new function should call the 
            function of the parent ValidatorAction to handle its tokens.</para>
            <para>See the <b>Developer's Guide</b> for details, parameters, and examples of 
            the Token Replacement function.</para>
            <para>When "", there is no token replacement.</para>
            <para>It defaults to "".</para>
            </value>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseValidatorAction.CanRunFunctionName">
            <summary>
            Returns "VAM_CanRunVal" which tests the Enabler condition
            and the EventsToValidate property.
            </summary>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseValidatorAction.IsValid">
            <summary>
            IsValid indicates that the validator is valid or not. In other words,
            the condition evaluates as success or failed.
            </summary>
            <value>
            <para>It is set by a call to <see cref="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseValidatorAction.Validate"/>. 
            Prior to that, its value is true.
            You can change the value of this property manually after 
            validation has taken place. This allows you to override the validation result, if necessary.
            The <see cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.IgnoreConditionValidator"/> uses this technique.</para>
            <para>The <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.VAMPage.IsValid">VAMPage.IsValid</see> property is 
            set to true only if the IsValid property for each 
            validation action on the page is also set to true.</para>
            </value>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseValidatorAction.HasValidated">
            <summary>
            HasValidated indicates if the <see cref="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseValidatorAction.Validate"/>
            method has been run.
            </summary>
            <value>
            <para>It is initially false. Validate will set it to true.</para>
            <para>You can still call Validate after this is true to reevaluate the validation.</para>
            </value>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseValidatorAction.Page">
            <summary>
            Page optimizes retrieving the current VAMPage by limiting 
            the number of references to get there.
            </summary>
        </member>
        <member name="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.MessageType">
            <summary>
            MessageType determines the destination of the error message:
            Shown in the error formatter or validation summary.
            It is used primarily in the BaseValidatorAction.<see cref="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseValidatorAction.ReplaceMessageTokens(System.String,System.Boolean,Jenzabar.Portal.Framework.Web.UI.Controls.Validation.MessageType)"/> method.
            </summary>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.MessageType.ErrorFormatter">
            <summary>
            The error message appears in the validator control's ErrorFormatter.
            When this is used, the ErrorFormatter can indicate that is doesn't support
            the style sheet formatting that optionally encloses the tokens.
            </summary>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.MessageType.Summary">
            <summary>
            The error message appears in the ValidationSummary control.
            </summary>
        </member>
        <member name="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.ValidatorAction">
            <summary>
            ValidatorAction is the most basic subclass of 
            <see cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseValidatorAction"/>.
            Its error message doesn't
            provide any customization (tokens). It can be used with any condition. 
            </summary>
            <remarks>
            <para>It offers no additional properties or methods.</para>
            <para>It requires the user to assign a condition instance.</para>
            <para>Programmers who create a <see cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.ProgrammersValidator"/> often create this class
            as their ValidatorAction.</para>
            <para>If you want a ValidatorAction that supports conditions that use
            the ControlIDToEvaluate property, use
            <see cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseOneFldValidatorAction"/>. 
            If you want a ValidatorAction that supports conditions that use the 
            SecondControlIDToEvaluate property, use
            <see cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseTwoFldValidatorAction"/>. </para>
            </remarks>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.ValidatorAction.#ctor">
            <summary>
            Constructor with no parameters.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.ValidatorAction.#ctor(System.Web.UI.Control)">
            <summary>
            Constructor that sets Owner property.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.ValidatorAction.#ctor(Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseCondition)">
            <summary>
            Constructor that sets the Condition property.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.ValidatorAction.#ctor(System.Web.UI.Control,Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseCondition)">
            <summary>
            Constructor that sets the Owner and Condition properties.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.ValidatorAction.#ctor(System.Web.UI.Control,Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseCondition,Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseCondition,Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseErrorFormatter,System.String,System.String)">
            <summary>
            Constructor that sets the Owner, Condition, Enabler, ErrorFormatter,
            ErrorMessage, and SummaryErrorMessage properties. Condition, Enabler, 
            and ErrorFormatter can be passed as null to avoid setting them.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.ValidatorAction.#ctor(System.Web.UI.Control,Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseCondition,Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseCondition,Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseErrorFormatter,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Constructor that sets the Owner, Condition, Enabler, ErrorFormatter,
            ErrorMessage, SummaryErrorMessage, ErrorMessageLookupID,
            SummaryErrorMessageLookupID, and Group properties. Condition, Enabler, 
            and ErrorFormatter can be passed as null to avoid setting them.
            </summary>
        </member>
        <member name="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseOneFldValidatorAction">
            <summary>
            BaseOneFldValidatorAction is the base class for any ValidatorAction that uses
            a <see cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseOneFieldCondition"/>.
            </summary>
            <remarks>
            <para>It introduces tokens for {TEXTVALUE} and {LABEL}.</para>
            <para>To support the {LABEL} token, it provides the
            <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseOneFldValidatorAction.Label"/> property.</para>
            </remarks>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseOneFldValidatorAction.#ctor">
            <summary>
            Constructor with no parameters.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseOneFldValidatorAction.#ctor(System.Web.UI.Control)">
            <summary>
            Constructor that sets Owner property.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseOneFldValidatorAction.#ctor(Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseCondition)">
            <summary>
            Constructor that sets Condition property.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseOneFldValidatorAction.#ctor(System.Web.UI.Control,Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseCondition)">
            <summary>
            Constructor that sets the Owner and Condition properties.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseOneFldValidatorAction.#ctor(System.Web.UI.Control,Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseCondition,Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseCondition,Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseErrorFormatter,System.String,System.String)">
            <summary>
            Constructor that sets the Owner, Condition, Enabler, ErrorFormatter,
            ErrorMessage, and SummaryErrorMessage properties. Condition, Enabler, 
            and ErrorFormatter can be passed as null to avoid setting them.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseOneFldValidatorAction.#ctor(System.Web.UI.Control,Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseCondition,Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseCondition,Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseErrorFormatter,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Constructor that sets the Owner, Condition, Enabler, ErrorFormatter,
            ErrorMessage, SummaryErrorMessage, ErrorMessageLookupID,
            SummaryErrorMessageLookupID, and Group properties. Condition, Enabler, 
            and ErrorFormatter can be passed as null to avoid setting them.
            </summary>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseOneFldValidatorAction.fLabel">
            <summary>
            Storage for <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseOneFldValidatorAction.Label"/>.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseOneFldValidatorAction.PrepareBody">
            <summary>
            Calls <see cref="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseValidatorAction.TransferPropertiesFromControl(System.Web.UI.Control,System.Int32)"/>
            with the ControlToEvaluate.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseOneFldValidatorAction.ReplaceMessageTokens(System.String,System.Boolean,Jenzabar.Portal.Framework.Web.UI.Controls.Validation.MessageType)">
            <summary>
            Server side token replacement.
            </summary>
            <remarks>
            <para>Here are the tokens defined:</para>
            <list type="table">
            <listheader>
            <term>Token and TokenType</term>
            <description>
            Description
            </description>
            </listheader>
            <item>
            <term>{TEXTVALUE} (Runtime)</term>
            <description>
            The textual value of the data from ControlToEvaluate.
            </description>
            </item>
            <item>
            <term>{LABEL} (Label)</term>
            <description>
            The text from the Label property.
            </description>
            </item>
            </list>
            </remarks>
            <param name="pMsg">The message containing tokens.</param>
            <param name="pApplyAllTokens">When true, assign all token types. When false,
            assign all except runtime tokens.</param>
            <param name="pMessageType">Determines whether message is going to the validator
            or the ValidationSummary control.</param>
            <returns>The message with tokens replaced.</returns>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseOneFldValidatorAction.DescribeTokens(System.Collections.Specialized.NameValueCollection)">
            <summary>
            Adds the "{TEXTVALUE}" and "{LABEL}" tokens.
            </summary>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseOneFldValidatorAction.TokenReplacementFunctionName">
            <summary>
            The client-side Token Replacement Function is "VAM_OneFldReplToken".
            When you override this method, be sure your client-side function calls
            VAM_OneFldReplToken.
            </summary>
            <remarks>
            <para>It replaces the "{TEXTVALUE}" token with the text value of the field.</para>
            </remarks>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseOneFldValidatorAction.Label">
            <summary>
            Label provides text for the "{LABEL}" token which can appear in ErrorMessage
            and SummaryErrorMessage properties. 
            </summary>
            <value>
            <para>The "{LABEL}" token is intended to be replaced by the name of
            the field that has the error message. It usually shows the same text
            as the label near the field and can even use a reference to that text
            if its a System.Web.UI.WebControls.Label or <see cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.LocalizableLabel"/> control. 
            It can also be entered directly into this object
            when there is no Label control or the text must be different.</para>
            <para>The <see cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.LabelText"/> class offers properties to alter the text of the Label control
            by changing case and stripping trailing characters like colon.</para>
            </value>
            <seealso cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.LabelText"/>
        </member>
        <member name="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseTwoFldValidatorAction">
            <summary>
            BaseTwoFldValidatorAction is the base class for any ValidatorAction that uses
            a <see cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseTwoFieldCondition"/>.
            </summary>
            <remarks>
            <para>It introduces tokens for {TEXTVALUE2} and {LABEL2}.</para>
            <para>To support the {LABEL2} token, it provides the
            <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseTwoFldValidatorAction.SecondLabel"/> property.</para>
            </remarks>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseTwoFldValidatorAction.#ctor">
            <summary>
            Constructor with no parameters.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseTwoFldValidatorAction.#ctor(System.Web.UI.Control)">
            <summary>
            Constructor that sets Owner property.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseTwoFldValidatorAction.#ctor(Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseCondition)">
            <summary>
            Constructor that sets Condition property.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseTwoFldValidatorAction.#ctor(System.Web.UI.Control,Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseCondition)">
            <summary>
            Constructor that sets the Owner and Condition properties.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseTwoFldValidatorAction.#ctor(System.Web.UI.Control,Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseCondition,Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseCondition,Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseErrorFormatter,System.String,System.String)">
            <summary>
            Constructor that sets the Owner, Condition, Enabler, ErrorFormatter,
            ErrorMessage, and SummaryErrorMessage properties. Condition, Enabler, 
            and ErrorFormatter can be passed as null to avoid setting them.
            </summary>      
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseTwoFldValidatorAction.#ctor(System.Web.UI.Control,Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseCondition,Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseCondition,Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseErrorFormatter,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Constructor that sets the Owner, Condition, Enabler, ErrorFormatter,
            ErrorMessage, SummaryErrorMessage, ErrorMessageLookupID,
            SummaryErrorMessageLookupID, and Group properties. Condition, Enabler, 
            and ErrorFormatter can be passed as null to avoid setting them.
            </summary>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseTwoFldValidatorAction.fSecondLabel">
            <summary>
            Storage for <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseTwoFldValidator.SecondLabel"/>.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseTwoFldValidatorAction.PrepareBody">
            <summary>
            Calls <see cref="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseValidatorAction.TransferPropertiesFromControl(System.Web.UI.Control,System.Int32)"/>
            with the SecondControlToEvaluate, if assigned.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseTwoFldValidatorAction.ReplaceMessageTokens(System.String,System.Boolean,Jenzabar.Portal.Framework.Web.UI.Controls.Validation.MessageType)">
            <summary>
            Server side token replacement.
            </summary>
            <remarks>
            <para>Here are the tokens defined:</para>
            <list type="table">
            <listheader>
            <term>Token and TokenType</term>
            <description>
            Description
            </description>
            </listheader>
            <item>
            <term>{TEXTVALUE2} (Runtime)</term>
            <description>
            The textual value of the data from SecondControlToEvaluate.
            </description>
            </item>
            <item>
            <term>{LABEL2} (Label)</term>
            <description>
            The text from the SecondLabel property.
            </description>
            </item>
            </list>
            </remarks>
            <param name="pMsg">The message containing tokens.</param>
            <param name="pApplyAllTokens">When true, assign all token types. When false,
            assign all except runtime tokens.</param>
            <param name="pMessageType">Determines whether message is going to the validator
            or the ValidationSummary control.</param>
            <returns>The message with tokens replaced.</returns>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseTwoFldValidatorAction.DescribeTokens(System.Collections.Specialized.NameValueCollection)">
            <summary>
            Adds the "{TEXTVALUE2}" and "{LABEL2}" tokens.
            </summary>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseTwoFldValidatorAction.TokenReplacementFunctionName">
            <summary>
            The client-side Token Replacement Function is "VAM_TwoFldReplToken".
            When you override this method, be sure your client-side function calls
            VAM_TwoFldReplToken.
            </summary>
            <remarks>
            <para>It replaces the runtime token "{TEXTVALUE2}".</para>
            </remarks>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseTwoFldValidatorAction.SecondLabel">
            <summary>
            SecondLabel provides text for the "{LABEL2}" token which can appear in 
            <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseValidatorAction.ErrorMessage"></see>
            and <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseValidatorAction.SummaryErrorMessage"/> properties. 
            </summary>
            <value>
            <para>The "{LABEL2}" token is intended to be replaced by the name of
            the field that has the error message. It usually shows the same text
            as the label near the field and can even use a reference to that text
            if its a System.Web.UI.WebControls.Label or <see cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.LocalizableLabel"/> control. 
            It can also be entered directly into this object
            when there is no Label control or the text must be different.</para>
            <para>The <see cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.LabelText"/> class offers properties to alter the text of the Label control
            by changing case and stripping trailing characters like colon.</para>
            </value>
            <seealso cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.LabelText"/>      
        </member>
        <member name="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.RequiredTextValidatorAction">
            <summary>
            RequiredTextValidatorAction is a ValidatorAction that only supports the 
            <see cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.RequiredTextCondition"/>.
            </summary>
            <remarks>
            <para>It does not introduce any new tokens or properties.</para>
            <para>You cannot assign to the Condition property. It always installs RequiredTextCondition.</para>
            </remarks>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.RequiredTextValidatorAction.#ctor">
            <summary>
            Constructor with no parameters.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.RequiredTextValidatorAction.#ctor(System.Web.UI.Control)">
            <summary>
            Constructor that sets Owner property.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.RequiredTextValidatorAction.#ctor(System.Web.UI.Control,Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseCondition,Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseErrorFormatter,System.String,System.String)">
            <summary>
            Constructor that sets the Owner, Enabler, ErrorFormatter,
            ErrorMessage, and SummaryErrorMessage properties. Enabler 
            and ErrorFormatter can be passed as null to avoid setting them.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.RequiredTextValidatorAction.#ctor(System.Web.UI.Control,Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseCondition,Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseErrorFormatter,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Constructor that sets the Owner, Enabler, ErrorFormatter,
            ErrorMessage, SummaryErrorMessage, ErrorMessageLookupID,
            SummaryErrorMessageLookupID, and Group properties. Enabler
            and ErrorFormatter can be passed as null to avoid setting them.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.RequiredTextValidatorAction.CreateCondition">
            <returns><see cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.RequiredTextCondition"/></returns>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.RequiredTextValidatorAction.CanSetCondition">
            <summary>
            Returns false. You cannot change the condition.
            </summary>
        </member>
        <member name="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.RequiredListValidatorAction">
            <summary>
            RequiredListValidatorAction is a ValidatorAction that only supports 
            the <see cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.RequiredListCondition"/>.
            </summary>
            <remarks>
            <para>It does not introduce any new tokens or properties.</para>
            <para>You cannot assign to the Condition property. It always installs RequiredListCondition.</para>
            </remarks>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.RequiredListValidatorAction.#ctor">
            <summary>
            Constructor with no parameters.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.RequiredListValidatorAction.#ctor(System.Web.UI.Control)">
            <summary>
            Constructor that sets Owner property.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.RequiredListValidatorAction.#ctor(System.Web.UI.Control,Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseCondition,Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseErrorFormatter,System.String,System.String)">
            <summary>
            Constructor that sets the Owner, Enabler, ErrorFormatter,
            ErrorMessage, and SummaryErrorMessage properties. Enabler 
            and ErrorFormatter can be passed as null to avoid setting them.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.RequiredListValidatorAction.#ctor(System.Web.UI.Control,Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseCondition,Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseErrorFormatter,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Constructor that sets the Owner, Enabler, ErrorFormatter,
            ErrorMessage, SummaryErrorMessage, ErrorMessageLookupID,
            SummaryErrorMessageLookupID, and Group properties. Enabler
            and ErrorFormatter can be passed as null to avoid setting them.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.RequiredListValidatorAction.CreateCondition">
            <returns><see cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.RequiredListCondition"/></returns>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.RequiredListValidatorAction.CanSetCondition">
            <summary>
            Returns false. You cannot change the condition.
            </summary>
        </member>
        <member name="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.RangeValidatorAction">
            <summary>
            RangeValidatorAction is a ValidatorAction that only supports the 
            <see cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.RangeCondition"/>.
            </summary>
            <remarks>
            <para>Introduces the "{MINIMUM}" and "{MAXIMUM}" tokens. These show the values
            of the RangeCondition.Minimum and RangeCondition.Maximum properties.</para>
            </remarks>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.RangeValidatorAction.#ctor">
            <summary>
            Constructor with no parameters.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.RangeValidatorAction.#ctor(System.Web.UI.Control)">
            <summary>
            Constructor that sets Owner property.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.RangeValidatorAction.#ctor(System.Web.UI.Control,Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseCondition,Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseErrorFormatter,System.String,System.String)">
            <summary>
            Constructor that sets the Owner, Enabler, ErrorFormatter,
            ErrorMessage, and SummaryErrorMessage properties. Enabler 
            and ErrorFormatter can be passed as null to avoid setting them.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.RangeValidatorAction.#ctor(System.Web.UI.Control,Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseCondition,Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseCondition,Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseErrorFormatter,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Constructor that sets the Owner, Enabler, ErrorFormatter,
            ErrorMessage, SummaryErrorMessage, ErrorMessageLookupID,
            SummaryErrorMessageLookupID, and Group properties. Enabler
            and ErrorFormatter can be passed as null to avoid setting them.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.RangeValidatorAction.CreateCondition">
            <returns><see cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.RangeCondition"/></returns>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.RangeValidatorAction.ReplaceMessageTokens(System.String,System.Boolean,Jenzabar.Portal.Framework.Web.UI.Controls.Validation.MessageType)">
            <summary>
            Server side token replacement.
            </summary>
            <remarks>
            <para>Here are the tokens defined:</para>
            <list type="table">
            <listheader>
            <term>Token and TokenType</term>
            <description>
            Description
            </description>
            </listheader>
            <item>
            <term>{MINIMUM} (Property)</term>
            <description>
            The Minimum property
            </description>
            </item>
            <item>
            <term>{MAXIMUM} (Property)</term>
            <description>
            The Maximum property
            </description>
            </item>
            </list>
            </remarks>
            <param name="pMsg">The message containing tokens.</param>
            <param name="pApplyAllTokens">When true, assign all token types. When false,
            assign all except runtime tokens.</param>
            <param name="pMessageType">Determines whether message is going to the validator
            or the ValidationSummary control.</param>
            <returns>The message with tokens replaced.</returns>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.RangeValidatorAction.DescribeTokens(System.Collections.Specialized.NameValueCollection)">
            <summary>
            Adds the "{MINIMUM}" and "{MAXIMUM}" tokens.
            </summary>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.RangeValidatorAction.CanSetCondition">
            <summary>
            Returns false. You cannot change the condition.
            </summary>
        </member>
        <member name="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.CompareTwoFieldsValidatorAction">
            <summary>
            CompareTwoFieldsValidatorAction is a ValidatorAction that only supports 
            the <see cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.CompareTwoFieldsCondition"/>.
            </summary>
            <remarks>
            <para>It does not introduce any new tokens or properties.</para>
            <para>You cannot assign to the Condition property. It always installs CompareTwoFieldsCondition.</para>
            </remarks>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.CompareTwoFieldsValidatorAction.#ctor">
            <summary>
            Constructor with no parameters.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.CompareTwoFieldsValidatorAction.#ctor(System.Web.UI.Control)">
            <summary>
            Constructor that sets Owner property.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.CompareTwoFieldsValidatorAction.#ctor(System.Web.UI.Control,Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseCondition,Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseErrorFormatter,System.String,System.String)">
            <summary>
            Constructor that sets the Owner, Enabler, ErrorFormatter,
            ErrorMessage, and SummaryErrorMessage properties. Enabler 
            and ErrorFormatter can be passed as null to avoid setting them.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.CompareTwoFieldsValidatorAction.#ctor(System.Web.UI.Control,Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseCondition,Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseErrorFormatter,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Constructor that sets the Owner, Enabler, ErrorFormatter,
            ErrorMessage, SummaryErrorMessage, ErrorMessageLookupID,
            SummaryErrorMessageLookupID, and Group properties. Enabler
            and ErrorFormatter can be passed as null to avoid setting them.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.CompareTwoFieldsValidatorAction.CreateCondition">
            <returns><see cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.CompareTwoFieldsCondition"/></returns>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.CompareTwoFieldsValidatorAction.CanSetCondition">
            <summary>
            Returns false. You cannot change the condition.
            </summary>
        </member>
        <member name="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.CompareToValueValidatorAction">
            <summary>
            CompareToValueValidatorAction is a ValidatorAction that only supports the 
            <see cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.CompareToValueCondition"/>.
            </summary>
            <remarks>
            <para>It defines the {VALUETOCOMPARE} token but no new properties.</para>
            <para>You cannot assign to the Condition property. It always installs CompareToValueCondition.</para>
            </remarks>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.CompareToValueValidatorAction.#ctor">
            <summary>
            Constructor with no parameters.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.CompareToValueValidatorAction.#ctor(System.Web.UI.Control)">
            <summary>
            Constructor that sets Owner property.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.CompareToValueValidatorAction.#ctor(System.Web.UI.Control,Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseCondition,Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseErrorFormatter,System.String,System.String)">
            <summary>
            Constructor that sets the Owner, Enabler, ErrorFormatter,
            ErrorMessage, and SummaryErrorMessage properties. Enabler 
            and ErrorFormatter can be passed as null to avoid setting them.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.CompareToValueValidatorAction.#ctor(System.Web.UI.Control,Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseCondition,Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseErrorFormatter,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Constructor that sets the Owner, Enabler, ErrorFormatter,
            ErrorMessage, SummaryErrorMessage, ErrorMessageLookupID,
            SummaryErrorMessageLookupID, and Group properties. Enabler
            and ErrorFormatter can be passed as null to avoid setting them.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.CompareToValueValidatorAction.CreateCondition">
            <returns><see cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.CompareToValueCondition"/></returns>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.CompareToValueValidatorAction.ReplaceMessageTokens(System.String,System.Boolean,Jenzabar.Portal.Framework.Web.UI.Controls.Validation.MessageType)">
            <summary>
            Server side token replacement.
            </summary>
            <remarks>
            <para>Here are the tokens defined:</para>
            <list type="table">
            <listheader>
            <term>Token and TokenType</term>
            <description>
            Description
            </description>
            </listheader>
            <item>
            <term>{VALUETOCOMPARE} (property)</term>
            <description>
            The ValueToCompare property.
            </description>
            </item>
            </list>
            </remarks>
            <param name="pMsg">The message containing tokens.</param>
            <param name="pApplyAllTokens">When true, assign all token types. When false,
            assign all except runtime tokens.</param>
            <param name="pMessageType">Determines whether message is going to the validator
            or the ValidationSummary control.</param>
            <returns>The message with tokens replaced.</returns>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.CompareToValueValidatorAction.DescribeTokens(System.Collections.Specialized.NameValueCollection)">
            <summary>
            Adds the {VALUETOCOMPARE} token.
            </summary>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.CompareToValueValidatorAction.CanSetCondition">
            <summary>
            Returns false. You cannot change the condition.
            </summary>
        </member>
        <member name="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseDifferenceValidatorAction">
            <summary>
            BaseDifferenceValidatorAction is a ValidatorAction that supports  
            <see cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseDifferenceCondition"/> subclasses.
            </summary>
            <remarks>
            <para>It defines the {DIFFRESULT} and {DIFFERENCEVALUE} tokens but no new properties.</para>
            <para>You cannot assign to the Condition property. It always installs BaseDifferenceCondition.</para>
            </remarks>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseDifferenceValidatorAction.#ctor">
            <summary>
            Constructor with no parameters.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseDifferenceValidatorAction.#ctor(System.Web.UI.Control)">
            <summary>
            Constructor that sets Owner property.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseDifferenceValidatorAction.#ctor(System.Web.UI.Control,Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseCondition,Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseErrorFormatter,System.String,System.String)">
            <summary>
            Constructor that sets the Owner, Enabler, ErrorFormatter,
            ErrorMessage, and SummaryErrorMessage properties. Enabler 
            and ErrorFormatter can be passed as null to avoid setting them.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseDifferenceValidatorAction.#ctor(System.Web.UI.Control,Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseCondition,Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseErrorFormatter,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Constructor that sets the Owner, Enabler, ErrorFormatter,
            ErrorMessage, SummaryErrorMessage, ErrorMessageLookupID,
            SummaryErrorMessageLookupID, and Group properties. Enabler
            and ErrorFormatter can be passed as null to avoid setting them.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseDifferenceValidatorAction.DefineJavaScript(Jenzabar.Portal.Framework.Web.UI.Controls.Validation.VAMPage)">
            <summary>
            Adds the VAM_XVF.js script file.
            </summary>
            <param name="pPage">The current VAMPage instance.</param>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseDifferenceValidatorAction.ReplaceMessageTokens(System.String,System.Boolean,Jenzabar.Portal.Framework.Web.UI.Controls.Validation.MessageType)">
            <summary>
            Server side token replacement.
            </summary>
            <remarks>
            <para>Here are the tokens defined:</para>
            <list type="table">
            <listheader>
            <term>Token and TokenType</term>
            <description>
            Description
            </description>
            </listheader>
            <item>
            <term>{DIFFRESULT} (Runtime)</term>
            <description>
            The value of the difference.
            </description>
            </item>
            <item>
            <term>{DIFFERENCEVALUE} (property)</term>
            <description>
            The DifferenceValue property.
            </description>
            </item>
            </list>
            </remarks>
            <param name="pMsg">The message containing tokens.</param>
            <param name="pApplyAllTokens">When true, assign all token types. When false,
            assign all except runtime tokens.</param>
            <param name="pMessageType">Determines whether message is going to the validator
            or the ValidationSummary control.</param>
            <returns>The message with tokens replaced.</returns>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseDifferenceValidatorAction.DescribeTokens(System.Collections.Specialized.NameValueCollection)">
            <summary>
            Adds the {DIFFERENCEVALUE} and {DIFFRESULT} tokens.
            </summary>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseDifferenceValidatorAction.TokenReplacementFunctionName">
            <summary>
            The client-side Token Replacement Function is "VAM_DiffReplToken".
            When you override this method, be sure your client-side function calls
            VAM_DiffReplToken.
            </summary>
            <remarks>
            <para>Updates the runtime token "{DIFFRESULT}".See <see cref="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseDifferenceValidatorAction.ReplaceMessageTokens(System.String,System.Boolean,Jenzabar.Portal.Framework.Web.UI.Controls.Validation.MessageType)"/>
            for a description of this token.</para>
            </remarks>
        </member>
        <member name="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.DifferenceValidatorAction">
            <summary>
            DifferenceValidatorAction is a ValidatorAction that only supports the 
            <see cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.DifferenceCondition"/>.
            </summary>
            <remarks>
            <para>It does not introduce any new tokens or properties.</para>
            <para>You cannot assign to the Condition property. It always installs DifferenceCondition.</para>
            </remarks>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.DifferenceValidatorAction.#ctor">
            <summary>
            Constructor with no parameters.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.DifferenceValidatorAction.#ctor(System.Web.UI.Control)">
            <summary>
            Constructor that sets Owner property.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.DifferenceValidatorAction.#ctor(System.Web.UI.Control,Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseCondition,Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseErrorFormatter,System.String,System.String)">
            <summary>
            Constructor that sets the Owner, Enabler, ErrorFormatter,
            ErrorMessage, and SummaryErrorMessage properties. Enabler 
            and ErrorFormatter can be passed as null to avoid setting them.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.DifferenceValidatorAction.#ctor(System.Web.UI.Control,Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseCondition,Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseErrorFormatter,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Constructor that sets the Owner, Enabler, ErrorFormatter,
            ErrorMessage, SummaryErrorMessage, ErrorMessageLookupID,
            SummaryErrorMessageLookupID, and Group properties. Enabler
            and ErrorFormatter can be passed as null to avoid setting them.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.DifferenceValidatorAction.CreateCondition">
            <returns><see cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.DifferenceCondition"/></returns>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.DifferenceValidatorAction.CanSetCondition">
            <summary>
            Returns false. You cannot change the condition.
            </summary>
        </member>
        <member name="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.DataTypeCheckValidatorAction">
            <summary>
            DataTypeCheckValidatorAction is a ValidatorAction that only supports the 
            <see cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.DataTypeCheckCondition"/>.
            </summary>
            <remarks>
            <para>It does not introduce any new tokens or properties.</para>
            <para>You cannot assign to the Condition property. It always installs DataTypeCheckCondition.</para>
            </remarks>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.DataTypeCheckValidatorAction.#ctor">
            <summary>
            Constructor with no parameters.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.DataTypeCheckValidatorAction.#ctor(System.Web.UI.Control)">
            <summary>
            Constructor that sets Owner property.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.DataTypeCheckValidatorAction.#ctor(System.Web.UI.Control,Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseCondition,Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseErrorFormatter,System.String,System.String)">
            <summary>
            Constructor that sets the Owner, Enabler, ErrorFormatter,
            ErrorMessage, and SummaryErrorMessage properties. Enabler 
            and ErrorFormatter can be passed as null to avoid setting them.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.DataTypeCheckValidatorAction.#ctor(System.Web.UI.Control,Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseCondition,Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseErrorFormatter,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Constructor that sets the Owner, Enabler, ErrorFormatter,
            ErrorMessage, SummaryErrorMessage, ErrorMessageLookupID,
            SummaryErrorMessageLookupID, and Group properties. Enabler
            and ErrorFormatter can be passed as null to avoid setting them.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.DataTypeCheckValidatorAction.CreateCondition">
            <returns><see cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.DataTypeCheckCondition"/></returns>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.DataTypeCheckValidatorAction.CanSetCondition">
            <summary>
            Returns false. You cannot change the condition.
            </summary>
        </member>
        <member name="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.RegexValidatorAction">
            <summary>
            RegexValidatorAction is a ValidatorAction that only supports the 
            <see cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.RegexCondition"/>.
            </summary>
            <remarks>
            <para>It does not introduce any new tokens or properties.</para>
            <para>You cannot assign to the Condition property. It always installs RegexCondition.</para>
            </remarks>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.RegexValidatorAction.#ctor">
            <summary>
            Constructor with no parameters.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.RegexValidatorAction.#ctor(System.Web.UI.Control)">
            <summary>
            Constructor that sets Owner property.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.RegexValidatorAction.#ctor(System.Web.UI.Control,Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseCondition,Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseErrorFormatter,System.String,System.String)">
            <summary>
            Constructor that sets the Owner, Enabler, ErrorFormatter,
            ErrorMessage, and SummaryErrorMessage properties. Enabler 
            and ErrorFormatter can be passed as null to avoid setting them.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.RegexValidatorAction.#ctor(System.Web.UI.Control,Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseCondition,Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseErrorFormatter,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Constructor that sets the Owner, Enabler, ErrorFormatter,
            ErrorMessage, SummaryErrorMessage, ErrorMessageLookupID,
            SummaryErrorMessageLookupID, and Group properties. Enabler
            and ErrorFormatter can be passed as null to avoid setting them.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.RegexValidatorAction.CreateCondition">
            <returns><see cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.RegexCondition"/></returns>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.RegexValidatorAction.CanSetCondition">
            <summary>
            Returns false. You cannot change the condition.
            </summary>
        </member>
        <member name="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.CompareToStringsValidatorAction">
            <summary>
            CompareToStringsValidatorAction is a ValidatorAction that only supports the 
            <see cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.CompareToStringsCondition"/>.
            </summary>
            <remarks>
            <para>It does not introduce any new tokens or properties.</para>
            <para>You cannot assign to the Condition property. It always installs CompareToStringsCondition.</para>
            </remarks>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.CompareToStringsValidatorAction.#ctor">
            <summary>
            Constructor with no parameters.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.CompareToStringsValidatorAction.#ctor(System.Web.UI.Control)">
            <summary>
            Constructor that sets Owner property.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.CompareToStringsValidatorAction.#ctor(System.Web.UI.Control,Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseCondition,Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseErrorFormatter,System.String,System.String)">
            <summary>
            Constructor that sets the Owner, Enabler, ErrorFormatter,
            ErrorMessage, and SummaryErrorMessage properties. Enabler 
            and ErrorFormatter can be passed as null to avoid setting them.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.CompareToStringsValidatorAction.#ctor(System.Web.UI.Control,Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseCondition,Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseErrorFormatter,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Constructor that sets the Owner, Enabler, ErrorFormatter,
            ErrorMessage, SummaryErrorMessage, ErrorMessageLookupID,
            SummaryErrorMessageLookupID, and Group properties. Enabler
            and ErrorFormatter can be passed as null to avoid setting them.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.CompareToStringsValidatorAction.CreateCondition">
            <returns><see cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.CompareToStringsCondition"/></returns>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.CompareToStringsValidatorAction.CanSetCondition">
            <summary>
            Returns false. You cannot change the condition.
            </summary>
        </member>
        <member name="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseTextLengthValidatorAction">
            <summary>
            BaseTextLengthValidatorAction is a ValidatorAction that only supports 
            <see cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseTextLengthCondition"/> subclasses.
            </summary>
            <remarks>
            <para>It supports these tokens:{COUNT}, {EXCEEDS}, {MINIMUM}, {MAXIMUM} </para>
            </remarks>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseTextLengthValidatorAction.#ctor">
            <summary>
            Constructor with no parameters.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseTextLengthValidatorAction.#ctor(System.Web.UI.Control)">
            <summary>
            Constructor that sets Owner property.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseTextLengthValidatorAction.#ctor(System.Web.UI.Control,Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseCondition,Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseErrorFormatter,System.String,System.String)">
            <summary>
            Constructor that sets the Owner, Enabler, ErrorFormatter,
            ErrorMessage, and SummaryErrorMessage properties. Enabler 
            and ErrorFormatter can be passed as null to avoid setting them.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseTextLengthValidatorAction.#ctor(System.Web.UI.Control,Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseCondition,Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseErrorFormatter,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Constructor that sets the Owner, Enabler, ErrorFormatter,
            ErrorMessage, SummaryErrorMessage, ErrorMessageLookupID,
            SummaryErrorMessageLookupID, and Group properties. Enabler
            and ErrorFormatter can be passed as null to avoid setting them.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseTextLengthValidatorAction.ReplaceMessageTokens(System.String,System.Boolean,Jenzabar.Portal.Framework.Web.UI.Controls.Validation.MessageType)">
            <summary>
            Server side token replacement.
            </summary>
            <remarks>
            <para>Here are the tokens defined:</para>
            <list type="table">
            <listheader>
            <term>Token and TokenType</term>
            <description>
            Description
            </description>
            </listheader>
            <item>
            <term>{COUNT} (Runtime)</term>
            <description>
            Number of elements (chars, words) in the text
            </description>
            </item>
            <item>
            <term>{COUNT:singular:plural} (Runtime)</term>
            <description>
            Number of elements (chars, words) in the text selects the singular or plural form.
            </description>
            </item>
            <item>
            <term>{EXCEEDS} (Runtime)</term>
            <description>
            How much the number of elements exceeds the min or max.
            </description>
            </item>
            <item>
            <term>{EXCEEDS:singular:plural} (Runtime)</term>
            <description>
            How much the number of elements exceeds the min or max selects the singular or plural form.
            </description>
            </item>
            <item>
            <term>{MINIMUM} (Property)</term>
            <description>
            The Minimum property
            </description>
            </item>
            <item>
            <term>{MAXIMUM} (Property)</term>
            <description>
            The Maximum property
            </description>
            </item>
            </list>
            </remarks>
            <param name="pMsg">The message containing tokens.</param>
            <param name="pApplyAllTokens">When true, assign all token types. When false,
            assign all except runtime tokens.</param>
            <param name="pMessageType">Determines whether message is going to the validator
            or the ValidationSummary control.</param>
            <returns>The message with tokens replaced.</returns>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseTextLengthValidatorAction.DescribeTokens(System.Collections.Specialized.NameValueCollection)">
            <summary>
            Adds the {COUNT}, {COUNT:singular:plural}, {EXCEEDS},
            {EXCEEDS:singular:plural}, {MINIMUM}, and {MAXIMUM} tokens.
            </summary>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseTextLengthValidatorAction.CanSetCondition">
            <summary>
            Returns false. You cannot change the condition.
            </summary>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseTextLengthValidatorAction.TokenReplacementFunctionName">
            <summary>
            The client-side Token Replacement Function is "VAM_TxtLenReplToken".
            When you override this method, be sure your client-side function calls
            VAM_TxtLenReplToken.
            </summary>
            <remarks>
            <para>It supports the runtime tokens: {COUNT}, {COUNT:singular:plural},
            {EXCEEDS}, and {EXCEEDS:singular:plural}. See <see cref="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseTextLengthValidatorAction.ReplaceMessageTokens(System.String,System.Boolean,Jenzabar.Portal.Framework.Web.UI.Controls.Validation.MessageType)"/>
            for descriptions of these tokens.</para>
            </remarks>
        </member>
        <member name="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.TextLengthValidatorAction">
            <summary>
            TextLengthValidatorAction is a ValidatorAction that only supports the 
            <see cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.TextLengthCondition"/>.
            </summary>
            <remarks>
            <para>It does not introduce any new tokens or properties.</para>
            <para>You cannot assign to the Condition property. It always installs TextLengthCondition.</para>
            </remarks>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.TextLengthValidatorAction.#ctor">
            <summary>
            Constructor with no parameters.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.TextLengthValidatorAction.#ctor(System.Web.UI.Control)">
            <summary>
            Constructor that sets Owner property.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.TextLengthValidatorAction.#ctor(System.Web.UI.Control,Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseCondition,Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseErrorFormatter,System.String,System.String)">
            <summary>
            Constructor that sets the Owner, Enabler, ErrorFormatter,
            ErrorMessage, and SummaryErrorMessage properties. Enabler 
            and ErrorFormatter can be passed as null to avoid setting them.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.TextLengthValidatorAction.#ctor(System.Web.UI.Control,Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseCondition,Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseErrorFormatter,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Constructor that sets the Owner, Enabler, ErrorFormatter,
            ErrorMessage, SummaryErrorMessage, ErrorMessageLookupID,
            SummaryErrorMessageLookupID, and Group properties. Enabler
            and ErrorFormatter can be passed as null to avoid setting them.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.TextLengthValidatorAction.CreateCondition">
            <returns><see cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.TextLengthCondition"/></returns>
        </member>
        <member name="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.WordCountValidatorAction">
            <summary>
            WordCountValidatorAction is a ValidatorAction that only supports the 
            <see cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.WordCountCondition"/>.
            </summary>
            <remarks>
            <para>It does not introduce any new tokens or properties.</para>
            <para>You cannot assign to the Condition property. It always installs WordCountCondition.</para>
            </remarks>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.WordCountValidatorAction.#ctor">
            <summary>
            Constructor with no parameters.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.WordCountValidatorAction.#ctor(System.Web.UI.Control)">
            <summary>
            Constructor that sets Owner property.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.WordCountValidatorAction.#ctor(System.Web.UI.Control,Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseCondition,Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseErrorFormatter,System.String,System.String)">
            <summary>
            Constructor that sets the Owner, Enabler, ErrorFormatter,
            ErrorMessage, and SummaryErrorMessage properties. Enabler 
            and ErrorFormatter can be passed as null to avoid setting them.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.WordCountValidatorAction.#ctor(System.Web.UI.Control,Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseCondition,Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseErrorFormatter,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Constructor that sets the Owner, Enabler, ErrorFormatter,
            ErrorMessage, SummaryErrorMessage, ErrorMessageLookupID,
            SummaryErrorMessageLookupID, and Group properties. Enabler
            and ErrorFormatter can be passed as null to avoid setting them.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.WordCountValidatorAction.CreateCondition">
            <returns><see cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.WordCountCondition"/></returns>
        </member>
        <member name="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.CheckStateValidatorAction">
            <summary>
            CheckStateValidatorAction is a ValidatorAction that only supports 
            the <see cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.CheckStateCondition"/>.
            </summary>
            <remarks>
            <para>It does not introduce any new tokens or properties.</para>
            <para>You cannot assign to the Condition property. It always installs CheckStateCondition.</para>
            </remarks>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.CheckStateValidatorAction.#ctor">
            <summary>
            Constructor with no parameters.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.CheckStateValidatorAction.#ctor(System.Web.UI.Control)">
            <summary>
            Constructor that sets Owner property.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.CheckStateValidatorAction.#ctor(System.Web.UI.Control,Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseCondition,Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseErrorFormatter,System.String,System.String)">
            <summary>
            Constructor that sets the Owner, Enabler, ErrorFormatter,
            ErrorMessage, and SummaryErrorMessage properties. Enabler 
            and ErrorFormatter can be passed as null to avoid setting them.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.CheckStateValidatorAction.#ctor(System.Web.UI.Control,Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseCondition,Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseErrorFormatter,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Constructor that sets the Owner, Enabler, ErrorFormatter,
            ErrorMessage, SummaryErrorMessage, ErrorMessageLookupID,
            SummaryErrorMessageLookupID, and Group properties. Enabler
            and ErrorFormatter can be passed as null to avoid setting them.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.CheckStateValidatorAction.CreateCondition">
            <returns><see cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.CheckStateCondition"/></returns>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.CheckStateValidatorAction.CanSetCondition">
            <summary>
            Returns false. You cannot change the condition.
            </summary>
        </member>
        <member name="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.SelectedIndexValidatorAction">
            <summary>
            SelectedIndexValidatorAction is a ValidatorAction that only supports the 
            <see cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.SelectedIndexCondition"/>.
            </summary>
            <remarks>
            <para>It does not introduce any new tokens or properties.</para>
            <para>You cannot assign to the Condition property. It always installs SelectedIndexCondition.</para>
            </remarks>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.SelectedIndexValidatorAction.#ctor">
            <summary>
            Constructor with no parameters.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.SelectedIndexValidatorAction.#ctor(System.Web.UI.Control)">
            <summary>
            Constructor that sets Owner property.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.SelectedIndexValidatorAction.#ctor(System.Web.UI.Control,Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseCondition,Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseErrorFormatter,System.String,System.String)">
            <summary>
            Constructor that sets the Owner, Enabler, ErrorFormatter,
            ErrorMessage, and SummaryErrorMessage properties. Enabler 
            and ErrorFormatter can be passed as null to avoid setting them.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.SelectedIndexValidatorAction.#ctor(System.Web.UI.Control,Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseCondition,Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseErrorFormatter,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Constructor that sets the Owner, Enabler, ErrorFormatter,
            ErrorMessage, SummaryErrorMessage, ErrorMessageLookupID,
            SummaryErrorMessageLookupID, and Group properties. Enabler
            and ErrorFormatter can be passed as null to avoid setting them.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.SelectedIndexValidatorAction.CreateCondition">
            <returns><see cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.SelectedIndexCondition"/></returns>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.SelectedIndexValidatorAction.CanSetCondition">
            <summary>
            Returns false. You cannot change the condition.
            </summary>
        </member>
        <member name="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.CountSelectionsValidatorAction">
            <summary>
            CountSelectionsValidatorAction is a ValidatorAction that only supports the 
            <see cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.CountSelectionsCondition"/>.
            </summary>
            <remarks>
            <para>It defines the {COUNT}, {COUNT:singular:plural}, {MINIMUM}, and {MAXIMUM} tokens.</para>
            <para>It does not define any new properties.</para>
            </remarks>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.CountSelectionsValidatorAction.#ctor">
            <summary>
            Constructor with no parameters.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.CountSelectionsValidatorAction.#ctor(System.Web.UI.Control)">
            <summary>
            Constructor that sets Owner property.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.CountSelectionsValidatorAction.#ctor(System.Web.UI.Control,Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseCondition,Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseErrorFormatter,System.String,System.String)">
            <summary>
            Constructor that sets the Owner, Enabler, ErrorFormatter,
            ErrorMessage, and SummaryErrorMessage properties. Enabler 
            and ErrorFormatter can be passed as null to avoid setting them.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.CountSelectionsValidatorAction.#ctor(System.Web.UI.Control,Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseCondition,Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseErrorFormatter,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Constructor that sets the Owner, Enabler, ErrorFormatter,
            ErrorMessage, SummaryErrorMessage, ErrorMessageLookupID,
            SummaryErrorMessageLookupID, and Group properties. Enabler
            and ErrorFormatter can be passed as null to avoid setting them.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.CountSelectionsValidatorAction.ReplaceMessageTokens(System.String,System.Boolean,Jenzabar.Portal.Framework.Web.UI.Controls.Validation.MessageType)">
            <summary>
            Server side token replacement.
            </summary>
            <remarks>
            <para>Here are the tokens defined:</para>
            <list type="table">
            <listheader>
            <term>Token and TokenType</term>
            <description>
            Description
            </description>
            </listheader>
            <item>
            <term>{COUNT} (Runtime)</term>
            <description>
            Number of items selected.
            </description>
            </item>
            <item>
            <term>{COUNT:singular:plural} (Runtime)</term>
            <description>
            Determines singular or plural from the number of items selected.
            </description>
            </item>
            <item>
            <term>{MINIMUM} (Property)</term>
            <description>
            The CountSelectionsCondition.Minimum property.
            </description>
            </item>
            <item>
            <term>{MAXIMUM} (Runtime)</term>
            <description>
            The CountSelectionsCondition.Maximum property.
            </description>
            </item>
            </list>
            </remarks>
            <param name="pMsg">The message containing tokens.</param>
            <param name="pApplyAllTokens">When true, assign all token types. When false,
            assign all except runtime tokens.</param>
            <param name="pMessageType">Determines whether message is going to the validator
            or the ValidationSummary control.</param>
            <returns>The message with tokens replaced.</returns>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.CountSelectionsValidatorAction.DescribeTokens(System.Collections.Specialized.NameValueCollection)">
            <summary>
            Adds the {COUNT}, {COUNT:singular:plural}, {MINIMUM}, and {MAXIMUM} tokens.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.CountSelectionsValidatorAction.CreateCondition">
            <returns><see cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.CountSelectionsCondition"/></returns>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.CountSelectionsValidatorAction.DefineJavaScript(Jenzabar.Portal.Framework.Web.UI.Controls.Validation.VAMPage)">
            <summary>
            Uses the VAM_XVF.js file.
            </summary>
            <param name="pPage">The current VAMPage class.</param>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.CountSelectionsValidatorAction.CanSetCondition">
            <summary>
            Returns false. You cannot change the condition.
            </summary>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.CountSelectionsValidatorAction.TokenReplacementFunctionName">
            <summary>
            The client-side Token Replacement Function is "VAM_CntSelReplToken".
            When you override this method, be sure your client-side function calls
            VAM_CntSelReplToken.
            </summary>
            <remarks>
            <para>Updates the runtime tokens "{COUNT}" and "{COUNT:singular:plural}".
            See <see cref="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.CountSelectionsValidatorAction.ReplaceMessageTokens(System.String,System.Boolean,Jenzabar.Portal.Framework.Web.UI.Controls.Validation.MessageType)"/>
            for descriptions of these tokens</para>
            </remarks>
        </member>
        <member name="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseMultiConditionValidatorAction">
            <summary>
            BaseMultiConditionValidatorAction is a ValidatorAction that supports subclasses of 
            <see cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseMultiCondition"/>.
            </summary>
            <remarks>
            <para>Introduces the four {LABEL} tokens and their associated
            <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseMultiConditionValidatorAction.Label"/>, 
            Label2, Label3, and Label4 properties.</para>
            </remarks>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseMultiConditionValidatorAction.#ctor">
            <summary>
            Constructor with no parameters.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseMultiConditionValidatorAction.#ctor(System.Web.UI.Control)">
            <summary>
            Constructor that sets Owner property.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseMultiConditionValidatorAction.#ctor(System.Web.UI.Control,Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseCondition,Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseErrorFormatter,System.String,System.String)">
            <summary>
            Constructor that sets the Owner, Enabler, ErrorFormatter,
            ErrorMessage, and SummaryErrorMessage properties. Enabler 
            and ErrorFormatter can be passed as null to avoid setting them.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseMultiConditionValidatorAction.#ctor(System.Web.UI.Control,Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseCondition,Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseErrorFormatter,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Constructor that sets the Owner, Enabler, ErrorFormatter,
            ErrorMessage, SummaryErrorMessage, ErrorMessageLookupID,
            SummaryErrorMessageLookupID, and Group properties. Enabler
            and ErrorFormatter can be passed as null to avoid setting them.
            </summary>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseMultiConditionValidatorAction.fLabel">
            <summary>
            Storage for <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseMultiConditionValidatorAction.Label"/>.
            </summary>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseMultiConditionValidatorAction.fLabel2">
            <summary>
            Storage for <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseMultiConditionValidatorAction.Label"/>.
            </summary>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseMultiConditionValidatorAction.fLabel3">
            <summary>
            Storage for <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseMultiConditionValidatorAction.Label"/>.
            </summary>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseMultiConditionValidatorAction.fLabel4">
            <summary>
            Storage for <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseMultiConditionValidatorAction.Label"/>.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseMultiConditionValidatorAction.ReplaceMessageTokens(System.String,System.Boolean,Jenzabar.Portal.Framework.Web.UI.Controls.Validation.MessageType)">
            <summary>
            Server side token replacement.
            </summary>
            <remarks>
            <para>Here are the tokens defined:</para>
            <list type="table">
            <listheader>
            <term>Token and TokenType</term>
            <description>
            Description
            </description>
            </listheader>
            <item>
            <term>{LABEL} (Property)</term>
            <description>
            The text from the Label property.
            </description>
            </item>
            <item>
            <term>{LABEL2} (Property)</term>
            <description>
            The text from the Label2 property.
            </description>
            </item>
            <item>
            <term>{LABEL3} (Property)</term>
            <description>
            The text from the Label3 property.
            </description>
            </item>
            <item>
            <term>{LABEL4} (Property)</term>
            <description>
            The text from the Label4 property.
            </description>
            </item>
            </list>
            </remarks>
            <param name="pMsg">The message containing tokens.</param>
            <param name="pApplyAllTokens">When true, assign all token types. When false,
            assign all except runtime tokens.</param>
            <param name="pMessageType">Determines whether message is going to the validator
            or the ValidationSummary control.</param>
            <returns>The message with tokens replaced.</returns>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseMultiConditionValidatorAction.DescribeTokens(System.Collections.Specialized.NameValueCollection)">
            <summary>
            Adds the four {LABEL} tokens.
            </summary>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseMultiConditionValidatorAction.Label">
            <summary>
            Label provides text for the {LABEL} token which can appear in ErrorMessage
            and SummaryErrorMessage properties. 
            </summary>
            <value>
            <para>The {LABEL} token is intended to be replaced by the name of
            the a field that has the error message. The user can identify 
            a System.Web.UI.WebControls.Label or <see cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.LocalizableLabel"/> control. 
            It can also be entered directly into this object
            when there is no Label control or the text must be different.</para>
            <para>The <see cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.LabelText"/> class offers properties to alter the text of the Label control
            by changing case and stripping trailing characters like colon.</para>
            </value>
            <remarks>
            <para><b>TypeConverterAttribute:</b><see cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.LabelTextTypeConverter"/></para>
            </remarks>
            <seealso cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.LabelText"/>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseMultiConditionValidatorAction.Label2">
            <summary>
            Label2 provides text for the {LABEL2} token which can appear in ErrorMessage
            and SummaryErrorMessage properties. 
            </summary>
            <value>
            <para>The {LABEL2} token is intended to be replaced by the name of
            the a field that has the error message. The user can identify 
            a System.Web.UI.WebControls.Label or <see cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.LocalizableLabel"/> control. 
            It can also be entered directly into this object
            when there is no Label control or the text must be different.</para>
            <para>The <see cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.LabelText"/> class offers properties to alter the text of the Label control
            by changing case and stripping trailing characters like colon.</para>
            </value>
            <remarks>
            <para><b>TypeConverterAttribute:</b><see cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.LabelTextTypeConverter"/></para>
            </remarks>
            <seealso cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.LabelText"/>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseMultiConditionValidatorAction.Label3">
            <summary>
            Label3 provides text for the {LABEL3} token which can appear in ErrorMessage
            and SummaryErrorMessage properties. 
            </summary>
            <value>
            <para>The {LABEL3} token is intended to be replaced by the name of
            the a field that has the error message. The user can identify 
            a System.Web.UI.WebControls.Label or <see cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.LocalizableLabel"/> control. 
             It can also be entered directly into this object
            when there is no Label control or the text must be different.</para>
            <para>The <see cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.LabelText"/> class offers properties to alter the text of the Label control
            by changing case and stripping trailing characters like colon.</para>
            </value>
            <remarks>
            <para><b>TypeConverterAttribute:</b><see cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.LabelTextTypeConverter"/></para>
            </remarks>
            <seealso cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.LabelText"/>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseMultiConditionValidatorAction.Label4">
            <summary>
            Label4 provides text for the {LABEL4} token which can appear in ErrorMessage
            and SummaryErrorMessage properties. 
            </summary>
            <value>
            <para>The {LABEL4} token is intended to be replaced by the name of
            the a field that has the error message. The user can identify 
            a System.Web.UI.WebControls.Label or <see cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.LocalizableLabel"/> control. 
            It can also be entered directly into this object
            when there is no Label control or the text must be different.</para>
            <para>The <see cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.LabelText"/> class offers properties to alter the text of the Label control
            by changing case and stripping trailing characters like colon.</para>
            </value>
            <remarks>
            <para><b>TypeConverterAttribute:</b><see cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.LabelTextTypeConverter"/></para>
            </remarks>
            <seealso cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.LabelText"/>
        </member>
        <member name="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.MultiConditionValidatorAction">
            <summary>
            MultiConditionValidatorAction is a ValidatorAction that only supports the 
            <see cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.MultiCondition"/>.
            </summary>
            <remarks>
            <para>It does not introduce any new tokens or properties.</para>
            <para>You cannot assign to the Condition property. It always installs MultiCondition.</para>
            </remarks>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.MultiConditionValidatorAction.#ctor">
            <summary>
            Constructor with no parameters.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.MultiConditionValidatorAction.#ctor(System.Web.UI.Control)">
            <summary>
            Constructor that sets Owner property.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.MultiConditionValidatorAction.#ctor(System.Web.UI.Control,Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseCondition,Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseErrorFormatter,System.String,System.String)">
            <summary>
            Constructor that sets the Owner, Enabler, ErrorFormatter,
            ErrorMessage, and SummaryErrorMessage properties. Enabler 
            and ErrorFormatter can be passed as null to avoid setting them.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.MultiConditionValidatorAction.#ctor(System.Web.UI.Control,Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseCondition,Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseErrorFormatter,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Constructor that sets the Owner, Enabler, ErrorFormatter,
            ErrorMessage, SummaryErrorMessage, ErrorMessageLookupID,
            SummaryErrorMessageLookupID, and Group properties. Enabler
            and ErrorFormatter can be passed as null to avoid setting them.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.MultiConditionValidatorAction.CreateCondition">
            <returns><see cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.MultiCondition"/></returns>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.MultiConditionValidatorAction.CanSetCondition">
            <summary>
            Returns false. You cannot change the condition.
            </summary>
        </member>
        <member name="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.CountTrueConditionsValidatorAction">
            <summary>
            CountTrueConditionsValidatorAction is a ValidatorAction that only supports the 
            <see cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.CountTrueConditions"/>.
            </summary>
            <remarks>
            <para>It supports these tokens: {COUNT}, {COUNT:singular:plural}, {MINIMUM}, and {MAXIMUM}.</para>
            </remarks>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.CountTrueConditionsValidatorAction.#ctor">
            <summary>
            Constructor with no parameters.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.CountTrueConditionsValidatorAction.#ctor(System.Web.UI.Control)">
            <summary>
            Constructor that sets Owner property.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.CountTrueConditionsValidatorAction.#ctor(System.Web.UI.Control,Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseCondition,Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseErrorFormatter,System.String,System.String)">
            <summary>
            Constructor that sets the Owner, Enabler, ErrorFormatter,
            ErrorMessage, and SummaryErrorMessage properties. Enabler 
            and ErrorFormatter can be passed as null to avoid setting them.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.CountTrueConditionsValidatorAction.#ctor(System.Web.UI.Control,Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseCondition,Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseErrorFormatter,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Constructor that sets the Owner, Enabler, ErrorFormatter,
            ErrorMessage, SummaryErrorMessage, ErrorMessageLookupID,
            SummaryErrorMessageLookupID, and Group properties. Enabler
            and ErrorFormatter can be passed as null to avoid setting them.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.CountTrueConditionsValidatorAction.ReplaceMessageTokens(System.String,System.Boolean,Jenzabar.Portal.Framework.Web.UI.Controls.Validation.MessageType)">
            <summary>
            Server side token replacement.
            </summary>
            <remarks>
            <para>Here are the tokens defined:</para>
            <list type="table">
            <listheader>
            <term>Token and TokenType</term>
            <description>
            Description
            </description>
            </listheader>
            <item>
            <term>{COUNT} (Runtime)</term>
            <description>
            Number of true conditions. CountTrueConditions.fCount holds this value.
            </description>
            </item>
            <item>
            <term>{COUNT:singular:plural} (Runtime)</term>
            <description>
            Selects the singular or plural form from the number of true conditions.
            </description>
            </item>
            <item>
            <term>{MINIMUM} (Property)</term>
            <description>
            The Minimum property.
            </description>
            </item>
            <item>
            <term>{MAXIMUM} (Runtime)</term>
            <description>
            The Maximum property.
            </description>
            </item>
            </list>
            </remarks>
            <param name="pMsg">The message containing tokens.</param>
            <param name="pApplyAllTokens">When true, assign all token types. When false,
            assign all except runtime tokens.</param>
            <param name="pMessageType">Determines whether message is going to the validator
            or the ValidationSummary control.</param>
            <returns>The message with tokens replaced.</returns>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.CountTrueConditionsValidatorAction.DescribeTokens(System.Collections.Specialized.NameValueCollection)">
            <summary>
            Adds the {COUNT}, {COUNT:singular:plural}, {MINIMUM}, and {MAXIMUM} tokens.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.CountTrueConditionsValidatorAction.CreateCondition">
            <returns><see cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.CountTrueConditions"/></returns>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.CountTrueConditionsValidatorAction.DefineJavaScript(Jenzabar.Portal.Framework.Web.UI.Controls.Validation.VAMPage)">
            <summary>
            Adds the VAM_XVF.js script file to the page.
            </summary>
            <param name="pPage">The current VAMPage instance</param>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.CountTrueConditionsValidatorAction.CanSetCondition">
            <summary>
            Returns false. You cannot change the condition.
            </summary>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.CountTrueConditionsValidatorAction.TokenReplacementFunctionName">
            <summary>
            The client-side Token Replacement Function is "VAM_CntTrueReplToken".
            When you override this method, be sure your client-side function calls
            VAM_CntTrueReplToken.
            </summary>
            <remarks>
            <para>Updates the runtime tokens "{COUNT}" and "{COUNT:singular:plural}".
            See <see cref="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.CountTrueConditionsValidatorAction.ReplaceMessageTokens(System.String,System.Boolean,Jenzabar.Portal.Framework.Web.UI.Controls.Validation.MessageType)"/>
            for descriptions of these tokens.</para>
            </remarks>
        </member>
        <member name="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.CustomValidatorAction">
            <summary>
            CustomValidatorAction is a ValidatorAction that only supports the 
            <see cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.CustomCondition"/>.
            </summary>
            <remarks>
            <para>It does not introduce any new tokens or properties.</para>
            <para>You cannot assign to the Condition property. It always installs CustomCondition.</para>
            </remarks>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.CustomValidatorAction.#ctor">
            <summary>
            Constructor with no parameters.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.CustomValidatorAction.#ctor(System.Web.UI.Control)">
            <summary>
            Constructor that sets Owner property.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.CustomValidatorAction.#ctor(System.Web.UI.Control,Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseCondition,Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseErrorFormatter,System.String,System.String)">
            <summary>
            Constructor that sets the Owner, Enabler, ErrorFormatter,
            ErrorMessage, and SummaryErrorMessage properties. Enabler 
            and ErrorFormatter can be passed as null to avoid setting them.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.CustomValidatorAction.#ctor(System.Web.UI.Control,Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseCondition,Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseErrorFormatter,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Constructor that sets the Owner, Enabler, ErrorFormatter,
            ErrorMessage, SummaryErrorMessage, ErrorMessageLookupID,
            SummaryErrorMessageLookupID, and Group properties. Enabler
            and ErrorFormatter can be passed as null to avoid setting them.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.CustomValidatorAction.CreateCondition">
            <returns><see cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.CustomCondition"/></returns>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.CustomValidatorAction.CanEnableClientScript">
            <returns>True when Condition.CustomEvalFunctionName is assigned
            or Condition.OverrideClientSideEvaluation is used.</returns>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.CustomValidatorAction.CanSetCondition">
            <summary>
            Returns false. You cannot change the condition.
            </summary>
        </member>
        <member name="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.IgnoreConditionValidatorAction">
            <summary>
            IgnoreConditionValidatorAction is used by IgnoreConditionValidator.
            It uses the condition FixedResultCondition.
            </summary>
            <remarks>
            <para>Does not define any tokens.</para>
            <para>Overrides the IsValid property to set <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.VAMPage.IsValid">VAMPage.IsValid</see>.</para>
            </remarks>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.IgnoreConditionValidatorAction.#ctor">
            <summary>
            Constructor with no parameters.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.IgnoreConditionValidatorAction.#ctor(System.Web.UI.Control)">
            <summary>
            Constructor that sets Owner property.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.IgnoreConditionValidatorAction.#ctor(System.Web.UI.Control,Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseCondition,Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseErrorFormatter,System.String,System.String)">
            <summary>
            Constructor that sets the Owner, Enabler, ErrorFormatter,
            ErrorMessage, and SummaryErrorMessage properties. Enabler 
            and ErrorFormatter can be passed as null to avoid setting them.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.IgnoreConditionValidatorAction.#ctor(System.Web.UI.Control,Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseCondition,Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseErrorFormatter,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Constructor that sets the Owner, Enabler, ErrorFormatter,
            ErrorMessage, SummaryErrorMessage, ErrorMessageLookupID,
            SummaryErrorMessageLookupID, and Group properties. Enabler
            and ErrorFormatter can be passed as null to avoid setting them.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.IgnoreConditionValidatorAction.CreateCondition">
            <returns><see cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.FixedResultCondition"/></returns>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.IgnoreConditionValidatorAction.PrepareBody">
            <summary>
            Transfer IsValid to FixedResultCondition.Result.
            </summary>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.IgnoreConditionValidatorAction.IsValid">
            <summary>
            When setting IsValid to false, it also sets
            <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.VAMPage.IsValid">VAMPage.IsValid</see> to false.
            </summary>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.IgnoreConditionValidatorAction.CanSetCondition">
            <summary>
            Returns false. You cannot change the condition.
            </summary>
        </member>
        <member name="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.LabelText">
            <summary>
            LabelText describes the text used as a label for a field on the page. This class
            is used in various ValidatorAction and Validator control classes to support
            the "{LABEL}" tokens.
            </summary>
            <remarks>
            <para>By itself, a label is meaningless. However, a ValidatorAction's ErrorMessage
            or SummaryErrorMessage can contain a token that identifies the label, like "{LABEL}".
            This token replacement uses a LabelText object on the ValidatorAction to build
            the text.</para>
            <para>Often, users will write the label directly into the error message. The token is generally
            used when the error message comes from a standardized string for the site.</para>
            
            <para>LabelText offers several properties to provide the text:</para>
            <list type="bullet">
            <item>
            <description>
            LabelControlID - A control ID to a label field on the page. It must be in a common or parent
               naming container.
            </description>
            </item>
            <item>
            <description>
            LabelControl - An alternative to LabelControlID. A reference to a control that contains the label. 
               Set it when the control is outside the naming container or parent.
            </description>
            </item>
            <item>
            <description>
            Text - If assigned, its used as a label instead of LabelControl/LabelControlID.
            </description>
            </item>
            <item>
            <description>
            Case - Determines if the case needs to be changed. None, Upper, Lower, Proper Noun
            </description>
            </item>
            <item>
            <description>
            TrimTrailingSymbol - When true, if the label ends in any non-alpha numeric characters,
              they are stripped. For instance, "Label:" -> "Label".
            </description>
            </item>
            </list>
            </remarks>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.LabelText.#ctor(System.Web.UI.Control)">
            <summary>
            Constructor that sets the Owner property.
            </summary>
            <param name="pOwner"></param>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.LabelText.fLabelControlConnection">
            <summary>
            Storage for <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.LabelText.LabelControlConnection"/>.
            </summary>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.LabelText.fText">
            <summary>
            Storage for <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.LabelText.Text"/>.
            </summary>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.LabelText.fTextLookupID">
            <summary>
            Storage for <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.LabelText.TextLookupID"/>.
            </summary>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.LabelText.fLookedupText">
            <summary>
            When null, GetLookedUpText calls <see cref="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.StringLookup.StringIDLookup(System.String,System.String,System.String)">StringLookup.StringIDLookup</see> to
            get the Text property. This holds the result of that for multiple uses.
            </summary>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.LabelText.fCase">
            <summary>
            Storage for <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.LabelText.Case"/>.
            </summary>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.LabelText.fTrimTrailingSymbol">
            <summary>
            Storage for <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.LabelText.TrimTrailingSymbol"/>.
            </summary>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.LabelText.fOwner">
            <summary>
            Storage for <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.LabelText.Owner"/>.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.LabelText.GetText">
            <summary>
            GetText returns the text that is described by this class. It determines
            a text source, <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.LabelText.LabelControlID"/>, 
            <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.LabelText.LabelControl"/> or 
            <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.LabelText.Text"/> and applies the formatting
            of <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.LabelText.Case"/> and <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.LabelText.TrimTrailingSymbol"/>.
            </summary>
            <returns>The processed text based on all of the properties.</returns>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.LabelText.GetLookedUpText">
            <summary>
            Uses the String Lookup System to get the text associated
            with the <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.LabelText.Text"/>
            and <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.LabelText.TextLookupID"/>
            and sets fLookedupText.
            </summary>
            <returns>fLookedupText. If fLookedupText == null,
            it calls <see cref="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.StringLookup.StringIDLookup(System.String,System.String,System.String)">StringLookup.StringIDLookup</see> with TextLookupID first.</returns>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.LabelText.Apply(Jenzabar.Portal.Framework.Web.UI.Controls.Validation.LabelText)">
            <summary>
            Copies the properties from the source LabelText object into this object.
            </summary>
            <param name="pLabelText">The source LabelText object.</param>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.LabelText.LabelControlID">
            <summary>
            LabelControlID is an ID to another control that represents the label of the field.
            It is one of several ways to determine the text source. It can be overridden
            by <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.LabelText.LabelControl"/> and <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.LabelText.Text"/>.
            </summary>
            <value>
            <para>Use it when the label is in the same or any parent naming container.
            If assigned to an unknown controlID or one in an incorrect naming container,
            an exception will be thrown at runtime.</para>
            <para>It defaults to "".</para>
            <para>Stores its value in <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.LabelText.LabelControlConnection"/>.</para>
            </value>
            <remarks>
            <para><b>EditorAttribute:</b><see cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.LabelControlTypeEditor"/></para>
            </remarks>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.LabelText.LabelControl">
            <summary>
            Gets and sets a reference to a label control. It is an 
            alternative to <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.LabelText.LabelControlID"/> that
            allows the control to be anywhere on the page instead of the same naming container as the Owner control.
            </summary>
            <value>
            <para>When assigned, it overrides any setting LabelControlID.</para>
            <para>This can be a reference to the control anywhere on the page, not just in the same
            naming container.</para>
            <para>Stores its value in <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.LabelText.LabelControlConnection"/>.</para>
            </value>
            <exception cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.VAMException">When the control class is not validated
            by the <see cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.LabelTextControlConnection"/>.</exception>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.LabelText.LabelControlConnection">
            <summary>
            LabelControlConnection is used by 
            <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.LabelText.LabelControlID"/> and
            <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.LabelText.LabelControl"/> for storage
            and validation.
            </summary>
            <value>
            <para>Uses the class <see cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.LabelTextControlConnection"/>
            to validate the control assignment.</para>
            </value>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.LabelText.Text">
            <summary>
            Text is an alternative to using 
            <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.LabelText.LabelControlID"/> or 
            <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.LabelText.LabelControl"/>.
            When assigned, it is used as the text of the label.
            </summary>
            <value>
            <para>Use it when the label may not be clear enough or 
            has HTML formatting that shouldn't be shown.</para>
            <para>It defaults to "".</para>
            </value>
            <remarks>
            <para><b>EditorAttribute:</b><see cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.StringTypeEditor"/></para>
            </remarks>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.LabelText.TextLookupID">
            <summary>
            TextLookupID provides an alternative to <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.LabelText.Text"/>. 
            When used, the Text is looked up from another source, such as a resource 
            file or database to use as the Text.
            </summary>
            <value>
            <para>This allows you to define a common set of error messages so the programmer doesn't uniquely
            define them each time.
            It also provides localization based on the current culture.</para>
            <para>To use it, assign a key string that represents the Text that you want.
            This key will be used to search your data source for the correct string.</para>
            <para>When you are using the default Resource Manager system of VAM, it looks
            at the Name field of the ResX file for a match. The Value field of that row is returned.
            If no match is found OR this is blank, Text will be used.</para>
            <para>This property uses the StringGroup of 
            <see cref="F:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.StringLookup.cLabelGroupName">StringLookup.cLabelGroupName</see>.</para>
            <para>It defaults to "".</para>
            </value>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.LabelText.Case">
            <summary>
            Case determines if and how the text has case converted.
            </summary>
            <value>
            <para>Case conversion is  applied to the text result of LabelControlID, 
            LabelControl and Text property.</para>
            <para>It defaults to CaseConversion.None.</para>
            </value>
            <seealso cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.CaseConversion"/>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.LabelText.TrimTrailingSymbol">
            <summary>
            TrimTrailingSymbol removes any non-alphanumeric characters appearing at the end of 
            the text, such as spaces and colon.
            </summary>
            <value>
            <para>It follows international culture of VAMPage.CultureInfo
            to determine whether a character is alphanumeric or not.</para>
            <para>It defaults to false.</para>
            </value>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.LabelText.Owner">
            <summary>
            Owner is the ValidatorAction which owns this. It is set in the constructor.
            </summary>
        </member>
        <member name="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.LabelTextControlConnection">
            <summary>
            LabelTextControlConnection considers the System.Web.UI.WebControls.Label
            control to be valid.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.LabelTextControlConnection.#ctor(System.Web.UI.Control,System.Boolean,System.String,Jenzabar.Portal.Framework.Web.UI.Controls.Validation.INamingObject)">
            <summary>
            Constructor.
            </summary>
            <param name="pOwner"></param>
            <param name="pAllowNoControl"></param>
            <param name="pPropertyName"></param>
            <param name="pParentNamingObject"></param>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.LabelTextControlConnection.IsValidControl(System.Web.UI.Control)">
            <summary>
            IsValidControl returns true when pControl is a System.Web.UI.WebControls.Label.
            </summary>
        </member>
        <member name="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.CaseConversion">
            <summary>
            CaseConversion determines how a string should be converted to upper or lower case.
            It is used by LabelText.<see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.LabelText.Case"/>.
            </summary>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.CaseConversion.None">
            <summary>
            Leave the text unchanged
            </summary>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.CaseConversion.Lowercase">
            <summary>
            All lowercase
            </summary>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.CaseConversion.Uppercase">
            <summary>
            All uppercase
            </summary>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.CaseConversion.SentenceCase">
            <summary>
            The first letter is uppercase. The rest is lowercase. When there are multiple words,
            only the first is capitalized.
            </summary>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.CaseConversion.TitleCase">
            <summary>
            The first character of every word is capitalized. The remaining characters
            are lowercase
            </summary>
        </member>
        <member name="T:Jenzabar.Portal.Framework.Web.UI.Controls.MetaControls.ListBoxMetaControl">
            <summary>
            A meta-data aware version of the ListBox control
            </summary>
            <remarks>
            Meta-data aware controls can be used for rendering preference and settings based
            on meta data attributes.
            </remarks>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.MetaControls.ListBoxMetaControl.#ctor(Jenzabar.Portal.Framework.Web.UI.Controls.MetaControls.Attributes.ListBoxMetaControlAttribute,System.Object)">
            <summary>
            Constructs a ListBox meta control
            </summary>
            <param name="listBoxMetaControlAttribute">The attribute for the ListBox meta control</param>
            <param name="key">The key used to retrieve dynamic values from a NameValueProvider, typically the object to which the attribute is attached</param>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.MetaControls.ListBoxMetaControl.CreateChildControls">
            <summary>
            Builds children controls for this control
            </summary>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.MetaControls.ListBoxMetaControl.MetaControlAttribute">
            <summary>
            Gets or sets the attribute for the meta control
            </summary>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.MetaControls.ListBoxMetaControl.Name">
            <summary>
            Gets the name of the meta control
            </summary>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.MetaControls.ListBoxMetaControl.Value">
            <summary>
            Gets the value of the meta control
            </summary>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.MetaControls.ListBoxMetaControl.Scope">
            <summary>
            Gets the scope of the meta control
            </summary>
        </member>
        <member name="T:Jenzabar.Portal.Framework.Web.UI.Controls.PrincipalSelector">
            <summary>
            The principal selector is implemented as a group of tabs that all work together to allow the user to select users and groups.
            </summary>
        </member>
        <member name="T:Jenzabar.Portal.Framework.Web.UI.Controls.PSTwo">
            <summary>
            Summary description for PSTwo.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.PSTwo.#ctor">
            <summary>
            Constructor for PSTwo class
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.PSTwo.SaveViewState">
            <summary>
            Saves the state of the principal selector.
            </summary>
            <returns>the saved state for the principal selector</returns>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.PSTwo.LoadViewState(System.Object)">
            <summary>
            Loads viewstate for the principal selector
            </summary>
            <param name="savedState">the state information that was saved durring the SaveViewState call</param>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.PSTwo.OnPreRender(System.EventArgs)">
            <summary>
            Overrides the OnPreRender event of the base control
            </summary>
            <param name="e">EventArgs</param>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.PSTwo.IsInSelectedRole(Jenzabar.Portal.Framework.PortalPrincipal)">
            <summary>
            Determines if a User or Group is a member of one of the Groups that has been selected.
            </summary>
            <param name="principal">The User or Group to test for membership in a selected Group</param>
            <returns>true if the Usser or Group is a member of one of the selected Groups</returns>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.PSTwo.Render(System.Web.UI.HtmlTextWriter)">
            <summary>
            Overrides the base control's Render method
            </summary>
            <param name="writer">The HtmlTextWriter to render the control with</param>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.PSTwo.RaisePostBackEvent(System.String)">
            <summary>
            Sets SelectedPage and ViewMode properties 
            </summary>
            <param name="eventArgument">A string representing the PostBackEvent</param>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.PSTwo.RaisePostDataChangedEvent">
            <summary>
            needed for the IPostbackDataHandler interface
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.PSTwo.LoadPostData(System.String,System.Collections.Specialized.NameValueCollection)">
            <summary>
            Loads data for the postback event
            </summary>
            <param name="postDataKey">The key for the data in the postCollection</param>
            <param name="postCollection">The NameValueCollection that contains the postback data</param>
            <returns>Boolean</returns>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.PSTwo.ActiveContext">
            <summary>
            gets and sets the context that will be displayed by default when the principal selector is shown. If this is not set, the principal selector will use the context that the current page is in.
            </summary>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.PSTwo.ViewMode">
            <summary>
            True to display the PrincipalSelector in the "Advanced" view where the user can brows to other contexts, otherwise false, and the user con only select users and roles in the ActiveContext.
            </summary>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.PSTwo.Display">
            <summary>
            gets and sets the type of principal that will be displayed. Set this to users to display the list of users for the active context, or set it to Groups to display the list of roles that are defined for this context.
            </summary>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.PSTwo.RoleFilter">
            <summary>
            Member property - RoleFilter
            </summary>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.PSTwo.NameFilter">
            <summary>
            Member property - NameFilter
            </summary>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.PSTwo.SelectedPrincipals">
            <summary>
            Member property - SelectedPrincipals
            </summary>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.PSTwo.SelectedPage">
            <summary>
            ** zero based **
            </summary>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.PSTwo.ShowGlobalRoles">
            <summary>
            True to show the root context in the context tree, false to hide it.
            </summary>
        </member>
        <member name="T:Jenzabar.Portal.Framework.Web.UI.Controls.PSTwo.PrincipalRenderInfo">
            <summary>
            Used internaly to keep track of the groups and users that will be rendered.
            </summary>
        </member>
        <member name="T:Jenzabar.Portal.Framework.Web.BrokenPortlet">
            <summary>
            The portlet that gets loaded in the place of a real portlet when the real portlet cannot be loaded, and the user is an admin of the context that the portlet lives in.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.BrokenPortlet.#ctor">
            <summary>
            Creates a new instance of the BrokenPortlet class for use to replace a Portlet or PortletShortcut that could not be loaded.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.BrokenPortlet.GetCurrentScreen">
            <summary>
            Gets the only screen for this portlet.
            </summary>
            <returns>A new instance of the BrokenPortletView class</returns>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.BrokenPortlet.Maximizable">
            <summary>
            False, meaning that this portlet cannot be maximized (will not have the title clickable)
            </summary>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.BrokenPortlet.CanCustomize">
            <summary>
            False, meaning that this portlet cannot be customized (there will be no wrentch in the upper right corner)
            </summary>
        </member>
        <member name="T:Jenzabar.Portal.Framework.Web.BrokenPortletView">
            <summary>
            The only view for the portlet that is displayed when a user is an admin of a context and a portlet cannot be loaded.
            </summary>
        </member>
        <member name="T:Jenzabar.Portal.Framework.Web.UI.PortletViewBase">
            <summary>
            The base class for portlet views
            </summary>
            <remarks>
            A portlet view is either a portlet screen or overlay
            </remarks>
        </member>
        <member name="T:Jenzabar.Portal.Framework.Web.UI.PortalUserControlBase">
            <summary>
            A base class for user controls that are to be used within the portal
            </summary>
            <remarks>
            The base class provides methods and properties that make working with
            the control in a portal setting easier
            </remarks>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.PortalUserControlBase.SaveViewState">
            <summary>
            Overrides SaveViewState method in base class
            </summary>
            <returns>Object representing the viewstate that was saved</returns>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.PortalUserControlBase.IsFirstLoad">
            <summary>
            Gets whether or not the control is being loaded for the first time
            </summary>
            <remarks>
            Because controls in the portal may be loaded after the initial postback has
            already occured, IsPostBack cannot be used to determine if the current load
            is the first time that particular control has been loaded.
            
            IsFirstLoad uses viewstate to determine if the control was previously loaded.
            If a certain viewstate value is detected it means that the control must have
            been loaded previously to set the value, and therefore IsFirstLoad is false.
            </remarks>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.PortalUserControlBase.IsBrowserRefresh">
            <summary>
            Gets whether or not the current page instance was created in response to a user clicking the
            refresh button in their browser window after doing a postback
            </summary>
            <remarks>
            This property makes it easier to prevent events from being fired in response to a browser
            refresh. If the property returns true then event handling code (such as that in an
            button click event hanlder) should probably be bypassed to prevent unexpected behavior.
            
            This property will only return true if IsPostBack is true. (Page refreshes that occur when
            no previous postback has occured are not tracked.)
            </remarks>
            <example>
            private void btnMyButton_Click(object sender, System.EventArgs e)
            {
            	//If this event was fired due to the browser being refreshed, don't execute the code for the event handler
            	if(!this.IsBrowserRefresh)
            	{
            		//Execute code normally
            	}
            }
            </example>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.PortalUserControlBase.ParentPortlet">
            <summary>
            Gets or a reference to the parent portlet that this control is on.
            </summary>
            <remarks>The control must be placed on a portlet for this method to function properly.</remarks>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.PortalUserControlBase.PortalGlobal">
            <summary>
            Gets the HTTP application for the portal
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.PortletViewBase.#ctor">
            <summary>
            Constructor for PortalViewBase class
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.PortletViewBase.OnPortletDisplayModeChanged(Jenzabar.Portal.Framework.Web.UI.PortletDisplayModeEventArgs)">
            <summary>
            Method for portlet display mode change
            </summary>
            <param name="e">Event args for the portlet display mode change</param>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.PortletViewBase.GetPortletTransferURL(System.Type)">
            <summary>
            Gets a url for use in a HyperLink that will transfer the user to a portlet with matching type within the current context
            </summary>
            <param name="portletType">The <see cref="T:System.Type"/> of the portlet to find.</param>
            <returns>They URL to link directory to a portlet.</returns>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.PortletViewBase.PopulateBreadcrumbs(Jenzabar.Common.Web.UI.Controls.SuperBreadcrumbs)">
            <summary>
            Sets the breadcrumbs for the current portlet view
            </summary>
            <param name="breadcrumbs">A breadcrumb collection for the current portlet view</param>
            <returns>bool</returns>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.PortletViewBase.ChangeDisplayMode">
            <summary>
            Call this to trigger the Portlet's Display Mode Change event.
            </summary>
        </member>
        <member name="E:Jenzabar.Portal.Framework.Web.UI.PortletViewBase.PortletDisplayModeChanged">
            <summary>
            A custom event for Portlets - PortletDisplayModeEventHandler
            </summary>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.PortletViewBase.DisplayMode">
            <summary>
            Gets the mode that this portlet is being displayed in. This will indicate if the portlet is being displayed for printing or for normal viewing on a screen.
            </summary>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.PortletViewBase.ViewName">
            <summary>
            Gets the view name
            </summary>
            <remarks>
            Used for identifying a screen so that screen-specific
            actions can take place
            </remarks>
            <example>
            See IPortletView.ParentPortlet
            </example>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.PortletViewBase.DisplayName">
            <summary>
            Gets the globalized name to display to the user for this view.
            </summary>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.PortletViewBase.Session">
            <summary>
            Gets the session collection for a portlet
            </summary>
            <remarks>
            Providers a portal-safe version of the session object
            </remarks>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.PortletViewBase.IsMainView">
            <summary>
            True if the view is the "Main View" for the Portlet, otherwise false.
            </summary>
            <remarks>Override this property in your portlet views to return true for the Main View.</remarks>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.PortletViewBase.IsDefaultView">
            <summary>
            True if the view is the "Default View" for the Portlet, otherwise false.
            </summary>
            <remarks>Override this property in your portlet views to return true for the default view.</remarks>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.PortletViewBase.ShowDisplayName">
            <summary>
            if true - portlet name + display name will be shown in title bar
            if false - only portlet name will be shown
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.BrokenPortletView.#ctor">
            <summary>
            Creates a new instance of the BrokenPortletView class to be used for the only screen in BrokenPortlet.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.BrokenPortletView.Render(System.Web.UI.HtmlTextWriter)">
            <summary>
            Renders the markup for this control
            </summary>
            <param name="writer"></param>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.BrokenPortletView.RenderHint(System.Web.UI.HtmlTextWriter,Jenzabar.Portal.Framework.PortletDisplay)">
            <summary>
            Renders the hint for the reason why a portlet or shortcut could not be loaded.
            </summary>
            <param name="writer">The HtmlTextWriter to write the markup to.</param>
            <param name="portlet">The portlet we're rendering this hint for</param>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.BrokenPortletView.RenderErrorInfo(System.Web.UI.HtmlTextWriter)">
            <summary>
            Renders the exception information if avaliable. This method if non- functional outside of DEBUG compiles.
            </summary>
            <param name="writer">The <see cref="T:System.Web.UI.HtmlTextWriter"/> to write markup to.</param>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.BrokenPortletView.RenderInvalidShortcutHintText(System.Web.UI.HtmlTextWriter,Jenzabar.Portal.Framework.PortletDisplay)">
            <summary>
            Renders the text for the reason why a shortcut could not be loaded.
            </summary>
            <param name="writer">The HtmlTextWriter to write the markup to.</param>
            <param name="shortcut">The portlet we're rendering this hint for</param>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.BrokenPortletView.RenderInvalidPortletHintText(System.Web.UI.HtmlTextWriter,Jenzabar.Portal.Framework.PortletDisplay)">
            <summary>
            Renders text for the reason why a portlet could not be loaded.
            </summary>
            <param name="writer">The HtmlTextWriter to write the markup to.</param>
            <param name="portlet">The portlet we're rendering this hint for</param>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.BrokenPortletView.RaisePostBackEvent(System.String)">
            <summary>
            Called on postback when the user clicks the 'Remove' link.
            </summary>
            <param name="eventArgument"></param>
        </member>
        <member name="T:Jenzabar.Portal.Framework.Web.UI.PortletSettingsCollection">
            <summary>
            A collection of portlet settings for a particular portlet
            
            The collection class will automatically return the defaults for a setting
            if no values are returned from the data source
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.PortletSettingsCollection.#ctor(Jenzabar.Portal.Framework.Web.UI.PortletBase)">
            <summary>
            constructor
            </summary>
            <param name="obj">Portlet object</param>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.PortletSettingsCollection.GetValue(System.String,System.Boolean)">
            <summary>
            Need to be overriden!
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.PortletSettingsCollection.SetValue(System.String,System.Boolean,Jenzabar.Portal.Framework.NameValueDataSource[])">
            <summary>
            Need to be overriden!
            </summary>
        </member>
        <member name="T:Jenzabar.Portal.Framework.Web.UI.Controls.BreadcrumbSubHeader">
            <summary>
            Summary description for BreadcrumbSubHeader.
            </summary>
        </member>
        <member name="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.VAMException">
            <summary>
            VAMException provides a class for exceptions specific to VAM that aren't covered by
            any of those defined in .Net.
            </summary>
            <remarks>
            <para>Most exceptions generated within VAM use this class. System.ArgumentException
            and System.FormatException are used where applicable.</para>
            <para>VAMException does not extend System.Exception. Errors are always determined only
            by the Message property.</para>
            </remarks>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.VAMException.#ctor(System.String)">
            <summary>
            Initializes a new instance of VAMException
            with the Message property.
            </summary>
        </member>
        <member name="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.VAMPage">
            <summary>
            VAMPage defines page level properties and behaviors. Many of its properties
            customize the user interface.
            </summary>
            <remarks>
            <para>
            One VAMPage instance gets created for each <see cref="T:System.Web.UI.Page"/>. It is defined in
            <see cref="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.Globals.GetVAMPage">Globals.GetVAMPage</see> and is stored in HttpContext.Current.Items["VAMPage"].
            </para>
            <para>Due to the design of ASP.NET, when Server.Transfer is called, HttpContext.Current.Items
            is not refreshed. The page designer must use <see cref="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.Globals.BeforeServerTransfer">Globals.BeforeServerTransfer</see>
            and <see cref="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.Globals.AfterServerTransfer(System.Web.UI.Page)">Globals.AfterServerTransfer</see>.</para>
            <para>Here are the features of this class:</para>
            <list type="bullet">
            <item>
            <description>Maintains a list of all Action instances on this page.
            All Actions automatically register themselves into the page as they are created.</description>
            </item>
            <item>
            <description>Between the Page's OnPreRender and Render methods, it creates
            all client-side JavaScript for the Actions and the page level properties.</description>
            </item>
            <item>
            <description>Maintains all page level properties. The <see cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.Globals"/> 
            class supplies default values for most of the page level properties.</description>
            </item>
            <item>
            <description>Provides the page level <see cref="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.VAMPage.Validate"/> 
            methods and <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.VAMPage.IsValid"/> property.
            </description>
            </item>
            <item>
            <description>Provides the <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.VAMPage.Licensing"/> 
            property for Redistribution Licenses.
            </description>
            </item>
            </list>
            </remarks>
            <seealso cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.Globals"/>
            <seealso cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseAction"/>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.VAMPage.fInDesignMode">
            <summary>
            fInDesignMode tells other methods that we're in design mode and should limit
            the behavior of calls to VAMPage.
            NOTE: fOwnerPage will be null in design mode.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.VAMPage.#ctor">
            <summary>
            Initializes a new instance of <see cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.VAMPage"/>.
            </summary>
            <remarks>
            This class should only be instantiated by <see cref="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.Globals.GetVAMPage">Globals.GetVAMPage</see>.
            This constructor sets fInDesignMode and fOwnerPage (both from HttpContext.Current).
            </remarks>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.VAMPage.fLicensing">
            <summary>
            Storage for <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.VAMPage.Licensing"/>.
            </summary>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.VAMPage.fActions">
            <summary>
            Storage for <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.VAMPage.Actions"/>.
            </summary>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.VAMPage.fCultureInfo">
            <summary>
            Storage for <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.VAMPage.CultureInfo"/>.
            </summary>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.VAMPage.fBrowser">
            <summary>
            Storage for <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.VAMPage.Browser"/>.
            </summary>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.VAMPage.fOwnerPage">
            <summary>
            Storage for <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.VAMPage.OwnerPage"/>.
            </summary>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.VAMPage.fHasValidatorAction">
            <summary>
            fHasValidatorAction is true when one or more ValidatorActions are registered
            in the Actions collection.
            </summary>
            <remarks>
            <para>Automatically set when the Action is passed into <see cref="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.VAMPage.AddAction(Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseAction)"/>.</para>
            <para>When true, validation setup code, 
            <see cref="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.VAMPage.DefineValidation"/>, is run.</para>
            </remarks>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.VAMPage.fHasAutoRunActions">
            <summary>
            fHasAutoRunActions is true when one or more Actions.AutoRunAction returns true
            in the Actions collection.
            </summary>
            <remarks>
            <para>Automatically set when the Action is passed into <see cref="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.VAMPage.AddAction(Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseAction)"/>.</para>
            <para>When true, <see cref="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.VAMPage.PagePreRegister(System.Object,System.EventArgs)"/> calls 
            <see cref="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.VAMPage.AutoRunActions"/>.</para>
            </remarks>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.VAMPage.fHasFieldStateActions">
            <summary>
            When true, FieldStateActions have been installed.
            </summary>
            <remarks>
            <para>Automatically set when the FieldStateAction is passed into <see cref="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.VAMPage.AddAction(Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseAction)"/>.</para>
            </remarks>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.VAMPage.fSubmitControls">
            <summary>
            fSubmitControls is a list of all <see cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.RegisteredSubmitControl"/> instances
            that define submit-type controls.
            </summary>
            <remarks>
            Populated by calls to <see cref="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.VAMPage.RegisterSubmitControl(System.Web.UI.Control,System.String)"/>.
            </remarks>
            <seealso cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.RegisteredSubmitControl"/>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.VAMPage.fBlinkTime">
            <summary>
            Storage for <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.VAMPage.BlinkTime"/>
            </summary>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.VAMPage.fBlinkOnChange">
            <summary>
            Storage for <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.VAMPage.BlinkOnChange"/>.
            </summary>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.VAMPage.fBlinkOnSubmit">
            <summary>
            Storage for <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.VAMPage.BlinkOnSubmit"/>.
            </summary>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.VAMPage.fFocusOnChange">
            <summary>
            Storage for <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.VAMPage.FocusOnChange"/>.
            </summary>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.VAMPage.fFocusOnSubmit">
            <summary>
            Storage for <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.VAMPage.FocusOnSubmit"/>.
            </summary>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.VAMPage.fShowAlertOnChange">
            <summary>
            Storage for <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.VAMPage.ShowAlertOnChange"/>.
            </summary>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.VAMPage.fShowAlertOnSubmit">
            <summary>
            Storage for <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.VAMPage.ShowAlertOnSubmit"/>.
            </summary>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.VAMPage.fControlErrorCssClass">
            <summary>
            Storage for <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.VAMPage.ControlErrorCssClass"/>.
            </summary>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.VAMPage.fAlertTemplate">
            <summary>
            Storage for <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.VAMPage.AlertTemplate"/>.
            </summary>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.VAMPage.fAlertTemplateLookupID">
            <summary>
            Storage for <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.VAMPage.AlertTemplateLookupID"/>.
            </summary>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.VAMPage.fAlertErrorLeadText">
            <summary>
            Storage for <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.VAMPage.AlertErrorLeadText"/>.
            </summary>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.VAMPage.fAlertErrorListStyle">
            <summary>
            Storage for <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.VAMPage.AlertErrorListStyle"/>.
            </summary>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.VAMPage.fLabelTokenCssClass">
            <summary>
            Storage for <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.VAMPage.LabelTokenCssClass"/>
            </summary>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.VAMPage.fPropertyTokenCssClass">
            <summary>
            Storage for <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.VAMPage.PropertyTokenCssClass"/>
            </summary>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.VAMPage.fRuntimeTokenCssClass">
            <summary>
            Storage for <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.VAMPage.RuntimeTokenCssClass"/>
            </summary>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.VAMPage.fSummaryLabelTokenCssClass">
            <summary>
            Storage for <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.VAMPage.SummaryLabelTokenCssClass"/>
            </summary>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.VAMPage.fSummaryPropertyTokenCssClass">
            <summary>
            Storage for <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.VAMPage.SummaryPropertyTokenCssClass"/>
            </summary>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.VAMPage.fSummaryRuntimeTokenCssClass">
            <summary>
            Storage for <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.VAMPage.SummaryRuntimeTokenCssClass"/>
            </summary>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.VAMPage.fDefaultGroup">
            <summary>
            Storage for <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.VAMPage.DefaultGroup"/>
            </summary>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.VAMPage.fInitialFocusControl">
            <summary>
            Storage for <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.VAMPage.InitialFocusControl"/>.
            </summary>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.VAMPage.fConfirmMessage">
            <summary>
            Storage for <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.VAMPage.ConfirmMessage"/>.
            </summary>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.VAMPage.fConfirmMessageGroup">
            <summary>
            Storage for <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.VAMPage.ConfirmMessageGroup"/>.
            </summary>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.VAMPage.fCustomSubmitFunctionName">
            <summary>
            Storage for <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.VAMPage.CustomSubmitFunctionName"/>.
            </summary>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.VAMPage.fUseOnResetEventHandler">
            <summary>
            Storage for <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.VAMPage.UseOnResetEventHandler"/>.
            </summary>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.VAMPage.fDisableSubmitButtons">
            <summary>
            Used by <see cref="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.VAMPage.RegisterSubmitButtonToDisable(System.Web.UI.Control)"/> to maintain the controls added.
            </summary>
            <remarks>
            <para>These controls will be added to the client-side global gVAMSubmitIDs, by their clientID.
            When defined, the VAM_DisableSubmit function is called from the form's onsubmit to
            prevent submitting twice.</para>
            </remarks>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.VAMPage.fPostValidationUpdateScript">
            <summary>
            Storage for <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.VAMPage.PostValidationUpdateScript"/>.
            </summary>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.VAMPage.fIsValid">
            <summary>
            Storage for <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.VAMPage.IsValid"/>.
            </summary>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.VAMPage.fHasValidated">
            <summary>
            Storage for <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.VAMPage.HasValidated"/>.
            </summary>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.VAMPage.fHasValidationSummaries">
            <summary>
            When true, <see cref="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.VAMPage.AddValidationSummary(Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseValidationSummary)"/> was called 
            and there is at least on ValidationSummary.
            </summary>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.VAMPage.fFieldStateControllers">
            <summary>
            fFieldStateControllers is a list of BaseFieldStateController subclasses.
            </summary>
            <value>
            <para>They are added with <see cref="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.VAMPage.AddFieldStateControllers(Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseFieldStateController)"/> 
            (called by the <see cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseFieldStateController"/> constructor).</para>
            <para>This list is created because the ValidateGroup method is called before
            the OnPreRender phase is run. OnPreRender causes BaseFieldStateController to add FieldStateActions
            and ValidateGroup needs to run those actions early.</para>
            <para>When null, there are no FieldStateControllers.</para>
            </value>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.VAMPage.AddAction(Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseAction)">
            <summary>
            When an Action is constructed, it's immediate added to VAMPage through this method.
            Should be called as the Action is setup.
            </summary>
            <remarks>
            <para>The object is added to <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.VAMPage.Actions"/>.</para>
            <para>As it reviews the Action class and its properties, it may set the following fields
            to true: <see cref="F:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.VAMPage.fHasValidatorAction"/>,
            <see cref="F:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.VAMPage.fHasAutoRunActions"/>, or
            <see cref="F:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.VAMPage.fHasFieldStateActions"/>.</para>
            <para>An Action object may be later eliminated from the Actions collection
            if its SetupComplete is false (the Owner did not run OnPreRender), the Owner lacks
            an ID (cannot access it on the client-side), or Owner.Visible is false (doesn't generate
            any client side HTML).</para>
            </remarks>
            <param name="pAction">The newly created Action class associated with this page.</param>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.VAMPage.AddValidationSummary(Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseValidationSummary)">
            <summary>
            AddValidationSummary must be called by any ValidationSummary control
            to register it with VAMPage.
            </summary>
            <remarks>
            This method calls <see cref="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.VAMPage.DefineCommonJavaScript"/>
            and sets <see cref="F:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.VAMPage.fHasValidationSummaries"/> to true.
            </remarks>
            <param name="pValidationSummaryControl">The ValidationSummary control instance.</param>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.VAMPage.AddFieldStateControllers(Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseFieldStateController)">
            <summary>
            AddFieldStateControllers adds a <see cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseFieldStateController"/>
            to <see cref="F:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.VAMPage.fFieldStateControllers"/>.
            </summary>
            <remarks>
            <para>Called automatically by the constructor of the BaseFieldStateController.</para>
            </remarks>
            <param name="pFSController">The FieldStateController to add.</param>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.VAMPage.RegisterWithPage">
            <summary>
            RegisterWithPage attaches VAMPage to the <see cref="T:System.Web.UI.Page"/> 
            instance so that the Page calls <see cref="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.VAMPage.PagePreRegister(System.Object,System.EventArgs)"/>
            between the OnPreRender and Render stages.
            </summary>
            <remarks>
            <para>The Page class does not actually have an event handler called between
            its PreRender and Render methods. We cannot ask the developer to override
            the page's PreRender or Render methods to call this. Instead, this implements
            a hack. It finds the last control in the tree and hooks onto it's PreRender event handler.</para>
            <para>Every Action calls this from its PrepareBody method. This allows the Action
            to be setup and know that its enabled before calling this method.</para>
            </remarks>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.VAMPage.fRegisteredWithPage">
            <summary>
            Flag to prevent RegisterWithPage from running multiple times.
            </summary>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.VAMPage.fForm">
            <summary>
            fForm is a reference to the HtmlForm object on the page. 
            </summary>
            <remarks>
            It is captured by <see cref="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.VAMPage.FindLastControl(System.Web.UI.Control,System.Boolean)"/>.
            If it remains null and the user wants the onReset event handler,
            the user must call <see cref="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.VAMPage.SetupOnResetEvent(System.Web.UI.HtmlControls.HtmlForm)"/> with a reference
            to the HtmlForm object on the page.
            </remarks>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.VAMPage.FindLastControl(System.Web.UI.Control,System.Boolean)">
            <summary>
            This recursive method finds the last control on the page that isn't an HtmlForm.
            </summary>
            <remarks>
            <para>Called by <see cref="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.VAMPage.RegisterWithPage"/>.</para>
            <para>We hope to find one after HtmlForm in the same Controls list. This often happens
            where a LiteralControl containing "&lt;/body&gt;&lt;/html&gt;" is after the form. However,
            when the header has scripting or asp tags (&lt;% %&gt;), there is no LiteralControl.
            If the &lt;body&gt; tag has runat=server, it may be the last on the page and we cannot attach
            to that since its PreRender is run FIRST.</para>
            <para>Rule: We cannot use the PreRender event of the HtmlForm or any controls list with
            only one control unless its below the HtmlForm or on the HtmlGenericControl with tag = "body".</para>
            </remarks>
            <param name="pParent">The control or Page whose children being searched.</param>
            <param name="pFormIsParent">Only set to true when pParent in the HtmlForm object.</param>
            <returns>The control found. This control will have its PreRender event attached
            to PagePreRegister.</returns>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.VAMPage.PagePreRegister(System.Object,System.EventArgs)">
            <summary>
            PagePreRegister writes JavaScript and HTML into the page.
            </summary>
            <remarks>
            <para>Called by the last control on the page during its PreRender event to be sure
            its called after all VAM controls' OnPreRender methods.</para>
            <para>It performs these actions, except in design mode:</para>
            <list type="bullet">
            <item>
            <description>Calls <see cref="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.VAMPage.DefineCommonJavaScript"/></description>
            </item>
            <item>
            <description>Calls <see cref="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.VAMPage.DefineValidation"/></description>
            </item>
            <item>
            <description>Calls <see cref="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.VAMPage.AutoRunActions"/></description>
            </item>
            <item>
            <description>Calls <see cref="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.VAMPage.DefineClientSideActions"/></description>
            </item>
            <item>
            <description>Calls <see cref="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.VAMPage.SetupOnResetEvent(System.Web.UI.HtmlControls.HtmlForm)"/></description>
            </item>
            </list>
            </remarks>
            <param name="pSender">Standard PreRender event handler passes the calling object. Ignored.</param>
            <param name="pArgs">Standard PreRender event handler arguments. Ignored.</param>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.VAMPage.DefineCommonJavaScript">
            <summary>
            If the browser supports JavaScript, this writes the standard VAM script file, VAM.js.
            </summary>
            <remarks>
            <para>Uses <see cref="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.Globals.RegisterGlobalScriptFile(System.Web.UI.Page)">Globals.RegisterGlobalScriptFile</see>.</para>
            </remarks>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.VAMPage.DefineValidation">
            <summary>
            DefineValidation creates the client-side globals that represent the page-level properties.
            It defines the VAM_Group hidden field (for exchanging the group name that was submitted)
            and the JavaScript "return VAM_ValOnSubmit();" that appears in the &lt;form&gt;'s onsubmit event.
            </summary>
            <remarks>
            <para>Only called when fHasValidatorAction is true.</para>
            <para>All globals are defined in one script block using at the starting &lt;form&gt; tag.</para>
            </remarks>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.VAMPage.BlinkModeToInt(Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BlinkMode)">
            <summary>
            BlinkModeToInt converts a BlinkMode type to an integer representing how many blinks.
            </summary>
            <remarks>
            <para>Used by <see cref="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.VAMPage.DefineValidation"/> to convert the page-level BlinkMode
            properties for use by the client-side scripts which expect:</para>
            <list type="bullet">
            <item>
            <description>0 - off</description>
            </item>
            <item>
            <description>-1 - on</description>
            </item>
            <item>
            <description>Number representing value for the rest.</description>
            </item>
            </list>
            </remarks>
            <param name="pBlinkMode">A BlinkMode value to convert.</param>
            <returns>The converted value.</returns>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.VAMPage.AutoRunActions">
            <summary>
            AutoRunActions looks through the Actions collection for actions with AutoRunAction
            and calls DoAction on them.
            </summary>
            <remarks>
            It allows actions to do their work server side as part of setting up a page.
            For example, FieldStateAction needs to setup its ControlToChange so the client
            side page initially has the correct look.
            </remarks>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.VAMPage.DefineClientSideActions">
            <summary>
            DefineClientSideActions goes through the Actions list and prepares their client-side JavaScript. 
            </summary>
            <remarks>
            <para>It does these things:</para>
            <list type="bullet">
            <item>
            <description>Creates a JavaScript array called gVAMActions.</description>
            </item>
            <item>
            <description>Creates a call to VAM_InitActions.</description>
            </item>
            <item>
            <description>Creates JavaScript VAM objects for each action and adds it to gVAMActions.</description>
            </item>
            <item>
            <description>Adds calls to VAM_UpdateOnClick for each element in fSubmitControls.</description>
            </item>
            <item>
            <description>Supports InitialFocusControl with a call to VAM_SetFocus.</description>
            </item>
            </list>
            <para>gVAMActions provides a single list for ALL actions. JavaScript will reference
            individual items through the indexes of the items in the array.</para>
            </remarks>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.VAMPage.DefineDisableSubmit">
            <summary>
            Creates the client-side code used for the feature that disables submit buttons
            upon submission.
            </summary>
            <remarks>
            <para>Adds each control registered with <see cref="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.VAMPage.RegisterSubmitButtonToDisable(System.Web.UI.Control)"/>
            into a client-side array, gVAMSubmitIDs. The clientIDs are added into the array.</para>
            <para>If there are no validators on the page, it sets up the onsubmit event handler
            to use VAM_DisableSubmit. When there are validators on the page, the VAM_TryToSubmit
            function calls VAM_DisableSubmit automatically.</para>
            </remarks>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.VAMPage.ValidateGroup(System.String)">
            <summary>
            ValidateGroup instructs any ValidationActions to validate (by calling DoAction).
            It sets <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.VAMPage.IsValid"/>
            and <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.VAMPage.HasValidated"/>.
            </summary>
            <remarks>
            <para>It takes a group name to validate. If pGroup is "*", it validates all.</para>
            <para>Usually, you'll use <see cref="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.VAMPage.Validate"/> method to retrieve the group from
            the hidden VAM_Group field.</para>
            <para>It sets the state of IsValid to true when all validators evaluate their conditions
            to true. Otherwise, IsValid is false.</para>
            <para>It sets HasValidated to true.</para>
            </remarks>
            <param name="pGroup">The group name of validators to validate. Pass "*" for all validators.</param>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.VAMPage.Validate">
            <summary>
            Validate validates the validators matching the group name that submitted the page.
            </summary>
            <remarks>
            <para>This method simply calls <see cref="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.VAMPage.GetSubmitGroup"/>
            and passes the result to <see cref="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.VAMPage.ValidateGroup(System.String)"/>.</para>
            <para>Normally a page developer does not need to call this directly because
            any button registered with VAMPage (including all VAM buttons) calls ValidateGroup
            automatically. However, you may want to call it yourself when you need to prepare data on the page before
            Validate or ValidateGroup runs. You can call Validate multiple times during
            a post back.</para>
            </remarks>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.VAMPage.GetSubmitGroup">
            <summary>
            GetSubmitGroup returns the group name that caused the submission.
            If not found (not on a post back), it returns "*" which means 'all groups'.
            </summary>
            <remarks>
            The Group Name is stored in the hidden field whose ID is "VAM_Group".
            The client side scripts assign it on any submit action.
            </remarks>
            <returns>The group name</returns>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.VAMPage.RegisterSubmitControl(System.Web.UI.Control,System.String)">
            <summary>
            RegisterSubmitControl makes a control's onclick event run client-side validation code
            in addition to whatever else it does.
            </summary>
            <remarks>
            <para>The VAM buttons and submit controls all call this automatically. Any other submit
            control should call this explicitly to attach VAM's onclick code.</para>
            <para>Microsoft's built in buttons automatically define onclick code including
            __doPostBack (via GetPostBackClientEvent) and Page_ClientValidate()
            (via the internal function System.Web.UI.Util.GetClientValidateEvent.)
            VAM must play well with the Microsoft controls that do this.
            This method must modify the client-side onclick event.</para>
            <para>Microsoft chose to generate the onclick event code inside the Render
            method. It does not merge any Attributes["onclick"] code. So the user
            can end up with two onclick events. The browser only runs the first
            which is always the validation code.</para>
            <para>We need to override this and it can only happen after Render.
            So we write client-side javascript into the page to modify the onclick
            script as the page is loaded.
            The function VAM_UpdateOnClick handles this.</para>
            <para>RegisterSubmitControl's job is to set up this client-side code.
            pControl must have the final ClientID it will use on the client side.
            So make sure its ID property has its correct value.</para>
            <para>pGroup will be used to run validators with a matching value in Group including "".
            You can pass pGroup = "*" to run through all validators regardless of the Group.</para>
            <para>VAM has subclassed the following controls to call this automatically:
            Button, ImageButton, LinkButton, HtmlButton, HtmlInputButton, HtmlInputImage
            Use this when you cannot switch your button to one of the subclassed values.</para>
            </remarks>
            <param name="pControl">The submit control to be registered.</param>
            <param name="pGroup">The group name that is associated with this submit control.</param>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.VAMPage.RegisterSubmitControl(System.Web.UI.Control,System.String,System.Boolean,System.Boolean)">
            <summary>
            RegisterSubmitControl makes a control's onclick event run client-side
            and optionally server-side validation code in addition to whatever else it does.
            </summary>
            <remarks>
            <para>An overload that adds the SetupServerValidate parameter. Use this new
            parameter to indicate if you want to setup the Click event handler to
            run the Validate method. Only set it to true when calling this from Page_Load.
            Any later phase of page generation, including click-events, is too late.</para>
            <para>Adds the Click event handler for these controls and their subclasses:
            System.Web.UI.WebControls.Button,
            System.Web.UI.WebControls.LinkButton, System.Web.UI.WebControls.ImageButton,
            System.Web.UI.HtmlControls.HtmlButton, System.Web.UI.HtmlControls.HtmlInputButton,
            and System.Web.UI.HtmlControls.HtmlInputImage.</para>
            <para>It uses <see cref="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.VAMPage.RegisteredControlClick(System.Object,System.EventArgs)"/>
            to receive the click event.</para>
            </remarks>
            <param name="pControl">The submit control to be registered.</param>
            <param name="pGroup">The group name that is associated with this submit control.</param>
            <param name="pSetupServerValidate">When true, setup the Click event
            to call the <see cref="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.VAMPage.RegisteredControlClick(System.Object,System.EventArgs)"/> event handler.</param>
            <param name="pInPreRender">When true, you are calling this from the PreRender phase of your control
            or page. When false, you are calling it from the initialization or load phase of the control
            or page.</param>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.VAMPage.RegisteredControlPreRendered(System.Object,System.EventArgs)">
            <summary>
            Called as the OnPreRender event handler for each registered submit button to 
            confirm it is used.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.VAMPage.RegisteredControlClick(System.Object,System.EventArgs)">
            <summary>
            Event handler for click events on any registered submit control.
            </summary>
            <remarks>
            <para>If the control's CausesValidation property is true, it calls 
            <see cref="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.VAMPage.ValidateGroup(System.String)"/>.</para>
            </remarks>
            <param name="pSender">The control that fires this event.</param>
            <param name="pArgs">Not used. Standard System.EventArgs.</param>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.VAMPage.RegisteredImageControlClick(System.Object,System.Web.UI.ImageClickEventArgs)">
            <summary>
            Implements the event handler for ImageButton and HtmlInputImage controls.
            (<see cref="T:System.Web.UI.ImageClickEventHandler"/>)
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.VAMPage.ControlCausesValidation(System.Web.UI.Control)">
            <summary>
            Determines if pControl has a CausesValidation property and returns its value. If
            it does not have CausesValidation, it returns true.
            </summary>
            <remarks>
            <para>Each of Microsoft's submit controls defines their own CausesValidation property.
            This knows about each of those classes and properties. In addition, it supports
            any control that implements <see cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.IVAMSubmitControl"/>.</para>
            </remarks>
            <param name="pControl">The control to evaluate.</param>
            <returns>The value of the CausesValidation property on the control or true.</returns>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.VAMPage.RegisterChildSubmitControls(System.Web.UI.Control,System.String,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            If you have a control that has child submit controls that are not registered
            with VAM, use this to update all of them.
            </summary>
            <remarks>
            <para>This calls <see cref="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.VAMPage.RegisterSubmitControl(System.Web.UI.Control,System.String)"/>
            on each submit button found in the child list of the control passed in.
            If you select ShallowSearch = false, it looks through all controls in the tree
            below the ParentControl. If you select ShallowSearch = true, it only looks
            at the immediate children.</para>
            <para>This method considers the following to be submit controls including
            subclasses but not including VAM's own controls: System.Web.UI.WebControls.Button,
            System.Web.UI.WebControls.LinkButton, System.Web.UI.WebControls.ImageButton,
            System.Web.UI.HtmlControls.HtmlButton, System.Web.UI.HtmlControls.HtmlInputButton,
            and System.Web.UI.HtmlControls.HtmlInputImage.</para>
            <para>Note: If you have already used RegisterSubmitControl on any of the children,
            they will be registered twice and will setup the JavaScript twice. So avoid that.</para>
            </remarks>
            <param name="pParentControl">The submit control whose children submit controls
            must be registered.</param>
            <param name="pGroup">The group name that is associated with all of these submit controls.</param>
            <param name="pSetupServerValidate">When true, setup the Click event
            to call the <see cref="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.VAMPage.RegisteredControlClick(System.Object,System.EventArgs)"/> event handler.</param>
            <param name="pInPreRender">When true, you are calling this from the PreRender phase of your control
            or page. When false, you are calling it from the initialization or load phase of the control
            or page.</param>
            <param name="pShallowSearch">When true, only update the immediate children; when false,
            update all children in the tree.</param>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.VAMPage.GetValidateGroupScript(System.String)">
            <summary>
            GetValidateGroupScript is a function for page developers that returns a string
            which can be used in a client-side onclick event of a button. 
            </summary>
            <remarks>
            <para>Generally
            buttons can use RegisterSubmitControl. But when a button is a Reset or Clear command,
            it never submits and fires the VAM_TryToSubmit client-side function.
            This returns a string that calls VAM_TryToSubmit with a group name.</para>
            <para>For example:</para>
            <para><c>Button1.Attributes["onclick"] = Jenzabar.Portal.Framework.Web.UI.Controls.Validation.Globals.Page.GetValidateGroupScript("Login");</c></para>
            </remarks>
            <param name="pGroupName">The group name that is associate with the submit action.</param>
            <returns>A JavaScript string to use with an onclick event.</returns>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.VAMPage.SetupOnResetEvent(System.Web.UI.HtmlControls.HtmlForm)">
            <summary>
            SetupOnResetEvent hooks up the HtmlForm's onreset event to call the client side VAM_OnReset.
            </summary>
            <param name="pForm">The HtmlForm on the page. Pass null to let VAM search for it.</param>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.VAMPage.FindHtmlForm(System.Web.UI.Control)">
            <summary>
            Support function for <see cref="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.VAMPage.SetupOnResetEvent(System.Web.UI.HtmlControls.HtmlForm)"/> which
            searches for the HtmlForm on the page recursively.
            </summary>
            <param name="pControl">Pass the Page.</param>
            <returns>The HtmlForm on the page.</returns>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.VAMPage.GetRunAllFSCScript">
            <summary>
            GetRunAllFSCScript returns a string containing JavaScript that when called, runs the action
            of all FieldStateControllers on the page. 
            </summary>
            <remarks>
            Users will hookup this string into their JavaScript code
            when they are developing a page that takes actions outside of VAM's scripting and need the FieldStateControllers
            to update controls based on the changes made in their scripts.
            </remarks>
            <returns>JavaScript that runs all field state controllers.</returns>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.VAMPage.RegisterSubmitButtonToDisable(System.Web.UI.Control)">
            <summary>
            Adds a submit button or other control to a list that will be disabled on the client-side
            when the user submits. This prevents double submissions.
            </summary>
            <remarks>
            <para>Controls are written to the client-side array gVAMSubmitIDs, by their client ID.
            The form's onsubmit event handler will invoke VAM_DisableSubmit().</para>
            <para>Most browsers support the ability to disable a Button. IE supports the ability
            to disable a hyperlink. Most others do not. So do not expect 100% reliability
            when you choose something other than a button.</para>
            </remarks>
            <param name="pControl">A button or other control to disable upon submission.</param>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.VAMPage.DescribeProperties(System.Boolean)">
            <summary>
            DescribeProperties is useful for the end user to debug the property settings that they can set.
            </summary>
            <remarks>
            <para>If you want to dump the property settings to the current page, consider
            using Response.Write() in your Page_Load method or add a LiteralControl to your page
            and assign this method's result to its text.</para>
            </remarks>
            <param name="pHTML">When true, formatted for HTML pages. When false, it uses carriage returns
            to separate the properties.</param>
            <returns>A string whose format depends on the pHTML parameter.</returns>
            <example>
            <para>Using Response.Write in Page_Load:</para>
            Response.Write(Jenzabar.Portal.Framework.Web.UI.Controls.Validation.Globals.Page.DescribeProperties(true))
            </example>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.VAMPage.UsesSummaryErrorMessages">
            <summary>
            UsesSummaryErrorMessages returns true when either ShowAlertOnSubmit or
            there are validation summary controls on the page. It is used by
            BaseValidatorAction to determine if it show create a summary error message for the client-side.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.VAMPage.IsScriptBlockRegistered(System.String)">
            <summary>
            IsScriptBlockRegistered is a user function to be called from within various DefineJavaScript()
            methods throughout VAM. Call it with a key name that uniquely identifies the script that you
            want to register. If it returns false, follow up by calling 
            <see cref="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.VAMPage.RegisterScriptBlock(System.String,System.String)"/> to register
            your script.
            </summary>
            <remarks>
            <para>This is a wrapper around 
            <see cref="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.RegisterScriptsClasses.RegisterScripts.IsClientScriptBlockRegistered(System.Web.UI.Page,System.String)">RegisterScripts.IsClientScriptBlockRegistered</see>
            which itself is a replacement for System.Web.UI.Page.IsClientScriptBlockRegistered.</para>
            </remarks>
            <param name="pKey">The unique identifier associated with the script to determine
            if a script with this key has already been registered.</param>
            <returns>When true, a script with this key has already been registered.</returns>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.VAMPage.RegisterScriptBlock(System.String,System.String)">
            <summary>
            RegisterScriptBlock is a user function to be called from within various DefineJavaScript()
            methods throughout VAM. It adds client-side script to the page, near the starting &lt;form&gt; tag.
            </summary>
            <remarks>
            <para>Use <see cref="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.VAMPage.RegisterScriptFile(System.String,System.String)"/> when registering a script file.</para>
            <para>This is a wrapper around 
            <see cref="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.RegisterScriptsClasses.RegisterScripts.RegisterClientScriptBlock(System.Web.UI.Page,System.String,System.String)">RegisterScripts.RegisterClientScriptBlock</see>
            and is a replacement for System.Web.UI.Page.RegisterClientScriptBlock.</para>
            <para>First call <see cref="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.VAMPage.IsScriptBlockRegistered(System.String)"/> 
            to determine if you should call this.
            Then call it with a key name that uniquely identifies the script that you
            want to register. Your script can have or omit "&lt;script&gt;" tags. If they are omitted, this function
            will create them for you. Usually you should omit them unless you are registering a script file
            which always requires starting and ending script tags.</para>
            <para>It writes the scripts just after the starting &lt;form&gt; tag. If you need a script written
            just before the ending &lt;/form&gt; tag, call 
            <see cref="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.RegisterScriptsClasses.RegisterScripts.RegisterStartupScript(System.Web.UI.Page,System.String,System.String)">RegisterScripts.RegisterStartupScript</see>.</para>
            </remarks>
            <param name="pKey">The unique key associated with this script used to later prevent adding a second copy.</param>
            <param name="pScript">The script.</param>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.VAMPage.RegisterScriptFile(System.String,System.String)">
            <summary>
            RegisterScriptFile registers a URL to a script file on the page. 
            </summary>
            <remarks>
            <para>It basically
            creates the &lt;script&gt; tags pointing to the pURL (src=pURL). It assumes
            the script file is javascript.</para>
            <para>It also guarantees that the script tag will appear above any script blocks
            registered with <see cref="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.VAMPage.RegisterScriptBlock(System.String,System.String)"/>.</para>
            <para>When referencing a file, there can be file path problems. You may need to enforce
            a specific absolute path from the domain root (like "/aspnet_client/MyScripts/Script.js")
            or if you give the user flexibility, have a specific &lt;appSettings&gt; parameter in the web.config
            file that permits customization.</para>
            <para>You can supply a tilde (~) as the first character of the URL. It will be
            adjusted to include the root path to the web app if the web app is below the domain root path.</para>
            </remarks>
            <param name="pKey">The unique key that allows you to test if this key has already been 
            used in <see cref="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.VAMPage.IsScriptBlockRegistered(System.String)"/>.</param>
            <param name="pURL">The URL to the script file.</param>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.VAMPage.Current">
            <summary>
            Current is a static property that returns the current VAMPage for this page.
            </summary>
            <remarks>
            <para>This is the same as using <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.Globals.Page">Globals.Page</see>.</para>
            </remarks>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.VAMPage.Licensing">
            <summary>
            Assign the Licensing Key string when using a Redistribution License.
            </summary>
            <value>
            Licensing should be assigned to the licensing string in Page_Load.
            This handles page specific licenses. Mostly Redistribution licenses are assigned here
            although any COULD use it. Other license types are encouraged to use Globals.Licensing.
            <para>The licensing string can be:</para>
            <list type="bullet">
            <item>
            <description>blank - trial version licenses</description>
            </item>
            <item>
            <description>serial number alone - site license and redistribution license</description>
            </item>
            <item>
            <description>serial number | computer name; (repeat); - single server license 
            and development licenses</description>
            </item>
            </list>
            License keys are only validated at runtime.
            </value>
            <seealso cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.Globals.Licensing"/>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.VAMPage.Actions">
            <summary>
            A collection of all Action instances on the page.
            </summary>
            <value>
            <para>Actions are added automatically when they are instantiated.
            </para>
            <para>This list is processed between the Page's OnPreRender and Render methods
            to create client-side JavaScript in <see cref="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.VAMPage.DefineClientSideActions"/>
            and let FieldStateActions initialize associated controls in <see cref="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.VAMPage.AutoRunActions"/>.</para>
            <para>
            If the Action is not run through an OnPreRender event of its Owner control, it should
            not be later used in DefineClientSideActions. PagePreRegister detects these actions
            by checking <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseAction.SetupComplete">BaseAction.SetupComplete</see> and deleting any that are
            are not complete or have an Owner that is Visible=false.
            </para>
            </value>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.VAMPage.CultureInfo">
            <summary>
            CultureInfo is the <see cref="T:System.Globalization.CultureInfo"/> instance that is used 
            to translate between strings and other values and provide culture specific formatting.
            </summary>
            <value>
            CultureInfo provides date, numeric and other formatting rules to <see cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.VAMTypeConverter"/>
            classes.
            It defaults to CultureInfo.CurrentUICulture but can be assigned in the Page_Load method.
            </value>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.VAMPage.Browser">
            <summary>
            Gets the <see cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.TrueBrowser"/> instance associated with the browser that made
            the request.
            </summary>
            <remarks>
            <para>This is the equivalent of using <see cref="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.TrueBrowser.GetTrueBrowser(System.Web.UI.Page)">TrueBrowser.GetTrueBrowser</see>.</para>
            <para>The current TrueBrowser is used throughout these controls to determine if any features scale down.</para>
            </remarks>
            <seealso cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.TrueBrowser"/>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.VAMPage.OwnerPage">
            <summary>
            OwnerPage is the page associated with this VAMPage.
            </summary>
            <value>
            It gets assigned from the global HttpContext.Current.Handler which contains
            the page object. It is initialized in the constructor.
            <para>This is null in design mode.</para>
            <para>While you can set this property, its set functionality is only intended
            for <see cref="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.Globals.AfterServerTransfer(System.Web.UI.Page)">Globals.AfterServerTransfer</see> which is the only
            time the OwnerPage should be changed.</para>
            </value>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.VAMPage.BlinkTime">
            <summary>
            Page-level property. Gets and sets the number of milliseconds to hold each state of a blinking object.
            </summary>
            <value>
            <para>It defaults to <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.Globals.DefaultBlinkTime">Globals.DefaultBlinkTime</see> which starts at 1000 (1 second).</para>
            <para>Written to the client-side as the global gVAMBlinkTime when there are validators on the page.</para>
            </value>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.VAMPage.BlinkOnChange">
            <summary>
            Page-level property. Gets and sets how many times to blink the error message within
            the ErrorFormatter on a client-side onchange event. 
            </summary>
            <value>
            <para>The ErrorFormatter must have <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseErrorFormatter.BlinkAllowed">BaseErrorFormatter.BlinkAllowed</see>=true 
            to blink.</para>
            <para>It defaults to <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.Globals.DefaultBlinkOnChange">Globals.DefaultBlinkOnChange</see>, 
            which starts at BlinkMode.Off</para>
            <para>Written to the client-side as the global gVAMBlinkOnChange when there are validators on the page.</para>
            </value>
            <seealso cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BlinkMode"/>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.VAMPage.BlinkOnSubmit">
            <summary>
            Page-level property. Gets and sets how many times to blink the error message within
            the ErrorFormatter on a client-side Submit page event. 
            </summary>
            <value>
            <para>The ErrorFormatter must have <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseErrorFormatter.BlinkAllowed">BaseErrorFormatter.BlinkAllowed</see>=true 
            to blink.</para>
            <para>It defaults to <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.Globals.DefaultBlinkOnSubmit">Globals.DefaultBlinkOnSubmit</see>, 
            which starts at BlinkMode.Off</para>
            <para>Written to the client-side as the global gVAMBlinkOnSubmit when there are validators on the page.</para>
            </value>
            <seealso cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BlinkMode"/>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.VAMPage.FocusOnChange">
            <summary>
            Page-level property. Gets and sets a page-level setting to set focus to the control which caused 
            a validation error on a client-side onchange event.
            </summary>
            <value>
            <para>When true, focus is set on the field (unless the field or browser doesn't support setting focus.)</para>
            <para>It defaults to <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.Globals.DefaultFocusOnChange">Globals.DefaultFocusOnChange</see>, which starts at false.</para>
            <para>Written to the client-side as the global gVAM_FocusOnChange when there are validators on the page
            and the following condition is true: FocusOnChange OR ShowAlertOnChange OR (ControlErrorCssClass.Length &gt; 0).</para>
            </value>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.VAMPage.FocusOnSubmit">
            <summary>
            Page-level property. Gets and sets a page-level setting to set focus to the control which caused 
            a validation error on a client-side submit page event.
            </summary>
            <value>
            <para>When true, focus is set on the field (unless the field or browser doesn't support setting focus.)</para>
            <para>It defaults to <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.Globals.DefaultFocusOnSubmit">Globals.DefaultFocusOnSubmit</see>, which starts at false.</para>
            <para>Written to the client-side as the global gVAM_FocusOnSubmit when there are validators on the page
            and the following condition is true: 
            FocusOnSubmit OR ShowAlertOnSubmit OR (ControlErrorCssClass.Length &gt; 0) || fHasValidationSummaries</para>
            </value>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.VAMPage.ShowAlertOnChange">
            <summary>
            Page-level property. Gets and sets a page-level setting that determines if an alert 
            appears when a validation error occurs during a client-side onchange event.
            </summary>
            <value>
            <para>When true, the alert is shown.</para>
            <para>It consolidates the error messages from all invalid validator
            actions attached to the field that invoked the error.</para>
            <para>It uses the property <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.VAMPage.AlertTemplate"/> to
            apply formatting before and after the error messages. Messages are formatted
            with <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.VAMPage.AlertErrorListStyle"/>
            and <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.VAMPage.AlertErrorLeadText"/>.</para>
            <para>It defaults to <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.Globals.DefaultShowAlertOnChange">Globals.DefaultShowAlertOnChange</see>,
            which starts at false.</para>
            <para>Written to the client-side as the global gVAM_AlertOnChange when there are validators on the page
            and the following condition is true: 
            FocusOnChange OR ShowAlertOnChange OR (ControlErrorCssClass.Length &gt; 0).</para>
            </value>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.VAMPage.ShowAlertOnSubmit">
            <summary>
            Page-level property. Gets and sets a page-level setting that determines if an alert 
            appears when a validation error occurs during a client-side submit page event.
            </summary>
            <value>
            <para>When true, the alert is shown.</para>
            <para>It consolidates the error messages from all invalid validator
            actions attached to the field that invoked the error.</para>
            <para>It uses the property <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.VAMPage.AlertTemplate"/> to
            apply formatting before and after the error messages. Messages are formatted
            with <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.VAMPage.AlertErrorListStyle"/>
            and <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.VAMPage.AlertErrorLeadText"/>.</para>
            <para>It defaults to <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.Globals.DefaultShowAlertOnSubmit">Globals.DefaultShowAlertOnSubmit</see>, which starts at false.</para>
            <para>Written to the client-side as the global gVAM_AlertOnChange when there are validators on the page
            and the following condition is true: 
            FocusOnSubmit OR ShowAlertOnSubmit OR (ControlErrorCssClass.Length &gt; 0) || fHasValidationSummaries</para>
            </value>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.VAMPage.ControlErrorCssClass">
            <summary>
            Page-level property. Gets and sets the style sheet class name assigned to a control
            when it is associated with a validation error. The original class is restored when no error is detected. 
            </summary>
            <value>
            <para>Style sheet changes only occur when this property contains text. It should contain
            a name of a style sheet defined on the page.</para>
            <para>When this is assigned, 
            each control will be assigned an "OrigCss" attribute with the original Class name 
            on the server side. This allows the client side to flip back.</para>
            <para>It defaults to <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.Globals.DefaultControlErrorCssClass">Globals.DefaultControlErrorCssClass</see>, which starts at "".</para>
            <para>Written to the client-side as the global gVAM_AlertOnChange when there are validators on the page
            and the following condition is true: 
            FocusOnChange OR ShowAlertOnChange OR (ControlErrorCssClass.Length &gt; 0).</para>
            </value>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.VAMPage.AlertTemplate">
            <summary>
            Page-level property. Gets and sets a page-level setting that places text before and after
            error messages shown in an alert.
            </summary>
            <value>
            <para>AlertTemplate is used when using <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.VAMPage.ShowAlertOnChange"/> 
            or <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.VAMPage.ShowAlertOnSubmit"/>.</para>
            <para>If its blank, you will get only a list of error messages.
            Otherwise, use the token "{0}" in this string. It will be replaced by the error messages.</para>
            <para>It defaults to <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.Globals.DefaultAlertTemplate">Globals.DefaultAlertTemplate</see>, 
            which starts at "Please correct these errors:\n{0}".</para>
            <para>Written to the client-side as the global gVAM_AlertTemplate when there are validators on the page.</para>
            </value>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.VAMPage.AlertTemplateLookupID">
            <summary>
            Page-level property. Gets and sets a page-level setting that provides an alternative to 
            <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.VAMPage.AlertTemplate"/>. 
            When used, the AlertTemplate
            is looked up from another source, such as a resource file or database to use as
            the AlertTemplate.
            </summary>
            <value>
            <para>It provides localization based on the current culture.</para>
            <para>To use it, assign a key string that represents the AlertTemplate that you want.
            This key will be used to search your data source for the correct string.
            When you are using the default Resource Manager system of VAM, it looks
            at the Name field of the ResX file for a match. The Value field of that row is returned.
            If no match is found OR this is blank, AlertTemplate will be used.</para>
            <para>This property uses the StringGroup of 
            <see cref="F:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.StringLookup.cMiscGroupName">StringLookup.cMiscGroupName</see>.</para>
            <para>It defaults to <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.Globals.DefaultAlertTemplateLookupID">Globals.DefaultAlertTemplateLookupID</see>, 
            which starts at "".</para>
            </value>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.VAMPage.AlertErrorLeadText">
            <summary>
            Page-level property. Gets and sets a page-level setting that places text before each
            error message shown in an alert. Use it to denote a new message. For example, "-" or "*".
            </summary>
            <value>
            <para>AlertErrorLeadText is used when using <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.VAMPage.ShowAlertOnChange"/> 
            or <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.VAMPage.ShowAlertOnSubmit"/>.</para>
            <para>If you use a # symbol, that character will be replaced
            by a number that represents the error message's position in the list.</para>
            <para>It defaults to <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.Globals.DefaultAlertErrorLeadText">Globals.DefaultAlertErrorLeadText</see>, 
            which starts at "#. ".</para>
            <para>Written to the client-side as the global gVAM_AlertLeadText when there are validators on the page.</para>
            </value>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.VAMPage.AlertErrorListStyle">
            <summary>
            Page-level property. Gets and sets a page-level setting that formats the list of error 
            messages shown in an alert.
            </summary>
            <value>
            <para>AlertErrorListStyle is used when using <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.VAMPage.ShowAlertOnChange"/> 
            or <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.VAMPage.ShowAlertOnSubmit"/>.</para>
            <para>When true, error messages are listed on separate lines.</para>
            <para>When false, error messages are listed in a single paragraph style.</para>
            <para>It defaults to <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.Globals.DefaultAlertErrorListStyle">Globals.DefaultAlertErrorListStyle</see>, 
            which starts at true.</para>
            <para>Written to the client-side as the global gVAM_AlertListStyle when there are validators on the page.</para>
            </value>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.VAMPage.LabelTokenCssClass">
            <summary>
            Page-level property. Gets and sets a style sheet class name to be used directly on any "{LABEL}"
            token within an ErrorMessage. (Includes "{LABEL2}", "{LABEL3}", "{LABEL4}".)
            </summary>
            <value>
            <para>By using a style sheet this way, you don't have to embed any 
            HTML into the error message and can easily change the style globally.</para>
            <para>Assign a valid style sheet class name that is defined on the page. 
            When "", no change in style is applied.</para>
            <para>The style sheet is inserted into the ErrorMessage string on the server side
            using a &lt;span class= &gt; tag.</para>
            <para>It defaults to <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.Globals.DefaultLabelTokenCssClass">Globals.DefaultLabelTokenCssClass</see>,
             which starts at "".</para>
            </value>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.VAMPage.PropertyTokenCssClass">
            <summary>
            Page-level property. Gets and sets a style sheet class name to be used directly on any token
            within an ErrorMessage representing a server-side property of the control.
            For example, "{MINIMUM}" and "{DIFFERENCEVALUE}".
            </summary>
            <value>
            <para>By using a style sheet this way, you don't have to embed any 
            HTML into the error message and can easily change the style globally.</para>
            <para>Assign a valid style sheet class name that is defined on the page. 
            When "", no change in style is applied.</para>
            <para>The style sheet is inserted into the ErrorMessage string on the server side
            using a &lt;span class= &gt; tag.</para>
            <para>It defaults to <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.Globals.DefaultPropertyTokenCssClass">Globals.DefaultPropertyTokenCssClass</see>,
             which starts at "".</para>
            </value>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.VAMPage.RuntimeTokenCssClass">
            <summary>
            Page-level property. Gets and sets a style sheet class name to be used directly on any token
            within an ErrorMessage representing a runtime value. 
            For example, "{COUNT}" and "{TEXTVALUE}".
            </summary>
            <value>
            <para>By using a style sheet this way, you don't have to embed any 
            HTML into the error message and can easily change the style globally.</para>
            <para>Assign a valid style sheet class name that is defined on the page. 
            When "", no change in style is applied.</para>
            <para>The style sheet is inserted into the ErrorMessage string on the server side
            using a &lt;span class= &gt; tag.</para>
            <para>It defaults to <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.Globals.DefaultRuntimeTokenCssClass">Globals.DefaultRuntimeTokenCssClass</see>,
             which starts at "".</para>
            </value>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.VAMPage.SummaryLabelTokenCssClass">
            <summary>
            Page-level property. Gets and sets a style sheet class name to be used directly on any "{LABEL}"
            token within a SummaryErrorMessage. (Includes "{LABEL2}", "{LABEL3}", "{LABEL4}".)
            </summary>
            <value>
            <para>By using a style sheet this way, you don't have to embed any 
            HTML into the error message and can easily change the style globally.</para>
            <para>Assign a valid style sheet class name that is defined on the page. 
            When "", no change in style is applied.</para>
            <para>The style sheet is inserted into the SummaryErrorMessage string on the server side
            using a &lt;span class= &gt; tag.</para>
            <para>It defaults to <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.Globals.DefaultSummaryLabelTokenCssClass">Globals.DefaultSummaryLabelTokenCssClass</see>,
             which starts at "".</para>
            </value>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.VAMPage.SummaryPropertyTokenCssClass">
            <summary>
            Page-level property. Gets and sets a style sheet class name to be used directly on any token
            within a SummaryErrorMessage representing a server-side property of the control.
            For example, "{MINIMUM}" and "{DIFFERENCEVALUE}".
            </summary>
            <value>
            <para>By using a style sheet this way, you don't have to embed any 
            HTML into the error message and can easily change the style globally.</para>
            <para>Assign a valid style sheet class name that is defined on the page. 
            When "", no change in style is applied.</para>
            <para>The style sheet is inserted into the SummaryErrorMessage string on the server side
            using a &lt;span class= &gt; tag.</para>
            <para>It defaults to <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.Globals.DefaultSummaryPropertyTokenCssClass">Globals.DefaultSummaryPropertyTokenCssClass</see>,
            which starts at "".</para>
            </value>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.VAMPage.SummaryRuntimeTokenCssClass">
            <summary>
            Page-level property. Gets and sets a style sheet class name to be used directly on any token
            within a SummaryErrorMessage representing a runtime value. 
            For example, "{COUNT}" and "{TEXTVALUE}".
            </summary>
            <value>
            <para>By using a style sheet this way, you don't have to embed any 
            HTML into the error message and can easily change the style globally.</para>
            <para>Assign a valid style sheet class name that is defined on the page. 
            When "", no change in style is applied.</para>
            <para>The style sheet is inserted into the SummaryErrorMessage string on the server side
            using a &lt;span class= &gt; tag.</para>
            <para>It defaults to <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.Globals.DefaultSummaryRuntimeTokenCssClass">Globals.DefaultSummaryRuntimeTokenCssClass</see>,
             which starts at "".</para>
            </value>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.VAMPage.DefaultGroup">
            <summary>
            Page-level property. Gets and sets the group name that is used when the user hits ENTER
            on the page to submit. 
            </summary>
            <value>
            <para>In this situation, the buttons don't get their
            onclick event handler run. So no button applies its Group property to
            the submission code. So this is a fall-back.
            It actually only establishes an initial group on the page.
            Once the user clicks a button, it changes the default to that group.</para>
            <para>A hidden field with the ID "VAM_Group" is added to the page with
            the value of this property. It is a hidden field because its updated when Submit buttons
            with different groups are invoked. Then its used to supply the server side with
            the group of the Submit button.</para>
            <para>It defaults to "". This property does not use the system-wide defaults on the Globals class.</para>
            </value>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.VAMPage.InitialFocusControl">
            <summary>
            Page-level property. Gets and sets a reference to a control that will get the initial focus
            when the page is loaded. It must be set programmatically.
            </summary>
            <value>
            <para>JavaScript is setup on the client-side to handle this setting.</para>
            <para>If assigned, the client-side
            script "VAM_SetFocus('" + InitialFocusControl.ClientID + "') is added to the startup scripts
            on the page.</para>
            <para>When null, this property has no effect.</para>
            <para>It defaults to null.</para>
            </value>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.VAMPage.ConfirmMessage">
            <summary>
            Page-level property. Gets and sets a string to show in a confirmation message box
            when the user submits the page. The MessageBox includes OK and Cancel buttons where
            Cancel stops the submission process while OK continues.
            </summary>
            <value>
            <para>When this is "", no alert is shown.</para>
            <para>The alert appears based on the group being submitted. It must match
            <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.VAMPage.ConfirmMessageGroup"/>.</para>
            <para>This value is assigned to the client-side global gVAMConfMsg when this property is not "".</para>
            </value> 
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.VAMPage.ConfirmMessageGroup">
            <summary>
            Page-level property. Gets and sets the group name that must match the submit command
            before showing the 
            <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.VAMPage.ConfirmMessage"/> message box.
            </summary>
            <value>
            <para>If its "*", it matches all groups.</para>
            <para>This value is assigned to the client-side global gVAMConfMsgGrp when this property is not "".</para>
            <para>It defaults to "".</para>
            </value>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.VAMPage.CustomSubmitFunctionName">
            <summary>
            Page-level property. Gets and sets the name of a client-side function that is called 
            when the page is submitted for validation. It allows you to extend the submission logic.
            </summary>
            <value>
            <para>This client-side function is called after the ConfirmMessage
            and before the fields are validated to allow you to insert your own pre-page submission
            logic.</para>
            <para>The function must take one parameter, the group name, which is a string.
            It must return a boolean value where true means continue and false means stop.</para>
            <para>When this property is "", no client-side function is defined.</para>
            <para>This property is assigned to the client-side global gVAMCstmSubmitFnc when the value isn't "".</para>
            <para>It defaults to "".</para>
            </value>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.VAMPage.UseOnResetEventHandler">
            <summary>
            Page-level property. Gets and sets a flag that determines if the page generation also installs
            the onreset event on the Form. If it does, <see cref="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.VAMPage.SetupOnResetEvent(System.Web.UI.HtmlControls.HtmlForm)"/> is called
            when the page is generated.
            </summary>
            <value>
            <para>When true, the onreset event handler is installed.</para>
            <para>It defaults to true (usually harmless to have it installed.)</para>
            </value>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.VAMPage.PostValidationUpdateScript">
            <summary>
            Page-level property. Gets and sets JavaScript that will be executed
            after validation occurs on the client-side.
            </summary>
            <value>
            <para>This property's primary intent is to allow you to run client-side
            code that relocates absolutely positioned elements after validator error messages have
            caused the page to reposition non-absolutely position elements.</para>
            <para>You can enter any JavaScript statements you want into this string. Your string will be
            executed by using the JavaScript eval() function.</para>
            <para>This function may be called even if nothing visually changed on the page.</para>
            <para>When assigned, this string is assigned to the client-side global gVAMValUpdFnc.</para>
            <para>It defaults to "". (Does not use Globals because scripts are usually very page specific.)</para>
            </value>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.VAMPage.IsValid">
            <summary>
            IsValid indicates if the page's validators are all valid or not. This is usually called
            in a post back event handler before taking an action on the page like saving the data.
            </summary>
            <value>
            <para>IsValid returns true when the page's validators all return valid for the group name
            that was submitted.</para>
            <para>It is initially true prior to a call to <see cref="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.VAMPage.Validate"/>. After Validate()
            is properly reflects the state of validators.</para>
            <para>Check <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.VAMPage.HasValidated"/> to determine if Validate has run.</para>
            <para>If you are using an <see cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.IgnoreConditionValidator"/> and set its IsValid
            property to false, VAMPage.IsValid will automatically be set to false as well.</para>
            </value>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.VAMPage.HasValidated">
            <summary>
            HasValidated indicates if the <see cref="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.VAMPage.Validate"/> method has been run.
            </summary>
            <value>
            It is initially false. Validate will set it to true.
            You can still call Validate after this is true to reevaluate the validation.
            </value>
        </member>
        <member name="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.RegisteredSubmitControl">
            <remarks>
            RegisteredSubmitControl is storage for any control registered with VAMPage.RegisterSubmitControls.
            It is stored in VAMPage.SubmitControls.
            </remarks>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.RegisteredSubmitControl.#ctor(System.Web.UI.Control,System.String)">
            <summary>
            Constructor that initializes both properties from its parameters.
            </summary>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.RegisteredSubmitControl.fControl">
            <summary>
            Storage for the control reference.
            </summary>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.RegisteredSubmitControl.fGroup">
            <summary>
            Storage for the group name.
            </summary>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.RegisteredSubmitControl.fPreRendered">
            <summary>
            When set to true, the control has been prerendered. Helps
            avoid buttons that are added in the Page_Load phase but never used
            such as in the DataGrid's EditCommandColumn which creates buttons,
            then creates another set if switching to Edit or View mode.
            </summary>
        </member>
        <member name="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.TypeCollection">
            <summary>
            TypeCollection is derived from <see cref="T:System.Collections.ArrayList"/>
            to limit it to types of <see cref="T:System.Type"/>.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.TypeCollection.Add(System.Object)">
            <summary>
            Enforces that the parameter is of type <see cref="T:System.Type"/>.
            </summary>
            <param name="pType">A type to add.</param>
            <returns>The position added to the list. Its always added at the end.</returns>
            <exception cref="T:System.ArgumentException">When the parameter is not of System.Type.</exception>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.TypeCollection.Match(System.Type)">
            <summary>
            Match returns true if pType is in the collection either as a direct match or a child.
            Returns false if the list is empty.
            </summary>
            <param name="pType">The System.Type that to be found.</param>
            <returns>True when found.</returns>
        </member>
        <member name="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.ConditionOperator">
            <summary>
            ConditionOperator is used by some subclasses of BaseCondition to define
            an operator of a boolean expression.
            <see cref="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseCondition.EvalWithOperator(Jenzabar.Portal.Framework.Web.UI.Controls.Validation.ConditionOperator,System.Object,System.Object,System.Collections.IComparer)">BaseCondition.EvalWithOperator</see>
            uses this to determine the boolean expression.
            </summary>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.ConditionOperator.Equal">
            <summary>
            Left and right values must be equal.
            </summary>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.ConditionOperator.NotEqual">
            <summary>
            Left and right values must not be equal.
            </summary>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.ConditionOperator.GreaterThan">
            <summary>
            Left value must be great than to the right value.
            </summary>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.ConditionOperator.GreaterThanEqual">
            <summary>
            Left value must be greater than or equal to the right value.
            </summary>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.ConditionOperator.LessThan">
            <summary>
            Left value must be less than to the right value.
            </summary>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.ConditionOperator.LessThanEqual">
            <summary>
            Left value must be less than or equal to the right value.
            </summary>
        </member>
        <member name="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.AND_OROperator">
            <summary>
            AND_OROperator declares two terms that reflect the boolean operators AND and OR.
            </summary>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.AND_OROperator.OR">
            <summary>
            OR operator
            </summary>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.AND_OROperator.AND">
            <summary>
            AND operator
            </summary>
        </member>
        <member name="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BlinkMode">
            <summary>
            BlinkMode enables the error message text or image to blink to catch the user's
            attention. Used by <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.VAMPage.BlinkOnChange">VAMPage.BlinkOnChange</see> and 
            <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.VAMPage.BlinkOnSubmit">VAMPage.BlinkOnSubmit</see>.
            </summary>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BlinkMode.Off">
            <summary>
            Does not blink
            </summary>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BlinkMode.On">
            <summary>
            Blinks continuously
            </summary>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BlinkMode.One">
            <summary>
            Blinks once
            </summary>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BlinkMode.Two">
            <summary>
            Blinks twice
            </summary>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BlinkMode.Three">
            <summary>
            Blinks three times
            </summary>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BlinkMode.Five">
            <summary>
            Blinks five times
            </summary>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BlinkMode.Ten">
            <summary>
            Blinks ten times
            </summary>
        </member>
        <member name="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.OverrideClientSideEvaluationType">
            <summary>
            Used by the <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseCondition.OverrideClientSideEvaluation">BaseCondition.OverrideClientSideEvaluation</see> property.
            </summary>
            <remarks>
            <para>These values determine if the CustomEvalFunctionName is assigned to the "VAM_EvalAltCS"
            function. When not set to No, it is and the client-side gets a Mode property with one
            of these values:</para>
            <list type="bullet">
            <item><description>When its a new page, 1 to avoid showing the error.</description></item>
            <item><description>On post back, when Hide it hides the error when the field 
            is changed or the page is submitted.</description></item>
            <item><description>On post back, when HideOnSubmit, it hides the error when the
            page is submitted but keeps it on change events PRIOR to submitting. It hides
            the error message on change events after submitting.</description></item>
            </list>
            </remarks>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.OverrideClientSideEvaluationType.No">
            <summary>
            Do not override the client-side evaluation function. This is the default.
            </summary>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.OverrideClientSideEvaluationType.Hide">
            <summary>
            On post back, hide the error message on a change or submit event.
            </summary>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.OverrideClientSideEvaluationType.HideOnSubmit">
            <summary>
            On post back, hide the error message on a submit event. Leave it on a change event
            unless it is already hidden.
            </summary>
        </member>
        <member name="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.ConditionCollection">
            <summary>
            ConditionCollection is a <see cref="T:System.Collections.ArrayList"/> of 
            <see cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseCondition"/> elements.
            </summary>
            <remarks>
            It is used by the <see cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseMultiConditionValidator"/> and 
            <see cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseMultiCondition"/> to hold
            the child conditions.
            </remarks>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.ConditionCollection.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.ConditionCollection.Add(System.Object)">
            <summary>
            Validates that the object passed is <see cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseCondition"/>.
            </summary>
            <param name="pObj">Pass a BaseCondition subclass.</param>
            <returns>Position into the list where it was added. Its always added to the end.</returns>
            <exception cref="T:System.ArgumentException">When you do not pass a BaseCondition instance.</exception>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.ConditionCollection.Clone">
            <summary>
            Clones the conditions within the list into a new ConditionCollection.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.ConditionEventArgs">
            <summary>
            ConditionEventArgs is passed to the <see cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.ServerConditionEventHandler"/>.
            It is used by <see cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.CustomCondition"/> which has no fields to pass.
            </summary>
            <remarks>
            <para>Microsoft's design for ServerValidateEventArgs is the basis for this.
            In it, it passes the fields text value in the Value property and 
            gets your result in the property IsMatch.</para>
            <para>Since CustomCondition lacks fields of its own, there is no Value property.
            However, there is a <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.ConditionEventArgs.IsMatch"/> property. 
            The IsMatch property should only 
            be set to true or false if the condition can be evaluated. Otherwise
            set the <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.ConditionEventArgs.CannotEvaluate"/> property to true. (It defaults to false.)
            This allows you to indicate that your function only works when all conditions
            are setup for it. For instance, don't evaluate when the text box is blank.</para>
            </remarks>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.ConditionEventArgs.#ctor">
            <summary>
            Constructor with no parameters.
            </summary>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.ConditionEventArgs.fIsMatch">
            <summary>
            Storage for <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.ConditionEventArgs.IsMatch"/>.
            </summary>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.ConditionEventArgs.fCannotEvaluate">
            <summary>
            Storage for <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.ConditionEventArgs.CannotEvaluate"/>.
            </summary>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.ConditionEventArgs.IsMatch">
            <summary>
            The developer of the ServerCondition event handler must set this before
            the event returns.
            </summary>
            <value>
            <list type="bullet">
            <item><description>Set to true if the condition evaluation ran and 
            field values matched the condition.</description></item>
            <item><description>Set to false when the condition evaluation ran but 
            field values did not match the condition.</description></item>
            <item><description>If the condition evaluation cannot run due to values that aren't supported
            by the condition, set <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.ConditionEventArgs.CannotEvaluate"/> to true.</description></item>
            </list>
            </value>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.ConditionEventArgs.CannotEvaluate">
            <summary>
            The developer of the ServerCondition event handler must set this to true
            when it determines that values in the field aren't supported by the condition.
            </summary>
            <value>
            <para>For example, if you require two text boxes to contain numbers, this should be
            true when either text box is blank (detectable by RequiredTextValidator) or non-numeric
            (detectable by DataTypeCheckValidator).</para>
            <para>It defaults to false.</para>
            </value>
        </member>
        <member name="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.ConditionOneFieldEventArgs">
            <summary>
            ConditionOneFieldEventArgs is the event argument for the 
            <see cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.ServerConditionEventHandler"/>.
            </summary>
            <remarks>
            <para>It extends <see cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.ConditionEventArgs"/> to assign the data from the 
            <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseOneFieldCondition.ControlIDToEvaluate">BaseOneFieldCondition.ControlIDToEvaluate</see> 
            property into the <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.ConditionOneFieldEventArgs.Value"/> property.</para>
            </remarks>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.ConditionOneFieldEventArgs.#ctor(System.String,System.Web.UI.Control)">
            <summary>
            Constructor assigns the Value and ControlToEvaluate properties.
            </summary>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.ConditionOneFieldEventArgs.fValue">
            <summary>
            Storage for <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.ConditionOneFieldEventArgs.Value"/>.
            </summary>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.ConditionOneFieldEventArgs.fControlToEvaluate">
            <summary>
            Storage for <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.ConditionOneFieldEventArgs.ControlToEvaluate"/>.
            </summary>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.ConditionOneFieldEventArgs.Value">
            <summary>
            Gets the text from the field in ControlToEvaluate if it supports textual values.
            Otherwise its "".
            </summary>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.ConditionOneFieldEventArgs.ControlToEvaluate">
            <summary>
            A reference to the ControlToEvaluate. Available to the developer of the ServerCondition
            event handler to get properties from the control.
            </summary>
        </member>
        <member name="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.ConditionTwoFieldEventArgs">
            <summary>
            ConditionTwoFieldEventArgs is the event argument for the 
            <see cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.ServerConditionEventHandler"/>.
            </summary>
            <remarks>
            <para>It extends <see cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.ConditionOneFieldEventArgs"/> to assign the data from the 
            <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseTwoFieldCondition.SecondControlIDToEvaluate"/> property into the
            <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.ConditionTwoFieldEventArgs.SecondValue"/> property.</para>
            </remarks>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.ConditionTwoFieldEventArgs.#ctor(System.String,System.Web.UI.Control,System.String,System.Web.UI.Control)">
            <summary>
            Constructor assigns the Value, ControlToEvaluate, SecondValue and SecondControlToEvaluate properties.
            </summary>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.ConditionTwoFieldEventArgs.fSecondValue">
            <summary>
            Storage for <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.ConditionTwoFieldEventArgs.SecondValue"/>.
            </summary>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.ConditionTwoFieldEventArgs.fSecondControlToEvaluate">
            <summary>
            Storage for <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.ConditionTwoFieldEventArgs.SecondControlToEvaluate"/>.
            </summary>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.ConditionTwoFieldEventArgs.SecondValue">
            <summary>
            SecondValue is the text from the field in SecondControlToEvaluate if it supports textual values.
            Otherwise its "".
            </summary>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.ConditionTwoFieldEventArgs.SecondControlToEvaluate">
            <summary>
            A reference to the SecondControlToEvaluate. Available to the developer of the ServerCondition
            event handler to get properties from the control.
            </summary>
        </member>
        <member name="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.ServerConditionEventHandler">
            <summary>
            ServerConditionEventHandler is the event handler definition used by the
            <see cref="F:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseCondition.ServerCondition">BaseCondition.ServerCondition</see> property.
            </summary>
            <remarks>
            Users should look into pSourceCondition
            for properties of the condition which they have instantiated.
            However, they will not have access to several protected methods that return
            the control and text of the control. Instead, the arguments (pArgs)
            should be subclassed to provide those values. See <see cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.ConditionOneFieldEventArgs"/>
            and <see cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.ConditionTwoFieldEventArgs"/>.
            </remarks>
        </member>
        <member name="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.ActionCollection">
            <summary>
            ActionCollection is a <see cref="T:System.Collections.ArrayList"/> of <see cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseAction"/> elements.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.ActionCollection.#ctor">
            <summary>
            Initializes a new instance of <see cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.ActionCollection"/>.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.ActionCollection.Add(System.Object)">
            <summary>
            Validates that the object is a <see cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseAction"/>.
            </summary>
            <param name="pObj">The object to add.</param>
            <returns>Position added into the list. Always adds to the end</returns>
            <exception cref="T:System.ArgumentException">When not a BaseAction object.</exception>
        </member>
        <member name="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.ValidationPropertyControlConnection">
            <summary>
            ValidationPropertyControlConnection considers any control with a 
            <see cref="T:System.Web.UI.ValidationPropertyAttribute"/> valid.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.ValidationPropertyControlConnection.#ctor(System.Web.UI.Control,System.Boolean,System.String,Jenzabar.Portal.Framework.Web.UI.Controls.Validation.INamingObject)">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.ValidationPropertyControlConnection.IsValidControl(System.Web.UI.Control)">
            <summary>
            IsValidControl returns true when the control has the <see cref="T:System.Web.UI.ValidationPropertyAttribute"/>.
            </summary>
            <remarks>
            <para>If the user has extended the <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.Globals.DataTypes">Globals.DataTypes</see> list with VAMTypeConverters with
            SupportsThirdPartyControl=true, see if the Control is supported in that list.
            This allows third party controls that don't support ValidationPropertyAttribute
            to appear to support it through code they supply in VAMTypeConverter.</para>
            </remarks>
            <param name="pControl">The control to validate.</param>
            <returns>True when the Control implements the ValidationPropertyAttribute.</returns>
        </member>
        <member name="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.ThirdPartyControlConnection">
            <summary>
            Used when a Condition's VAMTypeConverter supports third party controls.
            </summary>
            <remarks>
            ThirdPartyControlConnection is used when the BaseCondition's
            <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.VAMTypeConverter.SupportsThirdPartyControl">VAMTypeConverter.SupportsThirdPartyControl</see>
            is true. Any BaseCondition that implements 
            <see cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.IDataTypeProperty"/> will install a specific
            VAMTypeConverter for that DataType. During that installation, this control connection
            may be created to replace the default ControlConnection object.
            The <see cref="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.ThirdPartyControlConnection.IsValidControl(System.Web.UI.Control)"/> 
            uses <see cref="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.VAMTypeConverter.TestThirdPartyControl(System.Web.UI.Control)">VAMTypeConverter.TestThirdPartyControl</see>
            to validate.
            </remarks>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.ThirdPartyControlConnection.#ctor(System.Web.UI.Control,System.Boolean,System.String,Jenzabar.Portal.Framework.Web.UI.Controls.Validation.INamingObject,Jenzabar.Portal.Framework.Web.UI.Controls.Validation.VAMTypeConverter)">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.ThirdPartyControlConnection.#ctor(Jenzabar.Portal.Framework.Web.UI.Controls.Validation.ControlConnection,Jenzabar.Portal.Framework.Web.UI.Controls.Validation.VAMTypeConverter)">
            <summary>
            Constructor used by <see cref="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseOneFieldCondition.ConvertToThirdPartyControlConnection">BaseOneFieldCondition.ConvertToThirdPartyControlConnection</see>
            to convert its existing ControlConnection into this class.
            </summary>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.ThirdPartyControlConnection.fTypeConverter">
            <summary>
            The third party TypeConverter that is used.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.ThirdPartyControlConnection.IsValidControl(System.Web.UI.Control)">
            <summary>
            IsValidControl returns true when 
            <see cref="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.VAMTypeConverter.TestThirdPartyControl(System.Web.UI.Control)">VAMTypeConverter.TestThirdPartyControl</see>
            returns true for the control supplied.
            </summary>
            <param name="pControl">The control instance to be validated.</param>
            <returns>The result of passing Control into 
            <see cref="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.VAMTypeConverter.TestThirdPartyControl(System.Web.UI.Control)">VAMTypeConverter.TestThirdPartyControl</see>.</returns>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.ThirdPartyControlConnection.ValidateControlException(System.Web.UI.Control)">
            <summary>
            Customizes the error message to omit the list of valid datatypes that appears in the ancestor since
            this control requires a specific VAMTypeConverter.
            </summary>
            <param name="pControl"></param>
        </member>
        <member name="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.IGetDataTypeName">
            <summary>
            IGetDataTypeName should be assigned to a control class that explicitly defines
            the name of a VAMTypeConverter (<see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.VAMTypeConverter.Name"/>) to be used in a condition
            that supports <see cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.IDataTypeProperty"/> interface.
            </summary>
            <remarks>
            <see cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseDataTypeTextBox"/> is an example.
            </remarks>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.IGetDataTypeName.GetDataTypeName">
            <summary>
            GetDataTypeName should return a string with the <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.VAMTypeConverter.Name">VAMTypeConverter.Name</see> value
            of the VAMTypeConverter to be used.
            </summary>
            <remarks>
            <para>The name must match a VAMTypeConverter in the <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.Globals.DataTypes">Globals.DataTypes</see>
            collection.</para>
            </remarks>
            <returns>The name that matches the VAMTypeConverter.Name that supports the control.</returns>
        </member>
        <member name="T:Jenzabar.Portal.Framework.Web.Configuration.Settings">
            <summary>
            Summary description for Configuration.
            </summary>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Web.Configuration.Settings.m_PortalPageURL">
            <summary>
            Member string variable - m_PortalPageURL
            </summary>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Web.Configuration.Settings.m_CommonImagesPath">
            <summary>
            Member string variable - m_CommonImagesPath
            </summary>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Web.Configuration.Settings.m_PortletTitlebarImagesPath">
            <summary>
            Member string variable - m_PortletTitlebarImagesPath
            </summary>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Web.Configuration.Settings.m_PortletIconImagesPath">
            <summary>
            Member string variable - m_PortletIconImagesPath
            </summary>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Web.Configuration.Settings.m_PortletFooterImagesPath">
            <summary>
            Member string variable - m_PortletFooterImagesPath
            </summary>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Web.Configuration.Settings.m_ControlImagesPath">
            <summary>
            Member string variable - m_ControlImagesPath
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.Configuration.Settings.#ctor">
            <summary>
            Constructor for Static Class - Settings
            </summary>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.Configuration.Settings.Current">
            <summary>
            Gets the settings for this installation of the web framework.
            </summary>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.Configuration.Settings.PortalPageURL">
            <summary>
            Gets or sets the location relative to the root for the main portal page
            </summary>
            <remarks>
            This page will typically be default.aspx
            </remarks>
            <example>
            "~/default.aspx"
            </example>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.Configuration.Settings.CommonImagesPath">
            <summary>
            Gets or sets the path to the common images directory
            </summary>
            <remarks>
            This path is relative to the web application root
            The "~" prefix can be used to signify the application root
            </remarks>
            <example>
            "~/ui/common/images/"
            </example>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.Configuration.Settings.ControlImagesPath">
            <summary>
            Gets or sets the path to the control images directory
            </summary>
            <remarks>
            This path is relative to the web application root
            The "~" prefix can be used to signify the application root
            </remarks>
            <example>
            "~/ui/common/images/ControlImages/"
            </example>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.Configuration.Settings.PortletTitleBarImagesPath">
            <summary>
            Gets or sets the path to the images directory for the portlet title bar
            </summary>
            <remarks>
            This path is relative to the web application root
            The "~" prefix can be used to signify the application root
            </remarks>
            <example>
            "~/ui/common/images/PortletImages/TitleBar/"
            </example>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.Configuration.Settings.PortletIconImagesPath">
            <summary>
            Gets or sets the path to the images directory for the portlet icons
            </summary>
            <remarks>
            This path is relative to the web application root
            The "~" prefix can be used to signify the application root
            </remarks>
            <example>
            "~/ui/common/images/PorletImages/Icons/"
            </example>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.Configuration.Settings.PortletFooterImagesPath">
            <summary>
            Gets or sets the path to the images directory for the portlet footer
            </summary>
            <remarks>
            This path is relative to the web application root
            The "~" prefix can be used to signify the application root
            </remarks>
            <example>
            "~/ui/common/images/PortletImages/Footer/"
            </example>
        </member>
        <member name="T:Jenzabar.Portal.Framework.Web.UI.Controls.Login">
            <summary>
            Summary description for Login.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Login.#ctor">
            <summary>
            Constrcutor for the Login Class
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Login.CreateChildControls">
            <summary>
            Creates the children controls for this Control
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Login.Render(System.Web.UI.HtmlTextWriter)">
            <summary>
            Renders a 'fieldset' containing inputs for username and password and a button to 'login' if the user is not authenticated, otherwise renders info about the login.
            </summary>
            <param name="writer">The HtmlTextWriter to render the output to</param>
            <remarks>Does not make a call to base.Render</remarks>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Login.RenderLabelForControl(System.Web.UI.HtmlTextWriter,System.String,System.Web.UI.Control)">
            <summary>
            Renders HTML Markup for a label that will pass clicks through to an input control
            </summary>
            <param name="writer">The Html writer to render the control with</param>
            <param name="labelText">The text the user will see for the label</param>
            <param name="ctrl">The control that the label will be for</param>
        </member>
        <member name="T:Jenzabar.Portal.Framework.Web.UI.Controls.MetaControls.Attributes.DropDownListMetaControlAttribute">
            <summary>
            An attribute used to declare the need for a preference or setting to be displayed as a DropDownList
            </summary>
            <remarks>
            This attribute can be applied to either a portlet (a class that inherits from PortletBase) or
            an application (a class that inherits from PortalApplicationBase).
            
            It will be used by the framework to automatically generate the appropriate preferences or
            settings overlay that allows the user to enter the data for that preference or setting
            using the control specified.
            
            This information can then be retrieved by using the various preference and settings domain objects
            in the framework. They can also be accessed by using the Preferences or Settings property of the
            PortletBase and PortalApplicationBase classes.
            </remarks>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.MetaControls.Attributes.DropDownListMetaControlAttribute.#ctor(System.Int32,System.String,System.String,System.String,System.Boolean,System.String,System.String,Jenzabar.Portal.Framework.NameValueDataSourceType,Jenzabar.Portal.Framework.NameValueType,System.String)">
            <summary>
            Constructs a DropDownList meta control
            </summary>
            <param name="sortOrder">Ordinal that determines the meta control's position</param>
            <param name="name">The name of the meta control</param>
            <param name="displayName">The display name of the meta control</param>
            <param name="description">The description for the meta control</param>
            <param name="required">Denotes whether or not a value is required for the meta control</param>
            <param name="defaultItems">The list of selected items chosen by default</param>
            <param name="items">The complete list of items to select from</param>
            <param name="nameValueDataSourceType">Denotes whether or not the name/value data source is static or dynamic</param>
            <param name="nameValueType">The type of the name/value pair</param>
            <param name="cssClass">The CSS class for the meta control</param>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.MetaControls.Attributes.DropDownListMetaControlAttribute.#ctor(System.Int32,System.String,System.String,System.String,System.Type,System.Boolean,System.String,System.String,Jenzabar.Portal.Framework.NameValueDataSourceType,Jenzabar.Portal.Framework.NameValueType,System.String)">
            <summary>
            Constructs a DropDownList meta control
            </summary>
            <param name="sortOrder">Ordinal that determines the meta control's position</param>
            <param name="name">The name of the meta control</param>
            <param name="friendlyNameResourceKey">The resource key for the friendly name of the attribute</param>
            <param name="descriptionResourceKey">The resource key for a brief description of the attribute</param>
            <param name="resourceProvider">The qualified type name of the class that implements IResourceProvider</param>
            <param name="required">Denotes whether or not a value is required for the meta control</param>
            <param name="defaultItems">The list of selected items chosen by default</param>
            <param name="items">The complete list of items to select from</param>
            <param name="nameValueDataSourceType">Denotes whether or not the name/value data source is static or dynamic</param>
            <param name="nameValueType">The type of the name/value pair</param>
            <param name="cssClass">The CSS class for the meta control</param>
            <remarks>
            The resourceProvider argument is in the format: "AssemblyName,TypeName".
            </remarks>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.MetaControls.Attributes.DropDownListMetaControlAttribute.CreateMetaControl(System.Object)">
            <summary>
            Creates the meta control associated with the attribute
            </summary>
            <param name="key">The key used to retrieve dynamic values from a NameValueProvider, typically the object to which the attribute is attached</param>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.MetaControls.Attributes.DropDownListMetaControlAttribute.Items">
            <summary>
            Gets the complete list of items to select from
            </summary>
        </member>
        <member name="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.DataTypeTextBoxAction">
            <summary>
            The Action class for DataTypeTextBox controls.
            </summary>
            <remarks>
            <para>DataTypeTextBoxAction provides a client-side only interface which operates only 
            on TextBoxes. TextBoxes may be datatype specific, such as allow integers,
            dates or currency values. We've already got <see cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.VAMTypeConverter"/> objects
            to read the contents
            of a text box and determine that its type is valid or not. The DataTypeCheckCondition
            handles that determination.</para>
            <para>This class takes the final action of reformatting the text after its found to be
            valid. Numbers, currency, dates and times are obvious candidates for such reformatting
            while strings really don't fit.</para>
            <para>The <see cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.DataTypeCheckCondition"/> is assigned 
            a VAMTypeConverter through the constructor.
            The VAMTypeConverter provides a client-side method, CSConvertToFunctionName, which
            takes the result of the CSConvertFromFunction and reformats it.</para>
            <para>The overall client-side action looks like this:</para>
            <para>Run the DataTypeCheckCondition's CSConvertFromFunction. If the result is valid,
            run the CSConvertToFunction to get a string and assign it back to the control
            associated with the DataTypeCheckCondition.</para>
            <para>See the <b>Developer's Guide</b> for an overview.</para>
            </remarks>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.DataTypeTextBoxAction.#ctor(System.Web.UI.Control,Jenzabar.Portal.Framework.Web.UI.Controls.Validation.VAMTypeConverter)">
            <summary>
            Constructor that sets the Owner and VAMTypeConverter properties.
            </summary>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.DataTypeTextBoxAction.fValueWhenBlank">
            <summary>
            Storage for <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.DataTypeTextBoxAction.ValueWhenBlank"/>.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.DataTypeTextBoxAction.DoActionBody(System.Boolean)">
            <summary>
            Not used. Client-side only.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.DataTypeTextBoxAction.GetActionType">
            <returns>"DTTB"</returns>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.DataTypeTextBoxAction.DefineJavaScript(Jenzabar.Portal.Framework.Web.UI.Controls.Validation.VAMPage)">
            <summary>
            Includes the VAM_DTTB.js script file
            </summary>
            <param name="pPage">The current VAMPage object.</param>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.DataTypeTextBoxAction.DefineProperties(System.Text.StringBuilder)">
            <summary>
            Adds these properties to the client-side representation of the condition object:
            ToStrFnc, DefVal and anything supplied by the current 
            <see cref="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.VAMTypeConverter.AddReformatterProperties(Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseCondition,System.Text.StringBuilder)">VAMTypeConverter.AddReformatterProperties</see>.
            </summary>
            <remarks>
            <list type="table">
            <listheader>
            <term>Property</term>
            <description>Server side source</description>
            </listheader>
            <item><term>ToStrFnc (method)</term>
            <description><see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.VAMTypeConverter.CSConvertToFunction">VAMTypeConverter.CSConvertToFunction</see></description></item>
            <item><term>DefVal (string)</term>
            <description>ValueWhenBlank (when assigned)</description></item>
            <item><term>From VAMTypeConverter</term>
            <description><see cref="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.VAMTypeConverter.AddReformatterProperties(Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseCondition,System.Text.StringBuilder)">VAMTypeConverter.AddReformatterProperties</see>
            supplies rules for building the text string in the ToStrFnc.</description></item>
            </list>
            </remarks>
            <param name="pJavaScript">Append the properties to this stringbuilder.</param>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.DataTypeTextBoxAction.ValueWhenBlank">
            <summary>
            Gets and sets the value shown in the textbox when the field is blank.
            </summary>
            <value>
            <para>On the server side, its assigned to Text when Text is blank.</para>
            <para>On the client-side, when the field reformats and is empty, this is used.</para>
            <para>It defaults to "".</para>
            </value>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.DataTypeTextBoxAction.InitFunctionName">
            <summary>
            Client side Initialization function is "VAM_ReformatInit"
            </summary>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.DataTypeTextBoxAction.ActionFunctionName">
            <summary>
            Client side Action function is "VAM_ReformatAction"
            </summary>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.DataTypeTextBoxAction.CanSetCondition">
            <summary>
            Always returns false.
            </summary>
        </member>
        <member name="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.DTTBADataTypeCheckCondition">
            <summary>
            DTTBADataTypeCheckCondition is a specialized <see cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseDataTypeCheckCondition"/>
            that limits the controls to evaluate to only <see cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseDataTypeTextBox"/> controls.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.DTTBADataTypeCheckCondition.#ctor(Jenzabar.Portal.Framework.Web.UI.Controls.Validation.VAMTypeConverter)">
            <summary>
            Constructor that sets the VAMTypeConverter.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.DTTBADataTypeCheckCondition.#ctor(System.Web.UI.Control,Jenzabar.Portal.Framework.Web.UI.Controls.Validation.VAMTypeConverter)">
            <summary>
            Constructor that sets the Owner and VAMTypeConverter.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.DTTBADataTypeCheckCondition.GetControlToEvaluateConnectionType">
            <returns>DataTypeTextBoxControlConnection</returns>
        </member>
        <member name="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.DataTypeTextBoxControlConnection">
            <summary>
            DataTypeTextBoxControlConnection supports only BaseDataTypeTextBox controls
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.DataTypeTextBoxControlConnection.#ctor(System.Web.UI.Control,System.Boolean,System.String,Jenzabar.Portal.Framework.Web.UI.Controls.Validation.INamingObject)">
            <summary>
            Constructor
            </summary>
            <param name="pOwner">Control which owns the property that holds this class.
            It can be null only when you don't use the GetInstance method (or retrieve the ControlInstance property).
            This case is used by ControlConnectionTypeEditor to get to the IsValidControl method.</param>
            <param name="pAllowNoControl">When false, exception is thrown when no control is defined and the user calls GetInstance().</param>
            <param name="pPropertyName">The name of the property on pOwner which holds this class. Used in the default error message.</param>
            <param name="pParentNamingObject">A reference to the owner object that implements INamingObject.</param>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.DataTypeTextBoxControlConnection.InitControlTypes">
            <summary>
            Adds BaseDataTypeTextBox.
            </summary>
        </member>
        <member name="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseDataTypeTextBox">
            <summary>
            BaseDataTypeTextBox is the base class for all DataTypeTextBox controls.
            </summary>
            <remarks>
            <para>BaseDataTypeTextBox is a subclass of <see cref="T:System.Web.UI.WebControls.TextBox"/> that
            uses the Action class <see cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.DataTypeTextBoxAction"/> to manage the 
            data type and reformatting rules. Subclasses
            must provide the <see cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.VAMTypeConverter"/> that defines the datatype 
            and reformatting rules by overriding
            the <see cref="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseDataTypeTextBox.GetDataType"/> method.</para>
            <para>When <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseDataTypeTextBox.UseKeyboardFiltering"/> is true, 
            it adds an onkeypress event handler to the client-side with the "VAM_KeyFilter" function. 
            The characters to allow in the textbox come from
            the <see cref="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseDataTypeTextBox.GetKeyFilter"/> method.</para>
            <para>It provides two methods to get and set the data of the text box:
            <see cref="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseDataTypeTextBox.GetValue"/> and
            <see cref="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseDataTypeTextBox.SetValue(System.Object)"/>. They interact with the generic
            System.Object type. Subclasses must define properties of the correct data type
            that utilitize these methods, typecasting the generic object.
            </para>
            <para>See the <b>Developer's Guide</b> for an overview.</para>
            </remarks>
            <seealso cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseNumberTextBox"/>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseDataTypeTextBox.#ctor">
            <summary>
            Constructor with no parameters.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseDataTypeTextBox.#ctor(System.Boolean)">
            <summary>
            Constructor that sets the UseKeyboardFiltering property.
            </summary>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseDataTypeTextBox.fVAMTypeConverter">
            <summary>
            Storage for <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseDataTypeTextBox.VAMTypeConverter"/>.
            </summary>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseDataTypeTextBox.fUseKeyboardFiltering">
            <summary>
            Storage for <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseDataTypeTextBox.UseKeyboardFiltering"/>.
            </summary>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseDataTypeTextBox.fValueWhenBlank">
            <summary>
            Storage for <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseDataTypeTextBox.ValueWhenBlank"/>.
            </summary>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseDataTypeTextBox.fSupportClientSideLookupByID">
            <summary>
            Storage for <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseDataTypeTextBox.SupportClientSideLookupByID"/>.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseDataTypeTextBox.GetDataType">
            <summary>
            GetDataType must return a <see cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.VAMTypeConverter"/> instance which defines the data type.
            </summary>
            <returns>An instance of a VAMTypeConverter.</returns>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseDataTypeTextBox.GetDataTypeName">
            <summary>
            Implements the <see cref="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.IGetDataTypeName.GetDataTypeName">IGetDataTypeName.GetDataTypeName</see> method 
            to return the name of the VAMTypeConverter used by the subclass.
            </summary>
            <returns>The name of the VAMTypeConverter.</returns>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseDataTypeTextBox.GetKeyFilter">
            <summary>
            GetKeyFilter is used to support keyboard filtering of the text box. 
            </summary>
            <remarks>
            <para>OnPreRender adds an attribute called
            "KeyFltr" with the string supply by this method and uses it in the 
            client-side "VAM_KeyFilter" function.</para>
            <para>When blank, there is no filtering. Otherwise,
            each character of this string is a valid character for the field. Any
            other character is ignored. It doesn't affect movement and editing keys
            like arrows, page up, delete, backspace, and tab.</para>
            <para>All letters should be uppercase as keystrokes will be case insensitive.</para>
            <para>Include digits, letters, space and punctuation in this string.
            It should use international formatting as needed from VAMPage.Current.CultureInfo.</para>
            <para>It defaults to "".</para>
            </remarks>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseDataTypeTextBox.OnPreRender(System.EventArgs)">
            <remarks>
            <para>Aside from calling the ancestor, it does the following:</para>
            <list type="bullet">
            <item><description>If UseKeyboardFiltering is true, it adds the attribute "KeyFltr" with the 
            string from GetKeyFilter.</description></item>
            <item><description>Creates the Action using <see cref="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseDataTypeTextBox.GetDataTypeTextBoxAction"/>
            and transfers properties from the control instance to the Action before running 
            <see cref="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseCA.Prepare"/>.</description></item>
            <item><description>If the Text is blank, it assigns the value of ValueWhenBlank.</description></item>
            </list>
            </remarks>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseDataTypeTextBox.GetDataTypeTextBoxAction">
            <summary>
            Creates an instance of DataTypeTextBoxAction.
            </summary>
            <remarks>
            Designed to allow subclasses to specify their own subclass of DataTypeTextBoxAction.
            </remarks>
            <returns>An instance of a DataTypeTextBoxAction.</returns>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseDataTypeTextBox.TransferProperties(Jenzabar.Portal.Framework.Web.UI.Controls.Validation.DataTypeTextBoxAction)">
            <summary>
            TransferProperties is called after <see cref="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseDataTypeTextBox.GetDataTypeTextBoxAction"/> 
            to transfer properties from this control class to the pAction object.
            </summary>
            <remarks>
            <para>When you subclass <see cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.DataTypeTextBoxAction"/>
            and introduce properties on your control class that must be transferred to
            your Action class, do it here.</para>
            </remarks>
            <param name="pAction">The destination DataTypeTextBoxAction object for the properties of this control.</param>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseDataTypeTextBox.GetValue">
            <summary>
            GetValue returns the value of the text field converted to the native data type
            defined by the associated <see cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.VAMTypeConverter"/>. 
            </summary>
            <remarks>
            <para>This method uses <see cref="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.VAMTypeConverter.ConvertFrom(System.Object)">VAMTypeConverter.ConvertFrom</see> to
            convert text into its native data type.
            </para>
            <para>Subclasses should provide a property that uses the native data type instead of 'object'
            and calls this in its Get selector.</para>
            <para>Returns null if the text cannot be converted or the field is empty.</para>
            </remarks>
            <returns>The native data type converted from the Text of the field or 
            null when it cannot be converted or is empty.</returns>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseDataTypeTextBox.SetValue(System.Object)">
            <summary>
            Sets the Text property after formatting the value passed in.
            </summary>
            <remarks>
            <para>Uses VAMTypeConverter.<see cref="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.VAMTypeConverter.ConvertTo(System.Object)">VAMTypeConverter.ConvertTo</see> to convert
            the object into text.</para>
            </remarks>
            <param name="pValue">The value to convert into text.</param>
            <exception cref="T:System.ArgumentException">The value is not a data type supported
            by the VAMTypeConverter.</exception>
            <exception cref="T:System.ArgumentException">The value cannot be converted by 
            the VAMTypeConverter.</exception>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseDataTypeTextBox.VAMTypeConverter">
            <summary>
            VAMTypeConverter gets the <see cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.VAMTypeConverter"/> that handles this class's data type.
            </summary>
            <value>
            Uses <see cref="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseDataTypeTextBox.GetDataType"/> to initialize itself.
            </value>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseDataTypeTextBox.UseKeyboardFiltering">
            <summary>
            UseKeyboardFiltering determines if the client-side filters out characters
            that are not supported by the datatype.
            </summary>
            <value>
            <para>When true, filtering is enabled. The <see cref="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseDataTypeTextBox.GetKeyFilter"/>
            method must be overridden to supply the list of valid characters. The client-side function
            "VAM_KeyFilter" prevents entry of invalid keystrokes when this is true.</para>
            <para>It defaults to true.</para>
            </value>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseDataTypeTextBox.ValueWhenBlank">
            <summary>
            ValueWhenBlank is the value shown in the textbox when the field is blank.
            </summary>
            <value>
            <para>On the server side, its assigned to the Text property when Text is blank.</para>
            <para>On the client-side, when the field reformats and is empty, this is used.</para>
            <para>It defaults to "".</para>
            </value>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseDataTypeTextBox.IsValid">
            <summary>
            IsValid determines if the contents of the text box represents the datatype defined
            by GetDataType.
            </summary>
            <value>
            <para>Returns true when it does represent the data. Returns false when it does not.</para>
            <para>If the Text is blank (after trimming), it returns false.</para>
            </value>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseDataTypeTextBox.IsEmpty">
            <summary>
            IsEmpty returns true when the text is blank (after trimming).
            It simplifies testing for this condition.
            </summary>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseDataTypeTextBox.Text">
            <summary>
            Overridden to supply the UITypeEditor <see cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.StringTypeEditor"/>
            and a different description for the Property Editor.
            </summary>
            <remarks>
            <para><b>EditorAttribute:</b><see cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.StringTypeEditor"/></para>
            </remarks>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseDataTypeTextBox.SupportClientSideLookupByID">
            <summary>
            SupportClientSideLookupByID allows JavaScript programmers to get several client-side
            functions: VAM_FindAOByID, VAM_GetDTTBValue, VAM_SetDTTBValue, and VAM_FormatDTTBValue.
            </summary>
            <value>
            <para>Use the client-side function VAM_FindAOById to search for the action that
            matches the clientID you specify. That function will return null if not found.
            Use the Action object to modify it, such as changing the Enabled property.
            </para>
            <para>Use the client-side function VAM_GetDTTBValue to get the native data type
            value from the textbox. Pass the ClientID of the textbox. It returns a native data type
            (int, double, etc) or null if it could not convert the data.</para>
            <para>Use the client-side function VAM_SetDTTBValue to set the native data type
            value to the textbox, following the culture formatting you assigned to the textbox.
            It returns true if the value successfully was assigned.</para>
            <para>When this property is true, two things happen:</para>
            <para>1. The ID is written as a property, CID, into the control.</para>
            <para>2. If the Enabled property is false, normally no code is written to the client side.
               This is overridden and code is generated so users can toggle the enabled property.
               Note that client-side code is NEVER generated when the browser doesn't support it
               or the EnableClientScript property is false.</para>
            </value>
            <example>
            <para>This shows how to use the VAM_GetDTTBValue and VAM_FormatDTTBValue functions.
            The page has two DataTypeTextBoxes and a &lt;span&gt; tag that will show the results
            of adding both textboxes together. This is JavaScript code.</para>
            <code>
            function AddTwoTextBoxes(pTextBoxID1, pTextBoxID2, pSpanID)
            {
              var vValue1 = VAM_GetDTTBValue(pTextBoxID1);
              var vValue2 = VAM_GetDTTBValue(pTextBoxID2);
              if ((vValue1 != null) &amp;&amp; (vValue2 != null))
              {
                 var vText = VAM_FormatDTTBValue(pTextBoxID1, vValue1 + vValue2);
                 var vSpanFld = VAM_GetById(pSpanID);
                 VAM_SetInnerHTML(vSpanFld, vText);
              }
            }
            </code>
            </example>
        </member>
        <member name="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseNumberTextBox">
            <summary>
            BaseNumberTextBox is a DataTypeTextBox that supports numbers. It must be subclassed to handle
            a particular type of number.
            </summary>
            <remarks>
            <para>It introduces the properties <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseNumberTextBox.AllowNegatives"/>
            and <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseNumberTextBox.ShowThousandsSeparator"/>.
            </para>
            <para>The <see cref="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseNumberTextBox.GetKeyFilter"/> method
            returns digits and negative symbols. Subclasses can add to this filter string.</para>
            </remarks>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseNumberTextBox.#ctor">
            <summary>
            Constructor with no parameters.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseNumberTextBox.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Constructor that sets the UseKeyboardFiltering and AllowNegatives properties.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseNumberTextBox.#ctor(System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Constructor that sets the UseKeyboardFiltering, AllowNegatives,
            and ShowThousandsSeparator properties.
            </summary>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseNumberTextBox.fAllowNegatives">
            <summary>
            Storage for <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseNumberTextBox.AllowNegatives"/>.
            </summary>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseNumberTextBox.fShowThousandsSeparator">
            <summary>
            Storage for <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseNumberTextBox.ShowThousandsSeparator"/>.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseNumberTextBox.GetKeyFilter">
            <returns>Digits and "-" when AllowNegatives is true.</returns>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseNumberTextBox.AllowNegatives">
            <summary>
            AllowNegatives determines if negative numbers are permitted.
            </summary>
            <value>
            <para>When true, they are permitted.</para>
            <para>It defaults to true.</para>
            </value>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseNumberTextBox.ShowThousandsSeparator">
            <summary>
            ShowThousandsSeparator adds the thousands separator when the text is reformatted.
            </summary>
            <value>
            <para>The Globals.Page.CultureInfo.NumberFormat defines the separator character.
            (The user can always type in this character but it will be removed during reformat 
            unless this is true.)</para>
            <para>It defaults to false.</para>
            </value>
        </member>
        <member name="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.IntegerTextBox">
            <summary>
            IntegerTextBox is a <see cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseNumberTextBox"/> for integers. 
            </summary>
            <remarks>
            <para>It provides the <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.IntegerTextBox.IntegerValue"/> 
            property as a type specific wrapper around 
            <see cref="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseDataTypeTextBox.GetValue"/> and 
            <see cref="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseDataTypeTextBox.SetValue(System.Object)"/>.</para>
            <para>It filters only digits and negative symbols.</para>
            <para><see cref="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.IntegerTextBox.GetDataType"/> returns 
            <see cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.Int32VAMTypeConverter"/> or 
            <see cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.PosInt32VAMTypeConverter"/> depending on AllowNegatives.</para>
            </remarks>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.IntegerTextBox.#ctor">
            <summary>
            Constructor with no parameters.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.IntegerTextBox.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Constructor that sets the UseKeyboardFiltering and AllowNegatives properties.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.IntegerTextBox.#ctor(System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Constructor that sets the UseKeyboardFiltering, AllowNegatives,
            and ShowThousandsSeparator properties.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.IntegerTextBox.GetDataType">
            <summary>
            Returns <see cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.Int32VAMTypeConverter"/> or a subclass.
            </summary>
            <returns><see cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.Int32VAMTypeConverter"/> or 
            <see cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.PosInt32VAMTypeConverter"/> depending on AllowNegatives.</returns>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.IntegerTextBox.GetKeyFilter">
            <returns>In addition to digits and "-" supplied by the ancestor, it
            adds the CultureInfo.NumberFormat.NumberGroupSeparator. </returns>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.IntegerTextBox.IntegerValue">
            <summary>
            Gets and sets the value of this control using an Int32 value.
            </summary>
            <value>
            <para>Wrapper around 
            <see cref="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseDataTypeTextBox.GetValue"/> and 
            <see cref="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseDataTypeTextBox.SetValue(System.Object)"/>.</para>
            <para>If you get the value and it cannot be converted from the text, it throws
            an exception. Use the property <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseDataTypeTextBox.IsValid"/> to detect
            an incorrect format.</para>
            </value>
            <exception cref="T:System.FormatException">When the text cannot be converted into a integer.</exception>
        </member>
        <member name="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.DecimalTextBox">
            <summary>
            DecimalTextBox is a <see cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseNumberTextBox"/> for doubles. 
            </summary>
            <remarks>
            <para>It provides the <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.DecimalTextBox.DoubleValue"/> 
            property as a type specific wrapper around 
            <see cref="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseDataTypeTextBox.GetValue"/> and 
            <see cref="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseDataTypeTextBox.SetValue(System.Object)"/>.</para>
            <para>It filters digits, negative symbols, thousands separators and the decimal separator.</para>
            <para><see cref="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.DecimalTextBox.GetDataType"/> returns 
            <see cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.DoubleVAMTypeConverter"/> or 
            <see cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.PosDoubleVAMTypeConverter"/> depending on AllowNegatives.</para>
            </remarks>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.DecimalTextBox.#ctor">
            <summary>
            Constructor with no parameters.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.DecimalTextBox.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Constructor that sets the UseKeyboardFiltering and AllowNegatives properties.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.DecimalTextBox.#ctor(System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Constructor that sets the UseKeyboardFiltering, AllowNegatives,
            and ShowThousandsSeparator properties.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.DecimalTextBox.GetDataType">
            <summary>
            Returns <see cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.DoubleVAMTypeConverter"/> or a subclass.
            </summary>
            <returns><see cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.DoubleVAMTypeConverter"/> or 
            <see cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.PosDoubleVAMTypeConverter"/> depending on AllowNegatives.</returns>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.DecimalTextBox.GetKeyFilter">
            <returns>In addition to digits and "-" supplied by the ancestor, it
            adds the CultureInfo.NumberFormat.NumberGroupSeparator. </returns>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.DecimalTextBox.DoubleValue">
            <summary>
            Gets and sets the value of this control using a value whose type is 'double'.
            </summary>
            <value>
            <para>Wrapper around 
            <see cref="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseDataTypeTextBox.GetValue"/> and 
            <see cref="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseDataTypeTextBox.SetValue(System.Object)"/>.</para>
            <para>If you get the value and it cannot be converted from the text, it throws
            an exception. Use the property <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseDataTypeTextBox.IsValid"/> to detect
            an incorrect format.</para>
            </value>
            <exception cref="T:System.FormatException">When the text cannot be converted into a double.</exception>
        </member>
        <member name="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.CurrencyTextBox">
            <summary>
            CurrencyTextBox is a <see cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseNumberTextBox"/> representing currency values
            as a double. 
            </summary>
            <remarks>
            <para>It provides the <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.CurrencyTextBox.DoubleValue"/> 
            property as a type specific wrapper around 
            <see cref="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseDataTypeTextBox.GetValue"/> and 
            <see cref="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseDataTypeTextBox.SetValue(System.Object)"/>.</para>
            <para>It filters digits, negative symbols, thousands separators, the decimal separator,
            and optionally the currency symbol.</para>
            <para><see cref="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.CurrencyTextBox.GetDataType"/> returns variations of
            <see cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.CurrencyVAMTypeConverter"/>.</para>
            </remarks>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.CurrencyTextBox.#ctor">
            <summary>
            Constructor with no parameters.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.CurrencyTextBox.#ctor(System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Constructor that sets the UseKeyboardFiltering, AllowNegatives,
            AllowExtraDecimalDigits, and UseCurrencySymbol properties.
            </summary>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.CurrencyTextBox.fUseCurrencySymbol">
            <summary>
            Storage from <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.CurrencyTextBox.UseCurrencySymbol"/>.
            </summary>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.CurrencyTextBox.fAllowExtraDecimalDigits">
            <summary>
            Storage from <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.CurrencyTextBox.AllowExtraDecimalDigits"/>.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.CurrencyTextBox.GetDataType">
            <summary>
            Returns <see cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.CurrencyVAMTypeConverter"/> or one of subclasses.
            </summary>
            <returns><see cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.CurrencyVAMTypeConverter"/>, 
            <see cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.CurrencyWSymbolVAMTypeConverter"/>,
            <see cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.PosCurrencyVAMTypeConverter"/>,
            <see cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.PosCurrencyWSymbolVAMTypeConverter"/> depending on AllowNegatives
            and UseCurrencySymbol.</returns>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.CurrencyTextBox.GetKeyFilter">
            <returns>In addition to digits and "-" supplied by the ancestor, it
            adds the CultureInfo.NumberFormat.NumberGroupSeparator, "(", ")",
            CultureInfo.NumberFormat.CurrencyDecimalSeparator and optionally
            CultureInfo.NumberFormat.CurrencySymbol. </returns>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.CurrencyTextBox.UseCurrencySymbol">
            <summary>
            UseCurrencySymbol determines if the currency symbol can appear in the text.
            </summary>
            <value>
            <para>When true, the currency symbol appears upon reformat and is allowed during entry.</para>
            <para>It defaults to false.</para>
            <para>Reformatting follows the CultureInfo.NumberFormat properties for currency.</para>
            </value>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.CurrencyTextBox.AllowExtraDecimalDigits">
            <summary>
            AllowExtraDecimalDigits lets the user enter more decimal digits than
            defined by the CultureInfo.NumberFormat.CurrentDecimalDigits when true.
            </summary>
            <value>
            <para>When false, the user is limited to CultureInfo.NumberFormat.CurrentDecimalDigits.</para>
            <para>It defaults to false.</para>
            </value>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.CurrencyTextBox.DoubleValue">
            <summary>
            DoubleValue gets and sets the value of this control using a value whose type is 'double'.
            </summary>
            <value>
            <para>Wrapper around 
            <see cref="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseDataTypeTextBox.GetValue"/> and 
            <see cref="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseDataTypeTextBox.SetValue(System.Object)"/>.</para>
            <para>If you get the value and it cannot be converted from the text, it throws
            an exception. Use the property <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseDataTypeTextBox.IsValid"/> to detect
            an incorrect format.</para>
            </value>
            <exception cref="T:System.FormatException">When the text cannot be converted into a double.</exception>
        </member>
        <member name="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.MultiAction">
            <summary>
            MultiAction maintains a list of Actions and runs all enabled Actions based 
            on the results of a single condition. 
            </summary>
            <remarks>
            For example, you can hide several fields 
            based on the value of a checkbox where the child actions are FieldStateActions.
            Add actions to the Actions collection.
            </remarks>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.MultiAction.#ctor">
            <summary>
            Constructor with no parameters. The owner control must assign itself to the Owner property before
            Prepare is called.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.MultiAction.#ctor(System.Web.UI.Control)">
            <summary>
            Constructor which assigns the Owner property.
            </summary>
            <param name="pOwner">The control which owns the action.</param>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.MultiAction.#ctor(Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseCondition)">
            <summary>
            Constructor which assigns the Condition property.
            </summary>
            <param name="pCondition"></param>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.MultiAction.#ctor(System.Web.UI.Control,Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseCondition)">
            <summary>
            Constructor which assigns the Owner and Condition properties.
            </summary>
            <param name="pOwner"></param>
            <param name="pCondition"></param>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.MultiAction.fActions">
            <summary>
            Storage for <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.MultiAction.Actions"/>.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.MultiAction.DoActionBody(System.Boolean)">
            <summary>
            Runs through the Actions, calling their <see cref="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseAction.DoActionBody(System.Boolean)"/> method.
            The DoActionBody skips checking each action's own Condition since we've already
            got the condition value.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.MultiAction.PrepareBody">
            <summary>
            All child Actions must have their prepare method called
            but only after we are assured that they have access to the same Condition instance
            on this class. That assignment may throw an exception if the Condition cannot be re-assigned.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.MultiAction.DefineJavaScript(Jenzabar.Portal.Framework.Web.UI.Controls.Validation.VAMPage)">
            <summary>
            Registers the VAM_FSC.js file.
            </summary>
            <param name="pPage"></param>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.MultiAction.DefineProperties(System.Text.StringBuilder)">
            <summary>
            Adds the Actions property to the client-side representation of the Action object.
            </summary>
            <remarks>
            "Actions" (array of VAM objects) - each VAM object is an Action.
              Omits writing the conditions because the client side adds them.
            </remarks>
            <param name="pJavaScript"></param>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.MultiAction.AddParsedSubObject(System.Object)">
            <summary>
            If the object is <see cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseAction"/>, it is added to Actions.
            Otherwise, the object is passed to the ancestor.
            </summary>
            <param name="pObj"></param>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.MultiAction.AddToActions(Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseAction)">
            <summary>
            AddToActions adds the action instance to Actions. It also detaches it from
            VAMPage.Actions as this action no longer should be managed by VAMPage.
            Always call this instead of adding directly to Actions.
            </summary>
            <param name="pObj"></param>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.MultiAction.GetActionType">
            <returns>"MULT"</returns>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.MultiAction.Actions">
            <summary>
            Actions is a list of actions. Their actions are run in the order of this list.
            </summary>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.MultiAction.ActionFunctionName">
            <summary>
            Uses the client-side Action Function "VAM_DoMultiAction".
            </summary>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.MultiAction.InitFunctionName">
            <summary>
            Uses the client-side initialization function "VAM_InitMultiAction".
            </summary>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.MultiAction.AutoRunAction">
            <summary>
            Returns true only when all child actions return true in their AutoRunAction.
            </summary>
        </member>
        <member name="T:Jenzabar.Portal.Framework.Web.UI.Controls.Secured.SCheckBoxList">
            <summary>
            A secured, operation aware version of the CheckBoxList control
            </summary>
            <remarks>
            Secured controls can be used to make interface elements aware of whether or not
            a user has access to a particular operation assigned to the control
            
            If the user does not have access to the operation(s) assigned to the control, the
            control can be set to render differently (or not at all) to prevent the user from
            using the control to perform the secured operation
            
            In addition, events normally raised by the control will not be raised if the control
            detects that the access check has failed. This prevents users from "spoofing" access
            by simulating a postback.
            </remarks>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Web.UI.Controls.Secured.SCheckBoxList.m_OperationNames">
            <summary>
            Member variable - m_OperationNames
            </summary>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Web.UI.Controls.Secured.SCheckBoxList.m_IsSecured">
            <summary>
            Member variable - m_IsSecured
            </summary>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Web.UI.Controls.Secured.SCheckBoxList.m_AccessCheckType">
            <summary>
            Member variable - m_AccessCheckType
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Secured.SCheckBoxList.#ctor">
            <summary>
            Constructor for SCheckBoxList Control
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Secured.SCheckBoxList.OnSelectedIndexChanged(System.EventArgs)">
            <summary>
            Overrides the OnSelectedIndexChanged event in base control
            </summary>
            <param name="e">EventArgs</param>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Secured.SCheckBoxList.OnPreRender(System.EventArgs)">
            <summary>
            Overrides the OnPreRender event in base control
            </summary>
            <param name="e">EventArgs</param>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Secured.SCheckBoxList.SecureControl">
            <summary>
            Used internally to secure the control
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Secured.SCheckBoxList.Render(System.Web.UI.HtmlTextWriter)">
            <summary>
            Overrides the Render event in base control
            </summary>
            <param name="writer">HtmlTextWriter to render control with</param>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Secured.SCheckBoxList.AccessCheckFailedText">
            <summary>
            Gets or sets the text to display if an access check fails.
            </summary>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Secured.SCheckBoxList.AccessCheckFailedTextCSSClass">
            <summary>
            Gets or sets the style to apply to the text if displayed if the access check fails and the display type is 'Text'.
            </summary>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Secured.SCheckBoxList.OperationNames">
            <summary>
            Member Property - OperationNames
            </summary>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Secured.SCheckBoxList.IsSecured">
            <summary>
            Member Property - IsSecured
            </summary>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Secured.SCheckBoxList.AccessCheckType">
            <summary>
            Member Property - AccessCheckType
            </summary>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Secured.SCheckBoxList.DisplayType">
            <summary>
            Member Property - m_DisplayType
            </summary>
        </member>
        <member name="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.PickPropertyTypeForm">
            <summary>
            PickPropertyTypeForm is used by the UITypeEditor 
            <see cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.OneConditionUITypeEditor"/>.
            </summary>
            <remarks>
            <para>It allows the user select a BaseCondition subclass from a list. 
            The list is generated from ConfigFile.<see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.ConfigFile.Conditions"/>, which is 
            itself from the VAM.config and Custom.VAM.config files.</para>
            <para>The user can also select a "None" button to return with no condition.
            Only open this dialog box when there is no condition selected to get an initial value.
            Use it to select a different condition from the <see cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.OneConditionPropertyGridForm"/>.</para>
            <para>Use the Condition property to exchange the BaseCondition class that is being edited.
            If you select None, Condition will return null.</para>
            </remarks>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.PickPropertyTypeForm.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.PickPropertyTypeForm.fUseNoneButton">
            <summary>
            Storage for UseNoneButton.
            </summary>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.PickPropertyTypeForm.fInstance">
            <summary>
            Storage for Instance.
            </summary>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.PickPropertyTypeForm.fPropertyName">
            <summary>
            Storage for PropertyName.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.PickPropertyTypeForm.#ctor(System.Object,System.String)">
            <summary>
            Constructor. Sets the Instance and PropertyName properties.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.PickPropertyTypeForm.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.PickPropertyTypeForm.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.PickPropertyTypeForm.PickPropertyTypeForm_Load(System.Object,System.EventArgs)">
            <summary>
            OnLoad event handler. Sets up the form.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.PickPropertyTypeForm.FillInList(System.Windows.Forms.ListBox)">
            <summary>
            FillInList is called by PickPropertyTypeForm_Load to let the subclass fill
            in ListOfTypes and assign an initial SelectedIndex value.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.PickPropertyTypeForm.GeneralTypeName">
            <summary>
            GeneralTypeName returns text that describes the list of classes. It is used
            in the form title replacing the token {1}.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.PickPropertyTypeForm.NoneButton_Click(System.Object,System.EventArgs)">
            <summary>
            None button event handler.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.PickPropertyTypeForm.ClearData">
            <summary>
            ClearData is called by NoneButton_Click to notify it that the user has clicked None
            It should clear, perhaps set to null, the data it will return to the caller.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.PickPropertyTypeForm.OKButton_Click(System.Object,System.EventArgs)">
            <summary>
            OK button event handler.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.PickPropertyTypeForm.AssignData(System.Windows.Forms.ListBox)">
            <summary>
            AssignData is called by OKButton_Click to create the data based on the selection in the list.
            It should generate an object instance which the caller will use with PropertyGridForm.
            </summary>
            <param name="pListBox">The list box to assign items.</param>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.PickPropertyTypeForm.ListOfTypes_SelectedIndexChanged(System.Object,System.EventArgs)">
            <summary>
            Listbox SelectedIndexChanged event handler.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.PickPropertyTypeForm.ListOfTypes_DoubleClick(System.Object,System.EventArgs)">
            <summary>
            Listbox DoubleClick event handler. Runs the OK button Click event.
            </summary>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.PickPropertyTypeForm.UseNoneButton">
            <summary>
            When true, the None Button is supported.
            </summary>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.PickPropertyTypeForm.Instance">
            <summary>
            Instance is the object that the list selects. It can be null to represent None.
            Subclasses may form their own property that typecasts Instance.
            </summary>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.PickPropertyTypeForm.PropertyName">
            <summary>
            PropertyName should be assigned by the caller to the name of the property that we are editing.
            </summary>
        </member>
        <member name="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.PickConditionForm">
            <summary>
            PickConditionForm provides a form used by the UITypeEditor 
            <see cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.OneConditionUITypeEditor"/>.
            </summary>
            <remarks>
            <para>It allows selecting Conditions from the list in ConfigFile.<see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.ConfigFile.Conditions"/>
            and editing the selected Condition's properties.</para>
            </remarks>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.PickConditionForm.#ctor(Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseCondition,System.String)">
            <summary>
            Constructor that sets Instance and PropertyName properties.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.PickConditionForm.FillInList(System.Windows.Forms.ListBox)">
            <summary>
            Adds items to the listbox from the <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.ConfigFile.Conditions"/>
            collection. Gets the string from the BaseCondition.Name property.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.PickConditionForm.GeneralTypeName">
            <returns>"Condition"</returns>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.PickConditionForm.ClearData">
            <summary>
            Clears Condition to null.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.PickConditionForm.AssignData(System.Windows.Forms.ListBox)">
            <summary>
            Gets the Condition based on the SelectedIndex and the associated Condition
            in <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.ConfigFile.Conditions"/>.
            </summary>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.PickConditionForm.Condition">
            <summary>
            Condition is the instance we are working with. It can be null to represent "None".
            It should be set by the form creator to pass along the current value and pass
            back the result.
            </summary>
        </member>
        <member name="T:Jenzabar.Portal.Framework.Web.UI.Controls.MetaControls.TextBoxMetaControl">
            <summary>
            A meta-data aware version of the TextBox control
            </summary>
            <remarks>
            Meta-data aware controls can be used for rendering preference and settings based
            on meta data attributes.
            </remarks>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.MetaControls.TextBoxMetaControl.#ctor(Jenzabar.Portal.Framework.Web.UI.Controls.MetaControls.Attributes.TextBoxMetaControlAttribute,System.Object)">
            <summary>
            Constructs a TextBox meta control
            </summary>
            <param name="textBoxMetaControlAttribute">The attribute for the TextBox meta control</param>
            <param name="key">The key used to retrieve dynamic values from a NameValueProvider, typically the object to which the attribute is attached</param>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.MetaControls.TextBoxMetaControl.CreateChildControls">
            <summary>
            Builds children controls for this control
            </summary>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.MetaControls.TextBoxMetaControl.MetaControlAttribute">
            <summary>
            Gets or sets the attribute for the meta control
            </summary>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.MetaControls.TextBoxMetaControl.Name">
            <summary>
            Gets the name of the meta control
            </summary>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.MetaControls.TextBoxMetaControl.Value">
            <summary>
            Gets the value of the meta control
            </summary>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.MetaControls.TextBoxMetaControl.Scope">
            <summary>
            Gets the scope of the meta control
            </summary>
        </member>
        <member name="T:Jenzabar.Portal.Framework.Web.UI.PortletContainer">
            <summary>
            Enumeration of portlet containers
            </summary>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Web.UI.PortletContainer.Help">
            <summary>
            The container for the inline help inside the portlet
            </summary>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Web.UI.PortletContainer.Content">
            <summary>
            The container for the contents of the portlet (where the screens and overlays are loaded)
            </summary>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Web.UI.PortletContainer.Footer">
            <summary>
            The container for the footer of the portlet
            </summary>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Web.UI.PortletContainer.All">
            <summary>
            All portlet containers
            </summary>
        </member>
        <member name="T:Jenzabar.Portal.Framework.Web.UI.PortletState">
            <summary>
            Enumeration of portlet states
            </summary>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Web.UI.PortletState.Default">
            <summary>
            Shown side by side with the other portlets on the page
            </summary>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Web.UI.PortletState.Minimized">
            <summary>
            Shown side by side with the other portlets on the page, but with the contents hidden (only the titlebar and footer are shown)
            </summary>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Web.UI.PortletState.Maximized">
            <summary>
            Shown as taking up the entire page, causing other portlets on the page to become hidden
            </summary>
        </member>
        <member name="T:Jenzabar.Portal.Framework.Web.UI.PortletAction">
            <summary>
            Enumeration of portlet states
            </summary>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Web.UI.PortletAction.PinToHomepage">
            <summary>
            Add a portlet shortsut for the current portlet to the user's homepage
            </summary>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Web.UI.PortletAction.Refresh">
            <summary>
            Refresh the contents of the portlet
            </summary>
        </member>
        <member name="T:Jenzabar.Portal.Framework.Web.UI.FeedbackType">
            <summary>
            Enum to represent what style to apply to the Portlet Feedback Control.
            </summary>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Web.UI.FeedbackType.Error">
            <summary>
            The feedback type will look like an error (probably red)
            </summary>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Web.UI.FeedbackType.Message">
            <summary>
            The feedback type is more informational.  Like, confirmation.
            </summary>
        </member>
        <member name="T:Jenzabar.Portal.Framework.Web.UI.SecuredPortletBase">
            <summary>
            Provides basic security for portlets that should only be useable by privlidged users.
            </summary>
            <remarks>
            This is done by exposing a global operation that is then checked before the portlet is rendered. This will prevent users that are not a memeber of a group that is granted the operation from viewing the portlet. They will be given a message informing them that they do not have permission to use the portlet.
            </remarks>
        </member>
        <member name="T:Jenzabar.Portal.Framework.Web.UI.Controls.RoleSelector">
            <summary>
            Provides selection capabilities for base roles.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.RoleSelector.Render(System.Web.UI.HtmlTextWriter)">
            <summary>
            
            </summary>
            <param name="writer"></param>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.RoleSelector.SortAndRemoveEveryoneRole(Jenzabar.Portal.Framework.PortalGroup[])">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.RoleSelector.SelectedRoles">
            <summary>
            Gets and sets the roles that are selected.
            </summary>
        </member>
        <member name="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.StringLookup">
            <summary>
            StringLookup defines global events, properties and methods used by the String Lookup
            System.
            </summary>
            <remarks>
            <para>The String Lookup System provides various string properties with the
            <see cref="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.StringLookup.StringIDLookup(System.String,System.String,System.String)"/> method to translate
            a LookupID value into the associated text. Underlying StringIDLookup is an
            event handler that does the translation. Unless the event handler is hooked up,
            no translation is provided.</para>
            <para>This class supplies several predefined event handlers, for resource
            and database storage. Users can write their own event handler too.</para>
            <para>See the <b>User's Guide</b> for details on setting up the String Lookup System.</para>
            <para>This class includes:</para>
            <list type="bullet">
            <item><description>
            The event handler method <see cref="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.StringLookup.ResourceManagerLookupHandler(Jenzabar.Portal.Framework.Web.UI.Controls.Validation.LookupStringHandlerArgs)"/>
            used for lookups from resource files.
            </description></item>
            <item><description>
            The event handler method <see cref="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.StringLookup.DatabaseLookupHandler(Jenzabar.Portal.Framework.Web.UI.Controls.Validation.LookupStringHandlerArgs)"/>
            used for lookups from a database.
            </description></item>
            <item><description>
            Properties to configure the ResourceManagerLookupHandler and DatabaseLookupHandler.
            The ability to read those properties from custom.VAM.config in 
            <see cref="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.StringLookup.Configure"/>.
            </description></item>
            <item><description>
            The event <see cref="F:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.StringLookup.OnLookupString"/>, which is called by
            the StringIDLookup method.
            </description></item>
            <item><description>
            Constants for the lookup ID categories:
            <see cref="F:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.StringLookup.cMessageGroupName"/>,
            <see cref="F:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.StringLookup.cLabelGroupName"/>,
            <see cref="F:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.StringLookup.cMiscGroupName"/>.
            </description></item>
            </list>
            </remarks>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.StringLookup.cMessageGroupName">
            <summary>
            The lookup ID group name for messages. These support 
            <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseAnyValidator.ErrorMessageLookupID">BaseAnyValidator.ErrorMessageLookupID</see>
            and <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseAnyValidator.SummaryErrorMessageLookupID">BaseAnyValidator.SummaryErrorMessageLookupID</see> properties.
            </summary>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.StringLookup.cLabelGroupName">
            <summary>
            The lookup ID group name for labels. These support 
            <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.LocalizableLabel.TextLookupID">LocalizableLabel.TextLookupID</see> and the 
            <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.LabelText.TextLookupID">LabelText.TextLookupID</see> properties.
            </summary>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.StringLookup.cMiscGroupName">
            <summary>
            The lookup ID group name for all properties except error messages
            on validators and labels. These support
            properties on <see cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.ValidationSummary"/>, 
            <see cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.RequiredFieldMarker"/>,
            <see cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.RequiredFieldsDescription"/>, 
            <see cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseErrorFormatter"/>, and 
            <see cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.VAMPage"/> classes
            </summary>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.StringLookup.OnLookupString">
            <summary>
            OnLookupString is the event handler for string lookups.
            </summary>
            <remarks>
            <para>It is called by <see cref="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.StringLookup.StringIDLookup(System.String,System.String,System.String)"/>.</para>
            <para>It defaults to <see cref="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.StringLookup.ResourceManagerLookupHandler(Jenzabar.Portal.Framework.Web.UI.Controls.Validation.LookupStringHandlerArgs)"/> 
            but can be overridden in the Application_Start method or the &lt;StringLookup&gt;
            section of the custom.VAM.config file.</para>
            </remarks>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.StringLookup.StringIDLookup(System.String,System.String,System.String)">
            <summary>
            StringIDLookup translates a LookupID into a string. 
            </summary>
            <remarks>
            <para>It uses <see cref="F:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.StringLookup.OnLookupString"/> to handle the translation. 
            If OnLookupString is null, the LookupID is "", or no match is found,
            it returns the default value.</para>
            </remarks>
            <param name="pLookupID">The key to lookup.</param>
            <param name="pDefault">The default value supplied by the user on a property of the object.</param>
            <param name="pStringGroup">Segregates strings into different groups. This allows
            multiple resource files or other ways to separate data in a query.</param>
            <returns>The looked up string or the default value.</returns>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.StringLookup.Configure">
            <summary>
            Configure is called when the system is being initialized to establish 
            <see cref="F:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.StringLookup.OnLookupString"/>
            and all the properties that support it.
            </summary>
            <remarks>
            <para>It is called by <see cref="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.StringLookup.StringIDLookup(System.String,System.String,System.String)"/> 
            when fConfigured is false. That means it is called after Application_Start. 
            It will not overwrite any setting made during Application_Start.</para>
            <para>It uses custom.VAM.config's &lt;StringLookup&gt; section to determine values:</para>
            <list type="bullet">
            <item><description>
            DesignModeOn - If in design mode, this must be true for the rest of the system to load.
              Set to false when the datasource isn't available or cannot be accessed in design mode.
            </description></item>
            <item><description>
            MessageResXFile - The name of the ResX file compiled into the ResourceAssembly
              that contains the Message group. It should not contain the "resx" extension. If not supplied,
              "VAMMessages" is used. Internally, the resource name is ResourceAssembly.Name.ThisName.
            </description></item>
            <item><description>
            LabelResXFile - The name of the ResX file compiled into the ResourceAssembly
              that contains the Label group. It should not contain the "resx" extension. If not supplied,
              "VAMLabels" is used. Internally, the resource name is ResourceAssembly.Name.ThisName.
            </description></item>
            <item><description>
            MiscResXFile - The name of the ResX file compiled into the ResourceAssembly
              that contains the Misc group. It should not contain the "resx" extension. If not supplied,
              "VAMMisc" is used. Internally, the resource name is ResourceAssembly.Name.ThisName.
            </description></item>
            <item><description>
            SqlConnectionString - The MSSql database connection string used with the DatabaseLookupHandler.
            </description></item>
            <item><description>
            OleDbConnectionString - The OleDb database connection string used with the DatabaseLookupHandler.
            </description></item>
            </list>
            </remarks>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.StringLookup.ReConfigure">
            <summary>
            Clears all the properties and reruns <see cref="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.StringLookup.Configure"/>. 
            Used in design mode when custom.VAM.config changes.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.StringLookup.UseResourceManager">
            <summary>
            UseResourceManager is called by some of the ResourceManager properties to establish
            the <see cref="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.StringLookup.ResourceManagerLookupHandler(Jenzabar.Portal.Framework.Web.UI.Controls.Validation.LookupStringHandlerArgs)"/> on 
            <see cref="F:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.StringLookup.OnLookupString"/>.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.StringLookup.UseDatabase">
            <summary>
            UseDatabase is called by some of the Database properties to establish
            the <see cref="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.StringLookup.DatabaseLookupHandler(Jenzabar.Portal.Framework.Web.UI.Controls.Validation.LookupStringHandlerArgs)"/> on 
            <see cref="F:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.StringLookup.OnLookupString"/>.
            </summary>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.StringLookup.fConfigured">
            <summary>
            When false, the Configure method still needs to be run.
            </summary>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.StringLookup.fResourceAssembly">
            <summary>
            Storage for <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.StringLookup.ResourceAssembly"/>
            </summary>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.StringLookup.fResAssemblyName">
            <summary>
            Storage for <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.StringLookup.ResAssemblyName"/>.
            </summary>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.StringLookup.fResourceSetupFailed">
            <summary>
            When Configure attempts to get ResourceAssembly, it tries once. If it fails, it sets this.
            </summary>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.StringLookup.fMessagesResourceManager">
            <summary>
            Storage for <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.StringLookup.MessagesResourceManager"/>.
            </summary>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.StringLookup.fLabelsResourceManager">
            <summary>
            Storage for <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.StringLookup.LabelsResourceManager"/>.
            </summary>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.StringLookup.fMiscResourceManager">
            <summary>
            Storage for <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.StringLookup.MiscResourceManager"/>.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.StringLookup.ResourceManagerLookupHandler(Jenzabar.Portal.Framework.Web.UI.Controls.Validation.LookupStringHandlerArgs)">
            <summary>
            ResourceManagerLookupHandler is the default 
            <see cref="F:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.StringLookup.OnLookupString"/> handler.
            It translates strings using ResourceManagers.
            </summary>
            <remarks>
            <para>It selects a resource manager through the pArgs.StringGroup.</para>
            <para>Group cMessageGroupName -&gt; <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.StringLookup.MessagesResourceManager"/>.</para>
            <para>Group cLabelGroupName -&gt; <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.StringLookup.LabelsResourceManager"/>.</para>
            <para>Group cMiscGroupName -&gt; <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.StringLookup.MiscResourceManager"/>.</para>
            </remarks>
            <seealso cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.LookupStringHandler"/>
            <param name="pArgs">Identifies the StringGroup, LookupID and Default.</param>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.StringLookup.GetResourceManager(System.String,System.String)">
            <summary>
            GetResourceManager returns an instance of ResourceManager if possible.
            </summary>
            <remarks>
            <para>It gets the name of the resource file by first looking in the &lt;StringLookup&gt;
            section of the custom.VAM.config file using the ConfigName. If not found, it uses DefaultName.
            Then it creates a <see cref="T:System.Resources.ResourceManager"/> and assigns it to 
            <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.StringLookup.ResourceAssembly"/>.
            It may return null when no resource file matches in the web app.</para>
            </remarks>
            <param name="pConfigName">The key within the &lt;StringLookup&gt; section
            of the custom.VAM.config file that contains the file name.</param>
            <param name="pDefaultName">The default file name when the custom.VAM.config file
            does not have an entry for the ConfigName.</param>
            <returns>A reference to the System.Resources.ResourceManager that
            contains the resources requested or null if it could not load.</returns>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.StringLookup.fSqlConnectionString">
            <summary>
            Storage for <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.StringLookup.SqlConnectionString"/>.
            </summary>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.StringLookup.fOleDbConnectionString">
            <summary>
            Storage for <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.StringLookup.OleDbConnectionString"/>.
            </summary>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.StringLookup.fConnectionStringFailed">
            <summary>
            When the connection string fails to load, set this to true to stop further attempts.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.StringLookup.DatabaseLookupHandler(Jenzabar.Portal.Framework.Web.UI.Controls.Validation.LookupStringHandlerArgs)">
            <summary>
            DatabaseLookupHandler is used to lookup data from a database using the stored
            proc: VAMLookupString. 
            </summary>
            <remarks>
            <para>The stored proc must be defined by the user. It has the following parameters:</para>
            <list type="table">
            <listheader>
            <term>Name and type</term>
            <description>Description</description>
            </listheader>
            <item>
            <term>CultureName nvarchar (5)</term>
            <description>Full culture name</description>
            </item>
            <item>
            <term>StringGroup nvarchar (10)</term>
            <description>One of these strings: "MESSAGE", "LABEL", "MISC"</description>
            </item>
            <item>
            <term>LookupID nvarchar (50)</term>
            <description>The lookupID string</description>
            </item>
            <item>
            <term>LocalizedText nvarchar (4000)</term>
            <description>OUTPUT PARAMETER. The resulting text</description>
            </item>
            </list>
            <para>The stored proc must return 1 if it returns localizedtext. 0 if not.</para>
            <para>This method supports Sql and OleDb connections.</para>
            
            <para>It also has a caching mechanism to avoid too many lookups
            using HttpContext.Current.Cache.
            Cache entries have the name: StringGroup + CultureName + LookupID.
            Entries in the cache expire in 1 hour.</para>
            </remarks>
            <seealso cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.LookupStringHandler"/>
            <param name="pArgs">Supplies the StringGroup, LookupID and Default.</param>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.StringLookup.ResourceAssembly">
            <summary>
            ResourceAssembly is a reference to the assembly containing resources for use by the 
            <see cref="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.StringLookup.ResourceManagerLookupHandler(Jenzabar.Portal.Framework.Web.UI.Controls.Validation.LookupStringHandlerArgs)"/>. 
            <see cref="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.StringLookup.Configure"/> assigns it to the assembly
            <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.StringLookup.ResAssemblyName"/>.
            Users can override this in Application_Start.
            </summary>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.StringLookup.ResAssemblyName">
            <summary>
            The file name of the assembly containing the resources.
            </summary>
            <remarks>
            <para>It does not include the path to the file. The file must be in the web application's \bin folder.</para>
            <para>Resources must declare a namespace that matches the ResAssemblyName. For example,
            if resources are in VAMMisc.resx file, when you compile it into the
            assembly "MyVAMResources.dll", the namespace to this resource must be "MyVAMResources.VAMMisc.resources".</para>
            </remarks>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.StringLookup.MessagesResourceManager">
            <summary>
            MessagesResourceManager is the resource manager used by 
            <see cref="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.StringLookup.ResourceManagerLookupHandler(Jenzabar.Portal.Framework.Web.UI.Controls.Validation.LookupStringHandlerArgs)"/> event
            for calls to <see cref="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.StringLookup.StringIDLookup(System.String,System.String,System.String)"/> 
            with the string group <see cref="F:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.StringLookup.cMessageGroupName"/>.
            </summary>
            <value>
            <para>If null, there is no translation provided.</para>
            <para>The web app can set this up during Application_Start in global.asax or the &lt;StringLookup&gt;
            section of the custom.VAM.config file.</para>
            </value>
            <seealso cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.StringLookup.LabelsResourceManager"/>
            <seealso cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.StringLookup.MiscResourceManager"/>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.StringLookup.LabelsResourceManager">
            <summary>
            LabelsResourceManager is the resource manager used by 
            <see cref="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.StringLookup.ResourceManagerLookupHandler(Jenzabar.Portal.Framework.Web.UI.Controls.Validation.LookupStringHandlerArgs)"/> event
            for calls to <see cref="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.StringLookup.StringIDLookup(System.String,System.String,System.String)"/> 
            with the string group <see cref="F:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.StringLookup.cLabelGroupName"/>.
            </summary>
            <value>
            <para>If null, there is no translation provided.</para>
            <para>The web app can set this up during Application_Start in global.asax or the &lt;StringLookup&gt;
            section of the custom.VAM.config file.</para>
            </value>
            <seealso cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.StringLookup.MessagesResourceManager"/>
            <seealso cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.StringLookup.MiscResourceManager"/>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.StringLookup.MiscResourceManager">
            <summary>
            MiscResourceManager is the resource manager used by 
            <see cref="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.StringLookup.ResourceManagerLookupHandler(Jenzabar.Portal.Framework.Web.UI.Controls.Validation.LookupStringHandlerArgs)"/> event
            for calls to <see cref="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.StringLookup.StringIDLookup(System.String,System.String,System.String)"/> 
            with the string group <see cref="F:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.StringLookup.cMiscGroupName"/>.
            </summary>
            <value>
            <para>If null, there is no translation provided.</para>
            <para>The web app can set this up during Application_Start in global.asax or the &lt;StringLookup&gt;
            section of the custom.VAM.config file.</para>
            </value>
            <seealso cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.StringLookup.LabelsResourceManager"/>
            <seealso cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.StringLookup.MessagesResourceManager"/>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.StringLookup.SqlConnectionString">
            <summary>
            SqlConnectionString contains the Connection String to an MSSql database.
            Use it when using the DatabaseLookupHandler.
            </summary>
            <value>
            <para>When "", no SQL database is specified.</para>
            <para>It defaults to "".</para>
            <para>When set, this also calls <see cref="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.StringLookup.UseDatabase"/>
            to setup the DatabaseLookupHandler.</para>
            </value>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.StringLookup.OleDbConnectionString">
            <summary>
            OleDbConnectionString contains the Connection String to a database accessed
            by an OleDbConnection.
            Use it when using the DatabaseLookupHandler.
            </summary>
            <value>
            <para>When "", no OleDb database is specified.</para>
            <para>It defaults to "".</para>
            <para>When set, this also calls <see cref="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.StringLookup.UseDatabase"/>
            to setup the DatabaseLookupHandler.</para>
            </value>
        </member>
        <member name="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.LookupStringHandler">
            <summary>
            LookupStringHandler is a delegate used by the StringLookup.<see cref="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.StringLookup.StringIDLookup(System.String,System.String,System.String)"/>
            method to translate a string ID into a string.
            </summary>
        </member>
        <member name="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.LookupStringHandlerArgs">
            <summary>
            LookupStringHandlerArgs is the event arguments for
            <see cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.LookupStringHandler"/> events.
            </summary>
            <remarks>
            <para>It has these properties:</para>
            <list type="bullet">
            <item><description>
            LookupID - The key used to lookup a string
            </description></item>
            <item><description>
            Default - A string already defined by the user used when localization systems work that way
            </description></item>
            <item><description>
            StringGroup - A name to identify a group of strings. Allows separate lists of LookupIDs for different
              types. ErrorMessage and SummaryErrorMessage both use the term "MESSAGE".
            </description></item>
            <item><description>
            CultureName - The same value as in Thread.CurrentThread.CurrentCulture.Name. The expected
              culture of the string.
            </description></item>
            <item><description>
            Found - When true, a string was found and returned
            </description></item>
            <item><description>
            Result - The string to return to the caller
            </description></item>
            </list>
            </remarks>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.LookupStringHandlerArgs.#ctor(System.String,System.String,System.String)">
            <summary>
            Constructor that sets LookupID, Default and StringGroup.
            </summary>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.LookupStringHandlerArgs.fLookupID">
            <summary>
            Storage for <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.LookupStringHandlerArgs.LookupID"/>.
            </summary>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.LookupStringHandlerArgs.fDefault">
            <summary>
            Storage for <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.LookupStringHandlerArgs.Default"/>.
            </summary>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.LookupStringHandlerArgs.fStringGroup">
            <summary>
            Storage for <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.LookupStringHandlerArgs.StringGroup"/>.
            </summary>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.LookupStringHandlerArgs.fCultureName">
            <summary>
            Storage for <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.LookupStringHandlerArgs.CultureName"/>.
            </summary>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.LookupStringHandlerArgs.fFound">
            <summary>
            Storage for <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.LookupStringHandlerArgs.Found"/>.
            </summary>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.LookupStringHandlerArgs.fResult">
            <summary>
            Storage for <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.LookupStringHandlerArgs.Result"/>.
            </summary>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.LookupStringHandlerArgs.LookupID">
            <summary>
            The key used to lookup a string.
            </summary>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.LookupStringHandlerArgs.Default">
            <summary>
            The default string associated with this ID. For example, the ErrorMessage property.
            </summary>
            <value>
            This is used when the event handler couldn't find a match to LookupID.
            In some localization systems, they will ignore LookupID and use this to translate.
            </value>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.LookupStringHandlerArgs.StringGroup">
            <summary>
            A way to group related strings. Provides a name of the group.
            </summary>
            <value>
            <para>Will always be set to uppercase for easy comparision.</para>
            <para>The <see cref="F:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.StringLookup.OnLookupString">StringLookup.OnLookupString</see> event handler 
            should use this to determine how to query
            its data to find the string ID.</para>
            </value>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.LookupStringHandlerArgs.CultureName">
            <summary>
            The Culture Name, like "en-US", from Globals.Page.CultureInfo.Name.
            </summary>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.LookupStringHandlerArgs.Found">
            <summary>
            When true, the Result was assigned.
            </summary>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.LookupStringHandlerArgs.Result">
            <summary>
            This property should be assigned with the string to return to the caller.
            If no string is found, do nothing. When set, it also assigns Found to true.
            </summary>
        </member>
        <member name="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.ProgrammersValidator">
            <summary>
            ProgrammersValidator doesn't have any particular ValidatorAction or Condition.
            You establish them, either through the constructor or by direct assignment
            to the Action property and its Condition property.
            This validator is best used programmatically.
            </summary>
            <remarks>
            <para>Select this validator control when you have created your own Condition subclass
            and do not want to build a Validator subclass too. This allows you to programmatically
            instantiate your condition, a BaseValidatorAction subclass (usually
            <see cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.ValidatorAction"/>) for the Action, and the ProgrammersValidator.
            You would assign any of the Condition's properties programmatically too.</para>
            <para>The ProgrammersValidator can be added to the ASP.NET page. In doing so, you must
            assign the Condition to the ValidatorAction and the ValidatorAction to the
            ProgrammersValidator.Action property.</para>
            <para>If you instantiate the ProgrammersValidator, it can be added to the child
            controls list of a System.Web.UI.PlaceHolder or any other control that accepts child controls.</para>
            <para>See the <b>Developer's Guide</b> for strategies on using this class.</para>
            </remarks>
            <example>
            <para>Suppose you have created the condition "MyNamespace.MyCondition" based
            on a <see cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseOneFieldCondition"/> with its one
            new property, "MyProperty" (an integer). In this example, you use a ProgrammersValidator
            and ValidatorAction with it. The ProgrammersValidator has already been added to the
            ASP.NET page with the ID "ProgrammersValidator1".</para>
            <para>[C#]</para>
            <code>
            MyNamespace.MyCondition vCond = new MyNamespace.MyCondition();
             // establish the properties
            vCond.ControlToEvaluate = TextBox1;
            vCond.MyProperty = 2;
            Jenzabar.Portal.Framework.Web.UI.Controls.Validation.ValidatorAction vVA = new Jenzabar.Portal.Framework.Web.UI.Controls.Validation.ValidatorAction(vCond);
            
            ProgrammersValidator1.ValidatorAction = vVA;
            </code>
            <para>[VB]</para>
            <code>
            Dim vCond As MyNamespace.MyCondition = New MyNamespace.MyCondition()
             ' establish the properties
            vCond.ControlToEvaluate = TextBox1
            vCond.MyProperty = 2
            Dim vVA As Jenzabar.Portal.Framework.Web.UI.Controls.Validation.ValidatorAction = New Jenzabar.Portal.Framework.Web.UI.Controls.Validation.ValidatorAction(vCond)
            
            ProgrammersValidator1.ValidatorAction = vVA
            </code>
            </example>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.ProgrammersValidator.#ctor">
            <summary>
            Constructor with no parameters.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.ProgrammersValidator.#ctor(Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseValidatorAction)">
            <summary>
            Use this one when your action already has the condition attached.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.ProgrammersValidator.#ctor(Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseValidatorAction,Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseCondition)">
            <summary>
            Use this one when you have created an action and condition but haven't
            assigned the condition to the action yet.
            </summary>
            <remarks>
            Beware that some actions restrict the conditions they support. If you assign
            an inappropriate condition, this may throw an exception.
            </remarks>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.ProgrammersValidator.#ctor(Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseValidatorAction,Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseErrorFormatter)">
            <summary>
            Use this one when your action Already has the condition attached and
            needs an ErrorFormatter.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.ProgrammersValidator.#ctor(Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseValidatorAction,Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseCondition,Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseErrorFormatter)">
            <summary>
            Assigns the ValidatorAction, Condition, and ErrorFormatter.
            </summary>
            <remarks>
            Beware that some actions restrict the conditions they support. If you assign
            an inappropriate condition, this may throw an exception.
            </remarks>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.ProgrammersValidator.#ctor(Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseValidatorAction,Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseCondition,Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseErrorFormatter,Jenzabar.Portal.Framework.Web.UI.Controls.Validation.VAMTypeConverter)">
            <summary>
            Assigns the ValidatorAction, Condition, ErrorFormatter, and VAMTypeConverter.
            </summary>
            <remarks>
            Beware that some actions restrict the conditions they support. If you assign
            an inappropriate condition, this may throw an exception.
            </remarks>
        </member>
        <member name="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseOneFldValidator">
            <summary>
            BaseOneFldValidator is a base class that supports validators that
            use the <see cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseOneFieldCondition"/>.
            </summary>
            <remarks>
            <para>The ValidatorAction must be a subclass of 
            <see cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseOneFldValidatorAction"/>.</para>
            <para>It exposes these properties of BaseOneFldCondition: 
            <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseOneFldValidator.ControlIDToEvaluate"/>,
            <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseOneFldValidator.ControlToEvaluate"/>.</para>
            <para>It exposes these properties of BaseOneFldValidatorAction: 
            <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseOneFldValidator.Label"/>.</para>
            <para>See the <b>Developer's Guide</b> for an overview of subclassing this class.</para>
            </remarks>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseOneFldValidator.#ctor">
            <summary>
            Constructor with no parameters.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseOneFldValidator.#ctor(System.String,System.String,System.String)">
            <summary>
            Constructor that sets the ErrorMessage, Group, and ControlIDToEvaluate properties.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseOneFldValidator.#ctor(Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseCondition,Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseErrorFormatter,System.String,System.String,System.String,System.String)">
            <summary>
            Constructor that sets the Enabler, ErrorFormatter, ErrorMessage, 
            SummaryErrorMessage, Group, and ControlIDToEvaluate properties.
            Enabler and ErrorFormatter can be null.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseOneFldValidator.#ctor(Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseCondition,Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseErrorFormatter,System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Constructor that sets the Enabler, ErrorFormatter, ErrorMessage, 
            SummaryErrorMessage, ErrorMessageLookupID, SummaryErrorMessageLookupID,
            Group, and ControlIDToEvaluate properties.
            Enabler and ErrorFormatter can be null.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseOneFldValidator.#ctor(Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseCondition,Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseErrorFormatter,System.String,System.String,System.String,System.String,System.String,System.Web.UI.Control)">
            <summary>
            Constructor that sets the Enabler, ErrorFormatter, ErrorMessage, 
            SummaryErrorMessage, ErrorMessageLookupID, SummaryErrorMessageLookupID,
            Group, and ControlIDToEvaluate properties.
            Enabler and ErrorFormatter can be null.
            </summary>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseOneFldValidator.fControlToEvaluate">
            <summary>
            Storage for <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseOneFldValidator.ControlToEvaluate"/>.
            </summary>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseOneFldValidator.fControlToEvaluateConnection">
            <summary>
            Storage for <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseOneFldValidator.ControlToEvaluateConnection"/>.
            </summary>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseOneFldValidator.fLabel">
            <summary>
            Storage for <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseOneFldValidator.Label"/>.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseOneFldValidator.TransferProperties">
            <summary>
            TransferProperties is called during OnPreRender to allow the control to transfer
            its properties to the ValidatorAction and Condition.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseOneFldValidator.EnsureControlConnections">
            <summary>
            Tests for ControlToEvaluateConnection to be null. If not created, clones
            the one on BaseOneFieldCondition.
            </summary>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseOneFldValidator.ControlIDToEvaluate">
            <summary>
            Gets and sets the ID to the control whose value will be evaluated. 
            </summary>
            <value>
            <para>This is ID property, not the ClientID or UniqueID. It will be translated 
            into the ClientID at runtime.</para>
            <para>If the control cannot be found in the current or any parent NamingContainer, 
            an exception is thrown at runtime.</para>
            <para><see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseOneFldValidator.ControlToEvaluate"/> overrides
            this property when it is not null.</para>
            </value>
            <remarks>
            <para><b>EditorAttribute:</b><see cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.ConditionControlIDTypeEditor"/></para>
            </remarks>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseOneFldValidator.ControlToEvaluate">
            <summary>
            Gets and sets a reference to a control whose value will be evaluated. It is an 
            alternative to <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseOneFldValidator.ControlIDToEvaluate"/> that
            allows the control to be anywhere on the page instead of the same naming container as the validator.
            </summary>
            <value>
            <para>When assigned, it overrides any setting ControlIDToEvaluate.</para>
            <para>This can be a reference to the control anywhere on the page, not just in the same
            naming container.</para>
            </value>
            <exception cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.VAMException">When the control class is not validated
            by the <see cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.ControlConnection"/>.</exception>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseOneFldValidator.ControlToEvaluateConnection">
            <summary>
            Gets the <see cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.ControlConnection"/> class that maintains the ID and Instance storage
            used by <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseOneFldValidator.ControlIDToEvaluate"/> and 
            <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseOneFldValidator.ControlToEvaluate"/> properties.
            </summary>
            <value>
            A ControlConnection also validates the control that is referenced by its contents.
            The Condition supplies the ControlConnection class in its
            <see cref="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseOneFieldCondition.GetControlToEvaluateConnectionType"/>
            method.
            </value>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseOneFldValidator.Label">
            <summary>
            Label provides text for the {LABEL} token which can appear in 
            <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseAnyValidator.ErrorMessage"/>
            and <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseAnyValidator.SummaryErrorMessage"/> properties. 
            </summary>
            <value>
            <para>The {LABEL} token is intended to be replaced by the name of
            the field that has the error message. It usually shows the same text
            as the label near the field and can even use a reference to that text
            if its a System.Web.UI.WebControls.Label or <see cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.LocalizableLabel"/> control. 
            It can also be entered directly into this object
            when there is no Label control or the text must be different.</para>
            <para>The <see cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.LabelText"/> class offers properties to alter the text of the Label control
            by changing case and stripping trailing characters like colon.</para>
            </value>
            <remarks>
            <para><b>TypeConverterAttribute:</b><see cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.LabelTextTypeConverter"/></para>
            </remarks>
            <seealso cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.LabelText"/>
        </member>
        <member name="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseTwoFldValidator">
            <summary>
            BaseTwoFldValidator is a base class that supports validators that
            use the <see cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseTwoFieldCondition"/>.
            </summary>
            <remarks>
            <para>The ValidatorAction must be a subclass of 
            <see cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseTwoFldValidatorAction"/>.</para>
            <para>It exposes these properties of BaseTwoFldCondition: 
            <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseTwoFldValidator.SecondControlIDToEvaluate"/>,
            <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseTwoFldValidator.SecondControlToEvaluate"/>.</para>
            <para>It exposes these properties of BaseTwoFldValidatorAction: 
            <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseTwoFldValidator.SecondLabel"/>.</para>
            <para>See the <b>Developer's Guide</b> for an overview of subclassing this class.</para>
            </remarks>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseTwoFldValidator.#ctor">
            <summary>
            Constructor with no parameters.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseTwoFldValidator.#ctor(System.String,System.String,System.String,System.String)">
            <summary>
            Constructor that sets the ErrorMessage, Group, ControlIDToEvaluate,
            and SecondControlIDToEvaluate properties.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseTwoFldValidator.#ctor(Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseCondition,Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseErrorFormatter,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Constructor that sets the Enabler, ErrorFormatter, ErrorMessage, 
            SummaryErrorMessage, Group, ControlIDToEvaluate and
            SecondControlIDToEvaluate properties.
            Enabler and ErrorFormatter can be null.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseTwoFldValidator.#ctor(Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseCondition,Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseErrorFormatter,System.String,System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Constructor that sets the Enabler, ErrorFormatter, ErrorMessage, 
            SummaryErrorMessage, ErrorMessageLookupID, SummaryErrorMessageLookupID,
            Group, ControlIDToEvaluate, and SecondControlIDToEvaluate properties.
            Enabler and ErrorFormatter can be null.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseTwoFldValidator.#ctor(Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseCondition,Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseErrorFormatter,System.String,System.String,System.String,System.String,System.String,System.Web.UI.Control,System.Web.UI.Control)">
            <summary>
            Constructor that sets the Enabler, ErrorFormatter, ErrorMessage, 
            SummaryErrorMessage, ErrorMessageLookupID, SummaryErrorMessageLookupID,
            Group, ControlToEvaluate, and SecondControlToEvaluate properties.
            Enabler and ErrorFormatter can be null.
            </summary>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseTwoFldValidator.fSecondControlToEvaluateConnection">
            <summary>
            Storage for <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseTwoFldValidator.SecondControlToEvaluateConnection"/>.
            </summary>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseTwoFldValidator.fSecondLabel">
            <summary>
            Storage for <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseTwoFldValidator.SecondLabel"/>.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseTwoFldValidator.TransferProperties">
            <summary>
            TransferProperties is called during OnPreRender to allow the control to transfer
            its properties to the ValidatorAction and Condition.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseTwoFldValidator.EnsureControlConnections">
            <summary>
            Tests for SecondControlToEvaluateConnection to be null. If not created, clones
            the one on BaseTwoFieldCondition.
            </summary>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseTwoFldValidator.SecondControlIDToEvaluate">
            <summary>
            Gets and sets the ID to the second control whose value will be evaluated. 
            </summary>
            <value>
            <para>This is ID property, not the ClientID or UniqueID. It will be translated 
            into the ClientID at runtime.</para>
            <para>If the control cannot be found in the current or any parent NamingContainer, 
            an exception is thrown at runtime.</para>
            <para><see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseTwoFldValidator.SecondControlToEvaluate"/> overrides
            this property when it is not null.</para>
            </value>
            <remarks>
            <para><b>EditorAttribute:</b><see cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.ConditionSecondControlIDTypeEditor"/></para>
            </remarks>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseTwoFldValidator.SecondControlToEvaluate">
            <summary>
            Gets and sets a reference to a control whose value will be evaluated. It is an 
            alternative to <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseTwoFldValidator.SecondControlIDToEvaluate"/> that
            allows the control to be anywhere on the page instead of the same naming 
            container as the validator.
            </summary>
            <value>
            <para>When assigned, it overrides any setting SecondControlIDToEvaluate.</para>
            <para>This can be a reference to the control anywhere on the page, not just in the same
            naming container.</para>
            </value>
            <exception cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.VAMException">When the control class is not validated
            by the <see cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.ControlConnection"/>.</exception>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseTwoFldValidator.SecondControlToEvaluateConnection">
            <summary>
            SecondControlToEvaluateConnection is used by 
            <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseTwoFldValidator.SecondControlIDToEvaluate"/> and 
            <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseTwoFldValidator.SecondControlToEvaluate"/>
            for data storage and validation of the control class.
            </summary>
            <value>
            Calls <see cref="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseTwoFldValidator.EnsureControlConnections"/>
            before returning the ControlConnection instance.
            </value>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseTwoFldValidator.SecondLabel">
            <summary>
            SecondLabel provides text for the {LABEL2} token which can appear in 
            <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseAnyValidator.ErrorMessage"/>
            and <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseAnyValidator.SummaryErrorMessage"/> properties. 
            </summary>
            <value>
            <para>The {LABEL2} token is intended to be replaced by the name of
            the field that has the error message. It usually shows the same text
            as the label near the field and can even use a reference to that text
            if its a System.Web.UI.WebControls.Label or <see cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.LocalizableLabel"/> control. 
            It can also be entered directly into this object
            when there is no Label control or the text must be different.</para>
            <para>The <see cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.LabelText"/> class offers properties to alter the text of the Label control
            by changing case and stripping trailing characters like colon.</para>
            </value>
            <remarks>
            <para><b>TypeConverterAttribute:</b><see cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.LabelTextTypeConverter"/></para>
            </remarks>
            <seealso cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.LabelText"/>      
        </member>
        <member name="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.RequiredTextValidator">
            <summary>
            RequiredTextValidator supports the <see cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.RequiredTextCondition"/>.
            RequiredTextCondition determines if the ControlToEvaluate field that has a textual value is 
            considered blank (matches the 
            <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.RequiredTextValidator.UnassignedValues"/> property). 
            When its not blank, the condition evaluates as "success".
            </summary>
            <remarks>
            <para>See the <b>User's Guide</b> for an overview of using this Validator.</para>
            <para>This condition supports any control with a <see cref="T:System.Web.UI.ValidationPropertyAttribute"/> 
            as they all can return a textual value.</para>
            <para>The user can define one or more values for an unassigned state using the
            <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.RequiredTextValidator.UnassignedValues"/> property. 
            UnassignedValues can be compared case sensitive or insensitive with the 
            <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.RequiredTextValidator.UnassignedCaseInsensitive"/> property.</para>
            <para>Uses the <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseAnyValidator.Trim"/> property to determine 
            if a blank field allows spaces or not.</para>
            <para>The ValidatorAction is 
            <see cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.RequiredTextValidatorAction"/>.</para>
            <para>It exposes these properties of RequiredTextCondition: 
            <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.RequiredTextValidator.UnassignedValues"/>,
            <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.RequiredTextValidator.UnassignedCaseInsensitive"/>.</para>
            <para>There are no additional properties to expose on RequiredTextValidatorAction.</para>
            </remarks>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.RequiredTextValidator.#ctor">
            <summary>
            Constructor with no parameters.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.RequiredTextValidator.#ctor(System.String,System.String,System.String)">
            <summary>
            Constructor that sets the ErrorMessage, Group, and ControlIDToEvaluate properties.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.RequiredTextValidator.#ctor(Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseCondition,Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseErrorFormatter,System.String,System.String,System.String,System.String)">
            <summary>
            Constructor that sets the Enabler, ErrorFormatter, ErrorMessage, 
            SummaryErrorMessage, Group, and ControlIDToEvaluate properties.
            Enabler and ErrorFormatter can be null.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.RequiredTextValidator.#ctor(Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseCondition,Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseErrorFormatter,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.Boolean)">
            <summary>
            Constructor that sets the Enabler, ErrorFormatter, ErrorMessage, 
            SummaryErrorMessage, ErrorMessageLookupID, SummaryErrorMessageLookupID,
            Group, ControlIDToEvaluate, UnassignedValues, and UnassignedCaseInsensitive properties.
            Enabler and ErrorFormatter can be null.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.RequiredTextValidator.#ctor(Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseCondition,Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseErrorFormatter,System.String,System.String,System.String,System.String,System.String,System.Web.UI.Control,System.String,System.Boolean)">
            <summary>
            Constructor that sets the Enabler, ErrorFormatter, ErrorMessage, 
            SummaryErrorMessage, ErrorMessageLookupID, SummaryErrorMessageLookupID,
            Group, ControlToEvaluate, UnassignedValues, and UnassignedCaseInsensitive properties.
            Enabler and ErrorFormatter can be null.
            </summary>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.RequiredTextValidator.fUnassignedValues">
            <summary>
            Storage for <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.RequiredTextValidator.UnassignedValues"/>.
            </summary>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.RequiredTextValidator.fUnassignedCaseInsensitive">
            <summary>
            Storage for <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.RequiredTextValidator.UnassignedCaseInsensitive"/>.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.RequiredTextValidator.CreateAction">
            <returns><see cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.RequiredTextValidatorAction"/></returns>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.RequiredTextValidator.TransferProperties">
            <summary>
            TransferProperties is called during OnPreRender to allow the control to transfer
            its properties to the ValidatorAction and Condition.
            </summary>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.RequiredTextValidator.UnassignedValues">
            <summary>
            UnassignedValues is the text representing the unassigned state. When the control's value matches
            this value, the condition evaluates as "failed". 
            </summary>
            <value>
            <para>Matching may be case sensistive or insensitive based on 
            <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.RequiredTextValidator.UnassignedCaseInsensitive"/>.</para>
            <para>This string supports multiple items that reflect the unassigned state. 
            They must be separated by a pipe (|). For example, a text box is unassigned 
            when either blank or "Enter a value" is present. Use "|Enter a value".
            (The part prior to the pipe is an empty string.)</para>
            <para>Lead and trailing spaces are removed on each item within the UnassignedValues.</para>
            <para>It defaults to "".</para>
            <para>Transferred to Condition.UnassignedValues in 
            <see cref="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.RequiredTextValidator.TransferProperties"/>.</para>
            </value>
            <remarks>
            <para><b>EditorAttribute:</b><see cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.StringTypeEditor"/></para>
            </remarks>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.RequiredTextValidator.UnassignedCaseInsensitive">
            <summary>
            UnassignedCaseInsenstive determines if the <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.RequiredTextValidator.UnassignedValues"/>
            property uses a case insensitive match or not.
            </summary>
            <value>
            <para>When true, its case insensitive.</para>
            <para>It defaults to true.</para>
            <para>Transferred to Condition.UnassignedCaseInsensitive in 
            <see cref="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.RequiredTextValidator.TransferProperties"/>.</para>
            </value>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.RequiredTextValidator.CanSetValidationAction">
            <summary>
            Returns false. You cannot change the ValidatorAction.
            </summary>
        </member>
        <member name="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.RequiredListValidator">
            <summary>
            RequiredListValidator supports the <see cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.RequiredListCondition"/>.
            RequiredListCondition determines if the following controls have a selection that differs
            from an unassigned state: subclasses of <see cref="T:System.Web.UI.WebControls.ListControl"/> 
            (ListBox, DropDownList, RadioButtonList, and CheckBoxList) and 
            <see cref="T:System.Web.UI.HtmlControls.HtmlSelect"/>.
            </summary>
            <remarks>
            <para>See the <b>User's Guide</b> for an overview of using this Validator.</para>
            <para>There is an <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.RequiredListValidator.UnassignedIndex"/> property that 
            allows the user to define an item that when selected is still the unassigned state.
            It defaults to –1 which indicates no selection is the unassigned state.</para>
            <para><b>NOTE:</b> CheckBoxLists do not support the UnassignedIndex property. They are unassigned by having
            no checkboxes marked.</para>
            <para>ListBoxes with multiple selections are supported. The condition evaluates as "success"
            when any selected item matches the UnassignedIndex.</para>
            <para>If you define a series of checkboxes or radio buttons without using 
            CheckBoxList or RadioButtonList and want to know if there is any selection, 
            use a <see cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.MultiConditionValidator"/> with an AND operator and a 
            <see cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.CheckStateValidator"/> associated with
            each checkbox/radiobutton.</para>
            <para>The ValidatorAction is
            <see cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.RequiredListValidatorAction"/>.</para>
            <para>It exposes these properties of RequiredListCondition: 
            <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.RequiredListCondition.UnassignedIndex"/></para>
            <para>There are no additional properties to expose on RequiredListValidatorAction.</para>
            </remarks>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.RequiredListValidator.#ctor">
            <summary>
            Constructor with no parameters.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.RequiredListValidator.#ctor(System.String,System.String,System.String)">
            <summary>
            Constructor that sets the ErrorMessage, Group, and ControlIDToEvaluate properties.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.RequiredListValidator.#ctor(Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseCondition,Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseErrorFormatter,System.String,System.String,System.String,System.String)">
            <summary>
            Constructor that sets the Enabler, ErrorFormatter, ErrorMessage, 
            SummaryErrorMessage, Group, and ControlIDToEvaluate properties.
            Enabler and ErrorFormatter can be null.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.RequiredListValidator.#ctor(Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseCondition,Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseErrorFormatter,System.String,System.String,System.String,System.String,System.String,System.String,System.Int32)">
            <summary>
            Constructor that sets the Enabler, ErrorFormatter, ErrorMessage, 
            SummaryErrorMessage, ErrorMessageLookupID, SummaryErrorMessageLookupID,
            Group, ControlIDToEvaluate and UnassignedIndex properties.
            Enabler and ErrorFormatter can be null.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.RequiredListValidator.#ctor(Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseCondition,Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseErrorFormatter,System.String,System.String,System.String,System.String,System.String,System.Web.UI.Control,System.Int32)">
            <summary>
            Constructor that sets the Enabler, ErrorFormatter, ErrorMessage, 
            SummaryErrorMessage, ErrorMessageLookupID, SummaryErrorMessageLookupID,
            Group, ControlToEvaluate and UnassignedIndex properties.
            Enabler and ErrorFormatter can be null.
            </summary>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.RequiredListValidator.fUnassignedIndex">
            <summary>
            Storage for <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.RequiredListValidator.UnassignedIndex"/>.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.RequiredListValidator.CreateAction">
            <returns><see cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.RequiredListValidatorAction"/></returns>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.RequiredListValidator.TransferProperties">
            <summary>
            TransferProperties is called during OnPreRender to allow the control to transfer
            its properties to the ValidatorAction and Condition.
            </summary>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.RequiredListValidator.UnassignedIndex">
            <summary>
            UnassignedIndex is the unassigned state associated with the SelectedIndex property
            on the ListControl. 
            It is an integer where -1 indicates no selection and 0 is the first possible element.
            </summary>
            <value>
            <para>Change it when an item, such as the first element of a radiobuttonlist, listbox, or dropdownlist
            indicates an unassigned state.</para>
            <para>This property is ignored by CheckBoxList.</para>
            <para>Multiple selection ListBoxes support it.</para>
            <para>It defaults to -1.</para>
            <para>Transferred to Condition.UnassignedIndex in 
            <see cref="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.RequiredListValidator.TransferProperties"/>.</para>
            </value>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.RequiredListValidator.CanSetValidationAction">
            <summary>
            Returns false. You cannot change the ValidatorAction.
            </summary>
        </member>
        <member name="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseRangeValidator">
            <summary>
            BaseRangeValidator is an abstract base class that
            supports subclasses of <see cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseRangeCondition"/>.
            Use it to create Validator controls that use BaseRangeConditions.
            </summary>
            <remarks>
            <para>The ValidatorAction is defined by subclasses.</para>
            <para>It exposes these properties of BaseRangeCondition: 
            <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseRangeCondition.Minimum"/>,
            <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseRangeCondition.Maximum"/>.</para>
            </remarks>
            <seealso cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.RangeValidator"/>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseRangeValidator.#ctor">
            <summary>
            Constructor with no parameters.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseRangeValidator.#ctor(System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Constructor that sets the ErrorMessage, Group, ControlIDToEvaluate,
            Minimum, and Maximum properties.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseRangeValidator.#ctor(Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseCondition,Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseErrorFormatter,System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Constructor that sets the Enabler, ErrorFormatter, ErrorMessage, 
            SummaryErrorMessage, Group, ControlIDToEvaluate, Minimum, and Maximum  properties.
            Enabler and ErrorFormatter can be null.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseRangeValidator.#ctor(Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseCondition,Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseErrorFormatter,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Constructor that sets the Enabler, ErrorFormatter, ErrorMessage, 
            SummaryErrorMessage, ErrorMessageLookupID, SummaryErrorMessageLookupID,
            Group, ControlIDToEvaluate, Minimum, and Maximum properties.
            Enabler and ErrorFormatter can be null.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseRangeValidator.#ctor(Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseCondition,Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseErrorFormatter,System.String,System.String,System.String,System.String,System.String,System.Web.UI.Control,System.String,System.String)">
            <summary>
            Constructor that sets the Enabler, ErrorFormatter, ErrorMessage, 
            SummaryErrorMessage, ErrorMessageLookupID, SummaryErrorMessageLookupID,
            Group, ControlToEvaluate, Minimum, and Maximum properties.
            Enabler and ErrorFormatter can be null.
            </summary>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseRangeValidator.fMinimum">
            <summary>
            Storage for <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseRangeValidator.Minimum"/>.
            </summary>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseRangeValidator.fMaximum">
            <summary>
            Storage for <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseRangeValidator.Maximum"/>.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseRangeValidator.TransferProperties">
            <summary>
            TransferProperties is called during OnPreRender to allow the control to transfer
            its properties to the ValidatorAction and Condition.
            </summary>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseRangeValidator.Minimum">
            <summary>
            Minimum is a string representing the minimum value of the range. 
            </summary>
            <value>
            <para>If it is "", there is no minimum.</para>
            <para>This string must be compatible with the <see cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.VAMTypeConverter"/> 
            that is on the Condition. (On the RangeValidator, 
            see the <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.RangeValidator.DataType"/> property.) For example,
            if the data type is an integer, this value can only contain digits.</para>
            <para>Transferred to Condition.Minimum in 
            <see cref="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseRangeValidator.TransferProperties"/>.</para>
            </value>
            <remarks>
            <para><b>EditorAttribute:</b><see cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.StringTypeEditor"/></para>
            </remarks>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseRangeValidator.Maximum">
            <summary>
            Maximum is a string representing the maximum value of the range. 
            </summary>
            <value>
            <para>If it is "", there is no maximum.</para>
            <para>This string must be compatible with the <see cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.VAMTypeConverter"/> 
            that is on the Condition. (On the RangeValidator, 
            see the <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.RangeValidator.DataType"/> property.) For example,
            if the data type is an integer, this value can only contain digits.</para>
            <para>Transferred to Condition.Maximum in 
            <see cref="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseRangeValidator.TransferProperties"/>.</para>
            </value>
            <remarks>
            <para><b>EditorAttribute:</b><see cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.StringTypeEditor"/></para>
            </remarks>
        </member>
        <member name="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.RangeValidator">
            <summary>
            RangeValidator supports the <see cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.RangeCondition"/>.
            RangeCondition compares the value of any text field to a range determined by  
            minimum and maximum values.
            </summary>
            <remarks>
            <para>Set the <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseOneFldValidator.ControlIDToEvaluate"/> property
            to the control and the range with <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseRangeValidator.Minimum"/>
            and <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseRangeValidator.Maximum"/> properties.
            Set the <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.RangeValidator.DataType"/> property to determine
            the data type of ControlIDToEvaluate, Minimum and Maximum.</para>
            <para>See the <b>User's Guide</b> for an overview of using this Validator.</para>
            <para>The ValidatorAction is 
            <see cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.RangeValidatorAction"/>.</para>
            <para>There are no additional properties to expose on RangeValidatorAction.</para>
            <para>There are no additional properties to expose on RangeCondition.</para>
            </remarks>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.RangeValidator.#ctor">
            <summary>
            Constructor with no parameters.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.RangeValidator.#ctor(System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Constructor that sets the ErrorMessage, Group, ControlIDToEvaluate,
            Minimum, Maximum, and DataType properties.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.RangeValidator.#ctor(Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseCondition,Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseErrorFormatter,System.String,System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Constructor that sets the Enabler, ErrorFormatter, ErrorMessage, 
            SummaryErrorMessage, Group, ControlIDToEvaluate, Minimum, Maximum,
            and DataType properties.
            Enabler and ErrorFormatter can be null.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.RangeValidator.#ctor(Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseCondition,Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseErrorFormatter,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Constructor that sets the Enabler, ErrorFormatter, ErrorMessage, 
            SummaryErrorMessage, ErrorMessageLookupID, SummaryErrorMessageLookupID,
            Group, ControlIDToEvaluate, Minimum, Maximum, and DataType properties.
            Enabler and ErrorFormatter can be null.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.RangeValidator.#ctor(Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseCondition,Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseErrorFormatter,System.String,System.String,System.String,System.String,System.String,System.Web.UI.Control,System.String,System.String,System.String)">
            <summary>
            Constructor that sets the Enabler, ErrorFormatter, ErrorMessage, 
            SummaryErrorMessage, ErrorMessageLookupID, SummaryErrorMessageLookupID,
            Group, ControlToEvaluate, Minimum, Maximum, and DataType properties.
            Enabler and ErrorFormatter can be null.
            </summary>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.RangeValidator.fDataType">
            <summary>
            Storage for <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.RangeValidator.DataType"/>.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.RangeValidator.CreateAction">
            <returns><see cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.RangeValidatorAction"/></returns>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.RangeValidator.TransferProperties">
            <summary>
            TransferProperties is called during OnPreRender to allow the control to transfer
            its properties to the ValidatorAction and Condition.
            </summary>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.RangeValidator.DataType">
            <summary>
            DataType is the name of a data type.
            </summary>
            <value>
            <para>Implements the <see cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.IDataTypeProperty"/>.</para>
            <para>The name must match the Name property of a <see cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.VAMTypeConverter"/> in the
            <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.Globals.DataTypes">Globals.DataTypes</see> property which gets its
            values from the VAM.config and custom.VAM.config files. (The match is case insensitive.)</para>
            <para>It defaults to "String".</para>
            </value>
            <remarks>
            <para><b>EditorAttribute:</b><see cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.DataType_TypeEditor"/></para>
            </remarks>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.RangeValidator.CanSetValidationAction">
            <summary>
            Returns false. You cannot change the ValidatorAction.
            </summary>
        </member>
        <member name="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseCompareTwoFieldsValidator">
            <summary>
            BaseCompareTwoFieldsValidator is an abstract base class that
            supports subclasses of <see cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseCompareTwoFieldsCondition"/>.
            Use it to create Validator controls that use BaseCompareTwoFieldsConditions.
            BaseCompareTwoFieldsCondition compares the value of two data entry fields on the form.
            </summary>
            <remarks>
            <para>The ValidatorAction is defined by the subclass.</para>
            <para>It exposes these properties of BaseCompareTwoFieldsCondition: 
            <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseCompareTwoFieldsCondition.Operator"/>.</para>
            </remarks>
            <seealso cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.CompareTwoFieldsValidator"/>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseCompareTwoFieldsValidator.#ctor">
            <summary>
            Constructor with no parameters.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseCompareTwoFieldsValidator.#ctor(System.String,System.String,System.String,System.String,Jenzabar.Portal.Framework.Web.UI.Controls.Validation.ConditionOperator)">
            <summary>
            Constructor that sets the ErrorMessage, Group, ControlIDToEvaluate,
            SecondControlIDToEvaluate, and Operator properties.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseCompareTwoFieldsValidator.#ctor(Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseCondition,Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseErrorFormatter,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Constructor that sets the Enabler, ErrorFormatter, ErrorMessage, 
            SummaryErrorMessage, Group, ControlIDToEvaluate, and
            SecondControlIDToEvaluate properties.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseCompareTwoFieldsValidator.#ctor(Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseCondition,Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseErrorFormatter,System.String,System.String,System.String,System.String,System.String,System.String,System.String,Jenzabar.Portal.Framework.Web.UI.Controls.Validation.ConditionOperator)">
            <summary>
            Constructor that sets the Enabler, ErrorFormatter, ErrorMessage, 
            SummaryErrorMessage, ErrorMessageLookupID, SummaryErrorMessageLookupID, Group, ControlIDToEvaluate,
            SecondControlIDToEvaluate, and Operator properties.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseCompareTwoFieldsValidator.#ctor(Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseCondition,Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseErrorFormatter,System.String,System.String,System.String,System.String,System.String,System.Web.UI.Control,System.Web.UI.Control,Jenzabar.Portal.Framework.Web.UI.Controls.Validation.ConditionOperator)">
            <summary>
            Constructor that sets the Enabler, ErrorFormatter, ErrorMessage, 
            SummaryErrorMessage, ErrorMessageLookupID, SummaryErrorMessageLookupID, Group, ControlToEvaluate,
            SecondControlToEvaluate, and Operator properties.
            </summary>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseCompareTwoFieldsValidator.fOperator">
            <summary>
            Storage for <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseCompareTwoFieldsValidator.Operator"/>.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseCompareTwoFieldsValidator.TransferProperties">
            <summary>
            TransferProperties is called during OnPreRender to allow the control to transfer
            its properties to the ValidatorAction and Condition.
            </summary>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseCompareTwoFieldsValidator.Operator">
            <summary>
            Operator determines how the two fields are compared.
            </summary>
            <value>
            <para>It defaults to ConditionOperator.Equal.</para>
            <para>Transferred to Condition.Operator in 
            <see cref="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseCompareTwoFieldsValidator.TransferProperties"/>.</para>
            </value>
            <seealso cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.ConditionOperator"/>
        </member>
        <member name="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.CompareTwoFieldsValidator">
            <summary>
            CompareTwoFieldsValidator supports <see cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.CompareTwoFieldsCondition"/>.
            CompareTwoFieldsCondition compares two text fields against each other given an 
            operator and a datatype determined by the user.
            </summary>
            <remarks>
            <para>Set the <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseOneFldValidator.ControlIDToEvaluate"/> property
            to the first control, <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseTwoFldValidator.SecondControlIDToEvaluate"/>
            to the second control, and a comparison operator with the 
            <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseCompareTwoFieldsValidator.Operator"/> property.
            Set the <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.CompareTwoFieldsValidator.DataType"/> property to determine
            the data type of ControlIDToEvaluate and SecondControlIDToEvaluate.</para>
            <para>See the <b>User's Guide</b> for an overview of using this Validator.</para>
            <para>The ValidatorAction is 
            <see cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.CompareTwoFieldsValidatorAction"/>.</para>
            <para>There are no additional properties to expose on CompareTwoFieldsValidatorAction.</para>
            <para>It exposes these properties of CompareTwoFieldsCondition: 
            <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.CompareTwoFieldsCondition.DataType"/>.</para>
            </remarks>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.CompareTwoFieldsValidator.#ctor">
            <summary>
            Constructor with no parameters.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.CompareTwoFieldsValidator.#ctor(System.String,System.String,System.String,System.String,Jenzabar.Portal.Framework.Web.UI.Controls.Validation.ConditionOperator)">
            <summary>
            Constructor that sets the ErrorMessage, Group, ControlIDToEvaluate,
            SecondControlIDToEvaluate, and Operator properties.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.CompareTwoFieldsValidator.#ctor(Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseCondition,Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseErrorFormatter,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Constructor that sets the Enabler, ErrorFormatter, ErrorMessage, 
            SummaryErrorMessage, Group, ControlIDToEvaluate,
            and SecondControlIDToEvaluate properties.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.CompareTwoFieldsValidator.#ctor(Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseCondition,Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseErrorFormatter,System.String,System.String,System.String,System.String,System.String,System.String,System.String,Jenzabar.Portal.Framework.Web.UI.Controls.Validation.ConditionOperator)">
            <summary>
            Constructor that sets the Enabler, ErrorFormatter, ErrorMessage, 
            SummaryErrorMessage, ErrorMessageLookupID, SummaryErrorMessageLookupID, Group, ControlIDToEvaluate,
            SecondControlIDToEvaluate, and Operator properties.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.CompareTwoFieldsValidator.#ctor(Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseCondition,Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseErrorFormatter,System.String,System.String,System.String,System.String,System.String,System.Web.UI.Control,System.Web.UI.Control,Jenzabar.Portal.Framework.Web.UI.Controls.Validation.ConditionOperator)">
            <summary>
            Constructor that sets the Enabler, ErrorFormatter, ErrorMessage, 
            SummaryErrorMessage, ErrorMessageLookupID, SummaryErrorMessageLookupID, Group, ControlToEvaluate,
            SecondControlToEvaluate, and Operator properties.
            </summary>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.CompareTwoFieldsValidator.fDataType">
            <summary>
            Storage for <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.CompareTwoFieldsCondition.DataType"/>.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.CompareTwoFieldsValidator.CreateAction">
            <returns><see cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.CompareTwoFieldsValidatorAction"/></returns>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.CompareTwoFieldsValidator.TransferProperties">
            <summary>
            TransferProperties is called during OnPreRender to allow the control to transfer
            its properties to the ValidatorAction and Condition.
            </summary>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.CompareTwoFieldsValidator.DataType">
            <summary>
            DataType is the name of a data type.
            </summary>
            <value>
            <para>Implements the <see cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.IDataTypeProperty"/>.</para>
            <para>The name must match the Name property of a <see cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.VAMTypeConverter"/> in the
            <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.Globals.DataTypes">Globals.DataTypes</see> property which gets its
            values from the VAM.config and custom.VAM.config files. (The match is case insensitive.)</para>
            <para>It defaults to "String".</para>
            </value>
            <remarks>
            <para><b>EditorAttribute:</b><see cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.DataType_TypeEditor"/></para>
            </remarks>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.CompareTwoFieldsValidator.CanSetValidationAction">
            <summary>
            Returns false. You cannot change the ValidatorAction.
            </summary>
        </member>
        <member name="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseCompareToValueValidator">
            <summary>
            BaseCompareToValueValidator is an abstract base class that
            supports subclasses of <see cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseCompareToValueCondition"/>.
            Use it to create Validator controls that use BaseCompareToValueConditions.
            BaseCompareToValueCondition compares the value of a text field to the
            value in the <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseCompareToValueCondition.ValueToCompare"/> property.
            </summary>
            <remarks>
            <para>The ValidatorAction is defined by the subclass.</para>
            <para>It exposes these properties of BaseCompareToValueCondition: 
            <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseCompareToValueCondition.Operator"/>,
            <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseCompareToValueCondition.ValueToCompare"/>.</para>
            </remarks>
            <seealso cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.CompareToValueValidator"/>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseCompareToValueValidator.#ctor">
            <summary>
            Constructor with no parameters.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseCompareToValueValidator.#ctor(System.String,System.String,System.String,Jenzabar.Portal.Framework.Web.UI.Controls.Validation.ConditionOperator,System.String)">
            <summary>
            Constructor that sets the ErrorMessage, Group, ControlIDToEvaluate,
            Operator, and ValueToCompare properties.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseCompareToValueValidator.#ctor(Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseCondition,Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseErrorFormatter,System.String,System.String,System.String,System.String)">
            <summary>
            Constructor that sets the Enabler, ErrorFormatter, ErrorMessage, 
            SummaryErrorMessage, Group, and ControlIDToEvaluate properties.
            Enabler and ErrorFormatter can be null.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseCompareToValueValidator.#ctor(Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseCondition,Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseErrorFormatter,System.String,System.String,System.String,System.String,System.String,System.String,Jenzabar.Portal.Framework.Web.UI.Controls.Validation.ConditionOperator,System.String)">
            <summary>
            Constructor that sets the Enabler, ErrorFormatter, ErrorMessage, 
            SummaryErrorMessage, ErrorMessageLookupID, SummaryErrorMessageLookupID,
            Group, ControlIDToEvaluate, Operator, and ValueToCompare properties.
            Enabler and ErrorFormatter can be null.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseCompareToValueValidator.#ctor(Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseCondition,Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseErrorFormatter,System.String,System.String,System.String,System.String,System.String,System.Web.UI.Control,Jenzabar.Portal.Framework.Web.UI.Controls.Validation.ConditionOperator,System.String)">
            <summary>
            Constructor that sets the Enabler, ErrorFormatter, ErrorMessage, 
            SummaryErrorMessage, ErrorMessageLookupID, SummaryErrorMessageLookupID,
            Group, ControlToEvaluate, Operator, and ValueToCompare properties.
            Enabler and ErrorFormatter can be null.
            </summary>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseCompareToValueValidator.fOperator">
            <summary>
            Storage for <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseCompareToValueValidator.Operator"/>.
            </summary>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseCompareToValueValidator.fValueToCompare">
            <summary>
            Storage for <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseCompareToValueValidator.ValueToCompare"/>.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseCompareToValueValidator.TransferProperties">
            <summary>
            TransferProperties is called during OnPreRender to allow the control to transfer
            its properties to the ValidatorAction and Condition.
            </summary>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseCompareToValueValidator.Operator">
            <summary>
            Operator determines how the ControlToEvaluate's data is compared to 
            <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseCompareToValueValidator.ValueToCompare"/>.
            </summary>
            <value>
            <para>It defaults to ConditionOperator.Equal.</para>
            <para>Transferred to Condition.Operator in 
            <see cref="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseCompareToValueValidator.TransferProperties"/>.</para>
            </value>
            <seealso cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.ConditionOperator"/>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseCompareToValueValidator.ValueToCompare">
            <summary>
            ValueToCompare is a string representing the value to be compared.
            </summary>
            <value>
            <para>The value is required. If it is blank, an exception will thrown at runtime.</para>
            <para>This string must be compatible with the VAMTypeConverter on the Condition. For example,
            if the data type is an integer, this value can only contain digits.</para>
            <para>This value is the right side of the expression. 
            The control's value is on the left side.</para>
            <para>Transferred to Condition.ValueToCompare in 
            <see cref="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseCompareToValueValidator.TransferProperties"/>.</para>
            </value>
            <remarks>
            <para><b>EditorAttribute:</b><see cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.StringTypeEditor"/></para>
            </remarks>
        </member>
        <member name="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.CompareToValueValidator">
            <summary>
            CompareToValueValidator supports <see cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.CompareToValueCondition"/>.
            CompareToValueCondition compares the value of a text field to a string.
            </summary>
            <remarks>
            <para>Set the <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseOneFldValidator.ControlIDToEvaluate"/> property
            to the control, a comparison operator with the 
            <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseCompareToValueValidator.Operator"/> property and the value
            for comparison with the <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseCompareToValueValidator.ValueToCompare"/> property.
            Set the <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.CompareToValueValidator.DataType"/> property to determine
            the data type of ControlIDToEvaluate and ValueToCompare.</para>
            <para>See the <b>User's Guide</b> for an overview of using this Validator.</para>
            <para>The ValidatorAction is 
            <see cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.CompareToValueValidatorAction"/>.</para>
            <para>There are no additional properties to expose on CompareToValueValidatorAction.</para>
            <para>It exposes these properties of CompareToValueCondition: 
            <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.CompareToValueCondition.DataType"/>.</para>
            </remarks>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.CompareToValueValidator.#ctor">
            <summary>
            Constructor with no parameters.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.CompareToValueValidator.#ctor(System.String,System.String,System.String,Jenzabar.Portal.Framework.Web.UI.Controls.Validation.ConditionOperator,System.String)">
            <summary>
            Constructor that sets the ErrorMessage, 
            Group, ControlIDToEvaluate, Operator, and ValueToCompare properties.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.CompareToValueValidator.#ctor(Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseCondition,Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseErrorFormatter,System.String,System.String,System.String,System.String)">
            <summary>
            Constructor that sets the Enabler, ErrorFormatter, ErrorMessage, 
            SummaryErrorMessage, Group, and ControlIDToEvaluate properties.
            Enabler and ErrorFormatter can be null.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.CompareToValueValidator.#ctor(Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseCondition,Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseErrorFormatter,System.String,System.String,System.String,System.String,System.String,System.String,Jenzabar.Portal.Framework.Web.UI.Controls.Validation.ConditionOperator,System.String)">
            <summary>
            Constructor that sets the Enabler, ErrorFormatter, ErrorMessage, 
            SummaryErrorMessage, ErrorMessageLookupID, SummaryErrorMessageLookupID, 
            Group, ControlIDToEvaluate, Operator and ValueToCompare properties.
            Enabler and ErrorFormatter can be null.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.CompareToValueValidator.#ctor(Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseCondition,Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseErrorFormatter,System.String,System.String,System.String,System.String,System.String,System.Web.UI.Control,Jenzabar.Portal.Framework.Web.UI.Controls.Validation.ConditionOperator,System.String)">
            <summary>
            Constructor that sets the Enabler, ErrorFormatter, ErrorMessage, 
            SummaryErrorMessage, ErrorMessageLookupID, SummaryErrorMessageLookupID, 
            Group, ControlToEvaluate, Operator and ValueToCompare properties.
            Enabler and ErrorFormatter can be null.
            </summary>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.CompareToValueValidator.fDataType">
            <summary>
            Storage for <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.CompareToValueValidator.DataType"/>.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.CompareToValueValidator.CreateAction">
            <returns><see cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.CompareToValueValidatorAction"/></returns>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.CompareToValueValidator.TransferProperties">
            <summary>
            TransferProperties is called during OnPreRender to allow the control to transfer
            its properties to the ValidatorAction and Condition.
            </summary>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.CompareToValueValidator.DataType">
            <summary>
            DataType is the name of a data type.
            </summary>
            <value>
            <para>Implements the <see cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.IDataTypeProperty"/>.</para>
            <para>The name must match the Name property of a <see cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.VAMTypeConverter"/> in the
            <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.Globals.DataTypes">Globals.DataTypes</see> property which gets its
            values from the VAM.config and custom.VAM.config files. (The match is case insensitive.)</para>
            <para>It defaults to "String".</para>
            </value>
            <remarks>
            <para><b>EditorAttribute:</b><see cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.DataType_TypeEditor"/></para>
            </remarks>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.CompareToValueValidator.CanSetValidationAction">
            <summary>
            Returns false. You cannot change the ValidatorAction.
            </summary>
        </member>
        <member name="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseDifferenceValidator">
            <summary>
            BaseDifferenceValidator is an abstract base class that
            supports subclasses of <see cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseDifferenceCondition"/>.
            Use it to create Validator controls that use BaseDifferenceConditions.
            BaseDifferenceCondition compares the difference between two fields (numerically)
            to some other value. 
            </summary>
            <remarks>
            <para>The ValidatorAction is defined by subclasses.</para>
            <para>It exposes these properties of BaseDifferenceCondition: 
            <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseDifferenceCondition.DifferenceValue"/>.</para>
            </remarks>
            <seealso cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.DifferenceValidator"/>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseDifferenceValidator.#ctor">
            <summary>
            Constructor with no parameters.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseDifferenceValidator.#ctor(System.String,System.String,System.String,System.String,Jenzabar.Portal.Framework.Web.UI.Controls.Validation.ConditionOperator,System.Double)">
            <summary>
            Constructor that sets the ErrorMessage, 
            Group, ControlIDToEvaluate, SecondControlIDToEvaluate,
            Operator, and DifferenceValue properties.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseDifferenceValidator.#ctor(Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseCondition,Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseErrorFormatter,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Constructor that sets the Enabler, ErrorFormatter, ErrorMessage, 
            SummaryErrorMessage, Group, ControlIDToEvaluate and SecondControlIDToEvaluate properties.
            Enabler and ErrorFormatter can be null.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseDifferenceValidator.#ctor(Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseCondition,Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseErrorFormatter,System.String,System.String,System.String,System.String,System.String,System.String,System.String,Jenzabar.Portal.Framework.Web.UI.Controls.Validation.ConditionOperator,System.Double)">
            <summary>
            Constructor that sets the Enabler, ErrorFormatter, ErrorMessage, 
            SummaryErrorMessage, ErrorMessageLookupID, SummaryErrorMessageLookupID, 
            Group, ControlIDToEvaluate, SecondControlIDToEvaluate, Operator and DifferenceValue properties.
            Enabler and ErrorFormatter can be null.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseDifferenceValidator.#ctor(Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseCondition,Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseErrorFormatter,System.String,System.String,System.String,System.String,System.String,System.Web.UI.Control,System.Web.UI.Control,Jenzabar.Portal.Framework.Web.UI.Controls.Validation.ConditionOperator,System.Double)">
            <summary>
            Constructor that sets the Enabler, ErrorFormatter, ErrorMessage, 
            SummaryErrorMessage, ErrorMessageLookupID, SummaryErrorMessageLookupID, 
            Group, ControlToEvaluate, SecondControlToEvaluate, Operator and DifferenceValue properties.
            Enabler and ErrorFormatter can be null.
            </summary>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseDifferenceValidator.fDifferenceValue">
            <summary>
            Storage for <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseDifferenceValidator.DifferenceValue"/>.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseDifferenceValidator.TransferProperties">
            <summary>
            TransferProperties is called during OnPreRender to allow the control to transfer
            its properties to the ValidatorAction and Condition.
            </summary>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseDifferenceValidator.DifferenceValue">
            <summary>
            DifferenceValue is the value to be compared to the difference between the two values. 
            (The diff is always absolute value)
            </summary>
            <value>
            <para>It must be 0 or higher. When it is 0, it is effectively the same as a CompareTwoFieldsValidator.</para>
            <para>This string must be compatible with the <see cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.VAMTypeConverter"/>
            assigned to this class. For example,
            if the datatype is an integer, this value can only contain digits.</para>
            <para>This value is the right side of the expression. The control's value is on the left side.</para>
            <para>Transferred to Condition.DifferenceValue in 
            <see cref="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseDifferenceValidator.TransferProperties"/>.</para>
            </value>
        </member>
        <member name="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.DifferenceValidator">
            <summary>
            DifferenceValidator supports <see cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.DifferenceCondition"/>.
            DifferenceCondition compares the difference between two fields (numerically)
            to some other value. It is used to determine that two fields are separated by
            some value. For example, field 1 differs from field 2 by less than 5.
            </summary>
            <remarks>
            <para>Set the <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseOneFldValidator.ControlIDToEvaluate"/> property
            to the first control, <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseTwoFldValidator.SecondControlIDToEvaluate"/>
            to the second control, a comparison operator with the 
            <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseCompareTwoFieldsValidator.Operator"/> property,
            and the difference with <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseDifferenceValidator.DifferenceValue"/>.
            Set the <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.DifferenceValidator.DataType"/> property to determine
            the data type of ControlIDToEvaluate and SecondControlIDToEvaluate.</para>
            <para>See the <b>User's Guide</b> for an overview of using this Validator.</para>
            <para>The ValidatorAction is 
            <see cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.DifferenceValidatorAction"/>.</para>
            <para>There are no additional properties to expose on DifferenceValidatorAction.</para>
            <para>It exposes these properties of DifferenceCondition: 
            <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.DifferenceCondition.DataType"/>.</para>
            </remarks>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.DifferenceValidator.#ctor">
            <summary>
            Constructor with no parameters.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.DifferenceValidator.#ctor(System.String,System.String,System.String,System.String,Jenzabar.Portal.Framework.Web.UI.Controls.Validation.ConditionOperator,System.Double,System.String)">
            <summary>
            Constructor that sets the ErrorMessage, 
            Group, ControlIDToEvaluate, SecondControlIDToEvaluate,
            Operator, DifferenceValue and DataType properties.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.DifferenceValidator.#ctor(Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseCondition,Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseErrorFormatter,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Constructor that sets the Enabler, ErrorFormatter, ErrorMessage, 
            SummaryErrorMessage, Group, ControlIDToEvaluate and SecondControlIDToEvaluate properties.
            Enabler and ErrorFormatter can be null.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.DifferenceValidator.#ctor(Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseCondition,Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseErrorFormatter,System.String,System.String,System.String,System.String,System.String,System.String,System.String,Jenzabar.Portal.Framework.Web.UI.Controls.Validation.ConditionOperator,System.Double,System.String)">
            <summary>
            Constructor that sets the Enabler, ErrorFormatter, ErrorMessage, 
            SummaryErrorMessage, ErrorMessageLookupID, SummaryErrorMessageLookupID, 
            Group, ControlIDToEvaluate, SecondControlIDToEvaluate, Operator, DifferenceValue,
            and DataType properties.
            Enabler and ErrorFormatter can be null.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.DifferenceValidator.#ctor(Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseCondition,Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseErrorFormatter,System.String,System.String,System.String,System.String,System.String,System.Web.UI.Control,System.Web.UI.Control,Jenzabar.Portal.Framework.Web.UI.Controls.Validation.ConditionOperator,System.Double,System.String)">
            <summary>
            Constructor that sets the Enabler, ErrorFormatter, ErrorMessage, 
            SummaryErrorMessage, ErrorMessageLookupID, SummaryErrorMessageLookupID, 
            Group, ControlToEvaluate, SecondControlToEvaluate, Operator, DifferenceValue,
            and DataType properties.
            Enabler and ErrorFormatter can be null.
            </summary>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.DifferenceValidator.fDataType">
            <summary>
            Storage for <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.DifferenceValidator.DataType"/>.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.DifferenceValidator.CreateAction">
            <returns><see cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.DifferenceValidatorAction"/></returns>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.DifferenceValidator.TransferProperties">
            <summary>
            TransferProperties is called during OnPreRender to allow the control to transfer
            its properties to the ValidatorAction and Condition.
            </summary>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.DifferenceValidator.DataType">
            <summary>
            DataType is the name of a data type.
            </summary>
            <value>
            <para>Implements the <see cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.IDataTypeProperty"/>.</para>
            <para>The name must match the Name property of a <see cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.VAMTypeConverter"/> in the
            <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.Globals.DataTypes">Globals.DataTypes</see> property which gets its
            values from the VAM.config and custom.VAM.config files. (The match is case insensitive.)</para>
            <para>It defaults to "String".</para>
            </value>
            <remarks>
            <para><b>EditorAttribute:</b><see cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.DataType_TypeEditor"/></para>
            </remarks>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.DifferenceValidator.CanSetValidationAction">
            <summary>
            Returns false. You cannot change the ValidatorAction.
            </summary>
        </member>
        <member name="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseDataTypeCheckValidator">
            <summary>
            BaseDataTypeCheckValidator is an abstract base class that
            supports subclasses of <see cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseDataTypeCheckCondition"/>.
            Use it to create Validator controls that use BaseDataTypeCheckConditions.
            BaseDataTypeCheckCondition determines if the contents of a text field
            represent the data type.
            </summary>
            <remarks>
            <para>The ValidatorAction is defined by subclasses.</para>
            <para>There are no additional properties to expose on BaseDataTypeCheckCondition.</para>
            </remarks>
            <seealso cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.DataTypeCheckValidator"/>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseDataTypeCheckValidator.#ctor">
            <summary>
            Constructor with no parameters.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseDataTypeCheckValidator.#ctor(System.String,System.String,System.String)">
            <summary>
            Constructor that sets the ErrorMessage, Group, and ControlIDToEvaluate properties.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseDataTypeCheckValidator.#ctor(Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseCondition,Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseErrorFormatter,System.String,System.String,System.String,System.String)">
            <summary>
            Constructor that sets the Enabler, ErrorFormatter, ErrorMessage, 
            SummaryErrorMessage, Group, and ControlIDToEvaluate properties.
            Enabler and ErrorFormatter can be null.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseDataTypeCheckValidator.#ctor(Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseCondition,Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseErrorFormatter,System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Constructor that sets the Enabler, ErrorFormatter, ErrorMessage, 
            SummaryErrorMessage, ErrorMessageLookupID, SummaryErrorMessageLookupID,
            Group, and ControlIDToEvaluate properties.
            Enabler and ErrorFormatter can be null.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseDataTypeCheckValidator.#ctor(Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseCondition,Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseErrorFormatter,System.String,System.String,System.String,System.String,System.String,System.Web.UI.Control)">
            <summary>
            Constructor that sets the Enabler, ErrorFormatter, ErrorMessage, 
            SummaryErrorMessage, ErrorMessageLookupID, SummaryErrorMessageLookupID,
            Group, and ControlToEvaluate properties.
            Enabler and ErrorFormatter can be null.
            </summary>
        </member>
        <member name="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.DataTypeCheckValidator">
            <summary>
            DataTypeCheckValidator supports <see cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.DataTypeCheckCondition"/>.
            DataTypeCheckCondition determines if the contents of a text field
            represent the data type. It is a format checker. For example, if the data type is
            an integer, it attempts to convert the data into an integer. If that fails,
            the condition fails.
            </summary>
            <remarks>
            <para>Specify the control in <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseOneFldValidator.ControlIDToEvaluate"/>
            and the DataType in <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.DataTypeCheckValidator.DataType"/>.</para>
            <para>See the <b>User's Guide</b> for an overview of using this Validator.</para>
            <para>The ValidatorAction is 
            <see cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.DataTypeCheckValidatorAction"/>.</para>
            <para>There are no additional properties to expose on DataTypeCheckValidatorAction.</para>
            <para>It exposes these properties of DataTypeCheckCondition: 
            <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.DataTypeCheckCondition.DataType"/>.</para>
            </remarks>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.DataTypeCheckValidator.#ctor">
            <summary>
            Constructor with no parameters.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.DataTypeCheckValidator.#ctor(System.String,System.String,System.String,System.String)">
            <summary>
            Constructor that sets the ErrorMessage, Group, and ControlIDToEvaluate properties.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.DataTypeCheckValidator.#ctor(Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseCondition,Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseErrorFormatter,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Constructor that sets the Enabler, ErrorFormatter, ErrorMessage, 
            SummaryErrorMessage, Group, and ControlIDToEvaluate properties.
            Enabler and ErrorFormatter can be null.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.DataTypeCheckValidator.#ctor(Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseCondition,Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseErrorFormatter,System.String,System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Constructor that sets the Enabler, ErrorFormatter, ErrorMessage, 
            SummaryErrorMessage, ErrorMessageLookupID, SummaryErrorMessageLookupID,
            Group, and ControlIDToEvaluate properties.
            Enabler and ErrorFormatter can be null.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.DataTypeCheckValidator.#ctor(Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseCondition,Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseErrorFormatter,System.String,System.String,System.String,System.String,System.String,System.Web.UI.Control,System.String)">
            <summary>
            Constructor that sets the Enabler, ErrorFormatter, ErrorMessage, 
            SummaryErrorMessage, ErrorMessageLookupID, SummaryErrorMessageLookupID,
            Group, and ControlToEvaluate properties.
            Enabler and ErrorFormatter can be null.
            </summary>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.DataTypeCheckValidator.fDataType">
            <summary>
            Storage for <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.DataTypeCheckValidator.DataType"/>.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.DataTypeCheckValidator.CreateAction">
            <returns><see cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.DataTypeCheckValidatorAction"/></returns>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.DataTypeCheckValidator.TransferProperties">
            <summary>
            TransferProperties is called during OnPreRender to allow the control to transfer
            its properties to the ValidatorAction and Condition.
            </summary>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.DataTypeCheckValidator.DataType">
            <summary>
            DataType is the name of a data type.
            </summary>
            <value>
            <para>Implements the <see cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.IDataTypeProperty"/>.</para>
            <para>The name must match the Name property of a <see cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.VAMTypeConverter"/> in the
            <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.Globals.DataTypes">Globals.DataTypes</see> property which gets its
            values from the VAM.config and custom.VAM.config files. (The match is case insensitive.)</para>
            <para>It defaults to "String".</para>
            </value>
            <remarks>
            <para><b>EditorAttribute:</b><see cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.DataType_TypeEditor"/></para>
            </remarks>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.DataTypeCheckValidator.CanSetValidationAction">
            <summary>
            Returns false. You cannot change the ValidatorAction.
            </summary>
        </member>
        <member name="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.RegexValidator">
            <summary>
            RegexValidator supports <see cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.RegexCondition"/>.
            RegexCondition compares a string from any field supporting <see cref="T:System.Web.UI.ValidationPropertyAttribute"/>
            to a Regex expression. If Regex returns a match, the condition evaluates as "success".
            </summary>
            <remarks>
            <para>Set the <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseOneFldValidator.ControlIDToEvaluate"/> property
            to the control and the expression with <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.RegexValidator.Expression"/>.</para>
            <para>See the <b>User's Guide</b> for an overview of using this Validator.</para>
            <para>The regular expression must be compatible with both .Net and JavaScript. JavaScript's RegEx
            syntax is a subset of .Net so that description should be used. See:
            <a href="http://devedge.netscape.com/library/manuals/2000/javascript/1.5/reference/regexp.html#1193136">
            http://devedge.netscape.com/library/manuals/2000/javascript/1.5/reference/regexp.html#1193136</a></para>
            <para>One of the more powerful features of Regular expressions is 
            the OR condition, using the | operator.
            For example, you can match US and internation phone number strings: (USRegEx)|(IntRegEx)</para>
            <para>The ValidatorAction is 
            <see cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.RegexValidatorAction"/>.</para>
            <para>There are no additional properties to expose on RegexValidatorAction.</para>
            <para>It exposes these properties of RegexCondition: 
            <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.RegexCondition.Expression"/>,
            <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.RegexCondition.CaseInsensitive"/>,
            <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.RegexCondition.Multiline"/>.
            </para>
            </remarks>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.RegexValidator.#ctor">
            <summary>
            Constructor with no parameters.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.RegexValidator.#ctor(System.String,System.String,System.String,System.String)">
            <summary>
            Constructor that sets the ErrorMessage, Group, ControlIDToEvaluate,
            and Expression properties.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.RegexValidator.#ctor(Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseCondition,Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseErrorFormatter,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Constructor that sets the Enabler, ErrorFormatter, ErrorMessage, 
            SummaryErrorMessage, Group, ControlIDToEvaluate, and Expression properties.
            Enabler and ErrorFormatter can be null.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.RegexValidator.#ctor(Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseCondition,Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseErrorFormatter,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.Boolean,System.Boolean)">
            <summary>
            Constructor that sets the Enabler, ErrorFormatter, ErrorMessage, 
            SummaryErrorMessage, ErrorMessageLookupID, SummaryErrorMessageLookupID,
            Group, ControlIDToEvaluate, Expression, CaseInsensitive, and Multiline properties.
            Enabler and ErrorFormatter can be null.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.RegexValidator.#ctor(Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseCondition,Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseErrorFormatter,System.String,System.String,System.String,System.String,System.String,System.Web.UI.Control,System.String,System.Boolean,System.Boolean)">
            <summary>
            Constructor that sets the Enabler, ErrorFormatter, ErrorMessage, 
            SummaryErrorMessage, ErrorMessageLookupID, SummaryErrorMessageLookupID,
            Group, ControlToEvaluate, Expression, CaseInsensitive, and Multiline properties.
            Enabler and ErrorFormatter can be null.
            </summary>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.RegexValidator.fExpression">
            <summary>
            Storage for <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.RegexValidator.Expression"/>.
            </summary>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.RegexValidator.fCaseInsensitive">
            <summary>
            Storage for <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.RegexValidator.CaseInsensitive"/>.
            </summary>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.RegexValidator.fMultiline">
            <summary>
            Storage for <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.RegexValidator.Multiline"/>.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.RegexValidator.CreateAction">
            <returns><see cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.RegexValidatorAction"/></returns>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.RegexValidator.TransferProperties">
            <summary>
            TransferProperties is called during OnPreRender to allow the control to transfer
            its properties to the ValidatorAction and Condition.
            </summary>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.RegexValidator.Expression">
            <summary>
            Expression is a Regular Expression that is valid for both JavaScript
            and .Net RegEx parsers.
            </summary>
            <value>
            <para>This condition evaluates as "success" when the Regular Expression parser 
            matches the control to this expression.</para>
            <para>When left blank, the condition evaluates as "cannot evaluate".</para>
            <para>The regular expression must be compatible with both .Net and JavaScript. JavaScript's RegEx
            syntax is a subset of .Net so that description should be used. See:
            <a href="http://devedge.netscape.com/library/manuals/2000/javascript/1.5/reference/regexp.html#1193136">
            http://devedge.netscape.com/library/manuals/2000/javascript/1.5/reference/regexp.html#1193136</a></para>
            <para>One of the more powerful features of Regular expressions is 
            the OR condition, using the | operator.
            For example, you can match US and internation phone number strings: (USRegEx)|(IntRegEx)</para>
            <para>Transferred to Condition.Expression in 
            <see cref="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.RegexValidator.TransferProperties"/>.</para>
            </value>
            <remarks>
            <para><b>EditorAttribute:</b><see cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.RegExpressionTypeEditor"/></para>
            </remarks>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.RegexValidator.CaseInsensitive">
            <summary>
            CaseInsenstive determines if the matching uses a case insensitive match.
            </summary>
            <value>
            <para>When true, it is case insensitive.</para>
            <para>It defaults to true.</para>
            <para>Transferred to Condition.CaseInsensitive in 
            <see cref="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.RegexValidator.TransferProperties"/>.</para>
            </value>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.RegexValidator.Multiline">
            <summary>
            Multiline changes the meaning of ^ and $ so they match at the beginning and end, 
            respectively, of any line, and not just the beginning and end of the entire string.
            </summary>
            <value>
            <para>It defaults to false.</para>
            <para><b>Note:</b>Many browsers do not support this option during client-side regular
            expression parsing. Only set this to true when you are certain your user's browsers
            will support it. Browsers found to support it include IE for Windows and Netscape 6+.
            IE for Mac and Netscape 4 definitely do not. Others have not been tested by PeterBlum.com.</para>
            <para>Transferred to Condition.Multiline in 
            <see cref="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.RegexValidator.TransferProperties"/>.</para>
            </value>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.RegexValidator.CanSetValidationAction">
            <summary>
            Returns false. You cannot change the ValidatorAction.
            </summary>
        </member>
        <member name="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.CompareToStringsValidator">
            <summary>
            CompareToStringsValidator supports <see cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.CompareToStringsCondition"/>.
            CompareToStringsCondition compares the contents of a textbox to a list of strings.
            If it matches one of the strings, the condition succeeds.
            </summary>
            <remarks>
            <para>See the <b>User's Guide</b> for an overview of using this Validator.</para>
            <para>The ValidatorAction is 
            <see cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.CompareToStringsValidatorAction"/>.</para>
            <para>There are no additional properties to expose on CompareToStringsValidatorAction.</para>
            <para>It exposes these properties of CompareToStringsCondition: 
            <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.CompareToStringsCondition.MatchTextRule"/>,
            <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.CompareToStringsCondition.Items"/>,
            <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.CompareToStringsCondition.DataSource"/>,
            <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.CompareToStringsCondition.DataMember"/>,
            <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.CompareToStringsCondition.DataTextField"/>.
            </para>
            </remarks>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.CompareToStringsValidator.#ctor">
            <summary>
            Constructor with no parameters.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.CompareToStringsValidator.#ctor(System.String,System.String,System.String,Jenzabar.Portal.Framework.Web.UI.Controls.Validation.CompareToStringsCollection)">
            <summary>
            Constructor that sets the ErrorMessage, Group, ControlIDToEvaluate,
            and Items properties.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.CompareToStringsValidator.#ctor(Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseCondition,Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseErrorFormatter,System.String,System.String,System.String,System.String,Jenzabar.Portal.Framework.Web.UI.Controls.Validation.CompareToStringsCollection)">
            <summary>
            Constructor that sets the Enabler, ErrorFormatter, ErrorMessage, 
            SummaryErrorMessage, Group, ControlIDToEvaluate, and Items properties.
            Enabler and ErrorFormatter can be null.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.CompareToStringsValidator.#ctor(Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseCondition,Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseErrorFormatter,System.String,System.String,System.String,System.String,System.String,System.String,Jenzabar.Portal.Framework.Web.UI.Controls.Validation.CompareToStringsCollection,Jenzabar.Portal.Framework.Web.UI.Controls.Validation.MatchTextRule)">
            <summary>
            Constructor that sets the Enabler, ErrorFormatter, ErrorMessage, 
            SummaryErrorMessage, ErrorMessageLookupID, SummaryErrorMessageLookupID,
            Group, ControlIDToEvaluate, Items, and MatchTextRule properties.
            Enabler and ErrorFormatter can be null.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.CompareToStringsValidator.#ctor(Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseCondition,Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseErrorFormatter,System.String,System.String,System.String,System.String,System.String,System.Web.UI.Control,Jenzabar.Portal.Framework.Web.UI.Controls.Validation.CompareToStringsCollection,Jenzabar.Portal.Framework.Web.UI.Controls.Validation.MatchTextRule)">
            <summary>
            Constructor that sets the Enabler, ErrorFormatter, ErrorMessage, 
            SummaryErrorMessage, ErrorMessageLookupID, SummaryErrorMessageLookupID,
            Group, ControlToEvaluate, Items, and MatchTextRule properties.
            Enabler and ErrorFormatter can be null.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.CompareToStringsValidator.#ctor(System.String,System.String,System.String,System.Object,System.String,System.String)">
            <summary>
            Constructor that sets the ErrorMessage, 
            Group, ControlIDToEvaluate, DataSource, DataMember, and DataTextField properties.
            Enabler and ErrorFormatter can be null.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.CompareToStringsValidator.#ctor(Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseCondition,Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseErrorFormatter,System.String,System.String,System.String,System.String,System.Object,System.String,System.String)">
            <summary>
            Constructor that sets the Enabler, ErrorFormatter, ErrorMessage, 
            SummaryErrorMessage, ErrorMessageLookupID, SummaryErrorMessageLookupID,
            Group, ControlIDToEvaluate, DataSource, DataMember, and DataTextField properties.
            Enabler and ErrorFormatter can be null.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.CompareToStringsValidator.#ctor(Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseCondition,Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseErrorFormatter,System.String,System.String,System.String,System.String,System.String,System.String,System.Object,System.String,System.String,Jenzabar.Portal.Framework.Web.UI.Controls.Validation.MatchTextRule)">
            <summary>
            Constructor that sets the Enabler, ErrorFormatter, ErrorMessage, 
            SummaryErrorMessage, ErrorMessageLookupID, SummaryErrorMessageLookupID,
            Group, ControlIDToEvaluate, DataSource, DataMember, DataTextField, and MatchTextRule properties.
            Enabler and ErrorFormatter can be null.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.CompareToStringsValidator.#ctor(Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseCondition,Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseErrorFormatter,System.String,System.String,System.String,System.String,System.String,System.Web.UI.Control,System.Object,System.String,System.String,Jenzabar.Portal.Framework.Web.UI.Controls.Validation.MatchTextRule)">
            <summary>
            Constructor that sets the Enabler, ErrorFormatter, ErrorMessage, 
            SummaryErrorMessage, ErrorMessageLookupID, SummaryErrorMessageLookupID,
            Group, ControlToEvaluate, DataSource, DataMember, DataTextField, and MatchTextRule properties.
            Enabler and ErrorFormatter can be null.
            </summary>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.CompareToStringsValidator.fMatchTextRule">
            <summary>
            Storage for <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.CompareToStringsValidator.MatchTextRule"/>.
            </summary>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.CompareToStringsValidator.fItems">
            <summary>
            Storage for <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.CompareToStringsValidator.Items"/>.
            </summary>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.CompareToStringsValidator.fDataSource">
            <summary>
            Storage for <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.CompareToStringsValidator.DataSource"/>.
            </summary>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.CompareToStringsValidator.fDataMember">
            <summary>
            Storage for <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.CompareToStringsValidator.DataMember"/>.
            </summary>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.CompareToStringsValidator.fDataTextField">
            <summary>
            Storage for <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.CompareToStringsValidator.DataTextField"/>.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.CompareToStringsValidator.CreateAction">
            <returns><see cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.CompareToStringsValidatorAction"/></returns>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.CompareToStringsValidator.TransferProperties">
            <summary>
            TransferProperties is called during OnPreRender to allow the control to transfer
            its properties to the ValidatorAction and Condition.
            </summary>
            <remarks>
            <para>Calls <see cref="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.CompareToStringsCondition.AppendDataSourceToItems">CompareToStringsCondition.AppendDataSourceToItems</see>
            to bind the DataSource to Items.</para>
            </remarks>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.CompareToStringsValidator.MatchTextRule">
            <summary>
            MatchTextRule determines how the text in the TextBox is compared to
            items in the list.
            </summary>
            <value>
            <para>It defaults to MatchTextRule.Exact.</para>
            </value>
            <seealso cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.MatchTextRule"/>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.CompareToStringsValidator.Expression">
            <summary>
            Hidden from the properties browser. If set by the user, it is ignored as CompareToStringsCondition
            reassigns it.
            </summary>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.CompareToStringsValidator.Multiline">
            <summary>
            Hidden from the properties browser. If set by the user, it is ignored.
            </summary>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.CompareToStringsValidator.Items">
            <summary>
            Items is the collection of strings which will be compared against the contents of the textbox.
            It can optionally be set by DataBinding()
            </summary>
            <value>
            <para>This property must be assigned at least one string although it really
            should be used with two or more because the CompareToValueCondition is better to comparing
            one string.</para>
            <para>There are two ways to establish the contents of this list:</para>
            <para><i>Add programmatically</i></para>
            <para>This property is a collection. Add a string by calling the Add method like this: 
            Add("string value")</para>
            <para>Use databinding. Establish the <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.CompareToStringsValidator.DataSource"/>,
            <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.CompareToStringsValidator.DataMember"/>, and 
            <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.CompareToStringsValidator.DataTextField"/> properties.
            You don't need to call the DataBind() method because simply setting these properties
            will databind when the Validator control is in its OnPreRender stage.</para>
            <para>Provides the UITypeEditor <see cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.CompareToStringsCollectionEditor"/>.</para>
            </value>
            <remarks>
            <para><b>EditorAttribute:</b><see cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.CompareToStringsCollectionEditor"/></para>
            </remarks>
            <seealso cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.CompareToStringsCollection"/>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.CompareToStringsValidator.DataSource">
            <summary>
            Gets or sets the data source that populates the 
            <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.CompareToStringsValidator.Items"/> property.
            </summary>
            <value>
            <para>Use this property to specify a source of data to populate the Items collection.</para>
            <para>When null, there is no data source.</para>
            <para>It defaults to null.</para>
            </value>
            <remarks>
            <para>The items in the Items collection are initialized from <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.CompareToStringsValidator.DataTextField"/>
            and <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.CompareToStringsValidator.DataMember"/>.</para>
            <para>This property is used when the 
            <see cref="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.CompareToStringsCondition.AppendDataSourceToItems">CompareToStringsCondition.AppendDataSourceToItems</see>
            method is invoked.</para>
            </remarks>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.CompareToStringsValidator.DataMember">
            <summary>
            DataMember gets or sets the specific table in the DataSource to bind to the control
            to the <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.CompareToStringsValidator.Items"/> collection.
            </summary>
            <value>
            It defaults to "".
            </value>
            <remarks>
            If the DataSource contains more than one table, use this property to specify the 
            exact table to bind to the control.
            </remarks>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.CompareToStringsValidator.DataTextField">
            <summary>
            DataTextField gets or sets the field of the data source that provides the strings for the 
            <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.CompareToStringsValidator.Items"/> collection.
            </summary>
            <value>
            <para>A string that specifies the field of the data source that 
            provides the text content of the list items. </para>
            <para>It defaults to "".</para>
            </value>
            <remarks>
            Use this property to specify a field in the <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.CompareToStringsValidator.DataSource"/>
            to display as the items of the list in a list control.
            </remarks>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.CompareToStringsValidator.CanSetValidationAction">
            <summary>
            Returns false. You cannot change the ValidatorAction.
            </summary>
        </member>
        <member name="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseIntMinMaxValidator">
            <summary>
            BaseIntMinMaxValidator is an abstract base class that
            supports subclasses of <see cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseIntMinMaxCondition"/>.
            Use it to create Validator controls that use BaseIntMinMaxConditions.
            BaseIntMinMaxCondition is a base class for classes that provide an integer minimum
            and maximum property.
            </summary>
            <remarks>
            <para>The ValidatorAction is defined by subclasses.</para>
            <para>It exposes these properties of BaseIntMinMaxCondition: 
            <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseIntMinMaxCondition.Minimum"/>,
            <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseIntMinMaxCondition.Maximum"/>.
            </para>
            </remarks>
            <seealso cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseTextLengthValidator"/>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseIntMinMaxValidator.#ctor">
            <summary>
            Constructor with no parameters.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseIntMinMaxValidator.#ctor(System.String,System.String,System.String,System.Int32,System.Int32)">
            <summary>
            Constructor that sets the ErrorMessage, Group, ControlIDToEvaluate,
            Minimum, and Maximum properties.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseIntMinMaxValidator.#ctor(Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseCondition,Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseErrorFormatter,System.String,System.String,System.String,System.String,System.Int32,System.Int32)">
            <summary>
            Constructor that sets the Enabler, ErrorFormatter, ErrorMessage, 
            SummaryErrorMessage, Group, ControlIDToEvaluate, Minimum, and Maximum  properties.
            Enabler and ErrorFormatter can be null.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseIntMinMaxValidator.#ctor(Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseCondition,Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseErrorFormatter,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.Int32,System.Int32)">
            <summary>
            Constructor that sets the Enabler, ErrorFormatter, ErrorMessage, 
            SummaryErrorMessage, ErrorMessageLookupID, SummaryErrorMessageLookupID,
            Group, ControlIDToEvaluate, SecondControlIDToEvaluate, Minimum, and Maximum properties.
            Enabler and ErrorFormatter can be null. SecondControlIDToEvaluate can be "".
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseIntMinMaxValidator.#ctor(Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseCondition,Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseErrorFormatter,System.String,System.String,System.String,System.String,System.String,System.Web.UI.Control,System.Web.UI.Control,System.Int32,System.Int32)">
            <summary>
            Constructor that sets the Enabler, ErrorFormatter, ErrorMessage, 
            SummaryErrorMessage, ErrorMessageLookupID, SummaryErrorMessageLookupID,
            Group, ControlToEvaluate, SecondControlToEvaluate, Minimum, and Maximum properties.
            Enabler, ErrorFormatter, and SecondControlToEvaluate can be null.
            </summary>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseIntMinMaxValidator.fMinimum">
            <summary>
            Storage for <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseIntMinMaxValidator.Minimum"/>.
            </summary>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseIntMinMaxValidator.fMaximum">
            <summary>
            Storage for <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseIntMinMaxValidator.Maximum"/>.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseIntMinMaxValidator.TransferProperties">
            <summary>
            TransferProperties is called during OnPreRender to allow the control to transfer
            its properties to the ValidatorAction and Condition.
            </summary>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseIntMinMaxValidator.Minimum">
            <summary>
            Minimum is the minimum value of the range. 
            If it is 0, there is no minimum.
            </summary>
            <value>
            Defaults to 0.
            </value>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseIntMinMaxValidator.Maximum">
            <summary>
            Maximum is the maximum value of the range. 
            If it is 0, there is no maximum.
            </summary>
            <value>
            Defaults to 0.
            </value>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseIntMinMaxValidator.CanSetValidationAction">
            <summary>
            Returns false. You cannot change the ValidatorAction.
            </summary>
        </member>
        <member name="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseTextLengthValidator">
            <summary>
            BaseTextLengthValidator is an abstract base class that
            supports subclasses of <see cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseTextLengthCondition"/>.
            Use it to create Validator controls that use BaseTextLengthConditions.
            BaseTextLengthCondition compares a number of elements in a text field to a minimum
            and maximum. The user can test against one or both.
            </summary>
            <remarks>
            <para>The ValidatorAction must be a subclass of 
            <see cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseTextLengthValidatorAction"/>.</para>
            <para>There are no additional properties to expose on BaseTextLengthValidatorAction.</para>
            <para>There are no additional properties to expose on BaseTextLengthCondition.</para>
            </remarks>
            <seealso cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.TextLengthValidator"/>
            <seealso cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.WordCountValidator"/>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseTextLengthValidator.#ctor">
            <summary>
            Constructor with no parameters.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseTextLengthValidator.#ctor(System.String,System.String,System.String,System.Int32,System.Int32)">
            <summary>
            Constructor that sets the ErrorMessage, Group, ControlIDToEvaluate,
            Minimum, and Maximum properties.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseTextLengthValidator.#ctor(Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseCondition,Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseErrorFormatter,System.String,System.String,System.String,System.String,System.Int32,System.Int32)">
            <summary>
            Constructor that sets the Enabler, ErrorFormatter, ErrorMessage, 
            SummaryErrorMessage, Group, ControlIDToEvaluate, Minimum, and Maximum  properties.
            Enabler and ErrorFormatter can be null.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseTextLengthValidator.#ctor(Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseCondition,Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseErrorFormatter,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.Int32,System.Int32)">
            <summary>
            Constructor that sets the Enabler, ErrorFormatter, ErrorMessage, 
            SummaryErrorMessage, ErrorMessageLookupID, SummaryErrorMessageLookupID,
            Group, ControlIDToEvaluate, SecondControlIDToEvaluate, Minimum, and Maximum properties.
            Enabler and ErrorFormatter can be null. SecondControlIDToEvaluate can be "".
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseTextLengthValidator.#ctor(Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseCondition,Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseErrorFormatter,System.String,System.String,System.String,System.String,System.String,System.Web.UI.Control,System.Web.UI.Control,System.Int32,System.Int32)">
            <summary>
            Constructor that sets the Enabler, ErrorFormatter, ErrorMessage, 
            SummaryErrorMessage, ErrorMessageLookupID, SummaryErrorMessageLookupID,
            Group, ControlToEvaluate, SecondControlToEvaluate, Minimum, and Maximum properties.
            Enabler, ErrorFormatter, and SecondControlToEvaluate can be null.
            </summary>
        </member>
        <member name="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.TextLengthValidator">
            <summary>
            TextLengthValidator supports <see cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.TextLengthCondition"/>.
            TextLengthCondition compares the length of a text field to a minimum
            and maximum number of characters.
            </summary>
            <remarks>
            <para>See the <b>User's Guide</b> for an overview of using this Validator.</para>
            <para>Establish the minimum with <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseIntMinMaxValidator.Minimum"/>
            and maximum with <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseIntMinMaxValidator.Maximum"/>.</para>
            <para>This condition supports up to two textboxes in
            <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseOneFldValidator.ControlIDToEvaluate"/> and
            <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseTwoFldValidator.SecondControlIDToEvaluate"/>. When both are used,
            the total characters of the two are compared to the Minimum and Maximum.</para>
            <para>While &lt;input type='text' /&gt; fields support a maxlength, &lt;textarea&gt;
            elements do not. This condition is very useful to limit the entry in multiline TextBoxes.</para>
            <para>The ValidatorAction is 
            <see cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.TextLengthValidatorAction"/>.</para>
            <para>There are no additional properties to expose on TextLengthValidatorAction.</para>
            <para>There are no additional properties to expose on TextLengthCondition.</para>
            </remarks>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.TextLengthValidator.#ctor">
            <summary>
            Constructor with no parameters.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.TextLengthValidator.#ctor(System.String,System.String,System.String,System.Int32,System.Int32)">
            <summary>
            Constructor that sets the ErrorMessage, Group, ControlIDToEvaluate,
            Minimum, and Maximum properties.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.TextLengthValidator.#ctor(Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseCondition,Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseErrorFormatter,System.String,System.String,System.String,System.String,System.Int32,System.Int32)">
            <summary>
            Constructor that sets the Enabler, ErrorFormatter, ErrorMessage, 
            SummaryErrorMessage, Group, ControlIDToEvaluate, Minimum, and Maximum  properties.
            Enabler and ErrorFormatter can be null.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.TextLengthValidator.#ctor(Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseCondition,Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseErrorFormatter,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.Int32,System.Int32)">
            <summary>
            Constructor that sets the Enabler, ErrorFormatter, ErrorMessage, 
            SummaryErrorMessage, ErrorMessageLookupID, SummaryErrorMessageLookupID,
            Group, ControlIDToEvaluate, SecondControlIDToEvaluate, Minimum, and Maximum properties.
            Enabler and ErrorFormatter can be null. SecondControlIDToEvaluate can be "".
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.TextLengthValidator.#ctor(Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseCondition,Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseErrorFormatter,System.String,System.String,System.String,System.String,System.String,System.Web.UI.Control,System.Web.UI.Control,System.Int32,System.Int32)">
            <summary>
            Constructor that sets the Enabler, ErrorFormatter, ErrorMessage, 
            SummaryErrorMessage, ErrorMessageLookupID, SummaryErrorMessageLookupID,
            Group, ControlToEvaluate, SecondControlToEvaluate, Minimum, and Maximum properties.
            Enabler, ErrorFormatter, and SecondControlToEvaluate can be null.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.TextLengthValidator.CreateAction">
            <returns><see cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.TextLengthValidatorAction"/></returns>
        </member>
        <member name="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.WordCountValidator">
            <summary>
            WordCountValidator supports <see cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.WordCountCondition"/>.
            WordCountCondition compares the number of words in a text field to a minimum
            and maximum. The user can test against one or both.
            </summary>
            <remarks>
            <para>See the <b>User's Guide</b> for an overview of using this Validator.</para>
            <para>Establish the minimum with <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseIntMinMaxValidator.Minimum"/>
            and maximum with <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseIntMinMaxValidator.Maximum"/>.</para>
            <para>This condition supports up to two textboxes in
            <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseOneFldValidator.ControlIDToEvaluate"/> and
            <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseTwoFldValidator.SecondControlIDToEvaluate"/>. When both are used,
            the total words of the two are compared to the Minimum and Maximum.</para>
            <para>The ValidatorAction is 
            <see cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.WordCountValidatorAction"/>.</para>
            <para>There are no additional properties to expose on WordCountValidatorAction.</para>
            <para>There are no additional properties to expose on WordCountCondition.</para>
            </remarks>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.WordCountValidator.#ctor">
            <summary>
            Constructor with no parameters.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.WordCountValidator.#ctor(System.String,System.String,System.String,System.Int32,System.Int32)">
            <summary>
            Constructor that sets the ErrorMessage, Group, ControlIDToEvaluate,
            Minimum, and Maximum properties.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.WordCountValidator.#ctor(Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseCondition,Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseErrorFormatter,System.String,System.String,System.String,System.String,System.Int32,System.Int32)">
            <summary>
            Constructor that sets the Enabler, ErrorFormatter, ErrorMessage, 
            SummaryErrorMessage, Group, ControlIDToEvaluate, Minimum, and Maximum  properties.
            Enabler and ErrorFormatter can be null.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.WordCountValidator.#ctor(Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseCondition,Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseErrorFormatter,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.Int32,System.Int32)">
            <summary>
            Constructor that sets the Enabler, ErrorFormatter, ErrorMessage, 
            SummaryErrorMessage, ErrorMessageLookupID, SummaryErrorMessageLookupID,
            Group, ControlIDToEvaluate, SecondControlIDToEvaluate, Minimum, and Maximum properties.
            Enabler and ErrorFormatter can be null. SecondControlIDToEvaluate can be "".
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.WordCountValidator.#ctor(Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseCondition,Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseErrorFormatter,System.String,System.String,System.String,System.String,System.String,System.Web.UI.Control,System.Web.UI.Control,System.Int32,System.Int32)">
            <summary>
            Constructor that sets the Enabler, ErrorFormatter, ErrorMessage, 
            SummaryErrorMessage, ErrorMessageLookupID, SummaryErrorMessageLookupID,
            Group, ControlToEvaluate, SecondControlToEvaluate, Minimum, and Maximum properties.
            Enabler, ErrorFormatter, and SecondControlToEvaluate can be null.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.WordCountValidator.CreateAction">
            <returns><see cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.WordCountValidatorAction"/></returns>
        </member>
        <member name="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.CheckStateValidator">
            <summary>
            CheckStateValidator supports the <see cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.CheckStateCondition"/>.
            CheckStateCondition evaluates CheckBox and RadioButton fields (including HtmlInput types) 
            to determine if the checked state matches one you supply.
            </summary>
            <remarks>
            <para>The property <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.CheckStateValidator.Checked"/>
            is compared to the same-named property on the control specified in
            <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseOneFldValidator.ControlIDToEvaluate"/>
            or <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseOneFldValidator.ControlToEvaluate"/>.
            When the values match, the condition evaluates as "success".</para>
            <para>Supports these controls: 
            <see cref="T:System.Web.UI.WebControls.CheckBox"/>,
            <see cref="T:System.Web.UI.WebControls.RadioButton"/>, 
            <see cref="T:System.Web.UI.HtmlControls.HtmlInputCheckBox"/>,
            and <see cref="T:System.Web.UI.HtmlControls.HtmlInputRadioButton"/>.</para>
            <para>See the <b>User's Guide</b> for an overview of using this Validator.</para>
            <para>The ValidatorAction is 
            <see cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.CheckStateValidatorAction"/>.</para>
            <para>It exposes these properties of CheckStateCondition: 
            <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.CheckStateValidator.Checked"/>.</para>
            <para>There are no additional properties to expose on CheckStateValidatorAction.</para>
            </remarks>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.CheckStateValidator.#ctor">
            <summary>
            Constructor with no parameters.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.CheckStateValidator.#ctor(System.String,System.String,System.String,System.Boolean)">
            <summary>
            Constructor that sets the ErrorMessage, Group, ControlIDToEvaluate,
            and Checked properties.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.CheckStateValidator.#ctor(Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseCondition,Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseErrorFormatter,System.String,System.String,System.String,System.String,System.Boolean)">
            <summary>
            Constructor that sets the Enabler, ErrorFormatter, ErrorMessage, 
            SummaryErrorMessage, Group, ControlIDToEvaluate and Checked properties.
            Enabler and ErrorFormatter can be null.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.CheckStateValidator.#ctor(Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseCondition,Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseErrorFormatter,System.String,System.String,System.String,System.String,System.String,System.String,System.Boolean)">
            <summary>
            Constructor that sets the Enabler, ErrorFormatter, ErrorMessage, 
            SummaryErrorMessage, ErrorMessageLookupID, SummaryErrorMessageLookupID,
            Group, ControlIDToEvaluate and Checked properties.
            Enabler and ErrorFormatter can be null.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.CheckStateValidator.#ctor(Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseCondition,Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseErrorFormatter,System.String,System.String,System.String,System.String,System.String,System.Web.UI.Control,System.Boolean)">
            <summary>
            Constructor that sets the Enabler, ErrorFormatter, ErrorMessage, 
            SummaryErrorMessage, ErrorMessageLookupID, SummaryErrorMessageLookupID,
            Group, ControlToEvaluate and Checked properties.
            Enabler and ErrorFormatter can be null.
            </summary>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.CheckStateValidator.fChecked">
            <summary>
            Storage for <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.CheckStateValidator.Checked"/>.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.CheckStateValidator.CreateAction">
            <returns><see cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.CheckStateValidatorAction"/></returns>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.CheckStateValidator.TransferProperties">
            <summary>
            TransferProperties is called during OnPreRender to allow the control to transfer
            its properties to the ValidatorAction and Condition.
            </summary>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.CheckStateValidator.Checked">
            <summary>
            Checked will be matched to the Checked property on a CheckBox, RadioButton
            HtmlInputCheckBox, or HtmlInputRadioButton. When both match, the condition
            evaluates as "success".
            </summary>
            <value>
            <para>It defaults to true.</para>
            <para>Transferred to Condition.Checked in 
            <see cref="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.CheckStateValidator.TransferProperties"/>.</para>
            </value>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.CheckStateValidator.CanSetValidationAction">
            <summary>
            Returns false. You cannot change the ValidatorAction.
            </summary>
        </member>
        <member name="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.SelectedIndexValidator">
            <summary>
            SelectedIndexValidator supports the <see cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.SelectedIndexCondition"/>.
            SelectedIndexCondition evaluates all ListControl subclasses (RadioButtonList,
            Listbox, CheckBoxList, DropDownList) to see if the selected item has
            the state that the user wants.
            </summary>
            <remarks>
            <para>See the <b>User's Guide</b> for an overview of using this Validator.</para>
            <para>The user identifies an <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.SelectedIndexValidator.Index"/>
            into the list which will be evaluated, starting at 0.
            They identify a state in the <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.SelectedIndexValidator.Selected"/> 
            property, true or false, indicating if its selected/checked.
            When the values match, the condition evaluates as "success".</para>
            <para>The ValidatorAction is 
            <see cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.SelectedIndexValidatorAction"/>.</para>
            <para>It exposes these properties of SelectedIndexCondition: 
            <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.SelectedIndexValidator.Selected"/>,
            <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.SelectedIndexValidator.Index"/>.</para>
            <para>There are no additional properties to expose on SelectedIndexValidatorAction.</para>
            </remarks>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.SelectedIndexValidator.#ctor">
            <summary>
            Constructor with no parameters.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.SelectedIndexValidator.#ctor(System.String,System.String,System.String,System.Int32,System.Boolean)">
            <summary>
            Constructor that sets the ErrorMessage, Group, ControlIDToEvaluate,
            Index and Selected properties.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.SelectedIndexValidator.#ctor(Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseCondition,Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseErrorFormatter,System.String,System.String,System.String,System.String,System.Int32,System.Boolean)">
            <summary>
            Constructor that sets the Enabler, ErrorFormatter, ErrorMessage, 
            SummaryErrorMessage, Group, ControlIDToEvaluate, Index and Selected properties.
            Enabler and ErrorFormatter can be null.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.SelectedIndexValidator.#ctor(Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseCondition,Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseErrorFormatter,System.String,System.String,System.String,System.String,System.String,System.String,System.Int32,System.Boolean)">
            <summary>
            Constructor that sets the Enabler, ErrorFormatter, ErrorMessage, 
            SummaryErrorMessage, ErrorMessageLookupID, SummaryErrorMessageLookupID,
            Group, ControlIDToEvaluate, Index and Selected properties.
            Enabler and ErrorFormatter can be null.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.SelectedIndexValidator.#ctor(Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseCondition,Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseErrorFormatter,System.String,System.String,System.String,System.String,System.String,System.Web.UI.Control,System.Int32,System.Boolean)">
            <summary>
            Constructor that sets the Enabler, ErrorFormatter, ErrorMessage, 
            SummaryErrorMessage, ErrorMessageLookupID, SummaryErrorMessageLookupID,
            Group, ControlToEvaluate, Index and Selected properties.
            Enabler and ErrorFormatter can be null.
            </summary>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.SelectedIndexValidator.fIndex">
            <summary>
            Storage for <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.SelectedIndexValidator.Index"/>.
            </summary>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.SelectedIndexValidator.fSelected">
            <summary>
            Storage for <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.SelectedIndexValidator.Selected"/>.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.SelectedIndexValidator.CreateAction">
            <returns><see cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.SelectedIndexValidatorAction"/></returns>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.SelectedIndexValidator.TransferProperties">
            <summary>
            TransferProperties is called during OnPreRender to allow the control to transfer
            its properties to the ValidatorAction and Condition.
            </summary>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.SelectedIndexValidator.Index">
            <summary>
            Gets and sets the position within the list to have its state evaluated.
            The state at that position is compared to <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.SelectedIndexValidator.Selected"/>.
            </summary>
            <value>
            <para>Starts at 0. If you supply an index beyond the end of the list,
            it will not evaluate.</para>
            <para>It defaults to 0.</para>
            <para>Transferred to Condition.Index in 
            <see cref="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.SelectedIndexValidator.TransferProperties"/>.</para>
            </value>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.SelectedIndexValidator.Selected">
            <summary>
            Gets and sets the state of the list's selection at the position in Index.
            </summary>
            <value>
            <para>If the state at the position of <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.SelectedIndexValidator.Index"/> 
            matches this value, the condition evaluates as "success".</para>
            <para>When evaluating to a CheckBoxList or RadioButtonList, it compares to the Checked property
            on the control. Otherwise, it compares the SelectedIndex property to Index.</para>
            <para>It defaults to true.</para>
            <para>Transferred to Condition.Selected in 
            <see cref="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.SelectedIndexValidator.TransferProperties"/>.</para>
            </value>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.SelectedIndexValidator.CanSetValidationAction">
            <summary>
            Returns false. You cannot change the ValidatorAction.
            </summary>
        </member>
        <member name="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.CountSelectionsValidator">
            <summary>
            CountSelectionsValidator supports the <see cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.CountSelectionsCondition"/>.
            CountSelectionsCondition evaluates CheckBoxLists and ListBoxes to determine
            if the number of selections is between a minimum and maximum.
            </summary>
            <remarks>
            <para>Set the <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseOneFldValidator.ControlIDToEvaluate"/>
            property to the control whose selection to count. If desired, set a second control
            with the <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseTwoFldValidator.SecondControlIDToEvaluate"/> property.
            Set the <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.CountSelectionsValidator.Minimum"/> and 
            <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.CountSelectionsValidator.Maximum"/> properties to establish the valid
            range of selections.</para>
            <para>See the <b>User's Guide</b> for an overview of using this Validator.</para>
            <para>The ValidatorAction is 
            <see cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.CountSelectionsValidatorAction"/>.</para>
            <para>It exposes these properties of CountSelectionsCondition: 
            <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.CountSelectionsValidator.Minimum"/>,
            <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.CountSelectionsValidator.Maximum"/>.</para>
            <para>There are no additional properties to expose on CountSelectionsValidatorAction.</para>
            </remarks>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.CountSelectionsValidator.#ctor">
            <summary>
            Constructor with no parameters.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.CountSelectionsValidator.#ctor(System.String,System.String,System.String,System.Int32,System.Int32)">
            <summary>
            Constructor that sets the ErrorMessage, Group, ControlIDToEvaluate,
            Minimum, and Maximum properties.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.CountSelectionsValidator.#ctor(Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseCondition,Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseErrorFormatter,System.String,System.String,System.String,System.String,System.Int32,System.Int32)">
            <summary>
            Constructor that sets the Enabler, ErrorFormatter, ErrorMessage, 
            SummaryErrorMessage, Group, ControlIDToEvaluate, Minimum, and Maximum properties.
            Enabler and ErrorFormatter can be null.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.CountSelectionsValidator.#ctor(Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseCondition,Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseErrorFormatter,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.Int32,System.Int32)">
            <summary>
            Constructor that sets the Enabler, ErrorFormatter, ErrorMessage, 
            SummaryErrorMessage, ErrorMessageLookupID, SummaryErrorMessageLookupID,
            Group, ControlIDToEvaluate, SecondControlIDToEvaluate, Minimum, and Maximum properties.
            Enabler and ErrorFormatter can be null. SecondControlIDToEvaluate can be "".
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.CountSelectionsValidator.#ctor(Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseCondition,Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseErrorFormatter,System.String,System.String,System.String,System.String,System.String,System.Web.UI.Control,System.Web.UI.Control,System.Int32,System.Int32)">
            <summary>
            Constructor that sets the Enabler, ErrorFormatter, ErrorMessage, 
            SummaryErrorMessage, ErrorMessageLookupID, SummaryErrorMessageLookupID,
            Group, ControlToEvaluate, SecondControlToEvaluate, Minimum, and Maximum properties.
            Enabler, ErrorFormatter, and SecondControlToEvaluate can be null.
            </summary>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.CountSelectionsValidator.fMinimum">
            <summary>
            Storage for <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.CountSelectionsValidator.Minimum"/>.
            </summary>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.CountSelectionsValidator.fMaximum">
            <summary>
            Storage for <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.CountSelectionsValidator.Maximum"/>.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.CountSelectionsValidator.CreateAction">
            <returns><see cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.CountSelectionsValidatorAction"/></returns>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.CountSelectionsValidator.TransferProperties">
            <summary>
            TransferProperties is called during OnPreRender to allow the control to transfer
            its properties to the ValidatorAction and Condition.
            </summary>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.CountSelectionsValidator.Minimum">
            <summary>
            Minimum is the minimum number of selections. 
            </summary>
            <value>
            <para>If it is 0, there is no minimum.</para>
            <para>It defaults to 0.</para>
            <para>Transferred to Condition.Minimum in 
            <see cref="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.CountSelectionsValidator.TransferProperties"/>.</para>
            </value>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.CountSelectionsValidator.Maximum">
            <summary>
            Maximum is the maximum number of selections. 
            </summary>
            <value>
            <para>When 0 or 99999, this property is not used.</para>
            <para>It defaults to 99999.</para>
            <para>Transferred to Condition.Maximum in 
            <see cref="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.CountSelectionsValidator.TransferProperties"/>.</para>
            </value>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.CountSelectionsValidator.CanSetValidationAction">
            <summary>
            Returns false. You cannot change the ValidatorAction.
            </summary>
        </member>
        <member name="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseMultiConditionValidator">
            <summary>
            BaseMultiConditionValidator is a base class that supports validators that
            use the <see cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseMultiCondition"/>.
            BaseMultiCondition defines a list of zero or more <seealso cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseCondition"/> 
            objects (including other MultiConditions).
            </summary>
            <remarks>
            <para>The ValidatorAction must be a subclass of 
            <see cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseMultiConditionValidatorAction"/>.</para>
            <para>It exposes these properties of BaseMultiConditionValidatorAction: 
            <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseMultiConditionValidator.Label"/>,
            <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseMultiConditionValidator.Label2"/>,
            <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseMultiConditionValidator.Label3"/>,
            <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseMultiConditionValidator.Label4"/>.</para>
            <para>It exposes these properties of BaseMultiCondition: 
            <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseMultiConditionValidator.Conditions"/>.</para>
            </remarks>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseMultiConditionValidator.#ctor">
            <summary>
            Constructor with no parameters.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseMultiConditionValidator.#ctor(System.String,System.String)">
            <summary>
            Constructor that sets the ErrorMessage and Group properties.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseMultiConditionValidator.#ctor(Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseCondition,Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseErrorFormatter,System.String,System.String,System.String)">
            <summary>
            Constructor that sets the Enabler, ErrorFormatter, ErrorMessage,
            SummaryErrorMessage, and Group properties.
            Enabler and ErrorFormatter can be null.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseMultiConditionValidator.#ctor(Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseCondition,Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseErrorFormatter,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Constructor that sets the Enabler, ErrorFormatter, ErrorMessage,
            SummaryErrorMessage, ErrorMessageLookupID, SummaryErrorMessageLookupID, and Group properties.
            Enabler and ErrorFormatter can be null.
            </summary>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseMultiConditionValidator.fConditions">
            <summary>
            Storage for <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseMultiConditionValidator.Conditions"/>.
            </summary>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseMultiConditionValidator.fLabel">
            <summary>
            Storage for <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseMultiConditionValidator.Label"/>.
            </summary>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseMultiConditionValidator.fLabel2">
            <summary>
            Storage for <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseMultiConditionValidator.Label2"/>.
            </summary>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseMultiConditionValidator.fLabel3">
            <summary>
            Storage for <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseMultiConditionValidator.Label3"/>.
            </summary>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseMultiConditionValidator.fLabel4">
            <summary>
            Storage for <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseMultiConditionValidator.Label4"/>.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseMultiConditionValidator.TransferProperties">
            <summary>
            TransferProperties is called during OnPreRender to allow the control to transfer
            its properties to the ValidatorAction and Condition.
            </summary>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseMultiConditionValidator.Conditions">
            <summary>
            Conditions is a collection of Condition instances.
            </summary>
            <remarks>
            <para>They are evaluated in the
            order of the list. When the list is empty, it cannot be evaluated and
            <see cref="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseMultiCondition.CanEvaluate">BaseMultiCondition.CanEvaluate</see> returns false.
            </para>
            <para>Uses the UITypeEditor <see cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.MultiConditionTypeEditor"/>
            and the TypeConverter <see cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.ConditionCollectionConverter"/>.</para>
            <para>The ASP.NET text for this property uses this format:</para>
            <code>
            &lt;vam:validatorclass runat=server id=[id] /&gt;
               &lt;Conditions&gt;
                 &lt;vam:conditionclass [properties] /&gt;
                 &lt;vam:conditionclass [properties] /&gt;
               &lt;/Conditions&gt;
            &lt;/vam:validatorclass&gt;
            </code>
            <para>Transferred to Condition.Conditions in 
            <see cref="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseMultiConditionValidator.TransferProperties"/>.</para>
            <para><b>EditorAttribute:</b><see cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.MultiConditionTypeEditor"/></para>
            <para><b>TypeConverterAttribute:</b><see cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.ConditionCollectionConverter"/></para>
            </remarks>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseMultiConditionValidator.Label">
            <summary>
            Label provides text for the {LABEL} token which can appear in ErrorMessage
            and SummaryErrorMessage properties. 
            </summary>
            <value>
            <para>The {LABEL} token is intended to be replaced by the name of
            the a field that has the error message. The user can identify 
            a System.Web.UI.WebControls.Label or <see cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.LocalizableLabel"/> control. 
            It can also be entered directly into this object
            when there is no Label control or the text must be different.</para>
            <para>The <see cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.LabelText"/> class offers properties to alter the text of the Label control
            by changing case and stripping trailing characters like colon.</para>
            <para>Transferred to ValidatorAction.Label in 
            <see cref="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseMultiConditionValidator.TransferProperties"/>.</para>
            <para><b>TypeConverterAttribute:</b><see cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.LabelTextTypeConverter"/></para>
            </value>
            <seealso cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.LabelText"/>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseMultiConditionValidator.Label2">
            <summary>
            Label2 provides text for the {LABEL2} token which can appear in ErrorMessage
            and SummaryErrorMessage properties. 
            </summary>
            <value>
            <para>The {LABEL2} token is intended to be replaced by the name of
            the a field that has the error message. The user can identify 
            a System.Web.UI.WebControls.Label or <see cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.LocalizableLabel"/> control. 
            It can also be entered directly into this object
            when there is no Label control or the text must be different.</para>
            <para>The <see cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.LabelText"/> class offers properties to alter the text of the Label control
            by changing case and stripping trailing characters like colon.</para>
            <para>Transferred to ValidatorAction.Label2 in 
            <see cref="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseMultiConditionValidator.TransferProperties"/>.</para>
            </value>
            <remarks>
            <para><b>TypeConverterAttribute:</b><see cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.LabelTextTypeConverter"/></para>
            </remarks>
            <seealso cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.LabelText"/>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseMultiConditionValidator.Label3">
            <summary>
            Label3 provides text for the {LABEL3} token which can appear in ErrorMessage
            and SummaryErrorMessage properties. 
            </summary>
            <value>
            <para>The {LABEL3} token is intended to be replaced by the name of
            the a field that has the error message. The user can identify 
            a System.Web.UI.WebControls.Label or <see cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.LocalizableLabel"/> control. 
            It can also be entered directly into this object
            when there is no Label control or the text must be different.</para>
            <para>The <see cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.LabelText"/> class offers properties to alter the text of the Label control
            by changing case and stripping trailing characters like colon.</para>
            <para>Transferred to ValidatorAction.Label3 in 
            <see cref="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseMultiConditionValidator.TransferProperties"/>.</para>
            </value>
            <remarks>
            <para><b>TypeConverterAttribute:</b><see cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.LabelTextTypeConverter"/></para>
            </remarks>
            <seealso cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.LabelText"/>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseMultiConditionValidator.Label4">
            <summary>
            Label4 provides text for the {LABEL4} token which can appear in ErrorMessage
            and SummaryErrorMessage properties. 
            </summary>
            <value>
            <para>The {LABEL4} token is intended to be replaced by the name of
            the a field that has the error message. The user can identify 
            a System.Web.UI.WebControls.Label or <see cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.LocalizableLabel"/> control. 
             It can also be entered directly into this object
            when there is no Label control or the text must be different.</para>
            <para>The <see cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.LabelText"/> class offers properties to alter the text of the Label control
            by changing case and stripping trailing characters like colon.</para>
            <para>Transferred to ValidatorAction.Label4 in 
            <see cref="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseMultiConditionValidator.TransferProperties"/>.</para>
            </value>
            <remarks>
            <para><b>TypeConverterAttribute:</b><see cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.LabelTextTypeConverter"/></para>
            </remarks>
            <seealso cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.LabelText"/>
        </member>
        <member name="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.MultiConditionValidator">
            <summary>
            MultiConditionValidator supports the <see cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.MultiCondition"/>.
            MultiCondition defines a list of zero or more Conditions (including other MultiConditions) 
            which are evaluated together using Boolean logic. Use nested MultiConditions 
            to build complex Boolean logic.
            </summary>
            <remarks>
            <para>See the <b>User's Guide</b> for an overview of using this Validator.</para>
            <para>The ValidatorAction is 
            <see cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.MultiConditionValidatorAction"/>.</para>
            <para>There are no additional properties to expose on MultiConditionValidatorAction.</para>
            <para>It exposes these properties of MultiCondition: 
            <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.MultiConditionValidator.Operator"/>.</para>
            </remarks>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.MultiConditionValidator.#ctor">
            <summary>
            Constructor with no parameters.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.MultiConditionValidator.#ctor(System.String,System.String,Jenzabar.Portal.Framework.Web.UI.Controls.Validation.AND_OROperator)">
            <summary>
            Constructor that sets the ErrorMessage, Group, and Operator properties.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.MultiConditionValidator.#ctor(Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseCondition,Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseErrorFormatter,System.String,System.String,System.String,Jenzabar.Portal.Framework.Web.UI.Controls.Validation.AND_OROperator)">
            <summary>
            Constructor that sets the Enabler, ErrorFormatter, ErrorMessage,
            SummaryErrorMessage, Group, and Operatorproperties.
            Enabler and ErrorFormatter can be null.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.MultiConditionValidator.#ctor(Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseCondition,Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseErrorFormatter,System.String,System.String,System.String,System.String,System.String,Jenzabar.Portal.Framework.Web.UI.Controls.Validation.AND_OROperator)">
            <summary>
            Constructor that sets the Enabler, ErrorFormatter, ErrorMessage,
            SummaryErrorMessage, ErrorMessageLookupID, SummaryErrorMessageLookupID,
            Group, and Operator properties.
            Enabler and ErrorFormatter can be null.
            </summary>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.MultiConditionValidator.fOperator">
            <summary>
            Storage for <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.MultiConditionValidator.Operator"/>.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.MultiConditionValidator.CreateAction">
            <returns><see cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.MultiConditionValidatorAction"/></returns>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.MultiConditionValidator.TransferProperties">
            <summary>
            TransferProperties is called during OnPreRender to allow the control to transfer
            its properties to the ValidatorAction and Condition.
            </summary>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.MultiConditionValidator.Operator">
            <summary>
            Gets and sets if the items are evaluated with an AND or OR condition.
            </summary>
            <value>
            <para>If you want to mix AND and OR conditions, use multiple MultiConditions.</para>
            <para>It defaults to OR.</para>
            <para>Transferred to Condition.Operator in 
            <see cref="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.MultiConditionValidator.TransferProperties"/>.</para>
            </value>
            <seealso cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.AND_OROperator"/>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.MultiConditionValidator.CanSetValidationAction">
            <summary>
            Returns false. You cannot change the ValidatorAction.
            </summary>
        </member>
        <member name="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.CountTrueConditionsValidator">
            <summary>
            CountTrueConditionsValidator supports the <see cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.CountTrueConditions"/>.
            Evaluates the child conditions and determines if the number of those that evaluate
            as "success" is between a range specified by the 
            <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.CountTrueConditionsValidator.Minimum"/> and 
            <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.CountTrueConditionsValidator.Maximum"/> properties.
            </summary>
            <remarks>
            <para>Useful in counting checkboxes scattered around a page.</para>
            <para>Set up Conditions to be counted in the <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseMultiConditionValidator.Conditions"/>
            property. The Properties Editor for that property makes this easy. Each of
            the conditions is evaluated and compared to the values in 
            the <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.CountTrueConditionsValidator.Minimum"/> and 
            <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.CountTrueConditionsValidator.Maximum"/> properties.</para>
            <para>See the <b>User's Guide</b> for an overview of using this Validator.</para>
            <para>The ValidatorAction is 
            <see cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.CountTrueConditionsValidatorAction"/>.</para>
            <para>There are no additional properties to expose on CountTrueConditionsValidatorAction.</para>
            <para>It exposes these properties of CountTrueConditions: 
            <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.CountTrueConditionsValidator.Minimum"/>,
            <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.CountTrueConditionsValidator.Maximum"/>.</para>
            </remarks>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.CountTrueConditionsValidator.#ctor">
            <summary>
            Constructor with no parameters.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.CountTrueConditionsValidator.#ctor(System.String,System.String,System.Int32,System.Int32)">
            <summary>
            Constructor that sets the ErrorMessage, Group, Minimum, and Maximum properties.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.CountTrueConditionsValidator.#ctor(Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseCondition,Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseErrorFormatter,System.String,System.String,System.String,System.Int32,System.Int32)">
            <summary>
            Constructor that sets the Enabler, ErrorFormatter, ErrorMessage,
            SummaryErrorMessage, Group, Minimum, and Maximum properties.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.CountTrueConditionsValidator.#ctor(Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseCondition,Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseErrorFormatter,System.String,System.String,System.String,System.String,System.String,System.Int32,System.Int32)">
            <summary>
            Constructor that sets the Enabler, ErrorFormatter, ErrorMessage,
            SummaryErrorMessage, ErrorMessageLookupID, SummaryErrorMessageLookupID,
            Group, Minimum, and Maximum properties.
            </summary>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.CountTrueConditionsValidator.fMinimum">
            <summary>
            Storage with <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.CountTrueConditionsValidator.Minimum"/>.
            </summary>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.CountTrueConditionsValidator.fMaximum">
            <summary>
            Storage with <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.CountTrueConditionsValidator.Maximum"/>.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.CountTrueConditionsValidator.CreateAction">
            <returns><see cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.CountTrueConditionsValidatorAction"/></returns>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.CountTrueConditionsValidator.TransferProperties">
            <summary>
            TransferProperties is called during OnPreRender to allow the control to transfer
            its properties to the ValidatorAction and Condition.
            </summary>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.CountTrueConditionsValidator.Minimum">
            <summary>
            Minimum is the lower limit to how many child conditions must evaluate as "success".
            </summary>
            <value>
            <para>If 0, there is no minimum.</para>
            <para>It defaults to 0.</para>
            <para>Transferred to Condition.Minimum in 
            <see cref="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.CountTrueConditionsValidator.TransferProperties"/>.</para>
            </value>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.CountTrueConditionsValidator.Maximum">
            <summary>
            Maximum is the upper limit to how many child conditions must evaluate as "success".
            </summary>
            <value>
            <para>Use 99999 or equally large number when not using the maximum. 
            (If 0 is used, it is reassigned to 99999.)</para>
            <para>It defaults to 99999.</para>
            <para>Transferred to Condition.Maximum in 
            <see cref="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.CountTrueConditionsValidator.TransferProperties"/>.</para>
            </value>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.CountTrueConditionsValidator.CanSetValidationAction">
            <summary>
            Returns false. You cannot change the ValidatorAction.
            </summary>
        </member>
        <member name="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.CustomValidator">
            <summary>
            CustomValidator supports <see cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.CustomCondition"/>.
            It requires that you install your own condition handler into the
            <see cref="F:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseAnyValidator.ServerCondition"/> property
            and optionally a client-side function name into 
            <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseAnyValidator.CustomEvalFunctionName"/>.
            </summary>
            <remarks>
            <para>See the <b>User's Guide</b> for details in establishing the condition
            evaluation functions.</para>
            <para>The ValidatorAction is 
            <see cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.CustomValidatorAction"/>.</para>
            <para>There are no additional properties to expose on CustomValidatorAction.</para>
            <para>There are no additional properties to expose on CustomCondition.</para>
            </remarks>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.CustomValidator.#ctor">
            <summary>
            Constructor with no parameters.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.CustomValidator.#ctor(System.String,System.String,System.String,System.String)">
            <summary>
            Constructor that sets the ErrorMessage, Group, ControlIDToEvaluate,
            and SecondControlIDToEvaluate properties.
            SecondControlIDToEvaluate can be "".
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.CustomValidator.#ctor(Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseCondition,Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseErrorFormatter,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Constructor that sets the Enabler, ErrorFormatter, ErrorMessage, 
            SummaryErrorMessage, Group, ControlIDToEvaluate, and SecondControlIDToEvaluate properties.
            Enabler and ErrorFormatter can be null. ControlIDToEvaluate and SecondControlIDToEvaluate
            can be "".
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.CustomValidator.#ctor(Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseCondition,Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseErrorFormatter,System.String,System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Constructor that sets the Enabler, ErrorFormatter, ErrorMessage, 
            SummaryErrorMessage, ErrorMessageLookupID, SummaryErrorMessageLookupID,
            Group, ControlIDToEvaluate, and SecondControlIDToEvaluate properties.
            Enabler and ErrorFormatter can be null. ControlIDToEvaluate and SecondControlIDToEvaluate
            can be "".
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.CustomValidator.#ctor(Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseCondition,Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseErrorFormatter,System.String,System.String,System.String,System.String,System.String,System.Web.UI.Control,System.Web.UI.Control)">
            <summary>
            Constructor that sets the Enabler, ErrorFormatter, ErrorMessage, 
            SummaryErrorMessage, ErrorMessageLookupID, SummaryErrorMessageLookupID,
            Group, ControlToEvaluate, and SecondControlToEvaluate properties.
            Enabler, ErrorFormatter, ControlToEvaluate, and SecondControlToEvaluate can be null.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.CustomValidator.CreateAction">
            <returns><see cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.CustomValidatorAction"/></returns>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.CustomValidator.TransferProperties">
            <summary>
            TransferProperties is called during OnPreRender to allow the control to transfer
            its properties to the ValidatorAction and Condition.
            </summary>
            <exception cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.VAMException">When ServerCondition is null.</exception>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.CustomValidator.CanSetValidationAction">
            <summary>
            Returns false. You cannot change the ValidatorAction.
            </summary>
        </member>
        <member name="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.IgnoreConditionValidator">
            <summary>
            IgnoreConditionValidator provides a validator without its own condition.
            Instead, you assign the <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseValidator.IsValid"/> property directly.
            </summary>
            <remarks>
            <para>You could use the CustomValidator to develop your own condition. However,
            that validator requires you to put your validation logic in an event handler,
            often separate from where you'd like the code.</para>
            <para>Use this validator when you simply want to set the IsValid property false in code
            that you write in a post back event handler, which is run long after all validators
            on the page have been evaluated.</para>
            <para>Generally, your post back event handler looks like this:</para>
            <code>
            if (Globals.Page.IsValid)
            {
               // do some work such as a database lookup
               // if something fails in that work and you want to show the it, use the IgnoreConditionValidator
               // and set its IsValid property to false; then exit the event handler
               if (failed)
               {
                 IgnoreConditionValidator1.IsValid = false;
                 return;
               }
            }
            </code>
            <para>See the <b>User's Guide</b> for an overview of using this Validator.</para>
            </remarks>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.IgnoreConditionValidator.#ctor">
            <summary>
            Constructor with no parameters.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.IgnoreConditionValidator.#ctor(System.String,System.String)">
            <summary>
            Constructor that sets the ErrorMessage and Group properties.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.IgnoreConditionValidator.#ctor(Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseCondition,Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseErrorFormatter,System.String,System.String,System.String)">
            <summary>
            Constructor that sets the Enabler, ErrorFormatter, ErrorMessage, 
            SummaryErrorMessage, and Group properties.
            Enabler and ErrorFormatter can be null.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.IgnoreConditionValidator.#ctor(Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseCondition,Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseErrorFormatter,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Constructor that sets the Enabler, ErrorFormatter, ErrorMessage, 
            SummaryErrorMessage, ErrorMessageLookupID, SummaryErrorMessageLookupID,
            and Group properties.
            Enabler and ErrorFormatter can be null. 
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.IgnoreConditionValidator.CreateAction">
            <returns><see cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.IgnoreConditionValidatorAction"/></returns>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.IgnoreConditionValidator.Trim">
            <summary>
            Hidden from the properties browser. It is not used.
            </summary>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.IgnoreConditionValidator.CanSetValidationAction">
            <summary>
            Returns false. You cannot change the ValidatorAction.
            </summary>
        </member>
        <member name="T:Jenzabar.Portal.Framework.Web.UI.ErrorPageBase">
            <summary>
            base class for Error pages. Needed to keep them all look similar and
            for additional insuranse - if error happened
            in ErrorPage class - prevent indefinite loop.
            </summary>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Web.UI.ErrorPageBase.lnkHome">
            <summary>
            LinkButton - lnkHome
            </summary>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Web.UI.ErrorPageBase.BasePath">
            <summary>
            Member variable - BasePath
            </summary>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Web.UI.ErrorPageBase.PageTitle">
            <summary>
            Member variable - PageTitle
            </summary>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Web.UI.ErrorPageBase.PageHeader">
            <summary>
            Member variable - PageHeader
            </summary>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Web.UI.ErrorPageBase.BaseMessage">
            <summary>
            Member variable - 
            (Can be set to different values in child classes. What is logged)
            </summary>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Web.UI.ErrorPageBase.lblError">
            <summary>
            WebControls.Label - lblError
            (What is shown to user)
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.ErrorPageBase.#ctor">
            <summary>
            Constructor for ErrorPageBase class
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.ErrorPageBase.LogLastError(System.String)">
            <summary>
            logs last server error
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.ErrorPageBase.OnInit(System.EventArgs)">
            <summary>
            Overrides the OnInit method of the base Page
            </summary>
            <param name="e">EventArgs</param>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.ErrorPageBase.Page_Error(System.Object,System.EventArgs)">
            <summary>
            To avoid infinite loop of error pages errors on such pages are processed
            differently. 
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.ErrorPageBase.Render(System.Web.UI.HtmlTextWriter)">
            <summary>
            do log error in Render after base.Render so in case it throws a new error - 
            Page still will have text.
            </summary>
            <param name="writer"></param>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.ErrorPageBase.LogError">
            <summary>
            function can be overriden in child classes
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.ErrorPageBase.lnkHome_Click(System.Object,System.EventArgs)">
            <summary>
            homelink event handler
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.LocalizableLabel">
            <summary>
            LocalizableLabel extends System.Web.UI.WebControls.Label to use the String Lookup
            System of VAM.
            </summary>
            <remarks>
            <para>Within VAM, each text property that needs localization has a partner property that
            ends in "LookupID". The user assigns a key to this LookupID and VAM runs the "String Lookup System"
            to translate the LookupID into the correct string.</para>
            <para>In this class, the Text property now has the TextLookupID property as its localization partner.
            When TextLookupID is blank or the String Lookup System can't translate it, the Text property
            is used.</para>
            <para>The advantage of this control is that a web interface designer can assign the key
            whereas often other systems require some code to assign the translation. For example,
            when using resources, you'd usually code a line that does:</para>
            <code>
            Label1.Text = RM.GetString("key");
            </code>
            <para>This control uses string group 
            <see cref="F:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.StringLookup.cLabelGroupName">StringLookup.cLabelGroupName</see>.</para>
            </remarks>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.LocalizableLabel.#ctor">
            <summary>
            Constructor with no parameters.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.LocalizableLabel.#ctor(System.String)">
            <summary>
            Constructor that sets the Text property.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.LocalizableLabel.#ctor(System.String,System.String)">
            <summary>
            Constructor that sets the Text and TextLookupID properties.
            </summary>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.LocalizableLabel.fTextLookupID">
            <summary>
            Storage for <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.LocalizableLabel.TextLookupID"/>.
            </summary>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.LocalizableLabel.fLookedupText">
            <summary>
            When null, GetLookedUpText calls <see cref="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.StringLookup.StringIDLookup(System.String,System.String,System.String)">StringLookup.StringIDLookup</see> to
            get the Text. This holds the result of that for multiple uses.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.LocalizableLabel.GetLookedUpText">
            <summary>
            Calls the String Lookup System using <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.LocalizableLabel.Text"/>
            and <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.LocalizableLabel.TextLookupID"/>. Caches the result.
            </summary>
            <returns>Returns the looked up string.</returns>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.LocalizableLabel.OnPreRender(System.EventArgs)">
            <summary>
            Reassign the Text property using GetLookedUpText when not in design mode. 
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.LocalizableLabel.PrepareText">
            <summary>
            PrepareText is called to provide the final value used in the Text property.
            </summary>
            <value>
            Called by OnPreRender when not in design mode.
            </value>
            <returns>The value to show in the Text property.</returns>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.LocalizableLabel.TextLookupID">
            <summary>
            TextLookupID provides an alternative to Text. When used, the error message
            is looked up from another source, such as a resource file or database to use as
            the Text.
            </summary>
            <value>
            <para>This allows you to define a common set of error messages so the programmer doesn't uniquely
            define them each time.</para>
            <para>It also provides localization based on the current culture.</para>
            <para>To use it, assign a key string that represents the Text that you want.
            This key will be used to search your data source for the correct string.</para>
            <para>When you are using the default Resource Manager system of VAM, it looks
            at the Name field of the ResX file for a match. The Value field of that row is returned.</para>
            <para>If no match is found OR this is blank, Text will be used.</para>
            <para>This property uses the StringGroup of 
            <see cref="F:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.StringLookup.cLabelGroupName">StringLookup.cLabelGroupName</see>.</para>
            <para>It defaults to "".</para>
            </value>
            <remarks>
            <para><b>EditorAttribute:</b><see cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.StringTypeEditor"/></para>
            </remarks>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.LocalizableLabel.Text">
            <summary>
            Provides the UITypeEditor <see cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.StringTypeEditor"/>.
            </summary>
            <seealso cref="P:System.Web.UI.WebControls.Label.Text"/>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.LocalizableLabel.ToolTip">
            <summary>
            Provides the UITypeEditor <see cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.StringTypeEditor"/>.
            </summary>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.LocalizableLabel.LookupIDGroup">
            <summary>
            LookupIDGroup identifies the lookupID group used by the localization system
            to translate the LookupID in PrepareText. It defaults to 
            <see cref="F:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.StringLookup.cLabelGroupName">StringLookup.cLabelGroupName</see>.
            </summary>
        </member>
        <member name="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseRequiredMarker">
            <summary>
            BaseRequiredMarker is the base class for both 
            <see cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.RequiredFieldMarker"/> and 
            <see cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.RequiredFieldsDescription"/>.
            </summary>
            <remarks>
            <para>The <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.LocalizableLabel.Text"/>
            and <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.LocalizableLabel.TextLookupID"/> properties define 
            the text for those controls.</para>
            <para>The user can supply an image instead of text using 
            <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseRequiredMarker.RequiredFieldImageURL"/>.
            It is used when Text is blank.</para>
            <para>This class supports a token, "{IMAGE}", which can be replaced by HTML for an image
            to the RequiredMarkerImageURL.</para>
            <para>Subclasses define default values for these properties.</para>
            </remarks>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseRequiredMarker.#ctor">
            <summary>
            Constructor. Initializes Text and TextLookupID to "{DEFAULT}".
            </summary>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseRequiredMarker.fRequiredFieldImageURL">
            <summary>
            Storage for <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseRequiredMarker.RequiredFieldImageURL"/>.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseRequiredMarker.PrepareText">
            <summary>
            Converts the "{IMAGE}" token to the result of 
            <see cref="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseRequiredMarker.PrepareImageURL"/>.
            If the parent PrepareText returns "", it uses RequiredFieldImageURL.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseRequiredMarker.PrepareImageURL">
            <summary>
            If the <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseRequiredMarker.RequiredFieldImageURL"/>
            is assigned, it is converted into an &lt;img&gt; tag. If it contains "{DEFAULT}",
            that token is translated into the value from <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.Globals.DefaultRequiredFieldImageURL">Globals.DefaultRequiredFieldImageURL</see>.
            </summary>
            <returns>Returns an &lt;img&gt; tag or "" if RequiredFieldImageURL is blank.</returns>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseRequiredMarker.Text">
            <summary>
            Updates the property's DefaultValueAttribute and DescriptionAttribute.
            </summary>
            <remarks>
            <para>Defaults to "{DEFAULT}", a token defined by the subclass to use a property defined in the Globals class.</para>
            </remarks>
            <seealso cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.LocalizableLabel.Text"/>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseRequiredMarker.TextLookupID">
            <summary>
            Updates the property's DefaultValueAttribute and DescriptionAttribute.
            </summary>
            <remarks>
            <para>Defaults to "{DEFAULT}", a token defined by the subclass to use a property defined in the Globals class.</para>
            </remarks>
            <seealso cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.LocalizableLabel.TextLookupID"/>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseRequiredMarker.RequiredFieldImageURL">
            <summary>
            RequiredFieldImageURL is the URL to an image file that is used as the
            required field marker. 
            </summary>
            <value>
            <para>It is used within both the  <see cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.RequiredFieldMarker"/> and 
            <see cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.RequiredFieldsDescription"/>.</para>
            <para>When the token "{DEFAULT}" is found, it is replaced by
            <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.Globals.DefaultRequiredFieldImageURL">Globals.DefaultRequiredFieldImageURL</see> at runtime.</para>
            <para>It defaults to "{DEFAULT}".</para>
            </value>
            <remarks>
            <para><b>EditorAttribute:</b><see cref="T:System.Web.UI.Design.ImageUrlEditor"/></para>
            </remarks>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseRequiredMarker.LookupIDGroup">
            <summary>
            Required Fields use <see cref="F:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.StringLookup.cMiscGroupName">StringLookup.cMiscGroupName</see>.
            </summary>
        </member>
        <member name="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.RequiredFieldMarker">
            <summary>
            RequiredFieldMarker shows the required field marker following system defaults
            or user overrides. 
            </summary>
            <remarks>
            <para>See the <b>User's Guide</b> for an overview of using this control.</para>
            <para>When the 
            <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseRequiredMarker.Text"/>, 
            <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseRequiredMarker.TextLookupID"/> and 
            <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseRequiredMarker.RequiredFieldImageURL"/> contain 
            the token "{DEFAULT}", they get defaults from <see cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.Globals"/>.
            This makes it easy to setup this symbol and change it universally.</para>
            </remarks>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.RequiredFieldMarker.#ctor">
            <summary>
            Constructor. Initializes CssClass to "VAMRequiredFieldMarker"
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.RequiredFieldMarker.PrepareText">
            <summary>
            Converts the "{DEFAULT}" token in 
            <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseRequiredMarker.Text"/> and 
            <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseRequiredMarker.TextLookupID"/> into the defaults
            before calling the ancestor.
            </summary>
            <remarks>
            <para>When Text contains "{DEFAULT}", it is replaced by
            <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.Globals.DefaultRequiredFieldMarkerText">Globals.DefaultRequiredFieldMarkerText</see>.</para>
            <para>When TextLookupID contains "{DEFAULT}", it is replaced by
            <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.Globals.DefaultRequiredFieldMarkerTextLookupID">Globals.DefaultRequiredFieldMarkerTextLookupID</see>.</para>
            </remarks>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.RequiredFieldMarker.CssClass">
            <summary>
            Updates the DefaultValueAttribute.
            </summary>
        </member>
        <member name="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.RequiredFieldsDescription">
            <summary>
            RequiredFieldsDescription shows the required field description following system defaults
            or user overrides. 
            </summary>
            <remarks>
            <para>See the <b>User's Guide</b> for an overview of using this control.</para>
            <para>When the 
            <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseRequiredMarker.Text"/>, 
            <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseRequiredMarker.TextLookupID"/> and 
            <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseRequiredMarker.RequiredFieldImageURL"/> contain 
            the token "{DEFAULT}", they get defaults from <see cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.Globals"/>.</para>
            <para>This makes it easy to setup this symbol and change it universally.</para>
            <para>When the Text contains the token "{MARKER}", it is replaced by the 
            <see cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.RequiredFieldMarker"/>
            control using its system defaults for text and imageURL.</para>
            </remarks>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.RequiredFieldsDescription.#ctor">
            <summary>
            Constructor. Sets CssClass to "VAMRequiredFieldsDescription"
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.RequiredFieldsDescription.PrepareText">
            <summary>
            Handles the tokens "{DEFAULT}", "{MARKER}", and "{IMAGE}".
            </summary>
            <remarks>
            <para>Converts the "{DEFAULT}" token in Text and TextLookupID into the defaults
            before calling the ancestor.</para>
            <para> Converts the "{MARKER}" token to the HTML that represents the RequiredFieldMarker, 
            using the defaults from <see cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.Globals"/>. </para>
            <para>Converts the "{IMAGE}" token to the HTML that represents the image.
            Uses <see cref="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseRequiredMarker.PrepareImageURL"/> to get 
            the HTML for the image.</para>
            </remarks>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.RequiredFieldsDescription.CssClass">
            <summary>
            Updates the DefaultValueAttribute.
            </summary>
        </member>
        <member name="T:Jenzabar.Portal.Framework.Web.UI.Controls.PortletTitleBar">
            <summary>
            This is an implementation of PortletTitleBarBase, and is used to
            create the title bar at the top of each portlet.
            </summary>
            <remarks>
            Any class that is meant to be used as a title bar for a portlet
            must inherit from PortletTitleBarBase.
            </remarks>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.PortletTitleBar.Render(System.Web.UI.HtmlTextWriter)">
            <summary>
            Overrides the base control's Render method
            </summary>
            <param name="writer">The HtmlTextWriter to render the control with</param>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.PortletTitleBar.RaisePostBackEvent(System.String)">
            <summary>
            Called when the user clicks on one either 'customize' or 'help' icons/text for a portlet
            </summary>
            <param name="eventArgument">Either "customize" or "help" depending on the button clicked by the user.</param>
        </member>
        <member name="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.ChangeTypePropertyGridForm">
            <summary>
            A form that provides a PropertyGrid to edit an object.
            </summary>
            <remarks>
            <para>This Windows Form is used by Visual Studio.Net's design mode from within
            several UITypeEditors. It provides a PropertyGrid that will edit whatever object
            you pass in through the <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.ChangeTypePropertyGridForm.Instance"/> property.</para>
            <para>When DialogResult is OK, the Instance property is updated with changes entered by the user.</para>
            <para>It offers a "Select Another" button which opens the <see cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.PickPropertyTypeForm"/>
            defined by the subclass. This lets the user select another
            instance or select "None" to end the process without an instance.</para>
            <para>Only open this dialog box when the Instance property can be set (is not null). </para>
            </remarks>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.ChangeTypePropertyGridForm.propertyGrid1">
            <summary>
            The PropertyGrid control.
            </summary>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.ChangeTypePropertyGridForm.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.ChangeTypePropertyGridForm.fInstance">
            <summary>
            Storage for Instance.
            </summary>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.ChangeTypePropertyGridForm.fOrigLabel">
            <summary>
            Captures the value of label1.Text in the constructor so we can reuse it.
            </summary>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.ChangeTypePropertyGridForm.fCanChangeButton">
            <summary>
            Storage for CanChangeButton.
            </summary>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.ChangeTypePropertyGridForm.fPropertyName">
            <summary>
            Storage for PropertyName.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.ChangeTypePropertyGridForm.#ctor(System.Object,System.String)">
            <summary>
            Constructor
            </summary>
            <param name="pInstance">The object that will be edited in the PropertyGrid.</param>
            <param name="pPropertyName">The name of the property hosting the object to be edited.</param>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.ChangeTypePropertyGridForm.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.ChangeTypePropertyGridForm.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.ChangeTypePropertyGridForm.OKButton_Click(System.Object,System.EventArgs)">
            <summary>
            OK button event closes the Dialog with a DialogResult.OK.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.ChangeTypePropertyGridForm.CancelBtn_Click(System.Object,System.EventArgs)">
            <summary>
            Cancel button event closes the Dialog with a DialogResult.Cancel.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.ChangeTypePropertyGridForm.ChangeButton_Click(System.Object,System.EventArgs)">
            <summary>
            Event handler for the ChangeButton. Opens the GetPropertyTypeForm. 
            It may change the Instance and even close this form with DialogResult.OK.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.ChangeTypePropertyGridForm.GetPropertyTypeForm">
            <summary>
            Subclass to define the Form used to pick a new property type.
            </summary>
            <returns>Return a form instance.</returns>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.ChangeTypePropertyGridForm.ChangeTypePropertyGridForm_Load(System.Object,System.EventArgs)">
            <summary>
            Loed event handler for this form. Sets the window title and determines if the ChangeButton is visible.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.ChangeTypePropertyGridForm.Instance">
            <summary>
            Instance is the instance we are working with. It can be null to represent "None".
            It should be set by the form creator to pass along the current value and pass
            back the result.
            </summary>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.ChangeTypePropertyGridForm.CanChangeButton">
            <summary>
            When true, can change condition. This is passed to ChangeTypePropertyGridForm.
            </summary>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.ChangeTypePropertyGridForm.PropertyName">
            <summary>
            PropertyName should be assigned by the caller to the name of the property that we are editing.
            </summary>
        </member>
        <member name="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.OneConditionPropertyGridForm">
            <summary>
            OneConditionPropertyGridForm provides a Property Grid to edit <see cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseCondition"/> classes
            through the UITypeEditor <see cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.OneConditionUITypeEditor"/>.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.OneConditionPropertyGridForm.#ctor(Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseCondition,System.String)">
            <summary>
            Constructor.
            </summary>
            <param name="pInstance">The object that will be edited in the PropertyGrid.</param>
            <param name="pPropertyName">The name of the property hosting the object to be edited.</param>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.OneConditionPropertyGridForm.GetPropertyTypeForm">
            <summary>
            Returns the PickConditionForm.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.OneConditionPropertyGridForm.Condition">
            <summary>
            Condition typecasts Instance.
            </summary>
        </member>
        <member name="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.MoveConditionForm">
            <summary>
            Summary description for MoveConditionForm.
            </summary>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.MoveConditionForm.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.MoveConditionForm.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.MoveConditionForm.Setup(System.Windows.Forms.TreeView)">
            <summary>
            Setup translates pTreeView into radio buttons. It adds the root node and each child
            with a BaseMultiCondition. It also adds those nodes to the fNodeArray.
            It sets the radio button associated with pTreeView.SelectedNode.
            </summary>
            <param name="pTreeView"></param>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.MoveConditionForm.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:Jenzabar.Portal.Framework.Web.UI.Controls.PopupBase">
            <summary>
            base for popups.
            </summary>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Web.UI.Controls.PopupBase.PopupWindowName">
            <summary>
            popup window name, can be changed
            </summary>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Web.UI.Controls.PopupBase.PortletURL">
            <summary>
            url of portlet to load
            </summary>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Web.UI.Controls.PopupBase.PortletParameters">
            <summary>
            parameters to be passed to URL as query string
            </summary>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Web.UI.Controls.PopupBase.WindowProperties">
            <summary>
            properties of popup window
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.PopupBase.#ctor">
            <summary>
            Constructor for the PopupBase class
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.PopupBase.Render(System.Web.UI.HtmlTextWriter)">
            <summary>
            Overrides the base control's Render method
            </summary>
            <param name="writer">The HtmlTextWriter to render the control with</param>
        </member>
        <member name="T:Jenzabar.Portal.Framework.Web.UI.Controls.MetaControls.Attributes.TextBoxMetaControlAttribute">
            <summary>
            An attribute used to declare the need for a preference or setting to be displayed as a TextBox
            </summary>
            <remarks>
            This attribute can be applied to either a portlet (a class that inherits from PortletBase) or
            an application (a class that inherits from PortalApplicationBase).
            
            It will be used by the framework to automatically generate the appropriate preferences or
            settings overlay that allows the user to enter the data for that preference or setting
            using the control specified.
            
            This information can then be retrieved by using the various preference and settings domain objects
            in the framework. They can also be accessed by using the Preferences or Settings property of the
            PortletBase and PortalApplicationBase classes.
            </remarks>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.MetaControls.Attributes.TextBoxMetaControlAttribute.#ctor(System.Int32,System.String,System.String,System.String,System.Boolean,System.String,Jenzabar.Portal.Framework.NameValueDataSourceType,Jenzabar.Portal.Framework.NameValueType,System.String)">
            <summary>
            Constructs a TextBox meta control
            </summary>
            <param name="sortOrder">Ordinal that determines the meta control's position</param>
            <param name="name">The name of the meta control</param>
            <param name="displayName">The display name of the meta control</param>
            <param name="description">The description for the meta control</param>
            <param name="required">Denotes whether or not a value is required for the meta control</param>
            <param name="defaultValue">The list of selected items chosen by default</param>
            <param name="nameValueDataSourceType">Denotes whether or not the name/value data source is static or dynamic</param>
            <param name="nameValueType">The type of the name/value pair</param>
            <param name="cssClass">The CSS class for the meta control</param>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.MetaControls.Attributes.TextBoxMetaControlAttribute.#ctor(System.Int32,System.String,System.String,System.String,System.Boolean,System.String,Jenzabar.Portal.Framework.NameValueDataSourceType,Jenzabar.Portal.Framework.NameValueType,System.String,System.Int32,System.Int32)">
            <summary>
            Constructs a TextBox meta control
            </summary>
            <param name="sortOrder">Ordinal that determines the meta control's position</param>
            <param name="name">The name of the meta control</param>
            <param name="displayName">The display name of the meta control</param>
            <param name="description">The description for the meta control</param>
            <param name="required">Denotes whether or not a value is required for the meta control</param>
            <param name="defaultValue">The list of selected items chosen by default</param>
            <param name="nameValueDataSourceType">Denotes whether or not the name/value data source is static or dynamic</param>
            <param name="nameValueType">The type of the name/value pair</param>
            <param name="cssClass">The CSS class for the meta control</param>
            <param name="columns">The number of columns for the meta control</param>
            <param name="maxLength">The maximum length for the meta control</param>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.MetaControls.Attributes.TextBoxMetaControlAttribute.#ctor(System.Int32,System.String,System.String,System.String,System.Boolean,System.String,Jenzabar.Portal.Framework.NameValueDataSourceType,Jenzabar.Portal.Framework.NameValueType,System.String,System.Int32,System.Int32,System.String)">
            <summary>
            Constructs a TextBox meta control
            </summary>
            <param name="sortOrder">Ordinal that determines the meta control's position</param>
            <param name="name">The name of the meta control</param>
            <param name="displayName">The display name of the meta control</param>
            <param name="description">The description for the meta control</param>
            <param name="required">Denotes whether or not a value is required for the meta control</param>
            <param name="defaultValue">The list of selected items chosen by default</param>
            <param name="nameValueDataSourceType">Denotes whether or not the name/value data source is static or dynamic</param>
            <param name="nameValueType">The type of the name/value pair</param>
            <param name="cssClass">The CSS class for the meta control</param>
            <param name="columns">Number of columns to display in the textbox</param>
            <param name="maxLength">The maximum length of data in the textbox</param>
            <param name="dataTypeCheckDataType">Denotes the sort of data type check to perform on the text</param>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.MetaControls.Attributes.TextBoxMetaControlAttribute.#ctor(System.Int32,System.String,System.String,System.String,System.Boolean,System.String,Jenzabar.Portal.Framework.NameValueDataSourceType,Jenzabar.Portal.Framework.NameValueType,System.String,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Constructs a TextBox meta control
            </summary>
            <param name="sortOrder">Ordinal that determines the meta control's position</param>
            <param name="name">The name of the meta control</param>
            <param name="displayName">The display name of the meta control</param>
            <param name="description">The description for the meta control</param>
            <param name="required">Denotes whether or not a value is required for the meta control</param>
            <param name="defaultValue">The list of selected items chosen by default</param>
            <param name="nameValueDataSourceType">Denotes whether or not the name/value data source is static or dynamic</param>
            <param name="nameValueType">The type of the name/value pair</param>
            <param name="cssClass">The CSS class for the meta control</param>
            <param name="columns">Number of columns to display in the textbox</param>
            <param name="maxLength">The maximum length of data in the textbox</param>
            <param name="lengthMinimum">The minimum length for the meta control</param>
            <param name="lengthMaximum">The maximum length for the meta control</param>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.MetaControls.Attributes.TextBoxMetaControlAttribute.#ctor(System.Int32,System.String,System.String,System.String,System.Boolean,System.String,Jenzabar.Portal.Framework.NameValueDataSourceType,Jenzabar.Portal.Framework.NameValueType,System.String,System.Int32,System.Int32,System.Int32)">
            <summary>
            Constructs a TextBox meta control
            </summary>
            <param name="sortOrder">Ordinal that determines the meta control's position</param>
            <param name="name">The name of the meta control</param>
            <param name="displayName">The display name of the meta control</param>
            <param name="description">The description for the meta control</param>
            <param name="required">Denotes whether or not a value is required for the meta control</param>
            <param name="defaultValue">The list of selected items chosen by default</param>
            <param name="nameValueDataSourceType">Denotes whether or not the name/value data source is static or dynamic</param>
            <param name="nameValueType">The type of the name/value pair</param>
            <param name="cssClass">The CSS class for the meta control</param>
            <param name="columns">Number of columns to display in the textbox</param>
            <param name="maxLength">The maximum length of data in the textbox</param>
            <param name="maximumWordCount">The maximum number of words allowed in the meta control</param>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.MetaControls.Attributes.TextBoxMetaControlAttribute.#ctor(System.Int32,System.String,System.String,System.String,System.Boolean,System.String,Jenzabar.Portal.Framework.NameValueDataSourceType,Jenzabar.Portal.Framework.NameValueType,System.String,System.Int32,System.Int32,System.String,System.String,System.String)">
            <summary>
            Constructs a TextBox meta control
            </summary>
            <param name="sortOrder">Ordinal that determines the meta control's position</param>
            <param name="name">The name of the meta control</param>
            <param name="displayName">The display name of the meta control</param>
            <param name="description">The description for the meta control</param>
            <param name="required">Denotes whether or not a value is required for the meta control</param>
            <param name="defaultValue">The list of selected items chosen by default</param>
            <param name="nameValueDataSourceType">Denotes whether or not the name/value data source is static or dynamic</param>
            <param name="nameValueType">The type of the name/value pair</param>
            <param name="cssClass">The CSS class for the meta control</param>
            <param name="columns">Number of columns to display in the textbox</param>
            <param name="maxLength">The maximum length of data in the textbox</param>
            <param name="dataTypeCheckDataType">Denotes the sort of data type check to perform on the text</param>
            <param name="rangeMinimum">The minimum value for range validation</param>
            <param name="rangeMaximum">The maximum value for range validation</param>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.MetaControls.Attributes.TextBoxMetaControlAttribute.#ctor(System.Int32,System.String,System.String,System.String,System.Boolean,System.String,Jenzabar.Portal.Framework.NameValueDataSourceType,Jenzabar.Portal.Framework.NameValueType,System.String,System.Int32,System.Int32,System.String,System.Boolean)">
            <summary>
            Constructs a TextBox meta control
            </summary>
            <param name="sortOrder">Ordinal that determines the meta control's position</param>
            <param name="name">The name of the meta control</param>
            <param name="displayName">The display name of the meta control</param>
            <param name="description">The description for the meta control</param>
            <param name="required">Denotes whether or not a value is required for the meta control</param>
            <param name="defaultValue">The list of selected items chosen by default</param>
            <param name="nameValueDataSourceType">Denotes whether or not the name/value data source is static or dynamic</param>
            <param name="nameValueType">The type of the name/value pair</param>
            <param name="cssClass">The CSS class for the meta control</param>
            <param name="columns">Number of columns to display in the textbox</param>
            <param name="maxLength">The maximum length of data in the textbox</param>
            <param name="regularExpression">The regular expression to validate the input against</param>
            <param name="caseInsensitive">Denotes whether or not the regular expression is case insensitive</param>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.MetaControls.Attributes.TextBoxMetaControlAttribute.#ctor(System.Int32,System.String,System.String,System.String,System.Type,System.Boolean,System.String,Jenzabar.Portal.Framework.NameValueDataSourceType,Jenzabar.Portal.Framework.NameValueType,System.String)">
            <summary>
            Constructs a TextBox meta control
            </summary>
            <param name="sortOrder">Ordinal that determines the meta control's position</param>
            <param name="name">The name of the meta control</param>
            <param name="friendlyNameResourceKey">The resource key for the friendly name of the attribute</param>
            <param name="descriptionResourceKey">The resource key for a brief description of the attribute</param>
            <param name="resourceProvider">The qualified type name of the class that implements IResourceProvider</param>
            <param name="required">Denotes whether or not a value is required for the meta control</param>
            <param name="defaultValue">The list of selected items chosen by default</param>
            <param name="nameValueDataSourceType">Denotes whether or not the name/value data source is static or dynamic</param>
            <param name="nameValueType">The type of the name/value pair</param>
            <param name="cssClass">The CSS class for the meta control</param>
            <remarks>
            The resourceProvider argument is in the format: "AssemblyName,TypeName".
            </remarks>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.MetaControls.Attributes.TextBoxMetaControlAttribute.#ctor(System.Int32,System.String,System.String,System.String,System.Type,System.Boolean,System.String,Jenzabar.Portal.Framework.NameValueDataSourceType,Jenzabar.Portal.Framework.NameValueType,System.String,System.Int32,System.Int32)">
            <summary>
            Constructs a TextBox meta control
            </summary>
            <param name="sortOrder">Ordinal that determines the meta control's position</param>
            <param name="name">The name of the meta control</param>
            <param name="friendlyNameResourceKey">The resource key for the friendly name of the attribute</param>
            <param name="descriptionResourceKey">The resource key for a brief description of the attribute</param>
            <param name="resourceProvider">The qualified type name of the class that implements IResourceProvider</param>
            <param name="required">Denotes whether or not a value is required for the meta control</param>
            <param name="defaultValue">The list of selected items chosen by default</param>
            <param name="nameValueDataSourceType">Denotes whether or not the name/value data source is static or dynamic</param>
            <param name="nameValueType">The type of the name/value pair</param>
            <param name="cssClass">The CSS class for the meta control</param>
            <param name="columns">The number of columns for the meta control</param>
            <param name="maxLength">The maximum length for the meta control</param>
            <remarks>
            The resourceProvider argument is in the format: "AssemblyName,TypeName".
            </remarks>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.MetaControls.Attributes.TextBoxMetaControlAttribute.#ctor(System.Int32,System.String,System.String,System.String,System.Type,System.Boolean,System.String,Jenzabar.Portal.Framework.NameValueDataSourceType,Jenzabar.Portal.Framework.NameValueType,System.String,System.Int32,System.Int32,System.String)">
            <summary>
            Constructs a TextBox meta control
            </summary>
            <param name="sortOrder">Ordinal that determines the meta control's position</param>
            <param name="name">The name of the meta control</param>
            <param name="friendlyNameResourceKey">The resource key for the friendly name of the attribute</param>
            <param name="descriptionResourceKey">The resource key for a brief description of the attribute</param>
            <param name="resourceProvider">The qualified type name of the class that implements IResourceProvider</param>
            <param name="required">Denotes whether or not a value is required for the meta control</param>
            <param name="defaultValue">The list of selected items chosen by default</param>
            <param name="nameValueDataSourceType">Denotes whether or not the name/value data source is static or dynamic</param>
            <param name="nameValueType">The type of the name/value pair</param>
            <param name="cssClass">The CSS class for the meta control</param>
            <param name="columns">Number of columns to display in the textbox</param>
            <param name="maxLength">The maximum length of data in the textbox</param>
            <param name="dataTypeCheckDataType">Denotes the sort of data type check to perform on the text</param>
            <remarks>
            The resourceProvider argument is in the format: "AssemblyName,TypeName".
            </remarks>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.MetaControls.Attributes.TextBoxMetaControlAttribute.#ctor(System.Int32,System.String,System.String,System.String,System.Type,System.Boolean,System.String,Jenzabar.Portal.Framework.NameValueDataSourceType,Jenzabar.Portal.Framework.NameValueType,System.String,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Constructs a TextBox meta control
            </summary>
            <param name="sortOrder">Ordinal that determines the meta control's position</param>
            <param name="name">The name of the meta control</param>
            <param name="friendlyNameResourceKey">The resource key for the friendly name of the attribute</param>
            <param name="descriptionResourceKey">The resource key for a brief description of the attribute</param>
            <param name="resourceProvider">The qualified type name of the class that implements IResourceProvider</param>
            <param name="required">Denotes whether or not a value is required for the meta control</param>
            <param name="defaultValue">The list of selected items chosen by default</param>
            <param name="nameValueDataSourceType">Denotes whether or not the name/value data source is static or dynamic</param>
            <param name="nameValueType">The type of the name/value pair</param>
            <param name="cssClass">The CSS class for the meta control</param>
            <param name="columns">Number of columns to display in the textbox</param>
            <param name="maxLength">The maximum length of data in the textbox</param>
            <param name="lengthMinimum">The minimum length for the meta control</param>
            <param name="lengthMaximum">The maximum length for the meta control</param>
            <remarks>
            The resourceProvider argument is in the format: "AssemblyName,TypeName".
            </remarks>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.MetaControls.Attributes.TextBoxMetaControlAttribute.#ctor(System.Int32,System.String,System.String,System.String,System.Type,System.Boolean,System.String,Jenzabar.Portal.Framework.NameValueDataSourceType,Jenzabar.Portal.Framework.NameValueType,System.String,System.Int32,System.Int32,System.Int32)">
            <summary>
            Constructs a TextBox meta control
            </summary>
            <param name="sortOrder">Ordinal that determines the meta control's position</param>
            <param name="name">The name of the meta control</param>
            <param name="friendlyNameResourceKey">The resource key for the friendly name of the attribute</param>
            <param name="descriptionResourceKey">The resource key for a brief description of the attribute</param>
            <param name="resourceProvider">The qualified type name of the class that implements IResourceProvider</param>
            <param name="required">Denotes whether or not a value is required for the meta control</param>
            <param name="defaultValue">The list of selected items chosen by default</param>
            <param name="nameValueDataSourceType">Denotes whether or not the name/value data source is static or dynamic</param>
            <param name="nameValueType">The type of the name/value pair</param>
            <param name="cssClass">The CSS class for the meta control</param>
            <param name="columns">Number of columns to display in the textbox</param>
            <param name="maxLength">The maximum length of data in the textbox</param>
            <param name="maximumWordCount">The maximum number of words allowed in the meta control</param>
            <remarks>
            The resourceProvider argument is in the format: "AssemblyName,TypeName".
            </remarks>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.MetaControls.Attributes.TextBoxMetaControlAttribute.#ctor(System.Int32,System.String,System.String,System.String,System.Type,System.Boolean,System.String,Jenzabar.Portal.Framework.NameValueDataSourceType,Jenzabar.Portal.Framework.NameValueType,System.String,System.Int32,System.Int32,System.String,System.String,System.String)">
            <summary>
            Constructs a TextBox meta control
            </summary>
            <param name="sortOrder">Ordinal that determines the meta control's position</param>
            <param name="name">The name of the meta control</param>
            <param name="friendlyNameResourceKey">The resource key for the friendly name of the attribute</param>
            <param name="descriptionResourceKey">The resource key for a brief description of the attribute</param>
            <param name="resourceProvider">The qualified type name of the class that implements IResourceProvider</param>
            <param name="required">Denotes whether or not a value is required for the meta control</param>
            <param name="defaultValue">The list of selected items chosen by default</param>
            <param name="nameValueDataSourceType">Denotes whether or not the name/value data source is static or dynamic</param>
            <param name="nameValueType">The type of the name/value pair</param>
            <param name="cssClass">The CSS class for the meta control</param>
            <param name="columns">Number of columns to display in the textbox</param>
            <param name="maxLength">The maximum length of data in the textbox</param>
            <param name="dataTypeCheckDataType">Denotes the sort of data type check to perform on the text</param>
            <param name="rangeMinimum">The minimum value for range validation</param>
            <param name="rangeMaximum">The maximum value for range validation</param>
            <remarks>
            The resourceProvider argument is in the format: "AssemblyName,TypeName".
            </remarks>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.MetaControls.Attributes.TextBoxMetaControlAttribute.#ctor(System.Int32,System.String,System.String,System.String,System.Type,System.Boolean,System.String,Jenzabar.Portal.Framework.NameValueDataSourceType,Jenzabar.Portal.Framework.NameValueType,System.String,System.Int32,System.Int32,System.String,System.Boolean)">
            <summary>
            Constructs a TextBox meta control
            </summary>
            <param name="sortOrder">Ordinal that determines the meta control's position</param>
            <param name="name">The name of the meta control</param>
            <param name="friendlyNameResourceKey">The resource key for the friendly name of the attribute</param>
            <param name="descriptionResourceKey">The resource key for a brief description of the attribute</param>
            <param name="resourceProvider">The qualified type name of the class that implements IResourceProvider</param>
            <param name="required">Denotes whether or not a value is required for the meta control</param>
            <param name="defaultValue">The list of selected items chosen by default</param>
            <param name="nameValueDataSourceType">Denotes whether or not the name/value data source is static or dynamic</param>
            <param name="nameValueType">The type of the name/value pair</param>
            <param name="cssClass">The CSS class for the meta control</param>
            <param name="columns">Number of columns to display in the textbox</param>
            <param name="maxLength">The maximum length of data in the textbox</param>
            <param name="regularExpression">The regular expression to validate the input against</param>
            <param name="caseInsensitive">Denotes whether or not the regular expression is case insensitive</param>
            <remarks>
            The resourceProvider argument is in the format: "AssemblyName,TypeName".
            </remarks>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.MetaControls.Attributes.TextBoxMetaControlAttribute.CreateMetaControl(System.Object)">
            <summary>
            Creates the meta control associated with the attribute
            </summary>
            <param name="key">The key used to retrieve dynamic values from a NameValueProvider, typically the object to which the attribute is attached</param>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.MetaControls.Attributes.TextBoxMetaControlAttribute.Columns">
            <summary>
            Gets the number of columns for the meta control
            </summary>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.MetaControls.Attributes.TextBoxMetaControlAttribute.MaxLength">
            <summary>
            Gets the maximum length for the meta control
            </summary>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.MetaControls.Attributes.TextBoxMetaControlAttribute.DataTypeCheckDataType">
            <summary>
            Gets the sort of data type check to perform on the text 
            </summary>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.MetaControls.Attributes.TextBoxMetaControlAttribute.LengthMinimum">
            <summary>
            Gets the minimum length for the meta control
            </summary>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.MetaControls.Attributes.TextBoxMetaControlAttribute.LengthMaximum">
            <summary>
            Gets the maximum length for the meta control
            </summary>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.MetaControls.Attributes.TextBoxMetaControlAttribute.MaximumWordCount">
            <summary>
            Gets the maximum number of words allowed in the meta control
            </summary>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.MetaControls.Attributes.TextBoxMetaControlAttribute.RangeMinimum">
            <summary>
            Gets the minimum value for range validation 
            </summary>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.MetaControls.Attributes.TextBoxMetaControlAttribute.RangeMaximum">
            <summary>
            Gets the maximum value for range validation
            </summary>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.MetaControls.Attributes.TextBoxMetaControlAttribute.RegularExpression">
            <summary>
            Gets the regular expression to validate the input against
            </summary>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.MetaControls.Attributes.TextBoxMetaControlAttribute.CaseInsensitive">
            <summary>
            Gets whether or not the regular expression is case insensitive 
            </summary>
        </member>
        <member name="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.IVAMSubmitControl">
            <summary>
            IVAMSubmitControl is associated with any control that supports VAM's ability to
            submit the page. It exposes the CausesValidation property and defines the Group property.
            </summary>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.IVAMSubmitControl.CausesValidation">
            <summary>
            A property that determines if submitting also validates. When true,
            it validates. This property is defined in all of Microsoft's predefined
            submit controls.
            </summary>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.IVAMSubmitControl.Group">
            <summary>
            The group name that is used for validation when this control is submitted.
            </summary>
        </member>
        <member name="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.Button">
            <summary>
            <see cref="T:System.Web.UI.WebControls.Button"/> extended to support the Group property
            and validation using this framework.
            </summary>
            <remarks>
            <para>Button extends <see cref="T:System.Web.UI.WebControls.Button"/> 
            to offer two enhancements:</para>
            <para>1. Define the Group property.</para>
            <para>2. In the OnPreRender, call VAMPage.RegisterSubmitControl if CausesValidation is true.</para>
            <para>It implements <see cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.IVAMSubmitControl"/>.</para>
            </remarks>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.Button.#ctor">
            <summary>
            Constructor. Sets the Text property to "Button" for a default value.
            </summary>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.Button.fGroup">
            <summary>
            Storage for <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.Button.Group"/>.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.Button.OnPreRender(System.EventArgs)">
            <summary>
            Calls <see cref="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.VAMPage.RegisterSubmitControl(System.Web.UI.Control,System.String)">VAMPage.RegisterSubmitControl</see>.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.Button.OnClick(System.EventArgs)">
            <summary>
            The Button's RaisePostBackEvent fires Page.Validate automatically if CausesValidation is true.
            This takes the same action with <see cref="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.VAMPage.ValidateGroup(System.String)">VAMPage.ValidateGroup</see>.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.Button.Jenzabar#Portal#Framework#Web#UI#Controls#Validation#IVAMSubmitControl#get_CausesValidation">
            <summary>
            <see cref="T:System.Web.UI.WebControls.Button"/> extended to support the Group property
            and validation using this framework.
            </summary>
            <remarks>
            <para>Button extends <see cref="T:System.Web.UI.WebControls.Button"/> 
            to offer two enhancements:</para>
            <para>1. Define the Group property.</para>
            <para>2. In the OnPreRender, call VAMPage.RegisterSubmitControl if CausesValidation is true.</para>
            <para>It implements <see cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.IVAMSubmitControl"/>.</para>
            </remarks>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.Button.Jenzabar#Portal#Framework#Web#UI#Controls#Validation#IVAMSubmitControl#set_CausesValidation(System.Boolean)">
            <summary>
            <see cref="T:System.Web.UI.WebControls.Button"/> extended to support the Group property
            and validation using this framework.
            </summary>
            <remarks>
            <para>Button extends <see cref="T:System.Web.UI.WebControls.Button"/> 
            to offer two enhancements:</para>
            <para>1. Define the Group property.</para>
            <para>2. In the OnPreRender, call VAMPage.RegisterSubmitControl if CausesValidation is true.</para>
            <para>It implements <see cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.IVAMSubmitControl"/>.</para>
            </remarks>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.Button.Group">
            <summary>
            Group determines which validators are invoked when clicked.
            </summary>
            <value>
            <para>Those that match the value in this will be run.</para>
            <para>Group names are blank by default. When left blank, this runs all validators
            with the default group.</para>
            <para>You can also use the string "*" to run every validator on the page.</para>
            </value>
        </member>
        <member name="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.LinkButton">
            <summary>
            <see cref="T:System.Web.UI.WebControls.LinkButton"/> extended to support the Group property
            and validation using this framework.
            </summary>
            <remarks>
            <para>LinkButton extends <see cref="T:System.Web.UI.WebControls.LinkButton"/>
            to offer two enhancements:</para>
            <para>1. Define the Group property.</para>
            <para>2. In the OnPreRender, call VAMPage.RegisterSubmitControl if CausesValidation is true.</para>
            <para>It implements <see cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.IVAMSubmitControl"/>.</para>
            </remarks>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.LinkButton.#ctor">
            <summary>
            Constructor. Sets Text to "LinkButton" by default.
            </summary>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.LinkButton.fGroup">
            <summary>
            Storage for <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.LinkButton.Group"/>.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.LinkButton.OnPreRender(System.EventArgs)">
            <summary>
            Calls <see cref="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.VAMPage.RegisterSubmitControl(System.Web.UI.Control,System.String)">VAMPage.RegisterSubmitControl</see>.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.LinkButton.OnClick(System.EventArgs)">
            <summary>
            The LinkButton's RaisePostBackEvent fires Page.Validate automatically if CausesValidation is true.
            This takes the same action with <see cref="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.VAMPage.ValidateGroup(System.String)">VAMPage.ValidateGroup</see>.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.LinkButton.AddAttributesToRender(System.Web.UI.HtmlTextWriter)">
            <summary>
            Prevent the ancestor from writing validation code by setting CausesValidation to false.
            This limits the href= attribute to "__doPostBack(parms);"
            </summary>
            <param name="writer"></param>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.LinkButton.Jenzabar#Portal#Framework#Web#UI#Controls#Validation#IVAMSubmitControl#get_CausesValidation">
            <summary>
            <see cref="T:System.Web.UI.WebControls.LinkButton"/> extended to support the Group property
            and validation using this framework.
            </summary>
            <remarks>
            <para>LinkButton extends <see cref="T:System.Web.UI.WebControls.LinkButton"/>
            to offer two enhancements:</para>
            <para>1. Define the Group property.</para>
            <para>2. In the OnPreRender, call VAMPage.RegisterSubmitControl if CausesValidation is true.</para>
            <para>It implements <see cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.IVAMSubmitControl"/>.</para>
            </remarks>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.LinkButton.Jenzabar#Portal#Framework#Web#UI#Controls#Validation#IVAMSubmitControl#set_CausesValidation(System.Boolean)">
            <summary>
            <see cref="T:System.Web.UI.WebControls.LinkButton"/> extended to support the Group property
            and validation using this framework.
            </summary>
            <remarks>
            <para>LinkButton extends <see cref="T:System.Web.UI.WebControls.LinkButton"/>
            to offer two enhancements:</para>
            <para>1. Define the Group property.</para>
            <para>2. In the OnPreRender, call VAMPage.RegisterSubmitControl if CausesValidation is true.</para>
            <para>It implements <see cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.IVAMSubmitControl"/>.</para>
            </remarks>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.LinkButton.Group">
            <summary>
            Group determines which validators are invoked when clicked.
            </summary>
            <value>
            <para>Those that match the value in this will be run.</para>
            <para>Group names are blank by default. When left blank, this runs all validators
            with the default group.</para>
            <para>You can also use the string "*" to run every validator on the page.</para>
            </value>
        </member>
        <member name="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.ImageButton">
            <summary>
            <see cref="T:System.Web.UI.WebControls.ImageButton"/> extended to support the Group property
            and validation using this framework.
            </summary>
            <remarks>
            <para>ImageButton extends <see cref="T:System.Web.UI.WebControls.ImageButton"/> 
            to offer two enhancements:</para>
            <para>1. Define the Group property.</para>
            <para>2. In the OnPreRender, call VAMPage.RegisterSubmitControl if CausesValidation is true.</para>
            <para>It implements <see cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.IVAMSubmitControl"/>.</para>
            </remarks>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.ImageButton.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.ImageButton.fGroup">
            <summary>
            Storage for <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.ImageButton.Group"/>.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.ImageButton.OnPreRender(System.EventArgs)">
            <summary>
            Calls <see cref="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.VAMPage.RegisterSubmitControl(System.Web.UI.Control,System.String)">VAMPage.RegisterSubmitControl</see>.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.ImageButton.OnClick(System.Web.UI.ImageClickEventArgs)">
            <summary>
            The ImageButton's RaisePostBackEvent fires Page.Validate automatically if CausesValidation is true.
            This takes the same action with <see cref="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.VAMPage.ValidateGroup(System.String)">VAMPage.ValidateGroup</see>.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.ImageButton.Jenzabar#Portal#Framework#Web#UI#Controls#Validation#IVAMSubmitControl#get_CausesValidation">
            <summary>
            <see cref="T:System.Web.UI.WebControls.ImageButton"/> extended to support the Group property
            and validation using this framework.
            </summary>
            <remarks>
            <para>ImageButton extends <see cref="T:System.Web.UI.WebControls.ImageButton"/> 
            to offer two enhancements:</para>
            <para>1. Define the Group property.</para>
            <para>2. In the OnPreRender, call VAMPage.RegisterSubmitControl if CausesValidation is true.</para>
            <para>It implements <see cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.IVAMSubmitControl"/>.</para>
            </remarks>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.ImageButton.Jenzabar#Portal#Framework#Web#UI#Controls#Validation#IVAMSubmitControl#set_CausesValidation(System.Boolean)">
            <summary>
            <see cref="T:System.Web.UI.WebControls.ImageButton"/> extended to support the Group property
            and validation using this framework.
            </summary>
            <remarks>
            <para>ImageButton extends <see cref="T:System.Web.UI.WebControls.ImageButton"/> 
            to offer two enhancements:</para>
            <para>1. Define the Group property.</para>
            <para>2. In the OnPreRender, call VAMPage.RegisterSubmitControl if CausesValidation is true.</para>
            <para>It implements <see cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.IVAMSubmitControl"/>.</para>
            </remarks>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.ImageButton.Group">
            <summary>
            Group determines which validators are invoked when clicked.
            </summary>
            <value>
            <para>Those that match the value in this will be run.</para>
            <para>Group names are blank by default. When left blank, this runs all validators
            with the default group.</para>
            <para>You can also use the string "*" to run every validator on the page.</para>
            </value>
        </member>
        <member name="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.HtmlInputButton">
            <summary>
            <see cref="T:System.Web.UI.HtmlControls.HtmlInputButton"/> extended to support the Group property
            and validation using this framework.
            </summary>
            <remarks>
            <para>HtmlInputButton extends <see cref="T:System.Web.UI.HtmlControls.HtmlInputButton"/> 
            to offer two enhancements:</para>
            <para>1. Define the Group property.</para>
            <para>2. In the OnPreRender, call VAMPage.RegisterSubmitControl if CausesValidation is true.</para>
            <para>It implements <see cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.IVAMSubmitControl"/>.</para>
            </remarks>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.HtmlInputButton.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.HtmlInputButton.fGroup">
            <summary>
            Storage for <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.HtmlInputButton.Group"/>.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.HtmlInputButton.OnPreRender(System.EventArgs)">
            <summary>
            Calls <see cref="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.VAMPage.RegisterSubmitControl(System.Web.UI.Control,System.String)">VAMPage.RegisterSubmitControl</see>.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.HtmlInputButton.OnServerClick(System.EventArgs)">
            <summary>
            The HtmlInputButton's RaisePostBackEvent fires Page.Validate automatically if CausesValidation is true.
            This takes the same action with <see cref="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.VAMPage.ValidateGroup(System.String)">VAMPage.ValidateGroup</see>.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.HtmlInputButton.Jenzabar#Portal#Framework#Web#UI#Controls#Validation#IVAMSubmitControl#get_CausesValidation">
            <summary>
            <see cref="T:System.Web.UI.HtmlControls.HtmlInputButton"/> extended to support the Group property
            and validation using this framework.
            </summary>
            <remarks>
            <para>HtmlInputButton extends <see cref="T:System.Web.UI.HtmlControls.HtmlInputButton"/> 
            to offer two enhancements:</para>
            <para>1. Define the Group property.</para>
            <para>2. In the OnPreRender, call VAMPage.RegisterSubmitControl if CausesValidation is true.</para>
            <para>It implements <see cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.IVAMSubmitControl"/>.</para>
            </remarks>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.HtmlInputButton.Jenzabar#Portal#Framework#Web#UI#Controls#Validation#IVAMSubmitControl#set_CausesValidation(System.Boolean)">
            <summary>
            <see cref="T:System.Web.UI.HtmlControls.HtmlInputButton"/> extended to support the Group property
            and validation using this framework.
            </summary>
            <remarks>
            <para>HtmlInputButton extends <see cref="T:System.Web.UI.HtmlControls.HtmlInputButton"/> 
            to offer two enhancements:</para>
            <para>1. Define the Group property.</para>
            <para>2. In the OnPreRender, call VAMPage.RegisterSubmitControl if CausesValidation is true.</para>
            <para>It implements <see cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.IVAMSubmitControl"/>.</para>
            </remarks>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.HtmlInputButton.Group">
            <summary>
            Group determines which validators are invoked when clicked.
            </summary>
            <value>
            <para>Those that match the value in this will be run.</para>
            <para>Group names are blank by default. When left blank, this runs all validators
            with the default group.</para>
            <para>You can also use the string "*" to run every validator on the page.</para>
            </value>
        </member>
        <member name="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.HtmlInputImage">
            <summary>
            <see cref="T:System.Web.UI.HtmlControls.HtmlInputImage"/> extended to support the Group property
            and validation using this framework.
            </summary>
            <remarks>
            <para>HtmlInputImage extends <see cref="T:System.Web.UI.HtmlControls.HtmlInputImage"/> 
            to offer two enhancements:</para>
            <para>1. Define the Group property.</para>
            <para>2. In the OnPreRender, call VAMPage.RegisterSubmitControl if CausesValidation is true.</para>
            <para>It implements <see cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.IVAMSubmitControl"/>.</para>
            </remarks>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.HtmlInputImage.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.HtmlInputImage.fGroup">
            <summary>
            Storage for <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.HtmlInputButton.Group"/>.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.HtmlInputImage.OnPreRender(System.EventArgs)">
            <summary>
            Calls <see cref="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.VAMPage.RegisterSubmitControl(System.Web.UI.Control,System.String)">VAMPage.RegisterSubmitControl</see>.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.HtmlInputImage.OnServerClick(System.Web.UI.ImageClickEventArgs)">
            <summary>
            The HtmlInputImage's RaisePostBackEvent fires Page.Validate automatically if CausesValidation is true.
            This takes the same action with <see cref="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.VAMPage.ValidateGroup(System.String)">VAMPage.ValidateGroup</see>.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.HtmlInputImage.Jenzabar#Portal#Framework#Web#UI#Controls#Validation#IVAMSubmitControl#get_CausesValidation">
            <summary>
            <see cref="T:System.Web.UI.HtmlControls.HtmlInputImage"/> extended to support the Group property
            and validation using this framework.
            </summary>
            <remarks>
            <para>HtmlInputImage extends <see cref="T:System.Web.UI.HtmlControls.HtmlInputImage"/> 
            to offer two enhancements:</para>
            <para>1. Define the Group property.</para>
            <para>2. In the OnPreRender, call VAMPage.RegisterSubmitControl if CausesValidation is true.</para>
            <para>It implements <see cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.IVAMSubmitControl"/>.</para>
            </remarks>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.HtmlInputImage.Jenzabar#Portal#Framework#Web#UI#Controls#Validation#IVAMSubmitControl#set_CausesValidation(System.Boolean)">
            <summary>
            <see cref="T:System.Web.UI.HtmlControls.HtmlInputImage"/> extended to support the Group property
            and validation using this framework.
            </summary>
            <remarks>
            <para>HtmlInputImage extends <see cref="T:System.Web.UI.HtmlControls.HtmlInputImage"/> 
            to offer two enhancements:</para>
            <para>1. Define the Group property.</para>
            <para>2. In the OnPreRender, call VAMPage.RegisterSubmitControl if CausesValidation is true.</para>
            <para>It implements <see cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.IVAMSubmitControl"/>.</para>
            </remarks>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.HtmlInputImage.Group">
            <summary>
            Group determines which validators are invoked when clicked.
            </summary>
            <value>
            <para>Those that match the value in this will be run.</para>
            <para>Group names are blank by default. When left blank, this runs all validators
            with the default group.</para>
            <para>You can also use the string "*" to run every validator on the page.</para>
            </value>
        </member>
        <member name="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.HtmlButton">
            <summary>
            <see cref="T:System.Web.UI.HtmlControls.HtmlButton"/> extended to support the Group property
            and validation using this framework.
            </summary>
            <remarks>
            <para>HtmlButton extends <see cref="T:System.Web.UI.HtmlControls.HtmlButton"/> 
            to offer two enhancements:</para>
            <para>1. Define the Group property.</para>
            <para>2. In the OnPreRender, call VAMPage.RegisterSubmitControl if CausesValidation is true.</para>
            <para>It implements <see cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.IVAMSubmitControl"/>.</para>
            </remarks>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.HtmlButton.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.HtmlButton.fGroup">
            <summary>
            Storage for <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.HtmlButton.Group"/>.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.HtmlButton.OnPreRender(System.EventArgs)">
            <summary>
            Calls <see cref="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.VAMPage.RegisterSubmitControl(System.Web.UI.Control,System.String)">VAMPage.RegisterSubmitControl</see>.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.HtmlButton.OnServerClick(System.EventArgs)">
            <summary>
            The HtmlButton's RaisePostBackEvent fires Page.Validate automatically if CausesValidation is true.
            This takes the same action with <see cref="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.VAMPage.ValidateGroup(System.String)">VAMPage.ValidateGroup</see>.
            </summary>
            <param name="pE"></param>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.HtmlButton.Jenzabar#Portal#Framework#Web#UI#Controls#Validation#IVAMSubmitControl#get_CausesValidation">
            <summary>
            <see cref="T:System.Web.UI.HtmlControls.HtmlButton"/> extended to support the Group property
            and validation using this framework.
            </summary>
            <remarks>
            <para>HtmlButton extends <see cref="T:System.Web.UI.HtmlControls.HtmlButton"/> 
            to offer two enhancements:</para>
            <para>1. Define the Group property.</para>
            <para>2. In the OnPreRender, call VAMPage.RegisterSubmitControl if CausesValidation is true.</para>
            <para>It implements <see cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.IVAMSubmitControl"/>.</para>
            </remarks>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.HtmlButton.Jenzabar#Portal#Framework#Web#UI#Controls#Validation#IVAMSubmitControl#set_CausesValidation(System.Boolean)">
            <summary>
            <see cref="T:System.Web.UI.HtmlControls.HtmlButton"/> extended to support the Group property
            and validation using this framework.
            </summary>
            <remarks>
            <para>HtmlButton extends <see cref="T:System.Web.UI.HtmlControls.HtmlButton"/> 
            to offer two enhancements:</para>
            <para>1. Define the Group property.</para>
            <para>2. In the OnPreRender, call VAMPage.RegisterSubmitControl if CausesValidation is true.</para>
            <para>It implements <see cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.IVAMSubmitControl"/>.</para>
            </remarks>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.HtmlButton.Group">
            <summary>
            Group determines which validators are invoked when clicked.
            </summary>
            <value>
            <para>Those that match the value in this will be run.</para>
            <para>Group names are blank by default. When left blank, this runs all validators
            with the default group.</para>
            <para>You can also use the string "*" to run every validator on the page.</para>
            </value>
        </member>
        <member name="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.EditCommandColumn">
            <summary>
            A subclass of the DataGrid's <see cref="T:System.Web.UI.WebControls.EditCommandColumn"/> 
            that makes registers its buttons with VAM.
            </summary>
            <remarks>
            <para>The System.Web.UI.WebControls.DataGrid creates standard buttons using
            DataGridLinkButton and Button classes in EditCommandColumn. Instead of
            replacing them, this subclass simply registers them with VAM
            using <see cref="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.VAMPage.RegisterChildSubmitControls(System.Web.UI.Control,System.String,System.Boolean,System.Boolean,System.Boolean)">VAMPage.RegisterChildSubmitControls</see>.
            It also hooks up their Click event handler to call <see cref="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.VAMPage.ValidateGroup(System.String)">VAMPage.ValidateGroup</see>.</para>
            </remarks>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.EditCommandColumn.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.EditCommandColumn.fGroup">
            <summary>
            Storage for <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.EditCommandColumn.Group"/>.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.EditCommandColumn.InitializeCell(System.Web.UI.WebControls.TableCell,System.Int32,System.Web.UI.WebControls.ListItemType)">
            <summary>
            After calling the ancestor, it calls <see cref="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.VAMPage.RegisterChildSubmitControls(System.Web.UI.Control,System.String,System.Boolean,System.Boolean,System.Boolean)">VAMPage.RegisterChildSubmitControls</see>.
            </summary>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.EditCommandColumn.Group">
            <summary>
            Group determines which validators are invoked when clicked.
            </summary>
            <value>
            <para>Those that match the value in this will be run.</para>
            <para>Group names are blank by default. When left blank, this runs all validators
            with the default group.</para>
            <para>You can also use the string "*" to run every validator on the page.</para>
            </value>
        </member>
        <member name="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.ButtonColumn">
            <summary>
            A subclass of the DataGrid's <see cref="T:System.Web.UI.WebControls.ButtonColumn"/> 
            that makes registers its buttons with VAM.
            </summary>
            <remarks>
            <para>The System.Web.UI.WebControls.DataGrid creates standard buttons using
            DataGridLinkButton and Button classes in ButtonColumn. Instead of
            replacing them, this subclass simply registers them with VAM
            using <see cref="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.VAMPage.RegisterChildSubmitControls(System.Web.UI.Control,System.String,System.Boolean,System.Boolean,System.Boolean)">VAMPage.RegisterChildSubmitControls</see>.
            It also hooks up their Click event handler to call <see cref="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.VAMPage.ValidateGroup(System.String)">VAMPage.ValidateGroup</see>.</para>
            </remarks>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.ButtonColumn.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.ButtonColumn.fGroup">
            <summary>
            Storage for <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.ButtonColumn.Group"/>.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.ButtonColumn.InitializeCell(System.Web.UI.WebControls.TableCell,System.Int32,System.Web.UI.WebControls.ListItemType)">
            <summary>
            After calling the ancestor, it calls <see cref="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.VAMPage.RegisterChildSubmitControls(System.Web.UI.Control,System.String,System.Boolean,System.Boolean,System.Boolean)">VAMPage.RegisterChildSubmitControls</see>.
            </summary>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.ButtonColumn.Group">
            <summary>
            Group determines which validators are invoked when clicked.
            </summary>
            <value>
            <para>Those that match the value in this will be run.</para>
            <para>Group names are blank by default. When left blank, this runs all validators
            with the default group.</para>
            <para>You can also use the string "*" to run every validator on the page.</para>
            </value>
        </member>
        <member name="T:Jenzabar.Portal.Framework.Web.UI.Controls.MetaControls.CheckBoxListMetaControl">
            <summary>
            A meta-data aware version of the CheckBoxList control
            </summary>
            <remarks>
            Meta-data aware controls can be used for rendering preference and settings based
            on meta data attributes.
            </remarks>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.MetaControls.CheckBoxListMetaControl.#ctor(Jenzabar.Portal.Framework.Web.UI.Controls.MetaControls.Attributes.CheckBoxListMetaControlAttribute,System.Object)">
            <summary>
            Constructs a CheckBox meta control
            </summary>
            <param name="checkBoxListMetaControlAttribute">The attribute for the CheckBox meta control</param>
            <param name="key">The key used to retrieve dynamic values from a NameValueProvider, typically the object to which the attribute is attached</param>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.MetaControls.CheckBoxListMetaControl.CreateChildControls">
            <summary>
            Builds children controls for this control
            </summary>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.MetaControls.CheckBoxListMetaControl.MetaControlAttribute">
            <summary>
            Gets or sets the attribute for the meta control
            </summary>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.MetaControls.CheckBoxListMetaControl.Name">
            <summary>
            Gets the name of the meta control
            </summary>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.MetaControls.CheckBoxListMetaControl.Value">
            <summary>
            Gets the value of the meta control
            </summary>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.MetaControls.CheckBoxListMetaControl.Scope">
            <summary>
            Gets the scope of the meta control
            </summary>
        </member>
        <member name="T:Jenzabar.Portal.Framework.Web.UI.PortletStateChangedEventHandler">
            <summary>
            Event handler Delegate for the PortletStateChangedEventHandler
            </summary>
        </member>
        <member name="T:Jenzabar.Portal.Framework.Web.UI.PortletStateChangedEventArgs">
            <summary>
            An event that occurs when the state of a portlet has changed
            </summary>
            <remarks>
            This event is only fired when the state is changed via the use of the State property of the PortletBase class
            </remarks>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.PortletStateChangedEventArgs.#ctor(Jenzabar.Portal.Framework.Web.UI.PortletBase,Jenzabar.Portal.Framework.Web.UI.PortletState,Jenzabar.Portal.Framework.Web.UI.PortletState)">
            <summary>
            Constructs the event
            </summary>
            <param name="portlet">The portlet whose state was changed</param>
            <param name="oldState">The state of the portlet before the state was changed</param>
            <param name="newState">The state of the portlet after the state was changed</param>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.PortletStateChangedEventArgs.Portlet">
            <summary>
            The portlet whose state was changed
            </summary>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.PortletStateChangedEventArgs.OldState">
            <summary>
            The state of the portlet before the state was changed
            </summary>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.PortletStateChangedEventArgs.NewState">
            <summary>
            The state of the portlet after the state was changed
            </summary>
        </member>
        <member name="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.StringEditorForm">
            <summary>
            StringEditorForm supports the UITypeEditor <see cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.StringTypeEditor"/>
            which is associated with many string properties.
            </summary>
            <remarks>
            Provides a form with a textbox to edit a string. The textbox provides
            far more room to enter long strings than the Properties Editor's grid cell.
            </remarks>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.StringEditorForm.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.StringEditorForm.fMessageData">
            <summary>
            Storage for <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.StringEditorForm.MessageData"/>.
            </summary>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.StringEditorForm.fPropertyName">
            <summary>
            PropertyName is the name of the property we are editing.
            Set with Configure()
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.StringEditorForm.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.StringEditorForm.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.StringEditorForm.Configure(System.String,System.String)">
            <summary>
            Sets the string in PropertyValue and the name of the property in PropertyName.
            Call before ShowForm.
            </summary>
            <param name="pPropertyName">The name of the property. Will appear in the Form's title.</param>
            <param name="pPropertyValue">The string value to edit.</param>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.StringEditorForm.OKBtn_Click(System.Object,System.EventArgs)">
            <summary>
            OK Button Click event. Assigns the textbox value to MessageData.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.StringEditorForm.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.StringEditorForm.MessageData">
            <summary>
            MessageData is the string we are editing.
            Set with Configure()
            </summary>
        </member>
        <member name="T:Jenzabar.Portal.Framework.Web.UI.Controls.Secured.SPlaceHolder">
            <summary>
            A secured, operation aware version of the PlaceHolder control
            </summary>
            <remarks>
            Secured controls can be used to make interface elements aware of whether or not
            a user has access to a particular operation assigned to the control
            
            If the user does not have access to the operation(s) assigned to the control, the
            control can be set to render differently (or not at all) to prevent the user from
            using the control to perform the secured operation
            
            In addition, events normally raised by the control will not be raised if the control
            detects that the access check has failed. This prevents users from "spoofing" access
            by simulating a postback.
            </remarks>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Web.UI.Controls.Secured.SPlaceHolder.m_OperationNames">
            <summary>
            Member variable m_OperationNames
            </summary>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Web.UI.Controls.Secured.SPlaceHolder.m_IsSecured">
            <summary>
            Member variable m_IsSecured
            </summary>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Web.UI.Controls.Secured.SPlaceHolder.m_AccessCheckType">
            <summary>
            Member variable AccessCheckType
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Secured.SPlaceHolder.#ctor">
            <summary>
            Constructor for the SPlaceHolder class
            </summary> 
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Secured.SPlaceHolder.OnPreRender(System.EventArgs)">
            <summary>
            Overrides the OnPreRender event in base control
            </summary>
            <param name="e">EventArgs</param>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Secured.SPlaceHolder.SecureControl">
            <summary>
            Used internally to secure the control
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Secured.SPlaceHolder.Render(System.Web.UI.HtmlTextWriter)">
            <summary>
            Overrides the Render event in base control
            </summary>
            <param name="writer">HtmlTextWriter to render control with</param>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Secured.SPlaceHolder.AccessCheckFailedText">
            <summary>
            Gets or sets the text to display if an access check fails.
            </summary>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Secured.SPlaceHolder.AccessCheckFailedTextCSSClass">
            <summary>
            Gets or sets the style to apply to the text if displayed if the access check fails and the display type is 'Text'.
            </summary>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Secured.SPlaceHolder.OperationNames">
            <summary>
            Member Property - OperationNames
            </summary>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Secured.SPlaceHolder.IsSecured">
            <summary>
            Member Property - IsSecured
            </summary>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Secured.SPlaceHolder.AccessCheckType">
            <summary>
            Member Property - AccessCheckType
            </summary>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Secured.SPlaceHolder.DisplayType">
            <summary>
            Member Property - m_DisplayType
            </summary>
        </member>
        <member name="T:Jenzabar.Portal.Framework.Web.UI.Controls.Secured.SecuredControlManager">
            <summary>
            Contains methods to perform access checks for secured controls
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Secured.SecuredControlManager.AccessCheck(Jenzabar.Portal.Framework.Web.UI.Controls.Secured.ISecuredControl)">
            <summary>
            Performs all access checks required for a particular secured control
            </summary>
            <param name="control">The secured control to perform the access checks for</param>
            <returns>True if the access check(s) succeed, false otherwise</returns>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Secured.SecuredControlManager.AccessCheck(System.String[],Jenzabar.Portal.Framework.Web.UI.PortalPageBase,Jenzabar.Portal.Framework.Security.Authorization.AccessCheckType)">
            <summary>
            Performs an access check on custom operations for a particular page for the current user based on the thread identity
            </summary>
            <param name="operationNames">The names of the operations</param>
            <param name="page">The page whose class is decorated with the operations</param>
            <param name="accessCheckType">The type of access check to perform</param>
            <returns></returns>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Secured.SecuredControlManager.AccessCheck(System.String[],Jenzabar.Portal.Framework.Web.UI.PortletBase,Jenzabar.Portal.Framework.Security.Authorization.AccessCheckType)">
            <summary>
            Performs an access check on custom operations for a particular portlet for the current user based on the thread identity
            </summary>
            <param name="operationNames">The names of the operations</param>
            <param name="portlet">The portlet whose class is decorated with the operations</param>
            <param name="accessCheckType">The type of access check to perform</param>
            <returns>True if the user has access, false if not</returns>
            <remarks>
            This method can only be used to check custom portlet operations. Framework operations must be checked using AuthorizationManager directly.
            </remarks>
        </member>
        <member name="T:Jenzabar.Portal.Framework.Web.Common.FWConstants">
            <summary>
            common constants for framework.web project
            </summary>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Web.Common.FWConstants.ENGLISH_NAME">
            <summary>
            used for internationalization in metacontrols
            </summary>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Web.Common.FWConstants.ENGLISH_LANGUAGE">
            <summary>
            default language
            </summary>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Web.Common.FWConstants.ID_TO_CONFIGURE">
            <summary>
            for customization controls
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.Common.FWConstants.#ctor">
            <summary>
            Constructor for Static Constant FWConstants
            </summary>
        </member>
        <member name="T:Jenzabar.Portal.Framework.Web.UI.Controls.MetaControls.MetaControlUtilities">
            <summary>
            Utilities useful for meta controls
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.MetaControls.MetaControlUtilities.GetPortletMetaControlDefaultValues(Jenzabar.Portal.Framework.Web.UI.PortletBase,Jenzabar.Portal.Framework.NameValueType,System.String)">
            <summary>
            Obsolete; Gets the default values for a portlet meta control
            </summary>
            <remarks>
            The default values for a portlet meta control are used as the default values for the preference or setting
            when accessed through the PortletPreferenceCollection, PortletSettingCollection, ApplicationPreferenceCollection,
            or ApplicationSettingCollection classes.
            </remarks>
            <param name="portletBase">The portlet that is decorated with the meta control attributes</param>
            <param name="nameValueType">The type of name value data</param>
            <param name="name">The name of the name value data</param>
            <returns>An array of name value data if found, an empty array otherwise</returns>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.MetaControls.MetaControlUtilities.GetPortletMetaControlDefaultValues(Jenzabar.Portal.Framework.Portlet,Jenzabar.Portal.Framework.NameValueType,System.String)">
            <summary>
            Obsolete; Gets the default values for a portlet meta control
            </summary>
            <remarks>
            The default values for a portlet meta control are used as the default values for the preference or setting
            when accessed through the PortletPreferenceCollection, PortletSettingCollection, ApplicationPreferenceCollection,
            or ApplicationSettingCollection classes.
            </remarks>
            <param name="portlet">The portlet that is decorated with the meta control attributes</param>
            <param name="nameValueType">The type of name value data</param>
            <param name="name">The name of the name value data</param>
            <returns>An array of name value data if found, an empty array otherwise</returns>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.MetaControls.MetaControlUtilities.GetMetaControlAttributeDefaultValue(Jenzabar.Portal.Framework.Web.UI.Controls.MetaControls.Attributes.MetaControlAttributeBase[],Jenzabar.Portal.Framework.NameValueType,System.String,System.Object)">
            <summary>
            Used internally to get the default value(s) from a meta control attribute
            </summary>
            <param name="metaControlAttributes">An array of attributes to search through</param>
            <param name="nameValueType">The type to filter by</param>
            <param name="name">The name to filter by</param>
            <param name="key">The key with which to retrive default values for this control</param>
            <returns>An array of name value data if found, an empty array otherwise</returns>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.MetaControls.MetaControlUtilities.GetPortletMetaControlAttributes(Jenzabar.Portal.Framework.Web.UI.PortletBase)">
            <summary>
            Obsolete; Gets all the meta control attributes applied to a portlet
            </summary>
            <param name="portletBase">The portlet to enumerate the meta controls attributes on</param>
            <returns>An array of meta controls attributes if found, an empty array otherwise</returns>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.MetaControls.MetaControlUtilities.GetPortletMetaControlAttributes(Jenzabar.Portal.Framework.PortletDisplay)">
            <summary>
            Gets all the meta control attributes applied to a portlet
            </summary>
            <param name="portletDisplay">The portlet occurance to enumerate the meta controls attributes on</param>
            <returns>An array of meta controls attributes if found, an empty array otherwise</returns>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.MetaControls.MetaControlUtilities.GetPortletMetaControlAttributes(Jenzabar.Portal.Framework.Portlet)">
            <summary>
            Gets all the meta control attributes applied to a portlet
            </summary>
            <param name="portlet">The portlet  to enumerate the meta controls attributes on</param>
            <returns>An array of meta controls attributes if found, an empty array otherwise</returns>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.MetaControls.MetaControlUtilities.GetMetaControlAttributes(System.Type)">
            <summary>
            Gets all the meta control attributes applied to given type
            </summary>
            <param name="t">The type</param>
            <returns>An array of meta controls attributes if found, an empty array otherwise</returns>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.MetaControls.MetaControlUtilities.GetPortletMetaControls(Jenzabar.Portal.Framework.Web.UI.PortletBase,Jenzabar.Portal.Framework.NameValueType)">
            <summary>
            Obsolete; Gets all the meta controls applied to a portlet
            </summary>
            <param name="portletBase">The portlet to enumerate the meta controls on</param>
            <param name="nameValueType">The NameValue type to filter by</param>
            <returns>An array of meta controls if found, an empty array otherwise</returns>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.MetaControls.MetaControlUtilities.GetPortletMetaControls(Jenzabar.Portal.Framework.PortletDisplay,Jenzabar.Portal.Framework.NameValueType)">
            <summary>
            Gets all the meta controls applied to a portlet
            </summary>
            <param name="portletDisplay">The portlet to enumerate the meta controls on</param>
            <param name="nameValueType">The NameValue type to filter by</param>
            <returns>An array of meta controls if found, an empty array otherwise</returns>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.MetaControls.MetaControlUtilities.GetPortletPreferenceMetaControls(Jenzabar.Portal.Framework.PortletDisplay)">
            <summary>
            Retrieves a portlet's preferences
            </summary>
            <param name="portletDisplay">The portlet whose preferences are being retrieved</param>
            <returns>The preferences for the portlet</returns>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.MetaControls.MetaControlUtilities.GetPortletPreferenceMetaControls(Jenzabar.Portal.Framework.Web.UI.PortletBase)">
            <summary>
            Obsolete; Retrieves a portlet's preferences
            </summary>
            <param name="portletBase">The portlet base whose preferences are being retrieved</param>
            <returns>The preferences for the portlet</returns>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.MetaControls.MetaControlUtilities.PopulatePortletPreferenceMetaControls(Jenzabar.Portal.Framework.Web.UI.Controls.MetaControls.MetaControlBase[],Jenzabar.Portal.Framework.PortletDisplay,Jenzabar.Portal.Framework.PortalUser)">
            <summary>
            Populates a portlet's preference meta controls
            </summary>
            <param name="portletPreferenceMetaControls">The meta controls to be populated</param>
            <param name="portletDisplay">The portlet base whose preference meta controls are being populated</param>
            <param name="user">The user associated with the preferences</param>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.MetaControls.MetaControlUtilities.PopulatePortletPreferenceMetaControls(Jenzabar.Portal.Framework.Web.UI.Controls.MetaControls.MetaControlBase[],Jenzabar.Portal.Framework.Web.UI.PortletBase,Jenzabar.Portal.Framework.PortalUser)">
            <summary>
            Obsolete; Populates a portlet's preference meta controls
            </summary>
            <param name="portletPreferenceMetaControls">The meta controls to be populated</param>
            <param name="portletBase">The portlet base whose preference meta controls are being populated</param>
            <param name="user">The user associated with the preferences</param>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.MetaControls.MetaControlUtilities.GetPortletSettingMetaControls(Jenzabar.Portal.Framework.Web.UI.PortletBase)">
            <summary>
            Obsolete; Retrieves a portlet's settings
            </summary>
            <param name="portletBase">The portlet base whose settings are being retrieved</param>
            <returns>The settings for the portlet</returns>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.MetaControls.MetaControlUtilities.GetPortletSettingMetaControls(Jenzabar.Portal.Framework.PortletDisplay)">
            <summary>
            Retrieves a portlet's settings
            </summary>
            <param name="portletDisplay">The portlet base whose settings are being retrieved</param>
            <returns>The settings for the portlet</returns>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.MetaControls.MetaControlUtilities.PopulatePortletSettingMetaControls(Jenzabar.Portal.Framework.Web.UI.Controls.MetaControls.MetaControlBase[],Jenzabar.Portal.Framework.PortletDisplay)">
            <summary>
            Populates a portlet's setting meta controls
            </summary>
            <param name="portletSettingMetaControls">The meta controls to be populated</param>
            <param name="portletDisplay">The portlet base whose setting meta controls are being populated</param>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.MetaControls.MetaControlUtilities.PopulatePortletSettingMetaControls(Jenzabar.Portal.Framework.Web.UI.Controls.MetaControls.MetaControlBase[],Jenzabar.Portal.Framework.Web.UI.PortletBase)">
            <summary>
            Obsolete; Populates a portlet's setting meta controls
            </summary>
            <param name="portletSettingMetaControls">The meta controls to be populated</param>
            <param name="portletBase">The portlet base whose setting meta controls are being populated</param>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.MetaControls.MetaControlUtilities.PopulateSiteSettingMetaControls(Jenzabar.Portal.Framework.Web.UI.Controls.MetaControls.MetaControlBase[])">
            <summary>
            Populates a portlet's setting meta controls
            </summary>
            <param name="siteSettingMetaControls">The meta controls to be populated</param>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.MetaControls.MetaControlUtilities.GetMetaControls(System.Object,Jenzabar.Portal.Framework.NameValueType)">
            <summary>
            Gets all the meta controls applied to a given object
            </summary>
            <param name="nameValueType">The NameValue type to filter by</param>
            <param name="key">object for which to get parans for; used as key in static hashtable</param>
            <returns>An array of meta controls if found, an empty array otherwise</returns>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.MetaControls.MetaControlUtilities.GetObjectMetaControlDefaultValues(System.Object,Jenzabar.Portal.Framework.NameValueType,System.String)">
            <summary>
            Return metacontrol default values for given object
            </summary>
            <param name="obj">object</param>
            <param name="nameValueType">NameValueType type</param>
            <param name="name">attribute name</param>
            <returns></returns>
        </member>
        <member name="T:Jenzabar.Portal.Framework.Web.UI.Controls.Secured.SListBox">
            <summary>
            A secured, operation aware version of the ListBox control
            </summary>
            <remarks>
            Secured controls can be used to make interface elements aware of whether or not
            a user has access to a particular operation assigned to the control
            
            If the user does not have access to the operation(s) assigned to the control, the
            control can be set to render differently (or not at all) to prevent the user from
            using the control to perform the secured operation
            
            In addition, events normally raised by the control will not be raised if the control
            detects that the access check has failed. This prevents users from "spoofing" access
            by simulating a postback.
            </remarks>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Web.UI.Controls.Secured.SListBox.m_OperationNames">
            <summary>
            Member variable m_OperationNames
            </summary>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Web.UI.Controls.Secured.SListBox.m_IsSecured">
            <summary>
            Member variable m_IsSecured
            </summary>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Web.UI.Controls.Secured.SListBox.m_AccessCheckType">
            <summary>
            Member variable AccessCheckType
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Secured.SListBox.#ctor">
            <summary>
            Constructor for the SListBox class
            </summary> 
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Secured.SListBox.OnSelectedIndexChanged(System.EventArgs)">
            <summary>
            Overrides the OnSelectedIndexChanged event in base control
            </summary>
            <param name="e">EventArgs</param>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Secured.SListBox.OnPreRender(System.EventArgs)">
            <summary>
            Overrides the OnPreRender event in base control
            </summary>
            <param name="e">EventArgs</param>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Secured.SListBox.SecureControl">
            <summary>
            Used internally to secure the control
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Secured.SListBox.Render(System.Web.UI.HtmlTextWriter)">
            <summary>
            Overrides the Render event in base control
            </summary>
            <param name="writer">HtmlTextWriter to render control with</param>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Secured.SListBox.AccessCheckFailedText">
            <summary>
            Gets or sets the text to display if an access check fails.
            </summary>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Secured.SListBox.AccessCheckFailedTextCSSClass">
            <summary>
            Gets or sets the style to apply to the text if displayed if the access check fails and the display type is 'Text'.
            </summary>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Secured.SListBox.OperationNames">
            <summary>
            Member Property - OperationNames
            </summary>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Secured.SListBox.IsSecured">
            <summary>
            Member Property - IsSecured
            </summary>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Secured.SListBox.AccessCheckType">
            <summary>
            Member Property - AccessCheckType
            </summary>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Secured.SListBox.DisplayType">
            <summary>
            Member Property - m_DisplayType
            </summary>
        </member>
        <member name="T:WebUtils.ViewStateViewer">
            <summary>
            Used for debugging view state problems
            To use:
            Add code to Page.LoadViewState
            	WebUtils.ViewStateViewer  oVSV = new WebUtils.ViewStateViewer();
            	oVSV.GetPageControlsViewState();
            </summary>
        </member>
        <member name="M:WebUtils.ViewStateViewer.#ctor">
            <summary>
            Constructor for ViewStateViewer object
            </summary>
        </member>
        <member name="M:WebUtils.ViewStateViewer.GetPageControlsViewState">
            <summary>
            Loads the Page View State into an HTML Generic Control
            </summary>
        </member>
        <member name="T:Jenzabar.Portal.Framework.Web.UI.Controls.Secured.SRadioButton">
            <summary>
            A secured, operation aware version of the RadioButton control
            </summary>
            <remarks>
            Secured controls can be used to make interface elements aware of whether or not
            a user has access to a particular operation assigned to the control
            
            If the user does not have access to the operation(s) assigned to the control, the
            control can be set to render differently (or not at all) to prevent the user from
            using the control to perform the secured operation
            
            In addition, events normally raised by the control will not be raised if the control
            detects that the access check has failed. This prevents users from "spoofing" access
            by simulating a postback.
            </remarks>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Web.UI.Controls.Secured.SRadioButton.m_OperationNames">
            <summary>
            Member variable m_OperationNames
            </summary>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Web.UI.Controls.Secured.SRadioButton.m_IsSecured">
            <summary>
            Member variable m_IsSecured
            </summary>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Web.UI.Controls.Secured.SRadioButton.m_AccessCheckType">
            <summary>
            Member variable AccessCheckType
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Secured.SRadioButton.#ctor">
            <summary>
            Constructor for the SRadioButton class
            </summary> 
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Secured.SRadioButton.OnCheckedChanged(System.EventArgs)">
            <summary>
            Overrides the OnCheckedChanged event in base control
            </summary>
            <param name="e">EventArgs</param>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Secured.SRadioButton.OnPreRender(System.EventArgs)">
            <summary>
            Overrides the OnPreRender event in base control
            </summary>
            <param name="e">EventArgs</param>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Secured.SRadioButton.SecureControl">
            <summary>
            Used internally to secure the control
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Secured.SRadioButton.Render(System.Web.UI.HtmlTextWriter)">
            <summary>
            Overrides the Render event in base control
            </summary>
            <param name="writer">HtmlTextWriter to render control with</param>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Secured.SRadioButton.AccessCheckFailedText">
            <summary>
            Gets or sets the text to display if an access check fails.
            </summary>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Secured.SRadioButton.AccessCheckFailedTextCSSClass">
            <summary>
            Gets or sets the style to apply to the text if displayed if the access check fails and the display type is 'Text'.
            </summary>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Secured.SRadioButton.OperationNames">
            <summary>
            Member Property - OperationNames
            </summary>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Secured.SRadioButton.IsSecured">
            <summary>
            Member Property - IsSecured
            </summary>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Secured.SRadioButton.AccessCheckType">
            <summary>
            Member Property - AccessCheckType
            </summary>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Secured.SRadioButton.DisplayType">
            <summary>
            Member Property - m_DisplayType
            </summary>
        </member>
        <member name="T:Jenzabar.Portal.Framework.Web.UI.Controls.MetaControls.TextAreaMetaControl">
            <summary>
            A meta-data aware version of the TextBox control used as a Text Area
            </summary>
            <remarks>
            Meta-data aware controls can be used for rendering preference and settings based
            on meta data attributes.
            </remarks>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.MetaControls.TextAreaMetaControl.#ctor(Jenzabar.Portal.Framework.Web.UI.Controls.MetaControls.Attributes.TextAreaMetaControlAttribute,System.Object)">
            <summary>
            Constructs a TextArea meta control
            </summary>
            <param name="textAreaMetaControlAttribute">The attribute for the TextArea meta control</param>
            <param name="key">The key used to retrieve dynamic values from a NameValueProvider, typically the object to which the attribute is attached</param>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.MetaControls.TextAreaMetaControl.CreateChildControls">
            <summary>
            Builds children controls for this control
            </summary>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.MetaControls.TextAreaMetaControl.MetaControlAttribute">
            <summary>
            Gets or sets the attribute for the meta control
            </summary>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.MetaControls.TextAreaMetaControl.Name">
            <summary>
            Gets the name of the meta control
            </summary>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.MetaControls.TextAreaMetaControl.Value">
            <summary>
            Gets the value of the meta control
            </summary>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.MetaControls.TextAreaMetaControl.Scope">
            <summary>
            Gets the scope of the meta control
            </summary>
        </member>
        <member name="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.RegisterScriptsClasses.RegisterScripts">
            <summary>
            RegisterScripts is a wrapper around Microsoft's Page.RegisterClientScriptBlock
            and Page.RegisterStartupScript methods that allows ordering, grouping under one
            &lt;script&gt; tag and avoids a bug where the order is lost after 10 scripts are added.
            </summary>
            <remarks>
            <para>RegisterScripts is a collection of <see cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.RegisterScriptsClasses.RegisteredScript"/> 
            objects. Users add to the collection by calling 
            <see cref="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.RegisterScriptsClasses.RegisterScripts.IsRegistered(System.String)"/> to see if the item exists
            and <see cref="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.RegisterScriptsClasses.RegisterScripts.Register(System.String,System.String,System.Boolean,System.Int32)"/> to add.</para>
            <para>It contains a number of static methods to operate on two instances of this class:
            for ClientScriptBlocks and StartupScriptBlocks.</para>
            <para>Most of the time, the user should call the static methods that parallel those
            on the System.Web.UI.Page class:
            <see cref="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.RegisterScriptsClasses.RegisterScripts.IsClientScriptBlockRegistered(System.Web.UI.Page,System.String)"/>, 
            <see cref="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.RegisterScriptsClasses.RegisterScripts.IsStartupScriptRegistered(System.Web.UI.Page,System.String)"/>
            <see cref="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.RegisterScriptsClasses.RegisterScripts.RegisterClientScriptBlock(System.Web.UI.Page,System.String,System.String)"/>, and
            <see cref="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.RegisterScriptsClasses.RegisterScripts.RegisterStartupScript(System.Web.UI.Page,System.String,System.String)"/>.</para>
            </remarks>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.RegisterScriptsClasses.RegisterScripts.fEnabled">
            <summary>
            Storage for <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.RegisterScriptsClasses.RegisterScripts.Enabled"/>.
            </summary>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.RegisterScriptsClasses.RegisterScripts.fSystemName">
            <summary>
            Storage for <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.RegisterScriptsClasses.RegisterScripts.SystemName"/>.
            </summary>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.RegisterScriptsClasses.RegisterScripts.fScriptSeparator">
            <summary>
            Storage for <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.RegisterScriptsClasses.RegisterScripts.ScriptSeparator"/>.
            </summary>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.RegisterScriptsClasses.RegisterScripts.fStartScriptTag">
            <summary>
            Storage for <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.RegisterScriptsClasses.RegisterScripts.StartScriptTag"/>.
            </summary>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.RegisterScriptsClasses.RegisterScripts.fEndScriptTag">
            <summary>
            Storage for <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.RegisterScriptsClasses.RegisterScripts.EndScriptTag"/>.
            </summary>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.RegisterScriptsClasses.RegisterScripts.fDefaultGroup">
            <summary>
            Storage for <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.RegisterScriptsClasses.RegisterScripts.DefaultGroup"/>.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.RegisterScriptsClasses.RegisterScripts.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.RegisterScriptsClasses.RegisterScripts.fAutoSortArrayList">
            <summary>
            Storage for <see cref="F:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.RegisterScriptsClasses.RegisterScripts.fAutoSortArrayList"/>.
            </summary>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.RegisterScriptsClasses.RegisterScripts.fNextOrder">
            <summary>
            fNextOrder provides a sequential ordering of RegisteredScripts. Each time
            a RegisteredScript instance is added to the list, increment this and use its
            value in the RegisteredScript.Order property.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.RegisterScriptsClasses.RegisterScripts.IsRegistered(System.String)">
            <summary>
            IsRegistered tests the Key passed in to determine if that key is already registered.
            If not, you can call Register.
            </summary>
            <param name="pKey">The key name. The user invents unique key names for each script.</param>
            <returns>True when already registered; false when not. Call Register when it returns false.</returns>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.RegisterScriptsClasses.RegisterScripts.Register(System.String,System.String,System.Boolean,System.Int32)">
            <summary>
            Adds the Script with the specified Key into the collection.
            </summary>
            <remarks>
            Any script blocks with the same pKey parameter values are considered duplicates.
            Call IsRegistered first and call this only when that method returns false.
            to avoid unnecessarily running code that creates the scripts.
            </remarks>
            <param name="pKey">The Key name. The user invents unique key names for each script.</param>
            <param name="pScript">The script. If it contains the &lt;script&gt; tags, set AddScriptTags to false.</param>
            <param name="pAddScriptTags">When true, the user wants script tags to be added automatically.</param>
            <param name="pGroup">Provide additional ordering. The higher then number, the lower the script appears on the page.
            The default group is 0.</param>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.RegisterScriptsClasses.RegisterScripts.Add(System.Object)">
            <summary>
            Add a RegisterScript object to the collection.
            </summary>
            <remarks>
            You should call <see cref="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.RegisterScriptsClasses.RegisterScripts.Register(System.String,System.String,System.Boolean,System.Int32)"/>
            to add to the collection.
            </remarks>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.RegisterScriptsClasses.RegisterScripts.WriteScripts(System.Text.StringBuilder)">
            <summary>
            WriteScripts asks this instance to transfer its scripts into pScriptBlock
            in the order they were added. No formatting is added except a carriage return
            if the last character of a script is not one. All formatting comes from the user.
            </summary>
            <remarks>
            This is called as the page finishes its OnPreRender method to create
            a single string that is passed to Page.RegisterClientScriptBlock
            or Page.RegisterStartupScript by the caller. The data is properly
            ordered and contains the any &lt;script&gt; tags around those that didn't supply it.
            </remarks>
            <param name="pScriptBlock">Append the scripts to this stringbuilder.</param>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.RegisterScriptsClasses.RegisterScripts.GetClientScripts(System.Web.UI.Page)">
            <summary>
            GetClientScripts gets the instance of this class for ClientScriptBlocks.
            </summary>
            <remarks>
            It keeps the collection in HttpContext.Current.Items["[SystemName]_ClientScripts"]
            When first used, the collection is created.
            </remarks>
            <param name="pPage">The current Page. Used to hookup an event handler.</param>
            <returns>The RegisterScripts instance that stores the ClientScriptBlocks.</returns>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.RegisterScriptsClasses.RegisterScripts.GetStartupScripts(System.Web.UI.Page)">
            <summary>
            GetStartupScripts gets the instance of this class for StartupScriptBlocks.
            </summary>
            <remarks>
            It keeps the collection in HttpContext.Current.Items["[SystemName]_StartupScripts"]
            When first used, the collection is created.
            </remarks>
            <param name="pPage">The current Page. Used to hookup an event handler.</param>
            <returns>The RegisterScripts instance that stores the StartupScriptBlocks.</returns>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.RegisterScriptsClasses.RegisterScripts.LinkToPage(System.Web.UI.Page)">
            <summary>
            LinkToPage hooks up the TransferToPage event handler to the last control
            on the page's Control list's OnPreRender event. This assures us that TransferToPage
            is run during OnPreRender but after all controls WITHIN the &lt;form&gt; have run.
            </summary>
            <remarks>
            WARNING: This method has been replaced for VAM to simply return. VAM
            calls the TransferToPage method from the <see cref="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.VAMPage.PagePreRegister(System.Object,System.EventArgs)">VAMPage.PagePreRegister</see> 
            method.
            </remarks>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.RegisterScriptsClasses.RegisterScripts.FindLastControl(System.Web.UI.Control,System.Boolean)">
            <summary>
            This recursive method finds the last control on the page that isn't an HtmlForm.
            </summary>
            <remarks>
            WARNING: This method is not used in VAM's implementation.
            </remarks>
            <returns></returns>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.RegisterScriptsClasses.RegisterScripts.PrepareControl(System.Web.UI.Control)">
            <summary>
            PrepareControl is designed for custom controls to call before using the Register methods.
            WARNING: This method is not used in VAM's implementation.
            </summary>
            <param name="pControl"></param>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.RegisterScriptsClasses.RegisterScripts.TransferToPage(System.Object,System.EventArgs)">
            <summary>
            TransferToPage is called to write the scripts to the page using
            the Page.RegisterClientScriptBlock and Page.RegisterStartupScript methods.
            </summary>
            <remarks>
            <para>These functions will get ALL scripts in a single call so they maintain their order.</para>
            </remarks>
            <param name="pSender">Ignored. Can pass null.</param>
            <param name="pE">Ignored. Can pass null.</param>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.RegisterScriptsClasses.RegisterScripts.AfterServerTransfer">
            <summary>
            AfterServerTransfer should be called in the Page_Init method of a page that is called
            from Server.Transfer. 
            </summary>
            <remarks>
            Server.Transfer doesn't clean up elements we've added to 
            HttpContext.Current.Items on the page that calls Server.Transfer. This resets the scripting
            for new information of this page.
            </remarks>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.RegisterScriptsClasses.RegisterScripts.IsClientScriptBlockRegistered(System.Web.UI.Page,System.String)">
            <summary>
            IsClientScriptBlockRegistered is used to check that a script with the key name
            specified is not already registered in the ClientScriptBlocks collection. 
            </summary>
            <remarks>
            Returns true when it's already registered. Only use 
            <see cref="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.RegisterScriptsClasses.RegisterScripts.RegisterClientScriptBlock(System.Web.UI.Page,System.String,System.String)"/>
            after this returns false.
            </remarks>
            <param name="pPage">The page instance.</param>
            <param name="pKey">The key to check.</param>
            <returns>True when the key is already present. False when it is not. 
            Only call RegisterClientScriptBlock when this returns false.</returns>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.RegisterScriptsClasses.RegisterScripts.RegisterClientScriptBlock(System.Web.UI.Page,System.String,System.String)">
            <summary>
            RegisterClientScriptBlock adds a script to the ClientScriptBlock collection.
            </summary>
            <remarks>
            <para>The script parameter can have any thing valid for an HTML page.
            It will be added at the top of the &lt;form&gt; block.</para>
            <para>Any script blocks with the same Key values are considered duplicates.
            Call <see cref="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.RegisterScriptsClasses.RegisterScripts.IsClientScriptBlockRegistered(System.Web.UI.Page,System.String)"/> 
            first and call this only when that method returns false
            to avoid unnecessarily running code that creates the scripts.</para>
            </remarks>
            <param name="pPage">The page instance.</param>
            <param name="pKey">The key to uniquely identify this script.</param>
            <param name="pScript">The script.</param>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.RegisterScriptsClasses.RegisterScripts.RegisterClientScriptBlock(System.Web.UI.Page,System.String,System.String,System.Boolean)">
            <summary>
            RegisterClientScriptBlock adds a script to the ClientScriptBlock collection
            with an option to enclose the script in &lt;script&gt; tags.
            </summary>
            <remarks>
            <para>The script parameter can have any thing valid for an HTML page.
            It will be added at the top of the &lt;form&gt; block.</para>
            <para>Any script blocks with the same Key values are considered duplicates.
            Call <see cref="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.RegisterScriptsClasses.RegisterScripts.IsClientScriptBlockRegistered(System.Web.UI.Page,System.String)"/> 
            first and call this only when that method returns false
            to avoid unnecessarily running code that creates the scripts.</para>
            </remarks>
            <param name="pPage">The page instance.</param>
            <param name="pKey">The key to uniquely identify this script.</param>
            <param name="pScript">The script.</param>
            <param name="pAddScriptTags">When true, add &lt;script&gt; tags automatically.</param>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.RegisterScriptsClasses.RegisterScripts.RegisterClientScriptBlock(System.Web.UI.Page,System.String,System.String,System.Boolean,System.Int32)">
            <summary>
            RegisterClientScriptBlock adds a script to the ClientScriptBlock collection
            with an option to enclose the script in &lt;script&gt; tags and
            an option to identify the order on the page.
            </summary>
            <remarks>
            <para>The script parameter can have anything valid for an HTML page.
            It will be added at the top of the &lt;form&gt; block.</para>
            <para>Any script blocks with the same Key values are considered duplicates.
            Call <see cref="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.RegisterScriptsClasses.RegisterScripts.IsClientScriptBlockRegistered(System.Web.UI.Page,System.String)"/> 
            first and call this only when that method returns false
            to avoid unnecessarily running code that creates the scripts.</para>
            </remarks>
            <param name="pPage">The page instance.</param>
            <param name="pKey">The key to uniquely identify this script.</param>
            <param name="pScript">The script.</param>
            <param name="pAddScriptTags">When true, add &lt;script&gt; tags automatically.</param>
            <param name="pGroup">The group number to further order items. All items within a group
            are ordered by entry order.</param>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.RegisterScriptsClasses.RegisterScripts.IsStartupScriptRegistered(System.Web.UI.Page,System.String)">
            <summary>
            IsStartupScriptRegistered is used to check that a script with the key name
            specified is not already registered in the StartupScriptBlocks collection. 
            </summary>
            <remarks>
            Returns true when it's already registered. Only use 
            <see cref="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.RegisterScriptsClasses.RegisterScripts.RegisterStartupScript(System.Web.UI.Page,System.String,System.String)"/>
            after this returns false.
            </remarks>
            <param name="pPage">The page instance.</param>
            <param name="pKey">The key to check.</param>
            <returns>True when the key is already present. False when it is not. 
            Only call RegisterStartupScript when this returns false.</returns>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.RegisterScriptsClasses.RegisterScripts.RegisterStartupScript(System.Web.UI.Page,System.String,System.String)">
            <summary>
            RegisterStartupScript adds a script to the StartupScriptBlock collection.
            </summary>
            <remarks>
            <para>The script parameter can have any thing valid for an HTML page.
            It will be added at the bottom of the &lt;form&gt; block.</para>
            <para>Any script blocks with the same Key values are considered duplicates.
            Call <see cref="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.RegisterScriptsClasses.RegisterScripts.IsStartupScriptRegistered(System.Web.UI.Page,System.String)"/> 
            first and call this only when that method returns false
            to avoid unnecessarily running code that creates the scripts.</para>
            </remarks>
            <param name="pPage">The page instance.</param>
            <param name="pKey">The key to uniquely identify this script.</param>
            <param name="pScript">The script.</param>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.RegisterScriptsClasses.RegisterScripts.RegisterStartupScript(System.Web.UI.Page,System.String,System.String,System.Boolean)">
            <summary>
            RegisterStartupScript adds a script to the StartupScriptBlock collection
            with an option to enclose the script in &lt;script&gt; tags.
            </summary>
            <remarks>
            <para>The script parameter can have any thing valid for an HTML page.
            It will be added at the bottom of the &lt;form&gt; block.</para>
            <para>Any script blocks with the same Key values are considered duplicates.
            Call <see cref="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.RegisterScriptsClasses.RegisterScripts.IsStartupScriptRegistered(System.Web.UI.Page,System.String)"/> 
            first and call this only when that method returns false
            to avoid unnecessarily running code that creates the scripts.</para>
            </remarks>
            <param name="pPage">The page instance.</param>
            <param name="pKey">The key to uniquely identify this script.</param>
            <param name="pScript">The script.</param>
            <param name="pAddScriptTags">When true, add &lt;script&gt; tags automatically.</param>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.RegisterScriptsClasses.RegisterScripts.RegisterStartupScript(System.Web.UI.Page,System.String,System.String,System.Boolean,System.Int32)">
            <summary>
            RegisterStartupScript adds a script to the StartupScriptBlock collection
            with an option to enclose the script in &lt;script&gt; tags and
            an option to identify the order on the page.
            </summary>
            <remarks>
            <para>The script parameter can have any thing valid for an HTML page.
            It will be added at the bottom of the &lt;form&gt; block.</para>
            <para>Any script blocks with the same Key values are considered duplicates.
            Call <see cref="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.RegisterScriptsClasses.RegisterScripts.IsStartupScriptRegistered(System.Web.UI.Page,System.String)"/> 
            first and call this only when that method returns false
            to avoid unnecessarily running code that creates the scripts.</para>
            </remarks>
            <param name="pPage">The page instance.</param>
            <param name="pKey">The key to uniquely identify this script.</param>
            <param name="pScript">The script.</param>
            <param name="pAddScriptTags">When true, add &lt;script&gt; tags automatically.</param>
            <param name="pGroup">The group number to further order items. All items within a group
            are ordered by entry order.</param>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.RegisterScriptsClasses.RegisterScripts.Enabled">
            <summary>
            Enabled determines if scripts are collected or transferred to the page immediately.
            </summary>
            <value>
            <para>When true, they are collected until the page has prerendered its controls.</para>
            <para>When false, they are transferred to the page right away.</para>
            <para>This is kind of an on/off switch so you can write your code one way
            and turn off the added layer as needed.</para>
            <para>Since it is static, it affects all threads running this object. So don't turn it on/off
            for each page being generated. Only set it during Application_Start.</para>
            <para>It defaults to true.</para>
            </value>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.RegisterScriptsClasses.RegisterScripts.SystemName">
            <summary>
            HttpContext.Current.Items holds several elements associated with the page.
            The strings for these must be unique. SystemName defines a prefix to the names
            we use.
            </summary>
            <value>
            <para>It can generally remain unchanged unless you want to group information
            separately between different systems. (Such as two separate control products that
            don't prefer to intermix their code.)</para>
            <para>VAM sets this to "PBDC.VAM"</para>
            </value>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.RegisterScriptsClasses.RegisterScripts.ScriptSeparator">
            <summary>
            ScriptSeparator determines the text written after each script to provide additional formatting.
            </summary>
            <value>
            It defaults to a carriage return.
            </value>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.RegisterScriptsClasses.RegisterScripts.StartScriptTag">
            <summary>
            When using the AddScriptTag property on RegisteredScript, this string is
            written to the page for the start tag.
            </summary>
            <value>
            Defaults to "&lt;script language='JavaScript'&gt;\n&lt;!--\n"
            </value>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.RegisterScriptsClasses.RegisterScripts.EndScriptTag">
            <summary>
            When using the AddScriptTag property on RegisteredScript, this string is
            written to the page for the end tag.
            </summary>
            <value>
            Defaults to "// -->\n&lt;/script&gt;\n".
            </value>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.RegisterScriptsClasses.RegisterScripts.DefaultGroup">
            <summary>
            DefaultGroup is the value for the default group, which is used when the user doesn't
            supply a group.
            </summary>
            <value>
            Defaults to 0.
            </value>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.RegisterScriptsClasses.RegisterScripts.Keys">
            <summary>
            Keys maintains the same list of RegisteredScripts as the RegisterScripts itself
            but they are kept in sorted order by the Key field. Used for lookups on IsRegistered.
            </summary>
        </member>
        <member name="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.RegisterScriptsClasses.RegisteredScript">
            <summary>
            RegisteredScript holds one registered script. It is created
            and managed within the <see cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.RegisterScriptsClasses.RegisterScripts"/>
            collection.
            </summary>
            <remarks>
            <para>It defines two pieces of information:</para>
            <para>Key - a name which uniquely identifies this script. Users should not attempt to add
            multiple scripts with the same key.</para>
            <para>Script - a string containing the entire block to be written to the page. If needed,
            the user should include the &lt;script&gt; &lt;/script&gt; tags.</para>
            </remarks>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.RegisterScriptsClasses.RegisteredScript.fKey">
            <summary>
            Storage for Key.
            </summary>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.RegisterScriptsClasses.RegisteredScript.fScript">
            <summary>
            Storage for Script.
            </summary>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.RegisterScriptsClasses.RegisteredScript.fAddScriptTags">
            <summary>
            Storage for AddScriptTags.
            </summary>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.RegisterScriptsClasses.RegisteredScript.fGroup">
            <summary>
            Storage for Group.
            </summary>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.RegisterScriptsClasses.RegisteredScript.fOrder">
            <summary>
            Storage for Order.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.RegisterScriptsClasses.RegisteredScript.#ctor(System.String,System.String,System.Boolean,System.Int32,System.Int32)">
            <summary>
            Constructor. Sets all properties.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.RegisterScriptsClasses.RegisteredScript.#ctor(System.String)">
            <summary>
            Constructor. Used for finding a key.
            </summary>
            <param name="pKey"></param>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.RegisterScriptsClasses.RegisteredScript.CompareTo(System.Object)">
            <summary>
            Implements the IComparable interface. Compares the Key property (case insensitive).
            </summary>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.RegisterScriptsClasses.RegisteredScript.Key">
            <summary>
            A name which uniquely identifies this script. Users should not attempt to add
            multiple scripts with the same key.
            </summary>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.RegisterScriptsClasses.RegisteredScript.Script">
            <summary>
            A string containing the entire block to be written to the page. If needed,
            the user should include the &lt;script&gt; &lt;/script&gt; tags.
            </summary>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.RegisterScriptsClasses.RegisteredScript.AddScriptTags">
            <summary>
            AddScriptTags determines if the script you've passed lacks script tags and needs
            the system to add them. They will be added surrounding each sequence
            of RegisteredScript objects for which this is true.
            </summary>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.RegisterScriptsClasses.RegisteredScript.Group">
            <summary>
            Group provides the ability to group related scripts so one group
            can appear above or below another. Within a group, items are sorted
            by the Order property which is the order of entry by default.
            The lower the value, the higher it appears on the page. Zero is the default group
            and is usually considered the top. However, negative values are legal.
            </summary>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.RegisterScriptsClasses.RegisteredScript.Order">
            <summary>
            Order is the order within a Group. By default, it is the order entered into the list.
            The lower the value, the higher it appears on the page. Zero is the default
            and is usually considered the top. However, negative values are legal.
            </summary>
        </member>
        <member name="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.RegisterScriptsClasses.RegisterScriptGroupOrder">
            <summary>
            Implements an IComparer class to order scripts by their Group and Order properties.
            </summary>
        </member>
        <member name="T:Jenzabar.Portal.Framework.Web.UI.Controls.Secured.SLabel">
            <summary>
            A secured, operation aware version of the Label control
            </summary>
            <remarks>
            Secured controls can be used to make interface elements aware of whether or not
            a user has access to a particular operation assigned to the control
            
            If the user does not have access to the operation(s) assigned to the control, the
            control can be set to render differently (or not at all) to prevent the user from
            using the control to perform the secured operation
            
            In addition, events normally raised by the control will not be raised if the control
            detects that the access check has failed. This prevents users from "spoofing" access
            by simulating a postback.
            </remarks>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Web.UI.Controls.Secured.SLabel.m_OperationNames">
            <summary>
            Member variable m_OperationNames
            </summary>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Web.UI.Controls.Secured.SLabel.m_IsSecured">
            <summary>
            Member variable m_IsSecured
            </summary>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Web.UI.Controls.Secured.SLabel.m_AccessCheckType">
            <summary>
            Member variable AccessCheckType
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Secured.SLabel.#ctor">
            <summary>
            Constructor for the SLabel class
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Secured.SLabel.OnPreRender(System.EventArgs)">
            <summary>
            Overrides the OnPreRender event in base control
            </summary>
            <param name="e">EventArgs</param>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Secured.SLabel.SecureControl">
            <summary>
            Used internally to secure the control
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Secured.SLabel.Render(System.Web.UI.HtmlTextWriter)">
            <summary>
            Overrides the Render event in base control
            </summary>
            <param name="writer">HtmlTextWriter to render control with</param>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Secured.SLabel.AccessCheckFailedText">
            <summary>
            Gets or sets the text to display if an access check fails.
            </summary>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Secured.SLabel.AccessCheckFailedTextCSSClass">
            <summary>
            Gets or sets the style to apply to the text if displayed if the access check fails and the display type is 'Text'.
            </summary>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Secured.SLabel.OperationNames">
            <summary>
            Member Property - OperationNames
            </summary>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Secured.SLabel.IsSecured">
            <summary>
            Member Property - IsSecured
            </summary>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Secured.SLabel.AccessCheckType">
            <summary>
            Member Property - AccessCheckType
            </summary>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Secured.SLabel.DisplayType">
            <summary>
            Member Property - m_DisplayType
            </summary>
        </member>
        <member name="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.SaveRegExForm">
            <summary>
            SaveRegExForm is used in the UITypeEditor 
            <see cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.RegExpressionTypeEditor"/> as part of the
            RegExEditorForm. It handles the Save command. It allows the user to save a Regular Expression
            string to the custom.VAM.config file.
            </summary>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.SaveRegExForm.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.SaveRegExForm.fExpression">
            <summary>
            This is the data that we will write out. Assign it before calling ShowForm.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.SaveRegExForm.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.SaveRegExForm.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.SaveRegExForm.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.SaveRegExForm.SaveRegExForm_Load(System.Object,System.EventArgs)">
            <summary>
            OnLoad event handler. Sets up the form.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.SaveRegExForm.textBox1_TextChanged(System.Object,System.EventArgs)">
            <summary>
            Textbox1 TextChanged event handler. Enables the Save button when TextBox1
            has text.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.SaveRegExForm.textBox1_KeyPress(System.Object,System.Windows.Forms.KeyPressEventArgs)">
            <summary>
            TextBox1 KeyPress event handler. Filters out illegal characters in the Name property.
            Legal characters: letters, numbers, space, underscore, and backspace.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.SaveRegExForm.SaveBtn_Click(System.Object,System.EventArgs)">
            <summary>
            Save Button Click event handler. 
            </summary>
            <remarks>
            Checks if the string already exists and prompts for confirmation to overwrite.
            Then it writes to the custom.VAM.config file.
            </remarks>
        </member>
        <member name="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.Globals">
            <summary>
            The Globals class provides a number of static methods and properties used
            throughout VAM. Some are used internally. Others are intended to the user.
            </summary>
            <remarks>
             There are several categories of methods and properties:
             <list type="bullet">
             <item><description><see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.Globals.Page"/> returns the
             current instance of VAMPage completely assigned default values. </description></item>
             <item><description>VAMPage defaults - numerous properties which match those 
             on the VAMPage class, with the addition of "Default" to the property name. 
             The user can set them up in Application_Start or in the custom.VAM.config file.</description></item>
             <item><description>Other defaults - some defaults that don't have corresponding
             properties on VAMPage, such as the default strings for RequiredFieldMarker 
             and RequiredFieldDescription.</description></item>
             <item><description><see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.Globals.Config"/> provides
             access to the data retrieved from the VAM.Config and custom.VAM.config files.</description></item>
             <item><description>Methods to register script files into the page.
             </description></item>
             <item><description></description>Methods to interact with the ASP.NET: Find by ID, 
             create a style string, create a web color string.</item>
             <item><description>Paths to VAM and Appearance folder.</description></item>
             <item><description>Localization engine.</description></item>
             </list>
            </remarks>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.Globals.cValidatorsAndMoreFolderName">
            <summary>
            The root folder name for VAM's licenses and scripts. It is "VAM".
            It is under the web application folder by default.
            </summary>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.Globals.cDefaultAppearancesPath">
            <summary>
            The default path to the Appearances folder. It is "~/VAM/appearance/".
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.Globals.GetVAMPage">
            <summary>
            GetVAMPage returns a VAMPage instance for this page request.
            </summary>
            <remarks>
            <para>The instance is kept in HttpContext.Current.Items["VAMPage"]. The Items
            collection is recreated with each new page (except after Server.Transfer).
            When Items["VAMPage"] is null, a new instance is created and initialized
            with values from the properties on Globals. The very first time this is called,
            it calls <see cref="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.Globals.LoadDefaultsFromConfig"/>
            to load the contents of the two VAM.config files.</para>
            <para>When a page is called from Server.Transfer, 
            use <see cref="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.Globals.BeforeServerTransfer"/> and
            <see cref="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.Globals.AfterServerTransfer(System.Web.UI.Page)"/> to correctly
            update this VAMPage instance.</para>
            </remarks>
            <returns>VAMPage instance.</returns>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.Globals.BeforeServerTransfer">
            <summary>
            BeforeServerTransfer must be called immediately before any
            call to Server.Transfer that goes to another page with VAM controls.
            </summary>
            <remarks>
            It removes the current VAMPage instance in preparation for the destination
            page. The destination page will install new actions into the new VAMPage
            instance (created automatically when missing) before the 
            <see cref="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.Globals.AfterServerTransfer(System.Web.UI.Page)"/>
            method is called. Be sure to call AfterServerTransfer in the Page_Load
            method of the desintation page.
            </remarks>
            <seealso cref="M:System.Web.HttpServerUtility.Transfer(System.String,System.Boolean)"/>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.Globals.AfterServerTransfer(System.Web.UI.Page)">
            <summary>
            AfterServerTransfer updates VAMPage class after a call to a new page
            from Server.Transfer. Use it on any page that contains VAM controls
            and is called by Server.Transfer.
            </summary>
            <remarks>
            <para>Server.Transfer switches to a new 
            System.Web.UI.Page instance without updating HttpContext.Current.Handler.
            So we cannot detect that the VAMPage already in use is no longer valid.</para>
            <para>The user manually calls this after to Server.Transfer to invalidate the current VAMPage.
            The call belongs in the destination page's Page_Load method.</para>
            <para>Caller must also call <see cref="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.Globals.BeforeServerTransfer"/>.</para>
            </remarks>
            <seealso cref="M:System.Web.HttpServerUtility.Transfer(System.String,System.Boolean)"/>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.Globals.DesignModeVAMPage">
            <summary>
            DesignModeVAMPage holds a reference to the VAMPage instance during design mode.
            HttpContext.Current.Items normally holds it but that object is not available in design mode.
            </summary>
            <remarks>
            Assigned by <see cref="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.Globals.GetVAMPage"/> during design mode.
            This one instance of VAMPage will be shared between all web forms in design mode.
            </remarks>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.Globals.fLicensing">
            <summary>
            Storage for <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.Globals.Licensing"/>.
            </summary>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.Globals.fConfig">
            <summary>
            Storage for <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.Globals.Config"/>.
            </summary>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.Globals.fConfigFilePath">
            <summary>
            Storage for <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.Globals.ConfigFilePath"/>.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.Globals.GetConfig">
            <summary>
            GetConfig creates a ConfigFile instance and reads both VAM.Config and Custom.VAM.Config
            file into it.
            </summary>
            <remarks>
            It determines the path to these files from <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.Globals.ConfigFilePath"/>.
            </remarks>
            <exception cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.VAMException">When there are problems finding or reading the files</exception>
            <returns>A new instance of a ConfigFile, fully populated
            by data from the two config files.</returns>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.Globals.GetDataTypeByName(System.String)">
            <summary>
            GetDataTypeByName looks for a matching <see cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.VAMTypeConverter"/> in
            <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.Globals.DataTypes"/> to Name passed in.
            </summary>
            <remarks>
            <para>The Globals.DataTypes list contains VAMTypeConverters declared in VAM.config and
            custom.VAM.config plus any that were added in the Application_Start method.</para>
            <para>It returns a clone of the original object so that you can modify it safely without affecting
            the original.</para>
            </remarks>
            <param name="pName">The name to find. It must match the Name property on an
            VAMTypeConverter instance in the Globals.DataTypes list.</param>
            <returns>If found, it returns a clone of that object. Otherwise, it returns null.</returns>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.Globals.fDefaultDataType">
            <summary>
            Storage for <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.Globals.DefaultDataType"/>.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.Globals.GetErrorFormatterByName(System.String)">
            <summary>
            GetErrorFormatterByName looks for a matching ErrorFormatter in
            <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.Globals.ErrorFormatters"/> to Name passed in.
            </summary>
            <remarks>
            <para>The Globals.ErrorFormatters list contains ErrorFormatters declared in VAM.config and
            custom.VAM.config plus any that were added in the Application_Start method.</para>
            <para>It returns a clone of the original object so that you can modify it safely without affecting
            the original.</para>
            </remarks>
            <param name="pName">The name to find. It must match the Name property on an
            ErrorFormatter instance in the Globals.ErrorFormatters list.</param>
            <returns>If found, it returns a clone of that object. Otherwise, it returns null.</returns>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.Globals.GetConditionByName(System.String)">
            <summary>
            GetConditionByName looks for a matching BaseCondition subclass in
            <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.Globals.Conditions"/> to Name passed in.
            </summary>
            <remarks>
            <para>The Globals.Conditions list contains Conditions declared in VAM.config and
            custom.VAM.config plus any that were added in the Application_Start method.</para>
            <para>It returns a clone of the original object so that you can modify it safely without affecting
            the original.</para>
            </remarks>
            <param name="pName">The name to find. It must match the Name property on an
            Condition instance in the Globals.Conditions list.</param>
            <returns>If found, it returns a clone of that object. Otherwise, it returns null.</returns>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.Globals.FindControlHookupMethod(System.Web.UI.Control)">
            <summary>
            FindControlHookupMethod determines if the control passed in has a Control Hookup Method.
            </summary>
            <param name="pControl">The control whose hookup mehtod name interests you.</param>
            <returns>A string containing either the hookup method name or "" when not found.</returns>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.Globals.fDefaultBlinkTime">
            <summary>
            Storage for <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.Globals.DefaultBlinkTime"/>.
            </summary>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.Globals.fDefaultBlinkOnChange">
            <summary>
            Storage for <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.Globals.DefaultBlinkOnChange"/>.
            </summary>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.Globals.fDefaultBlinkOnSubmit">
            <summary>
            Storage for <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.Globals.DefaultBlinkOnSubmit"/>.
            </summary>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.Globals.fDefaultFocusOnChange">
            <summary>
            Storage for <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.Globals.DefaultFocusOnChange"/>.
            </summary>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.Globals.fDefaultFocusOnSubmit">
            <summary>
            Storage for <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.Globals.DefaultFocusOnSubmit"/>.
            </summary>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.Globals.fDefaultShowAlertOnChange">
            <summary>
            Storage for <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.Globals.DefaultShowAlertOnChange"/>.
            </summary>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.Globals.fDefaultShowAlertOnSubmit">
            <summary>
            Storage for <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.Globals.DefaultShowAlertOnSubmit"/>.
            </summary>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.Globals.fDefaultControlErrorCssClass">
            <summary>
            Storage for <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.Globals.DefaultControlErrorCssClass"/>.
            </summary>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.Globals.fDefaultAlertTemplate">
            <summary>
            Storage for <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.Globals.DefaultAlertTemplate"/>.
            </summary>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.Globals.fDefaultAlertTemplateLookupID">
            <summary>
            Storage for <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.Globals.DefaultAlertTemplateLookupID"/>.
            </summary>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.Globals.fDefaultAlertErrorLeadText">
            <summary>
            Storage for <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.Globals.DefaultAlertErrorLeadText"/>.
            </summary>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.Globals.fDefaultAlertErrorListStyle">
            <summary>
            Storage for <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.Globals.DefaultAlertErrorListStyle"/>.
            </summary>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.Globals.fDefaultLabelTokenCssClass">
            <summary>
            Storage for <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.Globals.DefaultLabelTokenCssClass"/>.
            </summary>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.Globals.fDefaultPropertyTokenCssClass">
            <summary>
            Storage for <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.Globals.DefaultPropertyTokenCssClass"/>.
            </summary>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.Globals.fDefaultRuntimeTokenCssClass">
            <summary>
            Storage for <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.Globals.DefaultRuntimeTokenCssClass"/>.
            </summary>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.Globals.fDefaultSummaryLabelTokenCssClass">
            <summary>
            Storage for <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.Globals.DefaultSummaryLabelTokenCssClass"/>.
            </summary>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.Globals.fDefaultSummaryPropertyTokenCssClass">
            <summary>
            Storage for <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.Globals.DefaultSummaryPropertyTokenCssClass"/>.
            </summary>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.Globals.fDefaultSummaryRuntimeTokenCssClass">
            <summary>
            Storage for <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.Globals.DefaultSummaryRuntimeTokenCssClass"/>.
            </summary>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.Globals.fDefaultRequiredFieldMarkerText">
            <summary>
            Storage for <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.Globals.DefaultRequiredFieldMarkerText"/>.
            </summary>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.Globals.fDefaultRequiredFieldImageURL">
            <summary>
            Storage for <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.Globals.DefaultRequiredFieldImageURL"/>.
            </summary>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.Globals.fDefaultRequiredFieldsDescriptionText">
            <summary>
            Storage for <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.Globals.DefaultRequiredFieldsDescriptionText"/>.
            </summary>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.Globals.fDefaultRequiredFieldMarkerTextLookupID">
            <summary>
            Storage for <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.Globals.DefaultRequiredFieldMarkerTextLookupID"/>.
            </summary>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.Globals.fDefaultRequiredFieldsDescriptionTextLookupID">
            <summary>
            Storage for <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.Globals.DefaultRequiredFieldsDescriptionTextLookupID"/>.
            </summary>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.Globals.fDefaultConfirmMessage">
            <summary>
            Storage for <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.Globals.DefaultConfirmMessage"/>.
            </summary>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.Globals.fDefaultConfirmMessageGroup">
            <summary>
            Storage for <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.Globals.DefaultConfirmMessageGroup"/>.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.Globals.LoadDefaultsFromConfig">
            <summary>
            LoadDefaultsFromConfig confirms that the VAM.Config files have been loaded
            into <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.Globals.Config"/>.
            If they have not, they are loaded here.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.Globals.HandleADMESettingsException(System.Exception,System.Boolean)">
            <summary>
            HandleADMESettingsException should be called after an exception that loads
            any assembly into the Config property. It offers an improved 
            System.IO.FileNotFoundException exception when the PeterBlum.ADME.dll assembly
            is not found.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.Globals.DescribeProperties(System.Boolean)">
            <summary>
            DescribeProperties is useful for the end user to debug the global property settings
            on this class.
            </summary>
            <param name="pHTML">When true, it formats for HTML output. When false, it is text with carriage returns separating rows.</param>
            <returns>A string describing all properties, either in HTML or plain text format.</returns>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.Globals.RegisterScriptFile(System.Web.UI.Page,System.String,System.String)">
            <summary>
            RegisterScriptFile adds a &lt;script&gt; tag with src= attribute set to the filename
            supplied. The file must be in VAM's script folder.
            </summary>
            <remarks>
            <para>It avoids duplicate entries by using RegisterClientScriptBlock which uses a key which
            you pass in pRegisterName.</para>
            <para>The file name gets a path from the "VAM_ScriptVirtualPath" key in the &lt;appsettings&gt; 
            section of web.config:</para>
            <code>
            &lt;add name="VAM_ScriptVirtualPath" value="path" /&gt;
            </code>
            <para>If that key is not defined, it gets the default path from this assembly's
            ScriptFilePathAttribute. That is "\VAM\#_#_#"</para>
            </remarks>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.Globals.RegisterGlobalScriptFile(System.Web.UI.Page)">
            <summary>
            Registers the VAM.js script file.
            </summary>
            <param name="pPage">The current Page (not VAMPage) instance.</param>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.Globals.RegisterExtendedValidationScriptFile(System.Web.UI.Page)">
            <summary>
            Registers the VAM_XVF.js script file.
            </summary>
            <param name="pPage">The current Page (not VAMPage) instance.</param>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.Globals.RegisterFieldStateScriptFile(System.Web.UI.Page)">
            <summary>
            Registers the VAM_FSC.js script file.
            </summary>
            <param name="pPage">The current Page (not VAMPage) instance.</param>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.Globals.RegisterDataTypeTextBoxScriptFile(System.Web.UI.Page)">
            <summary>
            Registers the VAM_DTTB.js script file.
            </summary>
            <param name="pPage">The current Page (not VAMPage) instance.</param>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.Globals.ApplyAppPath(System.String)">
            <summary>
            ApplyAppPath looks for the ~ character at the start of the URL.
            If found, it is replaced by Request.ApplicationPath or, in design mode,
            the ADME UrlToWebApp. 
            </summary>
            <remarks>
            Microsoft has defined
            the tilde (~) to do this elsewhere and this carries the idea along.
            </remarks>
            <param name="pURL">The original URL</param>
            <returns>The URL, whether modified or not.</returns>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.Globals.FindID(System.Web.UI.Control,System.String)">
            <summary>
            Finds the control ID passed in and returns its ClientID or returns "" if not found.
            </summary>
            <remarks>
            <para>It searches the naming container of the Control passed in. If not found, it goes up through
            parent naming containers until it finds a match or runs out of parents.</para>
            <para>It will never find a match to sibling or child naming containers.</para>
            </remarks>
            <param name="pControl">A control whose naming container is where the search starts.</param>
            <param name="pID">The Control ID to find.</param>
            <returns>The ClientID of the control found or "" if not found.</returns>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.Globals.FindControlByID(System.Web.UI.Control,System.String)">
            <summary>
            Finds the control associated with ID passed in and returns the control instance
            or null if not found.
            </summary>
            <remarks>
            <para>It searches the naming container of the Control passed in. If not found, it goes up through
            parent naming containers until it finds a match or runs out of parents.</para>
            <para>It will never find a match to sibling or child naming containers.</para>
            </remarks>
            <param name="pControl">A control whose naming container is where the search starts.</param>
            <param name="pID">The Control ID to find.</param>
            <returns>The control instance of the control found or null if not found.</returns>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.Globals.FindChildControlByID(System.Web.UI.Control,System.String)">
            <summary>
            FindChildControlByID only looks for a control whose ID is in the immediate child list of 
            the ParentControl passed in.
            </summary>
            <remarks>
            <para>It doesn't use FindControl which will look in the nested control hierarchy, wasting time.</para>
            <para>
            This also avoids a design mode problem in VS.NET 7.0 and .Net Framework 1.0:
            In design mode, when there is 
            <c>&lt;span runat=server id=x&gt;&lt;asp:label runat=server id=label1&gt;label&lt;/label&gt;&lt;/span&gt;</c>
            the &lt;span&gt; tag doesn't get added into the Page's control list 
            until you switch from design view to HTML view and back
            When it finally gets added, it creates the child label within it.
            Unfortunately, there is a Label1 already in the control list.
            </para>
            </remarks>
            <param name="pParentControl">The control whose child Controls list is searched for the ID.</param>
            <param name="pID">The ID to match to one of the child controls.</param>
            <returns>The matching child control or null.</returns>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.Globals.PrepJavaScriptString(System.String)">
            <summary>
            Replaces single quotes with the string <c>\'</c>
            so strings can embed single quotes.
            </summary>
            <remarks>
            <para>JavaScript only supports single quotes embedded in strings when they are
            preceded by a slash. This converts strings to support that. It should
            be applied on any property that is written in a DefineProperties method
            if the user is allowed to add a single quote into that property.</para>
            </remarks>
            <param name="pOrig">The original string to be modified.</param>
            <returns>The string with quotes updated.</returns>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.Globals.GetWebColor(System.Drawing.Color)">
            <summary>
            GetWebColor converts <see cref="T:System.Drawing.Color"/> properties into a string that 
            is compatible with DOM based color attributes.
            </summary>
            <remarks>
            <para>When adding a color to an HTML style string, such as style='background-color:green',
            the Color structure's naming scheme doesn't always return a name that is compatible
            with the browser's definition of the color name. This prepares the correct strings.</para>
            <list type="bullet">
            <item><description>Color.Empty = ""</description></item>
            <item><description>Color.LightGray -&gt; LightGrey</description></item>
            <item><description>Color.IsNamedColor -&gt; Color.Name</description></item>
            <item><description>All the rest: Color.ToArgb</description></item>
            </list>
            </remarks>
            <param name="pColor">The System.Drawing.Color structure to convert.</param>
            <returns>The HTML compatible string representation of the color.</returns>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.Globals.GetStyles(System.Web.UI.WebControls.Style)">
            <summary>
            GetStyles returns a string containing elements of the 
            <see cref="T:System.Web.UI.WebControls.Style"/> in a format
            that can be placed into the HTML attribute style=''.
            </summary>
            <remarks>
            <para>It contributes what's between the ''.</para>
            <para>MS chose to make Style.AddAttributesToRender() use an HTMLTextWriter.
            That method is better suited for a Render method than for adding styles to a string.
            ErrorFormatters need a string representation of the style as they create
            their HTML in the OnPreRender phase of control generation.</para>
            </remarks>
            <param name="pControlStyle">The System.Web.UI.WebControls.Style to convert
            into an HTML compatible style='' attribute list.</param>
            <returns>A string representation of the ControlStyle for use within
            the style= attribute of a tag. It does not include the outer quotes.</returns>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.Globals.GetStyleValue(System.Web.UI.Control,System.String)">
            <summary>
            GetStyleValue looks up a key in a control's Style property (<see cref="T:System.Web.UI.CssStyleCollection"/>). 
            </summary>
            <remarks>
            <para>While this may appear to be a simple action,
            there are two situations this addresses:</para>
            <para>1. pControl can be a WebControl, HtmlControl or other. This gets the style by the class.
            </para>
            <para>2. The CssStyleCollection class performs a case sensitive lookup. We must have a 
               case insensitive lookup.</para>
            </remarks>
            <exception cref="T:System.ArgumentException">If the Control is not subclassed from WebControl or HtmlControl.</exception>
            <param name="pControl">The control whose style will be searched for the key.</param>
            <param name="pKey">The key to locate withing the style collection.</param>
            <returns>If the key is found, it returns the value associated with that key. Otherwise it returns null.</returns>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.Globals.GetControlName(System.Web.UI.Control)">
            <summary>
            GetControlName returns a name for the control for display in error messages.
            </summary>
            <remarks>
            If ID is assigned, it is returned.
            Otherwise, it returns "[" + pControl.GetType().FullName + "]".
            </remarks>
            <param name="pControl">The control whose name is desired.</param>
            <returns>The control's ID or its type.</returns>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.Globals.GetResolvedDataSource(System.Object,System.String)">
            <summary>
            GetResolvedDataSource is used by DataBound controls to convert their DataSource
            property (either IEnumerable or IListSource) into an IEnumerable.
            </summary>
            <remarks>
            Follows a standard documented in "Developing Microsoft ASP.NET Server Controls", page 428
            although its implemented as a static method to allow reuse. This really emulates
            the private class System.Web.UI.DataSourceHelper which has the same static function.
            WHY MUST IT BE PRIVATE?
            </remarks>
            <param name="pDataSource">The DataSource associated with a DataSource property.</param>
            <param name="pDataMember">The value of a DataMember property. It determines a table
            in ADO.NET DataSources.</param>
            <returns>A reference to the data or null if no datasource provides an IEnumerable.</returns>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.Globals.fAppearancePath">
            <summary>
            Storage for <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.Globals.AppearancePath"/>.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.Globals.ConvertUrlWithSiteRoot(System.String)">
            <summary>
            ConvertUrlWithSiteRoot takes a URL and returns a URL that may be corrected
            for the Web Application path or have its path to the Appearance folder changed. 
            </summary>
            <remarks>
            <para>When the URL passed starts with a match to <see cref="F:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.Globals.cDefaultAppearancesPath"/>
            and the user has supplied the web.config key "VAM_AppearanceVirtualPath",
            it substitutes the VAM_AppearanceVirtualPath string for the cDefaultAppearancesPath.
            </para>
            <para>Otherwise it calls <see cref="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.Globals.ApplyAppPath(System.String)"/> to
            replace the tilde (~) with a path to the web app path.</para>
            </remarks>
            <param name="pUrl">The original URL.</param>
            <returns>The modified URL.</returns>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.Globals.GetDefaultAppearancePath">
            <summary>
            Returns the default path to the VAM\Appearance folder without accounting 
            for the VAM_AppearanceVirtualPath in the web.config file.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.Globals.ConvertToStringByDataType(System.String,System.Object)">
            <summary>
            ConvertToStringByDataType provides conversion between a value of a particular datatype
            and its string formatted by the VAMTypeConverter associated with the datatype.
            </summary>
            <remarks>
            <para>This is useful in string properties like RangeCondition.Minimum/Maximum and
            CompareToValueCondition.ValueToCompare, which uses the datatype's VAMTypeConverter to 
            translate the string into its native value.</para>
            <para>Here, you are passing the native value and getting back the correctly formatted string.</para>
            <para>This function is intended for page developers who need to setup the string properties
            of RangeCondition.Minimum/Maximum and CompareToValueCondition.ValueToCompare.
            For example, if the RangeCondition is using the DataType="Date", the user will
            assign a date string to the Minimum property. First they create a DateTime structure
            with the date. Then pass it here to get back the correctly formatted date string.</para>
            </remarks>
            <param name="pDataType">The name of a DataType as defined in the VAM.config and custom.VAM.config
            files. It is used to identify a VAMTypeConverter instance to use for converting the value.</param>
            <param name="pValue">The value that will be converted. It is in a native format for the
            datatype, such as Int32 for "Integer" DataType.</param>
            <returns>String version of the value. It may return "".</returns>
            <exception cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.VAMException">Throws exceptions when it cannot convert or the DataType string is not found.</exception>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.Globals.fOnAdjustValidatorActionToBrowser">
            <summary>
            Storage for <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.Globals.OnAdjustValidatorActionToBrowser"/>.
            </summary>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.Globals.fErrorFormatterWhenNoJavaScript">
            <summary>
            Storage for <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.Globals.ErrorFormatterWhenNoJavaScript"/>.
            </summary>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.Globals.fErrorFormatterWhenNoTooltip">
            <summary>
            Storage for <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.Globals.ErrorFormatterWhenNoTooltip"/>.
            </summary>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.Globals.fNoStyleSheetErrorFormatterControlStyle">
            <summary>
            Storage for <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.Globals.NoStyleSheetErrorFormatterControlStyle"/>.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.Globals.DefaultAdjustVAToBrowser(Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseValidatorAction)">
            <summary>
            The default event handler for <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.Globals.OnAdjustValidatorActionToBrowser"/>.
            </summary>
            <remarks>
            <para>If TrueBrowser.SupportsTooltip is false and the ErrorFormatter
            is TooltipImageErrorFormatter, it switches to the error formatter in
            <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.Globals.ErrorFormatterWhenNoTooltip"/> if that is not null.</para>
            <para>If TrueBrowser.SupportsJavaScript1_2 is false and the ErrorFormatter
            is AlertImageErrorFormatter, it switches to the error formatter in
            <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.Globals.ErrorFormatterWhenNoJavaScript"/> if that is not null.</para>
            <para>If TrueBrowser.SupportsClassName is false and the ErrorFormatter.CssClass
            has a value, it merges the ErrorFormatter.ControlStyle with 
            <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.Globals.NoStyleSheetErrorFormatterControlStyle"/>.</para>
            </remarks>
            <param name="pAction">The ValidatorAction class containing the ErrorFormatter.</param>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.Globals.Page">
            <summary>
            Page returns a reference to the current VAMPage.
            </summary>
            <value>
            <para>It is simply a wrapper around <see cref="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.Globals.GetVAMPage"/>. 
            Its intent is to allow end users to reference it through Jenzabar.Portal.Framework.Web.UI.Controls.Validation.Globals.Page.
            (The user can also use VAMPage.Current but the docs will use this property.)</para>
            <para>When a page is called from Server.Transfer, 
            use <see cref="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.Globals.BeforeServerTransfer"/> and
            <see cref="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.Globals.AfterServerTransfer(System.Web.UI.Page)"/> to correctly
            update this VAMPage instance.</para>
            </value>
            <seealso cref="M:System.Web.HttpServerUtility.Transfer(System.String,System.Boolean)"/>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.Globals.Licensing">
            <summary>
            Defines the Licensing Key for Trial, Single Server, and Site Licenses.
            </summary>
            <value>
            <para>Licensing should be assigned to the licensing string in Application_Start.</para>
            <para>The licensing string can be:</para>
            <list type="bullet">
            <item><description>blank - trial version licenses</description></item>
            <item><description>serial number alone - site license</description></item>
            <item><description>serial number | computer name; (repeat); - single server license and development licenses.
            The computer name is the production server computer name.</description></item>
            </list>
            <para>Redistribution Licenses should not be assigned here. The LicensingMgr will throw an exception
            if this is assigned to the serial number of a Redistribution license. Instead,
            set the serial number on <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.VAMPage.Licensing">VAMPage.Licensing</see>.</para>
            <para>Licenses are only validated at runtime.</para>
            </value>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.Globals.Config">
            <summary>
            Config returns the <see cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.ConfigFile"/> instance
            that contains data from the current web application's VAM.config
            and custom.VAM.config files.
            </summary>
            <value>
            <para>If not already loaded, it loads via <see cref="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.Globals.GetConfig"/>
            and establishes the default data type name in <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.Globals.DefaultDataType"/>
            as the first VAMTypeConverter in ConfigFiles.DataTypes. (If no VAMTypeConverters are found,
            DefaultDataType is "String".)</para>
            <para>Once loaded, each reference to Config will determine if the config files
            have been changed and reload when that happens.</para>
            </value>
            <exception cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.VAMException">If it cannot load VAM.config or custom.VAM.config.</exception>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.Globals.ConfigFilePath">
            <summary>
            ConfigFilePath gets and sets the file path used to get the ConfigFile path.
            </summary>
            <value>
            <para>It gets the path from several sources:</para>
            <para>1. If there is an &lt;appSetting&gt; key in the web.config file for "VAM_ConfigFilePath",
               it uses that string.</para>
            <para>2. Otherwise, use "[web application]\VAM\"</para>
            <para>Uses ADME to get these values in design and runtime modes.</para>
            </value>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.Globals.DataTypes">
            <summary>
            Provides access to <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.ConfigFile.DataTypes"/> using
            the currently loaded ConfigFile class in <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.Globals.Config"/>.
            </summary>
            <remarks>
            <para>It contains all <see cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.VAMTypeConverter"/> instances 
            defined in the &lt;DataTypes&gt; section of both VAM.config and custom.VAM.config files.</para>
            <para>It is used by the Properties Editor to show a drop list of DataTypes on the
            DataType property of various validators and conditions. See <see cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.DataType_TypeEditor"/>.</para>
            <para>It is used by <see cref="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseCondition.GetVAMTypeConverterByName(System.String,System.String)">BaseCondition.GetVAMTypeConverterByName</see>
            to convert from a string name to a VAMTypeConverter.</para>
            <para>If you want to retrieve a value from it, the easiest way is to call
            <see cref="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.Globals.GetDataTypeByName(System.String)"/>.</para>
            </remarks>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.Globals.DefaultDataType">
            <summary>
            DefaultDataType is used by classes that implement <see cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.IDataTypeProperty"/>
            to provide a default value for the DataType property when it is "".
            </summary>
            <value>
            <para>It is set when the <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.Globals.Config"/> 
            property is assigned or updated with 
            a <see cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.ConfigFile"/> instance. If that object's DataType
            property has a value, the first item is assigned. Otherwise, the value of "String" is used.</para>
            </value>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.Globals.ErrorFormatters">
            <summary>
            Provides access to <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.ConfigFile.ErrorFormatters"/> using
            the currently loaded ConfigFile class in <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.Globals.Config"/>.
            </summary>
            <remarks>
            <para>It contains all <see cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseErrorFormatter"/> instances 
            defined in the &lt;ErrorFormatters&gt; section of both VAM.config and custom.VAM.config files.</para>
            <para>It is used by the UITypeEditor for the Validator.ErrorFormatter property. 
            See <see cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.ErrorFormatterUITypeEditor"/>.</para>
            <para>If you want to retrieve a value from it, the easiest way is to call
            <see cref="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.Globals.GetErrorFormatterByName(System.String)"/>.</para>
            </remarks>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.Globals.Conditions">
            <summary>
            Provides access to <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.ConfigFile.Conditions"/> using
            the currently loaded ConfigFile class in <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.Globals.Config"/>.
            </summary>
            <remarks>
            <para>It contains all <see cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseCondition"/> instances 
            defined in the &lt;Conditions&gt; section of both VAM.config and custom.VAM.config files.</para>
            <para>If you want to retrieve a value from it, the easiest way is to call
            <see cref="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.Globals.GetConditionByName(System.String)"/>.</para>
            </remarks>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.Globals.ControlHookupMethods">
            <summary>
            Provides access to <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.ConfigFile.ControlHookupMethods"/> using
            the currently loaded ConfigFile class in <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.Globals.Config"/>.
            </summary>
            <remarks>
            <para>The Control Hookup Method allows a control to define multiple onchange or onclick
            events that fire it. For example, if the control contains several textboxes,
            it would override this to hookup those textboxes.</para>
            <para>When defined, VAM installs the HUCtrlFnc property on the client
            side representation of the condition object and the JavaScript function
            VAM_HookupControl redirects to your Control Hookup Method to hook up its controls
            to the onchange or onclick events.</para>
            <para>The software also checks the 
            <see cref="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.VAMTypeConverter.GetControlHookupMethod(System.Web.UI.Control)">VAMTypeConverter.GetControlHookupMethod</see>
            for a match to the control.
            If neither supply a string, no HUCtrlFnc property is specified on client side representation
            of the condition object and the default hookup method is used.</para>
            <para>See the <b>Developer's Guide</b> for a description of the Control Hookup Method
            and an example.</para>
            <para>VAM defines its support for CheckBoxList and RadioButtonList in
            this collection because they need access to their child check button controls.</para>
            <para>Each Control Hookup Method is declared in the &lt;ControlHookupMethods&gt;
            section of the VAM.config and custom.VAM.config files. To add your own control, 
            add it to the &lt;ControlHookupMethods&gt; section of the 
            custom.VAM.config file. (The preferred method is to declare a VAMTypeConverter
            with the function name returned in its 
            <see cref="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.VAMTypeConverter.GetControlHookupMethod(System.Web.UI.Control)">VAMTypeConverter.GetControlHookupMethod</see> method.</para>
            </remarks>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.Globals.DefaultBlinkTime">
            <summary>
            The default value for <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.VAMPage.BlinkTime">VAMPage.BlinkTime</see>.
            </summary>
            <value>
            <para>The custom.VAM.config file can declare it in the &lt;Globals&gt; section.
            When not declared there, it defaults to 1000 (1 seconds).</para>
            </value>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.Globals.DefaultBlinkOnChange">
            <summary>
            The default value for <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.VAMPage.BlinkOnChange">VAMPage.BlinkOnChange</see>.
            </summary>
            <value>
            <para>The custom.VAM.config file can declare it in the &lt;Globals&gt; section.
            When not declared there, it defaults to BlinkMode.Off.</para>
            </value>
            <seealso cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BlinkMode"/>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.Globals.DefaultBlinkOnSubmit">
            <summary>
            The default value for <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.VAMPage.BlinkOnSubmit">VAMPage.BlinkOnSubmit</see>.
            </summary>
            <value>
            <para>The custom.VAM.config file can declare it in the &lt;Globals&gt; section.
            When not declared there, it defaults to BlinkMode.Off.</para>
            </value>
            <seealso cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BlinkMode"/>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.Globals.DefaultFocusOnChange">
            <summary>
            The default value for <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.VAMPage.FocusOnChange">VAMPage.FocusOnChange</see>.
            </summary>
            <value>
            <para>The custom.VAM.config file can declare it in the &lt;Globals&gt; section.
            When not declared there, it defaults to false.</para>
            </value>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.Globals.DefaultFocusOnSubmit">
            <summary>
            The default value for <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.VAMPage.FocusOnSubmit">VAMPage.FocusOnSubmit</see>.
            </summary>
            <value>
            <para>The custom.VAM.config file can declare it in the &lt;Globals&gt; section.
            When not declared there, it defaults to false.</para>
            </value>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.Globals.DefaultShowAlertOnChange">
            <summary>
            The default value for <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.VAMPage.ShowAlertOnChange">VAMPage.ShowAlertOnChange</see>.
            </summary>
            <value>
            <para>The custom.VAM.config file can declare it in the &lt;Globals&gt; section.
            When not declared there, it defaults to false.</para>
            </value>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.Globals.DefaultShowAlertOnSubmit">
            <summary>
            The default value for <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.VAMPage.ShowAlertOnSubmit">VAMPage.ShowAlertOnSubmit</see>.
            </summary>
            <value>
            <para>The custom.VAM.config file can declare it in the &lt;Globals&gt; section.
            When not declared there, it defaults to false.</para>
            </value>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.Globals.DefaultControlErrorCssClass">
            <summary>
            The default value for <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.VAMPage.ControlErrorCssClass">VAMPage.ControlErrorCssClass</see>.
            </summary>
            <value>
            <para>The custom.VAM.config file can declare it in the &lt;Globals&gt; section.
            When not declared there, it defaults to "".</para>
            </value>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.Globals.DefaultAlertTemplate">
            <summary>
            The default value for <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.VAMPage.AlertTemplate">VAMPage.AlertTemplate</see>.
            </summary>
            <value>
            <para>The custom.VAM.config file can declare it in the &lt;Globals&gt; section.
            When not declared there, it defaults to "Please correct these errors:\n{0}".</para>
            </value>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.Globals.DefaultAlertTemplateLookupID">
            <summary>
            The default value for <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.VAMPage.AlertTemplateLookupID">VAMPage.AlertTemplateLookupID</see>.
            </summary>
            <value>
            <para>The custom.VAM.config file can declare it in the &lt;Globals&gt; section.
            When not declared there, it defaults to "".</para>
            </value>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.Globals.DefaultAlertErrorLeadText">
            <summary>
            The default value for VAMPage.<see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.VAMPage.AlertErrorLeadText">VAMPage.AlertErrorLeadText</see>.
            </summary>
            <value>
            <para>The custom.VAM.config file can declare it in the &lt;Globals&gt; section.
            When not declared there, it defaults to "#. ".</para>
            </value>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.Globals.DefaultAlertErrorListStyle">
            <summary>
            The default value for VAMPage.<see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.VAMPage.AlertErrorListStyle">VAMPage.AlertErrorListStyle</see>.
            </summary>
            <value>
            <para>The custom.VAM.config file can declare it in the &lt;Globals&gt; section.
            When not declared there, it defaults to true.</para>
            </value>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.Globals.DefaultLabelTokenCssClass">
            <summary>
            The default value for VAMPage.<see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.VAMPage.LabelTokenCssClass">VAMPage.LabelTokenCssClass</see>.
            </summary>
            <value>
            <para>The custom.VAM.config file can declare it in the &lt;Globals&gt; section.
            When not declared there, it defaults to "".</para>
            </value>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.Globals.DefaultPropertyTokenCssClass">
            <summary>
            The default value for VAMPage.<see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.VAMPage.PropertyTokenCssClass">VAMPage.PropertyTokenCssClass</see>.
            </summary>
            <value>
            <para>The custom.VAM.config file can declare it in the &lt;Globals&gt; section.
            When not declared there, it defaults to "".</para>
            </value>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.Globals.DefaultRuntimeTokenCssClass">
            <summary>
            The default value for VAMPage.<see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.VAMPage.RuntimeTokenCssClass">VAMPage.RuntimeTokenCssClass</see>.
            </summary>
            <value>
            <para>The custom.VAM.config file can declare it in the &lt;Globals&gt; section.
            When not declared there, it defaults to "".</para>
            </value>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.Globals.DefaultSummaryLabelTokenCssClass">
            <summary>
            The default value for VAMPage.<see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.VAMPage.SummaryLabelTokenCssClass">VAMPage.SummaryLabelTokenCssClass</see>.
            </summary>
            <value>
            <para>The custom.VAM.config file can declare it in the &lt;Globals&gt; section.
            When not declared there, it defaults to "".</para>
            </value>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.Globals.DefaultSummaryPropertyTokenCssClass">
            <summary>
            The default value for VAMPage.<see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.VAMPage.SummaryPropertyTokenCssClass">VAMPage.SummaryPropertyTokenCssClass</see>.
            </summary>
            <value>
            <para>The custom.VAM.config file can declare it in the &lt;Globals&gt; section.
            When not declared there, it defaults to "".</para>
            </value>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.Globals.DefaultSummaryRuntimeTokenCssClass">
            <summary>
            The default value for VAMPage.<see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.VAMPage.SummaryRuntimeTokenCssClass">VAMPage.SummaryRuntimeTokenCssClass</see>.
            </summary>
            <value>
            <para>The custom.VAM.config file can declare it in the &lt;Globals&gt; section.
            When not declared there, it defaults to "".</para>
            </value>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.Globals.DefaultRequiredFieldMarkerText">
            <summary>
            DefaultRequiredFieldMarkerText is used by the <see cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.RequiredFieldMarker"/> control
            to show text or any HTML as the marker. 
            </summary>
            <value>
            <para>When blank, the image is shown
            using DefaultRequiredFieldImageURL. When assigned, if it has the token
            "{IMAGE}", an image is setup with <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.Globals.DefaultRequiredFieldImageURL"/>
            to replace the token.</para>
            <para>The custom.VAM.config file can declare it in the &lt;Globals&gt; section.
            When not declared there, it defaults to "&amp;nbsp;{IMAGE}".</para>
            </value>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.Globals.DefaultRequiredFieldImageURL">
            <summary>
            DefaultRequiredFieldImageURL is the URL to an image file that is used as the
            required field marker. It is used within both the 
            <see cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.RequiredFieldMarker"/>
            and <see cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.RequiredFieldsDescription"/> controls.
            </summary>
            <value>
            <para>The custom.VAM.config file can declare it in the &lt;Globals&gt; section.
            When not declared there, it defaults to "~/VAM/appearance/requireddot.gif".</para>
            </value>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.Globals.DefaultRequiredFieldsDescriptionText">
            <summary>
            DefaultRequiredFieldsDescriptionText is used by the <see cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.RequiredFieldsDescription"/>
            control as its default text.
            </summary>
            <value>
            <para>It can include the token "{IMAGE}" which 
            will be replaced by the HTML for an image using 
            <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.Globals.DefaultRequiredFieldImageURL"/>.</para>
            <para>It can include the token "{MARKER}" which will be replaced by the Required Fields
            Marker, following localization of <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.Globals.DefaultRequiredFieldMarkerText"/> 
            and applying the image if it's blank or contains the "{IMAGE}" token.</para>
            <para>The custom.VAM.config file can declare it in the &lt;Globals&gt; section.
            When not declared there, it defaults to "Fields marked{MARKER} require an entry.".</para>
            </value>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.Globals.DefaultRequiredFieldMarkerTextLookupID">
            <summary>
            DefaultRequiredFieldMarkerTextLookupID is the localization key for
            <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.Globals.DefaultRequiredFieldMarkerText"/>. 
            When assigned, a localization lookup is performed
            and the result is used in place of DefaultRequiredFieldMarkerText.
            </summary>
            <value>
            <para>It uses <see cref="F:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.StringLookup.cMiscGroupName">StringLookup.cMiscGroupName</see> 
            for the string group.</para>
            <para>The custom.VAM.config file can declare it in the &lt;Globals&gt; section.
            When not declared there, it defaults to "".</para>
            </value>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.Globals.DefaultRequiredFieldsDescriptionTextLookupID">
            <summary>
            DefaultRequiredFieldsDescriptionTextLookupID is the localization key for
            <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.Globals.DefaultRequiredFieldsDescriptionText"/>. 
            When assigned, a localization lookup is performed
            and the result is used in place of DefaultRequiredFieldsDescriptionText.
            </summary>
            <value>
            <para>It uses <see cref="F:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.StringLookup.cMiscGroupName">StringLookup.cMiscGroupName</see> for the string group.</para>
            <para>The custom.VAM.config file can declare it in the &lt;Globals&gt; section.
            When not declared there, it defaults to "".</para>
            </value>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.Globals.DefaultConfirmMessage">
            <summary>
            The default value for VAMPage.<see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.VAMPage.ConfirmMessage">VAMPage.ConfirmMessage</see>.
            </summary>
            <value>
            <para>The custom.VAM.config file can declare it in the &lt;Globals&gt; section.
            When not declared there, it defaults to "".</para>
            </value>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.Globals.DefaultConfirmMessageGroup">
            <summary>
            The default value for VAMPage.<see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.VAMPage.ConfirmMessageGroup">VAMPage.ConfirmMessageGroup</see>.
            </summary>
            <value>
            <para>The custom.VAM.config file can declare it in the &lt;Globals&gt; section.
            When not declared there, it defaults to "".</para>
            </value>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.Globals.AppearancePath">
            <summary>
            AppearancePath holds an alternative virtual path to the Appearance folder.
            </summary>
            <value>
            <para>That folder is normally in ~/VAM/Appearance. The user can supply
            the "VAM_AppearanceVirtualPath" key in the &lt;AppSettings&gt; section of web.config
            to provide an alternative.</para>
            <para>This is a virtual path. When assigned, any property referencing ~/VAM/Appearance/
            will replace its path with AppearancePath in <see cref="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.Globals.ConvertUrlWithSiteRoot(System.String)"/>. 
            This allows all factory supplied defaults
            to follow the VAM_AppearanceVirtualPath without the user editing the properties.</para>
            </value>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.Globals.OnAdjustValidatorActionToBrowser">
            <summary>
            OnAdjustValidatorActionToBrowser is called by the ValidatorAction to
            adjust its error formatter based on the current TrueBrowser setting.
            </summary>
            <value>
            Defaults to the method <see cref="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.Globals.DefaultAdjustVAToBrowser(Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseValidatorAction)"/>.
            <para>See the <b>User's Guide</b> for more on using this event.</para>
            </value>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.Globals.ErrorFormatterWhenNoJavaScript">
            <summary>
            ErrorFormatterWhenNoJavaScript is used by the DefaultAdjustVAToBrowser method
            when TrueBrowser.SupportsJavaScript1_2 is false. It returns an instance
            of an alternative errorformatter. 
            </summary>
            <value>
            <para>The caller will clone the returned instance before using it.</para>
            <para>If it returns null, it indicates that the current error formatter is acceptable.</para>
            <para>It defaults to null.</para>
            <para>If the user assigns this to a <see cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.TextErrorFormatter"/>, they should be aware
            that it will use a different amount of space.</para>
            </value>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.Globals.ErrorFormatterWhenNoTooltip">
            <summary>
            ErrorFormatterWhenNoTooltip is used by the DefaultAdjustVAToBrowser method
            when TrueBrowser.SupportsTooltip is false. It returns an instance
            of an alternative errorformatter. 
            </summary>
            <value>
            <para>The caller will clone the returned instance before using it.</para>
            <para>If it returns null, it indicates that the current error formatter is acceptable.</para>
            <para>It defaults to returning an <see cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.AlertImageErrorFormatter"/> because JavaScript is usually
            available when the tooltip (Title= attribute) isn't.</para>
            </value>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.Globals.NoStyleSheetErrorFormatterControlStyle">
            <summary>
            NoStyleSheetErrorFormatterControlStyle is an alternative Style object
            used to set BaseErrorFormatter.ControlStyle when TrueBrowser.SupportsClassName is false.
            </summary>
            <value>
            It defaults to using a red color for ForeColor.
            </value>
        </member>
        <member name="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.AdjustValidatorActionToBrowser">
            <summary>
            AdjustValidatorActionToBrowser is used by the 
            Globals.<see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.Globals.OnAdjustValidatorActionToBrowser"/>
            property to allow the action to be modified based on the current browser in 
            <see cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.TrueBrowser"/>.
            </summary>
            <remarks>
            <para>The idea is to scale down gracefully. Here are typical choices to scale down:</para>
            <list type="bullet">
            <item><description>When TrueBrowser.SupportsClassName is false, 
            apply non-style sheet font info
              to the ErrorFormatter.ControlStyle property.</description></item>
            <item><description>When TrueBrowser.SupportsTooltip is false, 
            switch from TooltipImageErrorFormatter
              to another ErrorFormatter.</description></item>
            <item><description>When TrueBrowser.SupportsJavaScript1_2 is false, 
            switch from AlertImageErrorFormatter.</description></item>
            </list>
            </remarks>
        </member>
        <member name="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.ScriptFilePathAttribute">
            <summary>
            ScriptFilePathAttribute is an <see cref="T:System.Attribute"/> which stores a string containing
            a file path to a VAM script file within the scripts folder.
            </summary>
            <remarks>
            <para>The <see cref="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.Globals.RegisterScriptFile(System.Web.UI.Page,System.String,System.String)">Globals.RegisterScriptFile</see> method uses this attribute.</para>
            <para>This was designed to allow new builds to update the version number within the AssemblyInfo.cs
            file instead of updating source code files.</para>
            <para>It adds a lead and trailing slash if you omit them.
            So if the file is located at /VAM/1_0_0/my.js,
            this should be "/VAM/1_0_0/" or "VAM/1_0_0".</para>
            </remarks>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.ScriptFilePathAttribute.fPath">
            <summary>
            Stores the resulting path assigned in the constructor.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.ScriptFilePathAttribute.#ctor(System.String)">
            <summary>
            Constructor that sets the Path.
            </summary>
            <param name="pPath">The virtual path to a script file folder.</param>
        </member>
        <member name="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.TrueBrowser">
            <summary>
            TrueBrowser indicates which browser is really running. 
            </summary>
            <remarks>
            <para><see cref="T:System.Web.HttpBrowserCapabilities"/> should handle this but 
            the user can set a fake browser in the page's clientTarget.
            VAM absolutely needs to know the real browser here.</para>
            <para>You can access the current TrueBrowser instance on
            <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.VAMPage.Browser">VAMPage.Browser</see>.</para>
            <para>This class identifies the browser type, version, and operating system,
            much like HttpBrowserCapabilities. It also identifies a variety of
            features that VAM needs to know about the browser to set up the HTML
            and JavaScript from the server side.</para>
            <para>See the User's Guide for details on using this class.</para>
            </remarks>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.TrueBrowser.fNetscapeNav">
            <summary>
            Storage for <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.TrueBrowser.NetscapeNav"/>.
            </summary>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.TrueBrowser.fNetscapeMoz">
            <summary>
            Storage for <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.TrueBrowser.NetscapeMoz"/>.
            </summary>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.TrueBrowser.fGecko">
            <summary>
            Storage for <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.TrueBrowser.Gecko"/>.
            </summary>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.TrueBrowser.fIE">
            <summary>
            Storage for <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.TrueBrowser.IE"/>.
            </summary>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.TrueBrowser.fOpera">
            <summary>
            Storage for <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.TrueBrowser.Opera"/>.
            </summary>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.TrueBrowser.fOperaPresto">
            <summary>
            Storage for <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.TrueBrowser.OperaPresto"/>.
            </summary>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.TrueBrowser.fKonqueror">
            <summary>
            Storage for <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.TrueBrowser.Konqueror"/>.
            </summary>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.TrueBrowser.fOmniWeb">
            <summary>
            Storage for <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.TrueBrowser.OmniWeb"/>.
            </summary>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.TrueBrowser.fWebTV">
            <summary>
            Storage for <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.TrueBrowser.WebTV"/>.
            </summary>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.TrueBrowser.fICab">
            <summary>
            Storage for <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.TrueBrowser.ICab"/>.
            </summary>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.TrueBrowser.fIceBrowser">
            <summary>
            Storage for <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.TrueBrowser.IceBrowser"/>.
            </summary>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.TrueBrowser.fSafari">
            <summary>
            Storage for <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.TrueBrowser.Safari"/>.
            </summary>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.TrueBrowser.fVersion">
            <summary>
            Storage for <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.TrueBrowser.Version"/>.
            </summary>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.TrueBrowser.fGeckoVersionDate">
            <summary>
            Storage for <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.TrueBrowser.GeckoVersionDate"/>.
            </summary>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.TrueBrowser.fUserAgent">
            <summary>
            Storage for <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.TrueBrowser.UserAgent"/>.
            </summary>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.TrueBrowser.fWindows">
            <summary>
            Storage for <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.TrueBrowser.Windows"/>.
            </summary>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.TrueBrowser.fMac">
            <summary>
            Storage for <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.TrueBrowser.Mac"/>.
            </summary>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.TrueBrowser.fUnix">
            <summary>
            Storage for <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.TrueBrowser.Unix"/>.
            </summary>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.TrueBrowser.fLinux">
            <summary>
            Storage for <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.TrueBrowser.Linux"/>.
            </summary>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.TrueBrowser.fSupportsClassName">
            <summary>
            Storage for <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.TrueBrowser.SupportsClassName"/>.
            </summary>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.TrueBrowser.fSupportsInnerHTML">
            <summary>
            Storage for <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.TrueBrowser.SupportsInnerHTML"/>.
            </summary>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.TrueBrowser.fSupportsTooltip">
            <summary>
            Storage for <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.TrueBrowser.SupportsTooltip"/>.
            </summary>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.TrueBrowser.fSupportsMultilineTooltip">
            <summary>
            Storage for <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.TrueBrowser.SupportsMultilineTooltip"/>.
            </summary>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.TrueBrowser.fDIVGoodContainer">
            <summary>
            Storage for <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.TrueBrowser.DIVGoodContainer"/>.
            </summary>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.TrueBrowser.fDIVSupportsStyleVisibility">
            <summary>
            Storage for <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.TrueBrowser.DIVSupportsStyleVisibility"/>.
            </summary>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.TrueBrowser.fSupportsGetElementById">
            <summary>
            Storage for <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.TrueBrowser.SupportsGetElementById"/>.
            </summary>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.TrueBrowser.fSupportsDocument_All">
            <summary>
            Storage for <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.TrueBrowser.SupportsDocument_All"/>.
            </summary>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.TrueBrowser.fReliableScripting">
            <summary>
            Storage for <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.TrueBrowser.ReliableScripting"/>.
            </summary>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.TrueBrowser.fSupportsJavaScript1_2">
            <summary>
            Storage for <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.TrueBrowser.SupportsJavaScript1_2"/>.
            </summary>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.TrueBrowser.fSupportsClientSideValidators">
            <summary>
            Storage for <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.TrueBrowser.SupportsClientSideValidators"/>.
            </summary>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.TrueBrowser.fSupportsClientSideValidationSummary">
            <summary>
            Storage for <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.TrueBrowser.SupportsClientSideValidationSummary"/>.
            </summary>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.TrueBrowser.fSupportsFieldStateControllers">
            <summary>
            Storage for <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.TrueBrowser.SupportsFieldStateControllers"/>.
            </summary>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.TrueBrowser.fSupportsKeyboardFiltering">
            <summary>
            Storage for <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.TrueBrowser.SupportsKeyboardFiltering"/>.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.TrueBrowser.GetTrueBrowser(System.Web.UI.Page)">
            <summary>
            GetTrueBrowser creates or retrieves an existing TrueBrowser object
            for the current browser identified by Page.Request.ServerVariables["HTTP_USER_AGENT"].
            </summary>
            <remarks>
            <para>This method provides caching of TrueBrowser objects. Only one is 
            created for each unique HTTP_USER_AGENT per application start.</para>
            </remarks>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.TrueBrowser.fTrueBrowsers">
            <summary>
            This is the cache of TrueBrowser objects created by
            <see cref="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.TrueBrowser.GetTrueBrowser(System.Web.UI.Page)"/>.
            It holds one TrueBrowser object for each unique HTTP_USER_AGENT that
            has requested a page.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.TrueBrowser.#ctor(System.Web.HttpRequest)">
            <summary>
            Constructor. Converts the Request into the settings of
            all properties on TrueBrowser.
            </summary>
            <param name="pRequest">The current HttpRequest object.</param>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.TrueBrowser.#ctor">
            <summary>
            Constructor used by design mode. Emulates IE 6 because VS.NET uses IE 6.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.TrueBrowser.CheckIt(System.String,System.Int32,System.Boolean@)">
            <summary>
            Used by the constructor to determine the browser type from the UserAgent.
            </summary>
            <param name="pSearch">The name of the browser within the UserAgent string. Must be lowercase.</param>
            <param name="pVersionOffset">The number of characters after the Name where the version string starts.</param>
            <param name="pFlagB">When the name of the browser matches, sets this to true.</param>
            <returns>When the name of the browser matches, it returns true. Otherwise, false.</returns>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.TrueBrowser.DetermineProductFeatures">
            <summary>
            Called by the constructor to convert the browser specific properties
            into the values for <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.TrueBrowser.SupportsClientSideValidators"/>,
            <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.TrueBrowser.SupportsClientSideValidationSummary"/>,
            and <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.TrueBrowser.SupportsFieldStateControllers"/>.
            </summary>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.TrueBrowser.NetscapeNav">
            <summary>
            When true, the browser is Netscape v1-4.
            </summary>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.TrueBrowser.NetscapeMoz">
            <summary>
            When true, it is a Netscape browser based on the Gecko engine (Netscape 6+)
            </summary>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.TrueBrowser.Gecko">
            <summary>
            When true, it uses the Gecko engine (Mozilla, Netscape 6+, others).
            When the browser is "Mozilla", this is the only flag associated with a type of browser
            that will be true. (NetscapeMoz, for instance, will still be false.)
            </summary>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.TrueBrowser.IE">
            <summary>
            When true, it is Internet Explorer. All versions. All platforms.
            </summary>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.TrueBrowser.Opera">
            <summary>
            When true, it is Opera v1-6 on all platforms.
            </summary>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.TrueBrowser.OperaPresto">
            <summary>
            When true, it is Opera based on the Presto engine. Opera 7+
            </summary>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.TrueBrowser.Konqueror">
            <summary>
            When true, it is Konqueror, all versions.
            </summary>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.TrueBrowser.OmniWeb">
            <summary>
            When true, it is OmniWeb, all versions.
            </summary>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.TrueBrowser.WebTV">
            <summary>
            When true, it is WebTV, all versions.
            </summary>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.TrueBrowser.ICab">
            <summary>
            When true, it is iCab, all versions.
            </summary>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.TrueBrowser.IceBrowser">
            <summary>
            When true, it is IceBrowser, all versions.
            </summary>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.TrueBrowser.Safari">
            <summary>
            When true, it is Apple Safari, all versions.
            </summary>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.TrueBrowser.Version">
            <summary>
            Represents the version of any browser except some Gecko browsers,
            which use <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.TrueBrowser.GeckoVersionDate"/>.
            </summary>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.TrueBrowser.GeckoVersionDate">
            <summary>
            Used on Gecko engine-based browsers as a version.
            </summary>
            <value>
            All Gecko browsers provide a date stamp in the USER AGENT as a version number.
            Mozilla only has this value to determine a version. Netscape adds its own version info 
            which is available in the <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.TrueBrowser.Version"/> property.
            </value>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.TrueBrowser.UserAgent">
            <summary>
            The HttpUserAgent string retrieved from Request.ServerVariables["HTTP_USER_AGENT"].
            It is in lowercase.
            </summary>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.TrueBrowser.Windows">
            <summary>
            When true, the browser is on a Windows operating system.
            </summary>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.TrueBrowser.Mac">
            <summary>
            When true, the browser is on a Mac operating system.
            </summary>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.TrueBrowser.Unix">
            <summary>
            When true, the browser is on a Unix operating system.
            </summary>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.TrueBrowser.Linux">
            <summary>
            When true, the browser is on a Linux operating system.
            </summary>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.TrueBrowser.SupportsClassName">
            <summary>
            When true, the browser supports the class= attribute on its tags.
            </summary>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.TrueBrowser.SupportsInnerHTML">
            <summary>
            When true, the browser supports the InnerHTML property and permits modifying the InnerHTML.
            </summary>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.TrueBrowser.SupportsTooltip">
            <summary>
            When true, the browser supports the Title= attribute on its tags.
            </summary>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.TrueBrowser.SupportsMultilineTooltip">
            <summary>
            When true, the browser supports linebreaks in the Title= attribute and formats a multiline tooltip.
            </summary>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.TrueBrowser.DIVGoodContainer">
            <summary>
            When true, the &lt;DIV&gt; tag is supported and reliable enough to support the
            essential formatting of absolute positioning and widths.
            When false, VAM may switch to using a &lt;TABLE&gt; on controls that normally
            use a &lt;DIV&gt;
            </summary>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.TrueBrowser.DIVSupportsStyleVisibility">
            <summary>
            When true, the browser supports the style=visibility attribute
            on &lt;DIV&gt; tags.
            </summary>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.TrueBrowser.SupportsGetElementById">
            <summary>
            When true, the browser supports the document.getElementById method.
            </summary>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.TrueBrowser.SupportsDocument_All">
            <summary>
            When true, the browser supports the document.all collection.
            </summary>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.TrueBrowser.ReliableScripting">
            <summary>
            Some browsers may support JavaScript 1.2 and some of DHTML or DOM,
            but simply are too buggy or unreliable to support VAM's client-side scripting.
            When true, the browser runs VAM's scripts reliably.
            </summary>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.TrueBrowser.SupportsJavaScript1_2">
            <summary>
            When true, the browser runs supports JavaScript 1.2.
            </summary>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.TrueBrowser.SupportsClientSideValidators">
            <summary>
            SupportsClientSideValidators determines if the browser supports client side scripting
            used by Validator controls, Conditions, ErrorFormatters, and VAMTypeConverters.
            </summary>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.TrueBrowser.SupportsClientSideValidationSummary">
            <summary>
            When true, the ValidationSummary can show and hide on the client-side.
            The ValidationSummary requires SetInnerHTML and DIVSupportsStyleVisibility.
            </summary>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.TrueBrowser.SupportsFieldStateControllers">
            <summary>
            SupportsFieldStateControllers determines if the browser supports 
            the FieldStateController controls. When client-side doesn't work, these controls are disabled.
            </summary>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.TrueBrowser.SupportsKeyboardFiltering">
            <summary>
            SupportsKeyboardFiltering determines if the browser supports 
            the keyboard filtering functions used by DataTypeTextBoxes.
            </summary>
        </member>
        <member name="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseValidationSummary">
            <summary>
            BaseValidationSummary is an abstract base class for developing validator summary
            controls. It defines the behaviors for validator summaries but does not generate HTML,
            except for the outer tag.
            It leaves innerHTML generation to subclasses.
            </summary>
            <remarks>
            <para>Behaviors include</para>
            <list type="bullet">
            <item><description>
            <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseValidationSummary.AutoUpdate"/> property
            </description></item>
            <item><description>
            <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseValidationSummary.Group"/> property
            </description></item>
            <item><description>
            <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseValidationSummary.EnableClientScript"/> property
            </description></item>
            <item><description>
            <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseValidationSummary.RelatedControlID"/> and RelatedControl properties
            </description></item>
            <item><description>
            <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseValidationSummary.InvisiblePreservesSpace"/> property
            </description></item>
            <item><description>
            Support for setting up an hyperlink from the error message to the field that established it
            </description></item>
            </list>
            <para>It builds the outer frame the control within an &lt;DIV&gt; tag, using WebControl 
            to define the style properties.</para>
            <para>One or more can be placed on a page. When the page is submitted and there are validation
            errors, the summary may appear, filling its body with a list of the error messages.</para>
            <para>When subclassing, add properties for formatting, 
            such as header, footer and body formatting.
            Then override <see cref="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseValidationSummary.GetErrorText(Jenzabar.Portal.Framework.Web.UI.Controls.Validation.VAMPage)"/>
             to create the HTML for server side rendering and 
            <see cref="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseValidationSummary.DefineProperties(System.Text.StringBuilder)"/>
            to generate properties that appear in a client-side representation
            of the ValidationSummary. ValidationSummary has a full client-side mode. 
            However, it turns off on browsers that don't support setting the InnerHTML.</para>
            <para>There are two client-side functions which must be defined:</para>
            <list type="bullet">
            <item><description>
            FormatListItem named in the 
            <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseValidationSummary.FormatListItemFunctionName"/> property
            </description></item>
            <item><description>
            GetInnerHTML named in the 
            <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseValidationSummary.GetInnerHTMLFunctionName"/> property
            </description></item>
            </list>
            <para>The client-side representation of Validation Summary objects are
            placed into the gVAM_ValSummary array.</para>
            <para>See the <b>Developer's Guide</b> for an overview and examples.</para>
            </remarks>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseValidationSummary.fInDesignModeB">
            <summary>
            When true, design mode is active.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseValidationSummary.#ctor">
            <summary>
            Constructor with no parameters.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseValidationSummary.#ctor(System.String)">
            <summary>
            Constructor that sets the Group property.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseValidationSummary.#ctor(System.String,System.Boolean)">
            <summary>
            Constructor that sets the Group and AutoUpdate properties.
            </summary>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseValidationSummary.fGroup">
            <summary>
            Storage for <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseValidationSummary.Group"/>.
            </summary>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseValidationSummary.fAutoUpdate">
            <summary>
            Storage for <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseValidationSummary.AutoUpdate"/>.
            </summary>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseValidationSummary.fInvisiblePreservesSpace">
            <summary>
            Storage for <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseValidationSummary.InvisiblePreservesSpace"/>.
            </summary>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseValidationSummary.fEnableClientScript">
            <summary>
            Storage for <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseValidationSummary.EnableClientScript"/>.
            </summary>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseValidationSummary.fRelatedControlConnection">
            <summary>
            Storage for <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseValidationSummary.RelatedControlConnection"/>.
            </summary>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseValidationSummary.fHyperLinkToFields">
            <summary>
            Storage for <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseValidationSummary.HyperLinkToFields"/>.
            </summary>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseValidationSummary.fSupportsClientSideB">
            <summary>
            Set by OnPreRender. When true, client side code is supported through
            both <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseValidationSummary.EnableClientScript"/> and 
            <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.TrueBrowser.SupportsClientSideValidationSummary">TrueBrowser.SupportsClientSideValidationSummary</see>.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseValidationSummary.OnPreRender(System.EventArgs)">
            <remarks>
            <para>This control is simply a &lt;div&gt; tag with inner text
            that varies. The server and client side both may fill in the inner text.</para>
            <para>Server side:
               When there is a validation error on postback for a matching group, 
               build the inner text using <see cref="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseValidationSummary.GetErrorText(Jenzabar.Portal.Framework.Web.UI.Controls.Validation.VAMPage)"/>.</para>
            <para>Client side:
               When there is a validation error on the client side, the PostValidation functions
               will update all validation summarys defined in the gVAM_ValSumIDs array.</para>
            <para>The client side needs a number of attributes to run. 
            They are setup with <see cref="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseValidationSummary.DefineProperties(System.Text.StringBuilder)"/>.</para>
            </remarks>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseValidationSummary.MatchGroup">
            <summary>
            Determines if the submitted group name matches the validator.
            </summary>
            <remarks>
            <para>MatchGroup returns true when on post back and the submitted group
            matches the group in <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseValidationSummary.Group"/>. 
            Group can be a pipe delimited list of multiple groups.</para>
            <para>If the submitted group is "*", this always return true.</para>
            <para>Returns false otherwise.</para>
            </remarks>
            <returns>True when the submitted group matches the Group property or is "*". False otherwise.</returns>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseValidationSummary.GetErrorText(Jenzabar.Portal.Framework.Web.UI.Controls.Validation.VAMPage)">
            <summary>
            Builds all of the inner HTML for the ValidatorSummary.
            </summary>
            <remarks>
            <para>Subclasses must define this to create a string that contains all the HTML
            shown in the ValidationSummary. Always test VAMPage.IsValid and return
            a string for both true and false cases. Usually when IsValid is false, it returns
            an empty string.</para>
            <para>To show individual Validator error messages, it should detect
            all those whose IsValid=false and match the submitted group. It can get the
            error message from the Validator.SummaryErrorMessage or Validator.ErrorMessage property (if
            SummaryErrorMessage is blank.)</para>
            <para>This is called from OnPreRender. At this point, the ValidatorAction objects of each
            validator should be in VAMPage.Actions.</para>
            <para>See the <b>Developer's Guide</b> for details and an example.</para>
            </remarks>
            <param name="pPage">The current VAMPage object. It contains the Actions collection
            with ValidatorActions among them.</param>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseValidationSummary.GetDesignModeText">
            <summary>
            GetDesignModeText builds the control's text for design mode
            and returns a string containing the HTML that is shown in the ValidationSummary.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseValidationSummary.ApplyHyperlink(System.String,Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseValidatorAction)">
            <summary>
            ApplyHyperlink returns a string containing hyperlink HTML around
            the error message of a single Validator control.
            </summary>
            <remarks>
            <para>Each error message should be retrieved from the Validator either from
            the SummaryErrorMessage or ErrorMessage. It should already have its tokens
            replaced. Pass it here and it will get wrapped in an &lt;a&gt; tag
            that calls the javascript function VAM_SetFocus(pFieldID).</para>
            <para>If the browser doesn't support client side code or SetFocus, it returns the original string.</para>
            Used by subclasses.
            </remarks>
            <param name="pErrorMessage">The error message to embed in the hyperlink.</param>
            <param name="pAction">The ValidatorAction instance that supplied the error message.
            Its Condition will be used to determine the control that will get focus.
            It will always use the first control (determined by Action.Condition.GetControl(0)).</param>
            <returns>The error message. If possible, it is enclosed in the &lt;a&gt; tag
            to establish a hyperlink.</returns>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseValidationSummary.DefineJavaScript(Jenzabar.Portal.Framework.Web.UI.Controls.Validation.VAMPage)">
            <summary>
            DefineJavaScript creates whatever JavaScript that is used by this ValidationSummary. 
            It should define JavaScript functions or load a file.
            </summary>
            <remarks>
            <para>It is passed the current VAMPage class which has two methods that make registration easy:</para>
            <para>- Call <see cref="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.VAMPage.IsScriptBlockRegistered(System.String)">VAMPage.IsScriptBlockRegistered</see> before 
            registering to determine if the script was
              written by another instance of this class.</para>
            <para>- If its not registered, call <see cref="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.VAMPage.RegisterScriptBlock(System.String,System.String)">VAMPage.RegisterScriptBlock</see>
               or <see cref="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.VAMPage.RegisterScriptFile(System.String,System.String)">VAMPage.RegisterScriptFile</see>.</para>
            </remarks>
            <param name="pPage">Current VAMPage object. </param>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseValidationSummary.GetClientSideObject">
            <summary>
            GetClientSideScriptObject defines the client-side object that represents
            the properties and methods of a ValidationSummary. 
            </summary>
            <remarks>
            <para>It is called from
            VAMPage after all controls are registered and prepared for output.
            Generally, you extend the <see cref="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseValidationSummary.DefineProperties(System.Text.StringBuilder)"/>
            method to add new properties.</para>
            <para>Defines the property "ValSumID" to contain the ClientID of the ValidationSummary control.</para>
            </remarks>
            <returns>A string that is compatible with JavaScript to build a JavaScript object.
            It has the format "{property1,value1;property2,value2}".</returns>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseValidationSummary.DefineProperties(System.Text.StringBuilder)">
            <summary>
            DefineProperties adds any attributes to the client-side ValSum object
            to build the inner HTML of this control. It basically maps all of the properties
            to attributes. Designed to be subclassed to introduce new properties.
            </summary>
            <remarks>
            <para>Call the methods <see cref="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseValidationSummary.RegisterValue(System.Text.StringBuilder,System.String,System.String)"/> and 
            <see cref="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseValidationSummary.RegisterMethod(System.Text.StringBuilder,System.String,System.String)"/> to install properties 
            into the pJavaScript stringbuilder.</para>
            <list type="table">
            <listheader>
            <term>Name and Type</term><description>Description</description></listheader>
            <item>
            <term>FmtListFnc (method)</term>
            <description>FormatListItemFunctionName</description>
            </item>
            <item>
            <term>GetInner (method)</term>
            <description>GetErrorTextFunctionName</description>
            </item>
            <item>
            <term>AutoUpd (boolean)</term>
            <description>AutoUpdate</description>
            </item>
            <item>
            <term>Grp (string)</term>
            <description>Group (can be pipe delimited)</description>
            </item>
            <item>
            <term>RelCtl (string)</term>
            <description>RelatedControl.ClientID</description>
            </item>
            <item>
            <term>InvSpc (boolean) </term>
            <description>InvisiblePreservesSpace</description>
            </item>
            <item>
            <term>Links (boolean) </term>
            <description>HyperLinkToFields</description>
            </item>
            </list>
            </remarks>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseValidationSummary.fFirstProperty">
            <summary>
            fFirstProperty is used by AddComma to avoid writing a comma at the beginning of the 
            properties list.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseValidationSummary.AddComma(System.Text.StringBuilder)">
            <summary>
            AddComma should be called prior to every property being added.
            It will add the comma unless its the first property (determined by fFirstProperty).
            </summary>
            <remarks>
            <para>This method is called internally from <see cref="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseValidationSummary.RegisterValue(System.Text.StringBuilder,System.String,System.String)"/>
            and <see cref="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseValidationSummary.RegisterMethod(System.Text.StringBuilder,System.String,System.String)"/>.
            You only call it if you add text to the StringBuilder within 
            <see cref="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseValidationSummary.DefineProperties(System.Text.StringBuilder)"/> without 
            using these other functions.</para>
            </remarks>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseValidationSummary.RegisterValue(System.Text.StringBuilder,System.String,System.String)">
            <summary>
            RegisterValue adds a new property to the client-side validation summary object 
            where the value is a string.
            </summary>
            <remarks>
            <para>RegisterValue is an overloaded method.</para>
            <para>The pJavaScript property gets the following text appended:</para>
            <para>[,]PropertyName: 'Value'</para>
            <para>Call this method from your overridden <see cref="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseValidationSummary.DefineProperties(System.Text.StringBuilder)"/> 
            method.</para>
            </remarks>
            <param name="pJavaScript">Append the property to this stringbuilder.</param>
            <param name="pName">Defines the name of the property to add to the client side 
            validation summary object.</param>
            <param name="pValue">The string for the value. </param>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseValidationSummary.RegisterValue(System.Text.StringBuilder,System.String,System.Int32)">
            <summary>
            RegisterValue adds a new property to the client-side validation summary
            object where the value is a integer.
            </summary>
            <remarks>
            <para>RegisterValue is an overloaded method.</para>
            <para>The pJavaScript property gets the following text appended:</para>
            <para>[,]PropertyName: integer</para>
            <para>Call this method from your overridden 
            <see cref="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseValidationSummary.DefineProperties(System.Text.StringBuilder)"/> 
            method.</para>
            </remarks>
            <param name="pJavaScript">Append the property to this stringbuilder.</param>
            <param name="pName">Defines the name of the property to add to the client side 
            validation summary object.</param>
            <param name="pValue">The integer for the value. </param>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseValidationSummary.RegisterValue(System.Text.StringBuilder,System.String,System.Boolean)">
            <summary>
            RegisterValue adds a new property to the client-side validation summary
            object where the value is a boolean.
            </summary>
            <remarks>
            <para>RegisterValue is an overloaded method.</para>
            <para>The pJavaScript property gets the following text appended:</para>
            <para>[,]PropertyName: true|false</para>
            <para>Call this method from your overridden 
            <see cref="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseValidationSummary.DefineProperties(System.Text.StringBuilder)"/> 
            method.</para>
            </remarks>
            <param name="pJavaScript">Append the property to this stringbuilder.</param>
            <param name="pName">Defines the name of the property to add to the client side 
            validation summary object.</param>
            <param name="pValue">The boolean for the value. </param>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseValidationSummary.RegisterMethod(System.Text.StringBuilder,System.String,System.String)">
            <summary>
            RegisterMethod adds a new property to the client-side validation summary  
            object where the value is a method.
            </summary>
            <remarks>
            <para>The pJavaScript property gets the following text appended:</para>
            <para>[,]PropertyName: methodname</para>
            <para>Call this method from your overridden 
            <see cref="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseValidationSummary.DefineProperties(System.Text.StringBuilder)"/> method.</para>
            </remarks>
            <param name="pJavaScript">Append the property to this stringbuilder.</param>
            <param name="pName">Defines the name of the property to add to the client side 
            validation summary object.</param>
            <param name="pValue">The method name.</param>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseValidationSummary.RenderAtDesignTime">
            <summary>
            Called by the <see cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.ValidationSummaryDesigner"/> to form
            the design time HTML.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseValidationSummary.Render(System.Web.UI.HtmlTextWriter)">
            <remarks>
            <para>While TagKey specifies &lt;DIV&gt;, Html32TextWriter converts to a table. We depend on it
            to be a &lt;DIV&gt; because client side code assumes it is.
            If the browser doesn't support a &lt;DIV&gt;, we aren't
            going to support client side code in the first place.
            So force it to be a &lt;DIV&gt; by forcing the write to be HtmlTextWriter.</para>
            </remarks>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseValidationSummary.Group">
            <summary>
            Group is the group name to which this ValidationSummary is associated.
            </summary>
            <value>
            <para>Submit buttons are assigned group names, including "", "*" and a name.
            The button group must match this value or match "*" to show this validation summary.</para>
            <para>One ValidationSummary can support multiple groups by providing a pipe delimited
            list of group names. For example: "Group1|Group2". Lead and trailing spaces
            around each group name will be ignored and can be used for formatting.</para>
            <para>It defaults to "".</para>
            </value>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseValidationSummary.AutoUpdate">
            <summary>
            AutoUpdate allows an already visible ValidationSummary to keep updating its list
            as the user changes fields until all the errors are gone (and the summary is hidden).
            </summary>
            <value>
            <para>Initially, the validation summary is hidden. It gets shown when the user submits the page.
            From that point on, including after a post back, the validation summary will update.</para>
            <para>It defaults to false.</para>
            </value>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseValidationSummary.InvisiblePreservesSpace">
            <summary>
            InvisiblePreservesSpace determines if the ValidationSummary takes up space on the page
            when its invisible.
            </summary>
            <value>
            <para>When true, space is not preserved. The style is set to visibility:hidden 
            with no change to the display style.</para>
            <para>When false, space is preserved. The style is visibility:hidden;display:none.</para>
            <para>When the control becomes visible once again, the display 
            style is restored to its original value.</para>
            <para>It defaults to false.</para>
            </value>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseValidationSummary.EnableClientScript">
            <summary>
            EnableClientScript determines if the validation summary updates itself using 
            client side scripting.
            </summary>
            <value>
            <para>When false, its server side only. When true, it will
            use client side scripting unless the browser doesn't support the client side
            scripting. (See <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.TrueBrowser.SupportsClientSideValidationSummary">TrueBrowser.SupportsClientSideValidationSummary</see>.)</para>
            <para>It defaults to true.</para>
            </value>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseValidationSummary.RelatedControlID">
            <summary>
            RelatedControlID allows you to set up another control that you use with the ValidationSummary.
            That control should be shown and hidden as the ValidationSummary is.
            </summary>
            <value>
            <para>Typical usages:</para>
            <para>1. An enclosing box with additional formatting that wasn't built into this validator,
               such as images along the sides.</para>
            <para>2. A label that also appears on the page, saying "Fix the errors".</para>
            <para>When "", no related control is setup.
            Alternatively, the user can assign the RelatedControl programmatically.</para>
            <para>It defaults to "".</para>
            </value>
            <remarks>
            <para><b>EditorAttribute:</b><see cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.ControlConnectionTypeEditor"/></para>
            </remarks>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseValidationSummary.RelatedControl">
            <summary>
            Gets and sets a reference to a control that will be shown and hidden
            along with the Validation Summary. It is an 
            alternative to <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseValidationSummary.RelatedControlID"/> that
            allows the control to be anywhere on the page instead 
            of the same naming container as the ValidationSummary control.
            </summary>
            <value>
            <para>When assigned, it overrides any setting RelatedControlID.</para>
            <para>This can be a reference to the control anywhere on the page, not just in the same
            naming container.</para>
            </value>
            <exception cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.VAMException">When the control class is not validated
            by the <see cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.ControlConnection"/>.</exception>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseValidationSummary.RelatedControlConnection">
            <summary>
            Gets the <see cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.ControlConnection"/> class that maintains the ID and Instance storage
            used by <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseValidationSummary.RelatedControlID"/> and 
            <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseValidationSummary.RelatedControl"/> properties.
            </summary>
            <value>
            A ControlConnection also validates the control that is referenced by its contents.
            </value>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseValidationSummary.HyperLinkToFields">
            <summary>
            HyperLinkToFields creates hyperlinks on each error message.
            When clicked, the focus is moved to the first field that supports that error message.
            </summary>
            <value>
            <para>When true, it is on.</para>
            <para>Browsers that don't support the DOM/DHTML function SetFocus will not use this.</para>
            <para>It defaults to false.</para>
            </value>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseValidationSummary.GetInnerHTMLFunctionName">
            <summary>
            The client side requires a GetInnerHTML function whose name is defined here.
            </summary>
            <value>
            <para>This is an abstract method. It must be subclassed.</para>
            <para>See the <b>Developer's Guide</b> for a description,
            parameters, and an example of the GetInnerHTML function.</para>
            </value>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseValidationSummary.FormatListItemFunctionName">
            <summary>
            FormatListItemFunctionName defines the name of the client-side Format List Item 
            function that formats an error message in the validation summary. 
            </summary>
            <value>
            <para>If it returns "", no function is defined and error messages are omitted
            but the overall ValidationSummary is drawn.</para>
            <para>This is an abstract method. It must be subclassed.</para>
            <para>See the <b>Developer's Guide</b> for a description, parameters and an example
            of the Format List Item function.</para>
            </value>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseValidationSummary.Visible">
            <summary>
            Since the control shows and hides itself based on error messages, it is inappropriate
            to have a Visible property. Normally Visible=false turns off a control from generating
            its HTML. In this control, the Enabled property makes more sense. It is not being used
            anyway. So Visible will actually reflect the values of Enabled.
            </summary>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseValidationSummary.Enabled">
            <summary>
            Make Enabled toggle the Visible property to turn it on and off.
            </summary>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseValidationSummary.TagName">
            <summary>
            Returns "div".
            </summary>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseValidationSummary.TagKey">
            <summary>
            Returns HtmlTextWriterTag.Div
            </summary>
        </member>
        <member name="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.ValidationSummary">
            <summary>
            ValidationSummary implements the BaseValidationSummary to be similar in style
            to Microsoft's ValidationSummary control, only with many enhancements.
            </summary>
            <remarks>
            <para>See the <b>User's Guide</b> for an overview on using this control.</para>
            <para>Here are key features and differences with Microsoft's control:</para>
            <list type="bullet">
            <item>
            <description>
            There are no ShowSummary and ShowMessageBox properties. This control only handles showing
            a summary on the page. <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.VAMPage.ShowAlertOnSubmit">VAMPage.ShowAlertOnSubmit</see> 
            is the equivalent of ShowMessageBox.
            </description>
            </item>
            <item>
            <description>
            The <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseValidationSummary.Group"/> property is 
            used to allow multiple ValidationSummarys show error messages appropriate
            to a group. When the user hits a Submit button, the group on that submit button must match
            the value of this group property or this summary will be ignored. One ValidationSummary
            can support multiple groups by defining a pipe delimited list of group names.
            (This feature is defined in BaseValidationSummary.)
            </description>
            </item>
            <item>
            <description>
            The format of the error messages starts with the same 
            <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.ValidationSummary.DisplayMode"/> options: List, BulletedList,
            and SingleParagraph. However, each of these has additional support properties to extend the 
            formatting. List can have a lead string like a dash. BulletedList supports all types of 
            &lt;ol&gt; and &lt;ul&gt;
            tags. SingleParagraph can have text to separate each message.
            </description>
            </item>
            <item>
            <description>
            <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.ValidationSummary.HeaderText"/> still handles the text before the list. 
            <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.ValidationSummary.FooterText"/> provides text after.
            Both support the String Lookup System for localization.
            </description>
            </item>
            <item>
            <description>
            The DisplayMode has a None state to hide the list.
            </description>
            </item>
            <item>
            <description>
            The <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseValidationSummary.HyperLinkToFields"/> property sets up a hyperlink on each error message that sets focus to the
            field that generated the error. (Requires the browser to support SetFocus function.)
            (This feature is defined in BaseValidationSummary.)
            </description>
            </item>
            <item>
            <description>
            While the control has a style sheet, 
            <see cref="P:System.Web.UI.WebControls.WebControl.CssClass"/>, 
            the error messages section can override this with its own style sheet, 
            <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.ValidationSummary.ErrorMessageCssClass"/>.
            </description>
            </item>
            <item>
            <description>
            Error messages come from <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseAnyValidator.SummaryErrorMessage">BaseAnyValidator.SummaryErrorMessage</see>,
            which supports tokens and on-the-fly customization.
            </description>
            </item>
            <item>
            <description>
            The ForeColor isn't set to Red. Instead, the CssClass is set to "VAMValSummaryText".
            </description>
            </item>
            <item>
            <description>
            Once the summary is shown, it stays on screen with static information 
            until you click Submit again. The <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseValidationSummary.AutoUpdate"/> 
            property allows it to update itself as validators change their state.
            </description>
            </item>
            </list>
            </remarks>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.ValidationSummary.#ctor">
            <summary>
            Constructor with no parameters.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.ValidationSummary.#ctor(System.String,Jenzabar.Portal.Framework.Web.UI.Controls.Validation.ValidationSummaryDisplayMode,System.String)">
            <summary>
            Constructor that sets Group, DisplayMode and HeaderText properties.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.ValidationSummary.#ctor(System.String,Jenzabar.Portal.Framework.Web.UI.Controls.Validation.ValidationSummaryDisplayMode,System.String,System.String,System.Boolean,System.Boolean)">
            <summary>
            Constructor that sets the Group, DisplayMode, HeaderText, FooterText, HyperLinkToFields,
            and AutoUpdate properties.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.ValidationSummary.#ctor(System.String,Jenzabar.Portal.Framework.Web.UI.Controls.Validation.ValidationSummaryDisplayMode,System.String,System.String,System.String,System.String,System.Boolean,System.Boolean)">
            <summary>
            Constructor that sets the Group, DisplayMode, HeaderText, FooterText, 
            HeaderTextLookupID, FooterTextLookupID, HyperLinkToFields,
            and AutoUpdate properties.
            </summary>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.ValidationSummary.fHeaderText">
            <summary>
            Storage for <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.ValidationSummary.HeaderText"/>.
            </summary>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.ValidationSummary.fHeaderTextLookupID">
            <summary>
            Storage for <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.ValidationSummary.HeaderTextLookupID"/>.
            </summary>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.ValidationSummary.fLookedupHeaderText">
            <summary>
            When null, <see cref="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.ValidationSummary.GetLookedUpHeaderText"/> 
            calls <see cref="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.StringLookup.StringIDLookup(System.String,System.String,System.String)">StringLookup.StringIDLookup</see> to
            get the header text. This holds the result of that for multiple uses.
            </summary>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.ValidationSummary.fHeaderImageURL">
            <summary>
            Storage for <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.ValidationSummary.HeaderImageURL"/>.
            </summary>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.ValidationSummary.fHeaderElementPositions">
            <summary>
            Storage for <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.ValidationSummary.HeaderElementPositions"/>.
            </summary>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.ValidationSummary.fHeaderTextHorizontalAlign">
            <summary>
            Storage for <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.ValidationSummary.HeaderTextHorizontalAlign"/>.
            </summary>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.ValidationSummary.fHeaderImageHorizontalAlign">
            <summary>
            Storage for <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.ValidationSummary.HeaderImageHorizontalAlign"/>.
            </summary>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.ValidationSummary.fHeaderTableVerticalAlign">
            <summary>
            Storage for <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.ValidationSummary.HeaderTableVerticalAlign"/>.
            </summary>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.ValidationSummary.fHeaderImageColumnWidth">
            <summary>
            Storage for <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.ValidationSummary.HeaderImageColumnWidth"/>.
            </summary>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.ValidationSummary.fHeaderCssClass">
            <summary>
            Storage for <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.ValidationSummary.HeaderCssClass"/>.
            </summary>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.ValidationSummary.fFooterText">
            <summary>
            Storage for <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.ValidationSummary.FooterText"/>.
            </summary>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.ValidationSummary.fFooterTextLookupID">
            <summary>
            Storage for <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.ValidationSummary.FooterTextLookupID"/>.
            </summary>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.ValidationSummary.fLookedupFooterText">
            <summary>
            When null, <see cref="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.ValidationSummary.GetLookedUpFooterText"/> 
            calls <see cref="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.StringLookup.StringIDLookup(System.String,System.String,System.String)">StringLookup.StringIDLookup</see> to
            get the text. This holds the result of that for multiple uses.
            </summary>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.ValidationSummary.fFooterCssClass">
            <summary>
            Storage for <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.ValidationSummary.FooterCssClass"/>.
            </summary>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.ValidationSummary.fFooterHorizontalAlign">
            <summary>
            Storage for <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.ValidationSummary.FooterHorizontalAlign"/>.
            </summary>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.ValidationSummary.fDisplayMode">
            <summary>
            Storage for <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.ValidationSummary.DisplayMode"/>.
            </summary>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.ValidationSummary.fListLeadText">
            <summary>
            Storage for <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.ValidationSummary.ListLeadText"/>.
            </summary>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.ValidationSummary.fListLeadImageURL">
            <summary>
            Storage for <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.ValidationSummary.ListLeadImageURL"/>.
            </summary>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.ValidationSummary.fBulletListType">
            <summary>
            Storage for <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.ValidationSummary.BulletListType"/>.
            </summary>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.ValidationSummary.fSingleParagraphSeparator">
            <summary>
            Storage for <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.ValidationSummary.SingleParagraphSeparator"/>.
            </summary>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.ValidationSummary.fHyperLinksToolTip">
            <summary>
            Storage for <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.ValidationSummary.HyperLinksToolTip"/>.
            </summary>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.ValidationSummary.fHyperLinksToolTipLookupID">
            <summary>
            Storage for <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.ValidationSummary.HyperLinksToolTipLookupID"/>.
            </summary>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.ValidationSummary.fLookedupHyperLinksToolTip">
            <summary>
            When null, <see cref="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.ValidationSummary.GetLookedUpHyperLinksToolTip"/> calls 
            <see cref="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.StringLookup.StringIDLookup(System.String,System.String,System.String)">StringLookup.StringIDLookup</see> to
            get the HyperLinksToolTip text. This holds the result of that for multiple uses.
            </summary>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.ValidationSummary.fErrorMessageCssClass">
            <summary>
            Storage for <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.ValidationSummary.ErrorMessageCssClass"/>.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.ValidationSummary.GetErrorText(Jenzabar.Portal.Framework.Web.UI.Controls.Validation.VAMPage)">
            <summary>
            Formats the entire control's inner text with optional header, body (the error
            messages) and footer.
            </summary>
            <remarks>
            <para>It builds a single string containing HTML that represents the header
            (from <see cref="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.ValidationSummary.GetFormattedHeader"/>),
            the body (from invalid validator error messages), 
            and the footer  (from <see cref="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.ValidationSummary.GetFormattedFooter"/>).</para>
            <para>It uses a StringBuilder to gather the text. The StringBuilder
            is passed to some of the methods it calls to allow them to add text to it.</para>
            <para>See the <b>Developer's Guide</b> for a code example of how this method is implemented.</para>
            </remarks>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.ValidationSummary.GetDesignModeText">
            <summary>
            GetDesignModeText builds the control's text for design mode.
            It creates two fake error messages, "Error Message #"
            and formats them like GetErrorText does.
            </summary>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.ValidationSummary.fClosingParaTag">
            <summary>
            Assigned during <see cref="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.ValidationSummary.SetMessageStartFormatting(System.Text.StringBuilder)"/>, 
            it contains the closing tag used in SetMessageEndFormatting.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.ValidationSummary.SetMessageStartFormatting(System.Text.StringBuilder)">
            <summary>
            SetMessageStartFormatting adds text that precedes the list of error messages.
            </summary>
            <remarks>
            <para>Its first element is HeaderText + HeaderSeparator. Then if DisplayMode needs something else,
            its added.</para>
            <para>For DisplayMode = None, it adds nothing else.</para>
            <para>For DisplayMode = BulletList, it adds the opening UL or OL tag with type
            determined by <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.ValidationSummary.BulletListType"/>.</para>
            <para>For DisplayMode = List, it adds the opening SPAN tag.</para>
            <para>For DisplayMode = SingleParagraph, it adds the opening P tag.</para>
            <para>For all except DisplayMode = None, it adds the HTML attributes
            'class=' for <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.ValidationSummary.ErrorMessageCssClass"/>
            and 'title=' for <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.ValidationSummary.HyperLinksToolTip"/>.</para>
            <para>It sets <see cref="F:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.ValidationSummary.fClosingParaTag"/> in 
            preparation for use in <see cref="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.ValidationSummary.SetMessageEndFormatting(System.Text.StringBuilder)"/>.</para>
            </remarks>
            <param name="pListText">Add the text to this string builder.</param>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.ValidationSummary.SetMessageEndFormatting(System.Text.StringBuilder)">
            <summary>
            SetMessageEndFormatting adds the text that follows the list of error messages.
            </summary>
            <remarks>
            It writes the value in <see cref="F:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.ValidationSummary.fClosingParaTag"/>
            that was setup in <see cref="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.ValidationSummary.SetMessageStartFormatting(System.Text.StringBuilder)"/>.
            </remarks>
            <param name="pListText">Add the text to this stringbuilder.</param>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.ValidationSummary.ApplyListElementFormatting(System.String,System.Int32)">
            <summary>
            ApplyListElementFormatting adds the formatting around the individual
            error message dictated by DisplayMode.
            </summary>
            <remarks>
            <para>When DisplayMode is List, it adds <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.ValidationSummary.ListLeadText"/>
            and <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.ValidationSummary.ListLeadImageURL"/>
            before and &lt;br&gt; after.</para>
            <para>When DisplayMode is BulletList, it adds &lt;li&gt;
            before and &lt;/li&gt; after.</para>
            <para>When DisplayMode is SingleParagraph, it adds <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.ValidationSummary.SingleParagraphSeparator"/>
            before except on the first error message.</para>
            <para>Use <see cref="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.ValidationSummary.SetMessageStartFormatting(System.Text.StringBuilder)"/> 
            to insert any HTML that must procede the lines.</para>
            <para>Use <see cref="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.ValidationSummary.SetMessageEndFormatting(System.Text.StringBuilder)"/> 
            to insert any HTML that must follow the lines.</para>
            </remarks>
            <param name="pErrorMessage">The error message text to be formatted.</param>
            <param name="pPosInList">A count of the error message's position in the list. Starts at 0.</param>
            <returns>The formatted error message.</returns>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.ValidationSummary.GetFormattedHeader">
            <summary>
            GetFormattedHeader returns an HTML string containing the elements 
            <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.ValidationSummary.HeaderText"/> and
            <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.ValidationSummary.HeaderImageURL"/> as determined by 
            <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.ValidationSummary.HeaderElementPositions"/> and several justification
            properties.
            </summary>
            <remarks>
            <para>Most combinations of HeaderText and HeaderImageURL create a one or two column
            table.</para>
            </remarks>
            <returns>HTML representing the header. If there is no header, it will return "".</returns>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.ValidationSummary.GetFormattedFooter">
            <summary>
            GetFormattedFooter returns a string that contains the footer. 
            </summary>
            <remarks>
            If <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.ValidationSummary.FooterHorizontalAlign"/>
            is 'NotSet', it forms a &lt;span&gt; around 
            <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.ValidationSummary.FooterText"/>. Otherwise
            it forms a &lt;table&gt;.
            </remarks>
            <returns>The footer formatted in HTML. If FooterText is blank, it returns "".</returns>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.ValidationSummary.GetLookedUpHeaderText">
            <summary>
            Uses the String Lookup System to convert <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.ValidationSummary.HeaderText"/>
            and <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.ValidationSummary.HeaderTextLookupID"/>
            into the header text.
            </summary>
            <returns>The header text after using the String Lookup System.</returns>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.ValidationSummary.GetLookedUpFooterText">
            <summary>
            Uses the String Lookup System to convert <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.ValidationSummary.FooterText"/>
            and <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.ValidationSummary.FooterTextLookupID"/>
            into the footer text.
            </summary>
            <returns>The footer text after using the String Lookup System.</returns>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.ValidationSummary.GetLookedUpHyperLinksToolTip">
            <summary>
            Uses the String Lookup System to convert 
            <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.ValidationSummary.HyperLinksToolTip"/>
            and <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.ValidationSummary.HyperLinksToolTipLookupID"/>
            into the HyperLinksToolTip text.
            </summary>
            <returns>The HyperLinksToolTip text after using the String Lookup System.</returns>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.ValidationSummary.BuildOneCellTable(System.String,System.Web.UI.WebControls.HorizontalAlign,System.String)">
            <summary>
            BuildOneCellTable creates a table with one row, one column whose Width is 100%
            or a span tag if the HorizontalAlignment parameter is 'NotSet'.
            </summary>
            <remarks>
            <para>It is used by <see cref="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.ValidationSummary.GetFormattedHeader"/>
            and <see cref="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.ValidationSummary.GetFormattedFooter"/>.</para>
            </remarks>
            <param name="pCellBody">The HTML to put into the table cell.</param>
            <param name="pAlign">The alignment of the table cell.</param>
            <param name="pCssClass">The style sheet class name for the table cell.</param>
            <returns>The HTML containing the CellBody in a &lt;table&gt; or &lt;span&gt; tag.</returns>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.ValidationSummary.BuildAlignedCell(System.Text.StringBuilder,System.Web.UI.WebControls.HorizontalAlign,System.Web.UI.WebControls.VerticalAlign,System.String)">
            <summary>
            BuildAlignedCell is used by <see cref="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.ValidationSummary.GetFormattedHeader"/> 
            as it constructs a table containing both 
            <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.ValidationSummary.HeaderImageURL"/> and 
            <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.ValidationSummary.HeaderText"/>. 
            </summary>
            <remarks>
            It creates the starting "&lt;td&gt;" tag on the HTML stringbuilder parameter.
            </remarks>
            <param name="pHTML">Add the starting tag to this stringbuilder.</param>
            <param name="pHAlign">Determines the value of the align= attribute.
            If 'NotSet', the attribute is not added.</param>
            <param name="pVAlign">Determines the value of the valign= attribute.
            If 'NotSet', the attribute is not added.</param>
            <param name="pWidth">Determines the value of the width= attribute.
            If "", the attribute is not added.</param>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.ValidationSummary.GetListLeadText">
            <summary>
            Builds HTML from <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.ValidationSummary.ListLeadText"/>
            and <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.ValidationSummary.ListLeadImageURL"/>.
            </summary>
            <remarks>
            <para>ListLeadImageURL appears before ListLeadText.</para>
            <para>ListLeadImageURL is formed into an &lt;img&gt; tag. If it has
            a lead tilda (~), that is converted to a URL to the root of the web app.</para>
            </remarks>
            <returns></returns>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.ValidationSummary.DefineProperties(System.Text.StringBuilder)">
            <summary>
            Adds Properties to the client-side representation of the ValidationSummary object.
            </summary>
            <remarks>
            <para>These properties are added:</para>
            <list type="table">
            <listheader>
            <term>Name and Type</term>
            <description>Description</description>
            </listheader>
            <item>
            <term>PreListFnc (method)</term>
            <description>PreListFunctionName</description>
            </item>
            <item>
            <term>PostListFnc (method)</term>
            <description>PostListFunctionName</description>
            </item>
            <item>
            <term>Hdr (string)</term>
            <description>GetFormattedHeader</description>
            </item>
            <item>
            <term>Ftr (string)</term>
            <description>GetFormattedFooter</description>
            </item>
            <item>
            <term>ErrMsgCss (string)</term>
            <description>ErrorMessageCssClass</description>
            </item>
            <item>
            <term>LinkTT (string)</term>
            <description>GetLookedUpHyperLinksToolTip</description>
            </item>
            <item>
            <term>Showing (boolean)</term>
            <description>Controls.Count > 0</description>
            </item>
            <item>
            <term>HdrSep (string)</term>
            <description>HeaderSeparator</description>
            </item>
            <item>
            <term>ListLdTxt (string)</term>
            <description>GetListLeadText()</description>
            </item>
            <item>
            <term>BulletTL (string)</term>
            <description>HTML used in a TYPE= property of &lt;ol&gt; or &lt;ul&gt;
             from BulletTypeList.</description>
            </item>
            <item>
            <term>SglParSep (string)</term>
            <description>SingleParagraphSeparator</description>
            </item>
            <item>
            <term>DispMode (integer)</term>
            <description>0 = No List. 1 = List. 2 = BulletList. 3 = Single paragraph</description>
            </item>
            </list>
            </remarks>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.ValidationSummary.RenderAtDesignTime">
            <summary>
            Used by the ControlDesigner to build the HTML shown in design mode.
            </summary>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.ValidationSummary.HeaderText">
            <summary>
            HeaderText is text that appears before the list. 
            </summary>
            <value>
            <para>If assigned, it will automatically add a &lt;br&gt; or &amp;nbsp;
            between it and the list, depending on <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.ValidationSummary.DisplayMode"/>. </para>
            <para>It defaults to "".</para>
            </value>
            <remarks>
            <para><b>EditorAttribute:</b><see cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.StringTypeEditor"/></para>
            </remarks>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.ValidationSummary.HeaderTextLookupID">
            <summary>
            HeaderTextLookupID provides an alternative to 
            <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.ValidationSummary.HeaderText"/>. 
            When used, the HeaderText is looked up from another source, 
            such as a resource file or database..
            </summary>
            <value>
            <para>This allows you to define a common set of headers so the programmer doesn't uniquely
            define them each time. It also provides localization based on the current culture.</para>
            <para>To use it, assign a key string that represents the text that you want.
            This key will be used to search your data source for the correct string.</para>
            <para>When you are using the default Resource Manager system of VAM, it looks
            at the Name field of the ResX file for a match. The Value field of that row is returned.</para>
            <para>If no match is found OR this is blank, HeaderText will be used.</para>
            <para>This property uses the StringGroup of 
            <see cref="F:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.StringLookup.cMiscGroupName">StringLookup.cMiscGroupName</see>.</para>
            <para>It defaults to "".</para>
            </value>
            <remarks>
            <para><b>EditorAttribute:</b><see cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.StringTypeEditor"/></para>
            </remarks>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.ValidationSummary.HeaderImageURL">
            <summary>
            HeaderImageURL places a graphic image in the header along with the header text.
            </summary>
            <value>
            <para>The formatting depends on <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.ValidationSummary.HeaderElementPositions"/>. 
            In most cases, it forms a table separating the image from the text.</para>
            <para>When blank, this property and HeaderElementPositions are both ignored.</para>
            <para>You can use the tilde (~) character at the beginning of the text to 
            be replaced by the absolute path to the web application root folder. For example,
            "~\VAM\Appearance\myimage.gif".</para>
            <para>It defaults to "".</para>
            </value>
            <remarks>
            <para><b>EditorAttribute:</b><see cref="T:System.Web.UI.Design.ImageUrlEditor"/></para>
            </remarks>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.ValidationSummary.HeaderElementPositions">
            <summary>
            HeaderElementPositions determines how the <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.ValidationSummary.HeaderImageURL"/>
            is positioned relative to the <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.ValidationSummary.HeaderText"/>.
            </summary>
            <value>
            <para>It may insert the image within the text or build a table.</para>
            <para>Not used when HeaderImageURL is blank.</para>
            <para>It defaults to ValidationSummaryHeaderElementPositions.ImageLeft.</para>
            </value>
            <seealso cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.ValidationSummaryHeaderElementPositions"/>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.ValidationSummary.HeaderTextHorizontalAlign">
            <summary>
            HeaderTextHorizontalAlign is the horizontal position of the 
            <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.ValidationSummary.HeaderText"/>.
            </summary>
            <value>
            <para>It is only used when HeaderText is assigned. When there is no 
            <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.ValidationSummary.HeaderImageURL"/>,
            this still creates a one cell table unless its set to NotSet.</para>
            <para>It defaults to HorizontalAlign.NotSet.</para>
            </value>
            <seealso cref="T:System.Web.UI.WebControls.HorizontalAlign"/>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.ValidationSummary.HeaderImageHorizontalAlign">
            <summary>
            HeaderImageHorizontalAlign is the horizontal position of the image in the header.
            </summary>
            <value>
            <para>It is only used when <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.ValidationSummary.HeaderImageURL"/>
            is assigned and <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.ValidationSummary.HeaderElementPositions"/>
            is not set to ImageBeforeText and ImageAfterText.</para>
            <para>It defaults to HorizontalAlign.NotSet.</para>
            </value>
            <seealso cref="T:System.Web.UI.WebControls.HorizontalAlign"/>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.ValidationSummary.HeaderTableVerticalAlign">
            <summary>
            HeaderTableVerticalAlign is the vertical position of the 
            <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.ValidationSummary.HeaderText"/>
            and <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.ValidationSummary.HeaderImageURL"/> within table cells.
            </summary>
            <value>
            <para>It is only used when both HeaderText and HeaderImageURL are assigned and
            <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.ValidationSummary.HeaderElementPositions"/>
            forms a table for these elements.</para>
            <para>It defaults to VerticalAlign.NotSet.</para>
            </value>
            <seealso cref="T:System.Web.UI.WebControls.VerticalAlign"/>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.ValidationSummary.HeaderImageColumnWidth">
            <summary>
            HeaderImageColumnWidth is the minimum width of a header column containing an image.
            </summary>
            <value>
            <para>It is used when <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.ValidationSummary.HeaderElementPositions"/>
            is set to Left or Right.</para>
            <para>Images larger than the width always cause the browser to widen the column.</para>
            <para>Use values showing either pixels or percentages.</para>
            <para>It defaults to "10%".</para>
            </value>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.ValidationSummary.HeaderCssClass">
            <summary>
            HeaderCssClass is a style sheet class name that is applied to the header.
            </summary>
            <value>
            <para>If the header is enclosed in a table, the user can assign a border to this to
            enclose the header.</para>
            <para>If left blank, the style defaults to the parent's style (CssClass and the various
            font attributes on this control).</para>
            <para>It defaults to "VAMValSummaryHeader".</para>
            </value>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.ValidationSummary.FooterText">
            <summary>
            FooterText is text that appears after the list. 
            </summary>
            <value>
            <para>If defined, it will automatically add a &lt;br&gt; between it and the list.</para>
            <para>It defaults to "".</para>
            </value>
            <remarks>
            <para><b>EditorAttribute:</b><see cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.StringTypeEditor"/></para>
            </remarks>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.ValidationSummary.FooterTextLookupID">
            <summary>
            FooterTextLookupID provides an alternative to 
            <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.ValidationSummary.FooterText"/>. When used, the FooterText
            is looked up from another source, such as a resource file or database.
            </summary>
            <value>
            <para>This allows you to define a common set of footer texts so the programmer doesn't uniquely
            define them each time. It also provides localization based on the current culture.</para>
            <para>To use it, assign a key string that represents the text that you want.
            This key will be used to search your data source for the correct string.</para>
            <para>When you are using the default Resource Manager system of VAM, it looks
            at the Name field of the ResX file for a match. The Value field of that row is returned.</para>
            <para>If no match is found OR this is blank, FooterText will be used.</para>
            <para>This property uses the StringGroup of 
            <see cref="F:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.StringLookup.cMiscGroupName">StringLookup.cMiscGroupName</see>.</para>
            <para>It defaults to "".</para>
            </value>
            <remarks>
            <para><b>EditorAttribute:</b><see cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.StringTypeEditor"/></para>
            </remarks>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.ValidationSummary.FooterCssClass">
            <summary>
            FooterCssClass is a style sheet class name that is applied to the Footer.
            </summary>
            <value>
            <para>If the Footer is enclosed in a table, the user can assign a border to this to
            enclose the Footer.</para>
            <para>If left blank, the style defaults to the parent's style (CssClass and the various
            font attributes on this control).</para>
            <para>It defaults to "VAMValSummaryFooter".</para>
            </value>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.ValidationSummary.FooterHorizontalAlign">
             <summary>
             FooterHorizontalAlign determines if the <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.ValidationSummary.FooterText"/>
             is placed in a &lt;TABLE&gt; or not.
             </summary>
             <value>
             <para>When in a table, it determines the horizontal alignment.</para>
             <para>When HorizontalAlign.NotSet, the text is not in a table.
             Otherwise, it is in a table whose width is 100% of the enclosing &lt;DIV&gt; and this
             specifies the alignment of the contents.</para>
            <para>It defaults to HorizontalAlign.NotSet.</para>
             </value>
             <seealso cref="T:System.Web.UI.WebControls.HorizontalAlign"/>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.ValidationSummary.DisplayMode">
            <summary>
            DisplayMode determines how the list of error messages is formatted.
            </summary>
            <value>
            <para>It defaults to ValidationSummaryDisplayMode.BulletList.</para>
            </value>
            <seealso cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.ValidationSummaryDisplayMode"/>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.ValidationSummary.ListLeadText">
            <summary>
            ListLeadText is used when <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.ValidationSummary.DisplayMode"/> is 
            set to ValidationSummaryDisplayMode.List. 
            Its value precedes each error message.
            </summary>
            <value>
            <para>Use it to add formatting that differs from what is offered by the HTML tags &lt;ol&gt;
            and &lt;ul&gt;.</para> 
            <para>If you want to show an image, use <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.ValidationSummary.ListLeadImageURL"/>.
            When ListLeadImageURL and ListLeadText are both assigned, the image appears first.</para>
            <para>It defaults to blank.</para> 
            </value>
            <remarks>
            <para><b>EditorAttribute:</b><see cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.StringTypeEditor"/></para>
            </remarks>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.ValidationSummary.ListLeadImageURL">
            <summary>
            ListLeadImageURL places a graphic image in front of each error message when
            <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.ValidationSummary.DisplayMode"/> is set to ValidationSummaryDisplayMode.List.
            </summary>
            <value>
            <para>If <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.ValidationSummary.ListLeadText"/> is also assigned,
            the image appears first.</para>
            <para>You can use the tilde (~) character at the beginning of the text to 
            be replaced by the absolute path to the web application root folder. For example,
            "~\VAM\Appearance\myimage.gif".</para>
            <para>It defaults to "".</para>
            </value>
            <remarks>
            <para><b>EditorAttribute:</b><see cref="T:System.Web.UI.Design.ImageUrlEditor"/></para>
            </remarks>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.ValidationSummary.BulletListType">
            <summary>
            BulletListType is used when <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.ValidationSummary.DisplayMode"/>
            is set to ValidationSummaryDisplayMode.BulletList. It determines the style of the bullets, using either 
            &lt;ul&gt; or &lt;ol&gt; with a specific type attribute.
            </summary>
            <value>
            <para>It defaults to BulletListType.Disc.</para>
            </value>
            <seealso cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BulletListType"/>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.ValidationSummary.SingleParagraphSeparator">
            <summary>
            SingleParagraphSeparator is used when <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.ValidationSummary.DisplayMode"/>
            is set to ValidationSummaryDisplayMode.SingleParagraph.
            It is a string inserted between each error message.
            </summary>
            <value>
            <para>It defaults to " " (a space).</para>
            </value>
            <remarks>
            <para><b>EditorAttribute:</b><see cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.StringTypeEditor"/></para>
            </remarks>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.ValidationSummary.HyperLinksToolTip">
            <summary>
            HyperLinksToolTip is used when <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseValidationSummary.HyperLinkToFields"/>
            is enabled. It applies a tooltip around the error messages that helps the user know what
            the purpose of the hyperlinks is.
            </summary>
            <value>
            <para>It defaults to "Click to select the field.".</para>
            </value>
            <remarks>
            <para><b>EditorAttribute:</b><see cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.StringTypeEditor"/></para>
            </remarks>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.ValidationSummary.HyperLinksToolTipLookupID">
            <summary>
            HyperLinksToolTipLookupID provides an alternative to <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.ValidationSummary.HyperLinksToolTip"/>. 
            When used, the HyperLinksToolTip is looked up from another source, 
            such as a resource file or database.
            </summary>
            <value>
            <para>This allows you to define a common set of HyperLinksToolTips so the programmer doesn't uniquely
            define them each time. It also provides localization based on the current culture.</para>
            <para>To use it, assign a key string that represents the text that you want.
            This key will be used to search your data source for the correct string.</para>
            <para>When you are using the default Resource Manager system of VAM, it looks
            at the Name field of the ResX file for a match. The Value field of that row is returned.</para>
            <para>If no match is found OR this is blank, HyperLinksToolTip will be used.</para>
            <para>This property uses the StringGroup of 
            <see cref="F:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.StringLookup.cMiscGroupName">StringLookup.cMiscGroupName</see>.</para>
            <para>It defaults to "".</para>
            </value>
            <remarks>
            <para><b>EditorAttribute:</b><see cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.StringTypeEditor"/></para>
            </remarks>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.ValidationSummary.ErrorMessageCssClass">
            <summary>
            ErrorMessageCssClass is a style sheet class name that is applied to the error messages
            between the header and footer. Aside from changing font and color, this is useful
            in adjusting the gaps formed by BulletList's use of &lt;ul&gt; and &lt;ol&gt;.
            </summary>
            <value>
            <para>It defaults to "VAMValSummaryErrors".</para>
            </value>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.ValidationSummary.CssClass">
            <summary>
            Defines the outer border and global text.
            </summary>
            <value>
            <para>Use <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.ValidationSummary.HeaderCssClass"/> for the header, 
            <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.ValidationSummary.ErrorMessageCssClass"/> for the body, and 
            <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.ValidationSummary.FooterCssClass"/> for the footer.</para>
            </value>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.ValidationSummary.FormatListItemFunctionName">
            <summary>
            The client-side Format List Item Function is based on 
            <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.ValidationSummary.DisplayMode"/>.
            </summary>
            <remarks>
            <para>When Display mode is None, this returns "".</para>
            <para>When Display mode is List, this returns "VAM_ValSumFmtItemList".</para>
            <para>When Display mode is BulletList, this returns "VAM_ValSumFmtBullet".</para>
            <para>When Display mode is SingleParagraph, this returns "VAM_ValSumFmtSglPara".</para>
            </remarks>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.ValidationSummary.PreListFunctionName">
            <summary>
            PreListFunctionName defines the name of the client-side Pre List Function that inserts
            text just prior to the list in the validation summary.
            </summary>
            <value>
            <para>See the <b>Developer's Guide</b> for details on the Pre List Function and an example.</para>
            <para>When Display mode is None, this returns "".</para>
            <para>When Display mode is List, this returns "VAM_ValSumPreDefault".</para>
            <para>When Display mode is BulletList, this returns "VAM_ValSumPreBullet".</para>
            <para>When Display mode is SingleParagraph, this returns "VAM_ValSumPreSglPara".</para>
            </value>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.ValidationSummary.PostListFunctionName">
            <summary>
            PostListFunctionName defines the name of the client-side Post List Function 
            that inserts text just after to the list in the  validation summary. 
            </summary>
            <value>
            <para>See the <b>Developer's Guide</b> for details on the Post List Function and an example.</para>
            <para>When Display mode is None, this returns "".</para>
            <para>When Display mode is List, this returns "VAM_ValSumPostDefault".</para>
            <para>When Display mode is BulletList, this returns "VAM_ValSumPostBullet".</para>
            <para>When Display mode is SingleParagraph, this returns "VAM_ValSumPostSglPara".</para>
            </value>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.ValidationSummary.HeaderSeparator">
            <summary>
            HeaderSeparator is a string inserted after the Header to separate it from the list.
            </summary>
            <value>
            Its value depends on <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.ValidationSummary.DisplayMode"/>.
            SingleParagraph uses "&amp;nbsp;". The others use "&lt;br&gt;"
            </value>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.ValidationSummary.GetInnerHTMLFunctionName">
            <summary>
            The client-side GetInnerHTML Function is "VAM_ValSumInnerHTML".
            </summary>
        </member>
        <member name="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.ValidationSummaryDisplayMode">
            <summary>
            ValidationSummaryDisplayMode is used by 
            <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.ValidationSummary.DisplayMode">ValidationSummary.DisplayMode</see>.
            </summary>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.ValidationSummaryDisplayMode.None">
            <summary>
            None - no list is shown. The header and footer are used to construct a fixed message.
            </summary>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.ValidationSummaryDisplayMode.List">
            <summary>
            List - each error message is shown on a separate line, optionally preceded by the
            text in ValidationSummary.ListLeadText.
            </summary>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.ValidationSummaryDisplayMode.BulletList">
            <summary>
            BulletList - the error messages are shown using the &lt;ul&gt; or &lt;ol&gt; tags for formatting.
              ValidationSummary.BulletListType determines the format of the bullet.
            </summary>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.ValidationSummaryDisplayMode.SingleParagraph">
            <summary>
            SingleParagraph - the error messages are shown as sentences of a paragraph. They are separated
              by ValidationSummary.SingleParagraphSeparator.
            </summary>
        </member>
        <member name="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.ValidationSummaryHeaderElementPositions">
            <summary>
            ValidationSummaryHeaderElementPositions is used by the
            <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.ValidationSummary.HeaderElementPositions">ValidationSummary.HeaderElementPositions</see> 
            property to determine how the 
            <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.ValidationSummary.HeaderText">ValidationSummary.HeaderText</see> and 
            <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.ValidationSummary.HeaderImageURL">ValidationSummary.HeaderImageURL</see> are positioned associated
            with each other. Some of these form a table to separate text from image.
            </summary>
            <remarks>
            Each of these terms defines the image's position relative to the text.
            </remarks>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.ValidationSummaryHeaderElementPositions.ImageBeforeText">
            <summary>
            Image is embedded into the text as the first element: &lt;img&gt; text
            </summary>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.ValidationSummaryHeaderElementPositions.ImageAfterText">
            <summary>
            Image is embedded into the text as the last element: text &lt;img&gt;
            </summary>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.ValidationSummaryHeaderElementPositions.ImageLeft">
            <summary>
            Two column table with image on the left and text on the right.
            </summary>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.ValidationSummaryHeaderElementPositions.ImageRight">
            <summary>
            Two column table with the text on the left and image on the right.
            </summary>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.ValidationSummaryHeaderElementPositions.ImageTop">
            <summary>
            Two row table where the top contains the image.
            Text is in the bottom.
            </summary>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.ValidationSummaryHeaderElementPositions.ImageBottom">
            <summary>
            Two row table where the top contains the text, centered.
            Image is in the bottom.
            </summary>
        </member>
        <member name="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BulletListType">
            <summary>
            BulletListType is used when 
            <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.ValidationSummary.DisplayMode">ValidationSummary.DisplayMode</see> is 
            set to BulletList.
            It defines the standard terms supported by &lt;ol type=&gt; and &lt;ul type=&gt;.
            </summary>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BulletListType.Circle">
            <summary>
            Creates &lt;ul type=circle&gt;&lt;/ul&gt;
            </summary>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BulletListType.Disc">
            <summary>
            Creates &lt;ul type=disc&gt;&lt;/ul&gt;
            </summary>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BulletListType.Square">
            <summary>
            Creates &lt;ul type=square&gt;&lt;/ul&gt;
            </summary>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BulletListType.AlphaCharsUppercase">
            <summary>
            Creates &lt;ol type=A&gt;&lt;/ol&gt;
            </summary>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BulletListType.AlphaCharsLowercase">
            <summary>
            Creates &lt;ol type=a&gt;&lt;/ol&gt;
            </summary>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BulletListType.RomanNumeralsUppercase">
            <summary>
            Creates &lt;ol type=I&gt;&lt;/ol&gt;
            </summary>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BulletListType.RomanNumeralsLowercase">
            <summary>
            Creates &lt;ol type=i&gt;&lt;/ol&gt;
            </summary>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BulletListType.Numbers">
            <summary>
            Creates &lt;ol type=1&gt;&lt;/ol&gt;
            </summary>
        </member>
        <member name="T:Jenzabar.Portal.Framework.Web.UI.Controls.MetaControls.Attributes.TextAreaMetaControlAttribute">
            <summary>
            An attribute used to declare the need for a preference or setting to be displayed as a Text Area
            </summary>
            <remarks>
            This attribute can be applied to either a portlet (a class that inherits from PortletBase) or
            an application (a class that inherits from PortalApplicationBase).
            
            It will be used by the framework to automatically generate the appropriate preferences or
            settings overlay that allows the user to enter the data for that preference or setting
            using the control specified.
            
            This information can then be retrieved by using the various preference and settings domain objects
            in the framework. They can also be accessed by using the Preferences or Settings property of the
            PortletBase and PortalApplicationBase classes.
            </remarks>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.MetaControls.Attributes.TextAreaMetaControlAttribute.#ctor(System.Int32,System.String,System.String,System.String,System.Boolean,System.String,Jenzabar.Portal.Framework.NameValueDataSourceType,Jenzabar.Portal.Framework.NameValueType,System.String)">
            <summary>
            Constructs a TextArea meta control
            </summary>
            <param name="sortOrder">Ordinal that determines the meta control's position</param>
            <param name="name">The name of the meta control</param>
            <param name="displayName">The display name of the meta control</param>
            <param name="description">The description for the meta control</param>
            <param name="required">Denotes whether or not a value is required for the meta control</param>
            <param name="defaultValue">The list of selected items chosen by default</param>
            <param name="nameValueDataSourceType">Denotes whether or not the name/value data source is static or dynamic</param>
            <param name="nameValueType">The type of the name/value pair</param>
            <param name="cssClass">The CSS class for the meta control</param>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.MetaControls.Attributes.TextAreaMetaControlAttribute.#ctor(System.Int32,System.String,System.String,System.String,System.Boolean,System.String,Jenzabar.Portal.Framework.NameValueDataSourceType,Jenzabar.Portal.Framework.NameValueType,System.String,System.Int32,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Constructs a TextArea meta control
            </summary>
            <param name="sortOrder">Ordinal that determines the meta control's position</param>
            <param name="name">The name of the meta control</param>
            <param name="displayName">The display name of the meta control</param>
            <param name="description">The description for the meta control</param>
            <param name="required">Denotes whether or not a value is required for the meta control</param>
            <param name="defaultValue">The list of selected items chosen by default</param>
            <param name="nameValueDataSourceType">Denotes whether or not the name/value data source is static or dynamic</param>
            <param name="nameValueType">The type of the name/value pair</param>
            <param name="cssClass">The CSS class for the meta control</param>
            <param name="columns">The number of columns for the meta control</param>
            <param name="rows">The number of rows for the meta control</param>
            <param name="maxLength">The maximum length for the meta control</param>
            <param name="wrap">Denotes whether or not to wrap text in the meta control</param>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.MetaControls.Attributes.TextAreaMetaControlAttribute.#ctor(System.Int32,System.String,System.String,System.String,System.Boolean,System.String,Jenzabar.Portal.Framework.NameValueDataSourceType,Jenzabar.Portal.Framework.NameValueType,System.String,System.Int32,System.Int32,System.Int32,System.Boolean,System.String)">
            <summary>
            Constructs a TextArea meta control
            </summary>
            <param name="sortOrder">Ordinal that determines the meta control's position</param>
            <param name="name">The name of the meta control</param>
            <param name="displayName">The display name of the meta control</param>
            <param name="description">The description for the meta control</param>
            <param name="required">Denotes whether or not a value is required for the meta control</param>
            <param name="defaultValue">The list of selected items chosen by default</param>
            <param name="nameValueDataSourceType">Denotes whether or not the name/value data source is static or dynamic</param>
            <param name="nameValueType">The type of the name/value pair</param>
            <param name="cssClass">The CSS class for the meta control</param>
            <param name="columns">The number of columns for the meta control</param>
            <param name="rows">The number of rows for the meta control</param>
            <param name="maxLength">The maximum length for the meta control</param>
            <param name="wrap">Denotes whether or not to wrap text in the meta control</param>
            <param name="dataTypeCheckDataType">Denotes the sort of data type check to perform on the text</param>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.MetaControls.Attributes.TextAreaMetaControlAttribute.#ctor(System.Int32,System.String,System.String,System.String,System.Boolean,System.String,Jenzabar.Portal.Framework.NameValueDataSourceType,Jenzabar.Portal.Framework.NameValueType,System.String,System.Int32,System.Int32,System.Int32,System.Boolean,System.Int32,System.Int32)">
            <summary>
            Constructs a TextArea meta control
            </summary>
            <param name="sortOrder">Ordinal that determines the meta control's position</param>
            <param name="name">The name of the meta control</param>
            <param name="displayName">The display name of the meta control</param>
            <param name="description">The description for the meta control</param>
            <param name="required">Denotes whether or not a value is required for the meta control</param>
            <param name="defaultValue">The list of selected items chosen by default</param>
            <param name="nameValueDataSourceType">Denotes whether or not the name/value data source is static or dynamic</param>
            <param name="nameValueType">The type of the name/value pair</param>
            <param name="cssClass">The CSS class for the meta control</param>
            <param name="columns">The number of columns for the meta control</param>
            <param name="rows">The number of rows for the meta control</param>
            <param name="maxLength">The maximum length allowed to be entered in the meta control</param>
            <param name="wrap">Denotes whether or not to wrap text in the meta control</param>
            <param name="lengthMinimum">The minimum length for the meta control</param>
            <param name="lengthMaximum">The maximum length for the meta control</param>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.MetaControls.Attributes.TextAreaMetaControlAttribute.#ctor(System.Int32,System.String,System.String,System.String,System.Boolean,System.String,Jenzabar.Portal.Framework.NameValueDataSourceType,Jenzabar.Portal.Framework.NameValueType,System.String,System.Int32,System.Int32,System.Int32,System.Boolean,System.Int32)">
            <summary>
            Constructs a TextArea meta control
            </summary>
            <param name="sortOrder">Ordinal that determines the meta control's position</param>
            <param name="name">The name of the meta control</param>
            <param name="displayName">The display name of the meta control</param>
            <param name="description">The description for the meta control</param>
            <param name="required">Denotes whether or not a value is required for the meta control</param>
            <param name="defaultValue">The list of selected items chosen by default</param>
            <param name="nameValueDataSourceType">Denotes whether or not the name/value data source is static or dynamic</param>
            <param name="nameValueType">The type of the name/value pair</param>
            <param name="cssClass">The CSS class for the meta control</param>
            <param name="columns">The number of columns for the meta control</param>
            <param name="rows">The number of rows for the meta control</param>
            <param name="maxLength">The maximum length allowed to be entered in the meta control</param>
            <param name="wrap">Denotes whether or not to wrap text in the meta control</param>
            <param name="maximumWordCount">The maximum number of words allowed in the meta control</param>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.MetaControls.Attributes.TextAreaMetaControlAttribute.#ctor(System.Int32,System.String,System.String,System.String,System.Boolean,System.String,Jenzabar.Portal.Framework.NameValueDataSourceType,Jenzabar.Portal.Framework.NameValueType,System.String,System.Int32,System.Int32,System.Int32,System.Boolean,System.String,System.String,System.String)">
            <summary>
            Constructs a TextArea meta control
            </summary>
            <param name="sortOrder">Ordinal that determines the meta control's position</param>
            <param name="name">The name of the meta control</param>
            <param name="displayName">The display name of the meta control</param>
            <param name="description">The description for the meta control</param>
            <param name="required">Denotes whether or not a value is required for the meta control</param>
            <param name="defaultValue">The list of selected items chosen by default</param>
            <param name="nameValueDataSourceType">Denotes whether or not the name/value data source is static or dynamic</param>
            <param name="nameValueType">The type of the name/value pair</param>
            <param name="cssClass">The CSS class for the meta control</param>
            <param name="columns">The number of columns for the meta control</param>
            <param name="rows">The number of rows for the meta control</param>
            <param name="maxLength">The maximum length for the meta control</param>
            <param name="wrap">Denotes whether or not to wrap text in the meta control</param>
            <param name="dataTypeCheckDataType">Denotes the sort of data type check to perform on the text</param>
            <param name="rangeMinimum">The minimum value for range validation</param>
            <param name="rangeMaximum">The maximum value for range validation</param>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.MetaControls.Attributes.TextAreaMetaControlAttribute.#ctor(System.Int32,System.String,System.String,System.String,System.Boolean,System.String,Jenzabar.Portal.Framework.NameValueDataSourceType,Jenzabar.Portal.Framework.NameValueType,System.String,System.Int32,System.Int32,System.Int32,System.Boolean,System.String,System.Boolean,System.Boolean)">
            <summary>
            Constructs a TextArea meta control
            </summary>
            <param name="sortOrder">Ordinal that determines the meta control's position</param>
            <param name="name">The name of the meta control</param>
            <param name="displayName">The display name of the meta control</param>
            <param name="description">The description for the meta control</param>
            <param name="required">Denotes whether or not a value is required for the meta control</param>
            <param name="defaultValue">The list of selected items chosen by default</param>
            <param name="nameValueDataSourceType">Denotes whether or not the name/value data source is static or dynamic</param>
            <param name="nameValueType">The type of the name/value pair</param>
            <param name="cssClass">The CSS class for the meta control</param>
            <param name="columns">The number of columns for the meta control</param>
            <param name="rows">The number of rows for the meta control</param>
            <param name="maxLength">The maximum length for the meta control</param>
            <param name="wrap">Denotes whether or not to wrap text in the meta control</param>
            <param name="regularExpression">The regular expression to validate the input against</param>
            <param name="caseInsensitive">Denotes whether or not the regular expression is case insensitive</param>
            <param name="multiLine">Denotes whether or not the regular expression accounts for multi-line input</param>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.MetaControls.Attributes.TextAreaMetaControlAttribute.#ctor(System.Int32,System.String,System.String,System.String,System.Type,System.Boolean,System.String,Jenzabar.Portal.Framework.NameValueDataSourceType,Jenzabar.Portal.Framework.NameValueType,System.String)">
            <summary>
            Constructs a TextArea meta control
            </summary>
            <param name="sortOrder">Ordinal that determines the meta control's position</param>
            <param name="name">The name of the meta control</param>
            <param name="friendlyNameResourceKey">The resource key for the friendly name of the attribute</param>
            <param name="descriptionResourceKey">The resource key for a brief description of the attribute</param>
            <param name="resourceProvider">The qualified type name of the class that implements IResourceProvider</param>
            <param name="required">Denotes whether or not a value is required for the meta control</param>
            <param name="defaultValue">The list of selected items chosen by default</param>
            <param name="nameValueDataSourceType">Denotes whether or not the name/value data source is static or dynamic</param>
            <param name="nameValueType">The type of the name/value pair</param>
            <param name="cssClass">The CSS class for the meta control</param>
            <remarks>
            The resourceProvider argument is in the format: "AssemblyName,TypeName".
            </remarks>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.MetaControls.Attributes.TextAreaMetaControlAttribute.#ctor(System.Int32,System.String,System.String,System.String,System.Type,System.Boolean,System.String,Jenzabar.Portal.Framework.NameValueDataSourceType,Jenzabar.Portal.Framework.NameValueType,System.String,System.Int32,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Constructs a TextArea meta control
            </summary>
            <param name="sortOrder">Ordinal that determines the meta control's position</param>
            <param name="name">The name of the meta control</param>
            <param name="friendlyNameResourceKey">The resource key for the friendly name of the attribute</param>
            <param name="descriptionResourceKey">The resource key for a brief description of the attribute</param>
            <param name="resourceProvider">The qualified type name of the class that implements IResourceProvider</param>
            <param name="required">Denotes whether or not a value is required for the meta control</param>
            <param name="defaultValue">The list of selected items chosen by default</param>
            <param name="nameValueDataSourceType">Denotes whether or not the name/value data source is static or dynamic</param>
            <param name="nameValueType">The type of the name/value pair</param>
            <param name="cssClass">The CSS class for the meta control</param>
            <param name="columns">The number of columns for the meta control</param>
            <param name="rows">The number of rows for the meta control</param>
            <param name="maxLength">The maximum length for the meta control</param>
            <param name="wrap">Denotes whether or not to wrap text in the meta control</param>
            <remarks>
            The resourceProvider argument is in the format: "AssemblyName,TypeName".
            </remarks>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.MetaControls.Attributes.TextAreaMetaControlAttribute.#ctor(System.Int32,System.String,System.String,System.String,System.Type,System.Boolean,System.String,Jenzabar.Portal.Framework.NameValueDataSourceType,Jenzabar.Portal.Framework.NameValueType,System.String,System.Int32,System.Int32,System.Int32,System.Boolean,System.String)">
            <summary>
            Constructs a TextArea meta control
            </summary>
            <param name="sortOrder">Ordinal that determines the meta control's position</param>
            <param name="name">The name of the meta control</param>
            <param name="friendlyNameResourceKey">The resource key for the friendly name of the attribute</param>
            <param name="descriptionResourceKey">The resource key for a brief description of the attribute</param>
            <param name="resourceProvider">The qualified type name of the class that implements IResourceProvider</param>
            <param name="required">Denotes whether or not a value is required for the meta control</param>
            <param name="defaultValue">The list of selected items chosen by default</param>
            <param name="nameValueDataSourceType">Denotes whether or not the name/value data source is static or dynamic</param>
            <param name="nameValueType">The type of the name/value pair</param>
            <param name="cssClass">The CSS class for the meta control</param>
            <param name="columns">The number of columns for the meta control</param>
            <param name="rows">The number of rows for the meta control</param>
            <param name="maxLength">The maximum length for the meta control</param>
            <param name="wrap">Denotes whether or not to wrap text in the meta control</param>
            <param name="dataTypeCheckDataType">Denotes the sort of data type check to perform on the text</param>
            <remarks>
            The resourceProvider argument is in the format: "AssemblyName,TypeName".
            </remarks>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.MetaControls.Attributes.TextAreaMetaControlAttribute.#ctor(System.Int32,System.String,System.String,System.String,System.Type,System.Boolean,System.String,Jenzabar.Portal.Framework.NameValueDataSourceType,Jenzabar.Portal.Framework.NameValueType,System.String,System.Int32,System.Int32,System.Int32,System.Boolean,System.Int32,System.Int32)">
            <summary>
            Constructs a TextArea meta control
            </summary>
            <param name="sortOrder">Ordinal that determines the meta control's position</param>
            <param name="name">The name of the meta control</param>
            <param name="friendlyNameResourceKey">The resource key for the friendly name of the attribute</param>
            <param name="descriptionResourceKey">The resource key for a brief description of the attribute</param>
            <param name="resourceProvider">The qualified type name of the class that implements IResourceProvider</param>
            <param name="required">Denotes whether or not a value is required for the meta control</param>
            <param name="defaultValue">The list of selected items chosen by default</param>
            <param name="nameValueDataSourceType">Denotes whether or not the name/value data source is static or dynamic</param>
            <param name="nameValueType">The type of the name/value pair</param>
            <param name="cssClass">The CSS class for the meta control</param>
            <param name="columns">The number of columns for the meta control</param>
            <param name="rows">The number of rows for the meta control</param>
            <param name="maxLength">The maximum length allowed to be entered in the meta control</param>
            <param name="wrap">Denotes whether or not to wrap text in the meta control</param>
            <param name="lengthMinimum">The minimum length for the meta control</param>
            <param name="lengthMaximum">The maximum length for the meta control</param>
            <remarks>
            The resourceProvider argument is in the format: "AssemblyName,TypeName".
            </remarks>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.MetaControls.Attributes.TextAreaMetaControlAttribute.#ctor(System.Int32,System.String,System.String,System.String,System.Type,System.Boolean,System.String,Jenzabar.Portal.Framework.NameValueDataSourceType,Jenzabar.Portal.Framework.NameValueType,System.String,System.Int32,System.Int32,System.Int32,System.Boolean,System.Int32)">
            <summary>
            Constructs a TextArea meta control
            </summary>
            <param name="sortOrder">Ordinal that determines the meta control's position</param>
            <param name="name">The name of the meta control</param>
            <param name="friendlyNameResourceKey">The resource key for the friendly name of the attribute</param>
            <param name="descriptionResourceKey">The resource key for a brief description of the attribute</param>
            <param name="resourceProvider">The qualified type name of the class that implements IResourceProvider</param>
            <param name="required">Denotes whether or not a value is required for the meta control</param>
            <param name="defaultValue">The list of selected items chosen by default</param>
            <param name="nameValueDataSourceType">Denotes whether or not the name/value data source is static or dynamic</param>
            <param name="nameValueType">The type of the name/value pair</param>
            <param name="cssClass">The CSS class for the meta control</param>
            <param name="columns">The number of columns for the meta control</param>
            <param name="rows">The number of rows for the meta control</param>
            <param name="maxLength">The maximum length allowed to be entered in the meta control</param>
            <param name="wrap">Denotes whether or not to wrap text in the meta control</param>
            <param name="maximumWordCount">The maximum number of words allowed in the meta control</param>
            <remarks>
            The resourceProvider argument is in the format: "AssemblyName,TypeName".
            </remarks>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.MetaControls.Attributes.TextAreaMetaControlAttribute.#ctor(System.Int32,System.String,System.String,System.String,System.Type,System.Boolean,System.String,Jenzabar.Portal.Framework.NameValueDataSourceType,Jenzabar.Portal.Framework.NameValueType,System.String,System.Int32,System.Int32,System.Int32,System.Boolean,System.String,System.String,System.String)">
            <summary>
            Constructs a TextArea meta control
            </summary>
            <param name="sortOrder">Ordinal that determines the meta control's position</param>
            <param name="name">The name of the meta control</param>
            <param name="friendlyNameResourceKey">The resource key for the friendly name of the attribute</param>
            <param name="descriptionResourceKey">The resource key for a brief description of the attribute</param>
            <param name="resourceProvider">The qualified type name of the class that implements IResourceProvider</param>
            <param name="required">Denotes whether or not a value is required for the meta control</param>
            <param name="defaultValue">The list of selected items chosen by default</param>
            <param name="nameValueDataSourceType">Denotes whether or not the name/value data source is static or dynamic</param>
            <param name="nameValueType">The type of the name/value pair</param>
            <param name="cssClass">The CSS class for the meta control</param>
            <param name="columns">The number of columns for the meta control</param>
            <param name="rows">The number of rows for the meta control</param>
            <param name="maxLength">The maximum length for the meta control</param>
            <param name="wrap">Denotes whether or not to wrap text in the meta control</param>
            <param name="dataTypeCheckDataType">Denotes the sort of data type check to perform on the text</param>
            <param name="rangeMinimum">The minimum value for range validation</param>
            <param name="rangeMaximum">The maximum value for range validation</param>
            <remarks>
            The resourceProvider argument is in the format: "AssemblyName,TypeName".
            </remarks>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.MetaControls.Attributes.TextAreaMetaControlAttribute.#ctor(System.Int32,System.String,System.String,System.String,System.Type,System.Boolean,System.String,Jenzabar.Portal.Framework.NameValueDataSourceType,Jenzabar.Portal.Framework.NameValueType,System.String,System.Int32,System.Int32,System.Int32,System.Boolean,System.String,System.Boolean,System.Boolean)">
            <summary>
            Constructs a TextArea meta control
            </summary>
            <param name="sortOrder">Ordinal that determines the meta control's position</param>
            <param name="name">The name of the meta control</param>
            <param name="friendlyNameResourceKey">The resource key for the friendly name of the attribute</param>
            <param name="descriptionResourceKey">The resource key for a brief description of the attribute</param>
            <param name="resourceProvider">The qualified type name of the class that implements IResourceProvider</param>
            <param name="required">Denotes whether or not a value is required for the meta control</param>
            <param name="defaultValue">The list of selected items chosen by default</param>
            <param name="nameValueDataSourceType">Denotes whether or not the name/value data source is static or dynamic</param>
            <param name="nameValueType">The type of the name/value pair</param>
            <param name="cssClass">The CSS class for the meta control</param>
            <param name="columns">The number of columns for the meta control</param>
            <param name="rows">The number of rows for the meta control</param>
            <param name="maxLength">The maximum length for the meta control</param>
            <param name="wrap">Denotes whether or not to wrap text in the meta control</param>
            <param name="regularExpression">The regular expression to validate the input against</param>
            <param name="caseInsensitive">Denotes whether or not the regular expression is case insensitive</param>
            <param name="multiLine">Denotes whether or not the regular expression accounts for multi-line input</param>
            <remarks>
            The resourceProvider argument is in the format: "AssemblyName,TypeName".
            </remarks>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.MetaControls.Attributes.TextAreaMetaControlAttribute.CreateMetaControl(System.Object)">
            <summary>
            Creates the meta control associated with the attribute
            </summary>
            <param name="key">The key used to retrieve dynamic values from a NameValueProvider, typically the object to which the attribute is attached</param>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.MetaControls.Attributes.TextAreaMetaControlAttribute.Columns">
            <summary>
            Gets the number of columns for the meta control
            </summary>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.MetaControls.Attributes.TextAreaMetaControlAttribute.Rows">
            <summary>
            Gets the number of rows for the meta control
            </summary>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.MetaControls.Attributes.TextAreaMetaControlAttribute.MaxLength">
            <summary>
            Gets the maximum length for the meta control
            </summary>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.MetaControls.Attributes.TextAreaMetaControlAttribute.Wrap">
            <summary>
            Gets whether or not to wrap text in the meta control 
            </summary>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.MetaControls.Attributes.TextAreaMetaControlAttribute.DataTypeCheckDataType">
            <summary>
            Gets the sort of data type check to perform on the text 
            </summary>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.MetaControls.Attributes.TextAreaMetaControlAttribute.LengthMinimum">
            <summary>
            Gets the minimum length for the meta control
            </summary>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.MetaControls.Attributes.TextAreaMetaControlAttribute.LengthMaximum">
            <summary>
            Gets the maximum length for the meta control
            </summary>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.MetaControls.Attributes.TextAreaMetaControlAttribute.MaximumWordCount">
            <summary>
            Gets the maximum number of words allowed in the meta control
            </summary>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.MetaControls.Attributes.TextAreaMetaControlAttribute.RangeMinimum">
            <summary>
            Gets the minimum value for range validation 
            </summary>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.MetaControls.Attributes.TextAreaMetaControlAttribute.RangeMaximum">
            <summary>
            Gets the maximum value for range validation
            </summary>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.MetaControls.Attributes.TextAreaMetaControlAttribute.RegularExpression">
            <summary>
            Gets the regular expression to validate the input against
            </summary>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.MetaControls.Attributes.TextAreaMetaControlAttribute.CaseInsensitive">
            <summary>
            Gets whether or not the regular expression is case insensitive 
            </summary>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.MetaControls.Attributes.TextAreaMetaControlAttribute.MultiLine">
            <summary>
            Gets whether or not the regular expression accounts for multi-line input 
            </summary>
        </member>
        <member name="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.SaveErrorFormatterForm">
            <summary>
            SaveErrorFormatterForm is used by the UITypeEditor 
            <see cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.ErrorFormatterUITypeEditor"/> within its
            ErrorFormatterPropertyGridForm.
            </summary>
            <remarks>
            Pass it the ErrorFormatter that you want to save. It provides
            an interface to specify the name to save. When the OK button is pressed,
            it updates the custom.VAM.config file, either updating or adding depending
            on the name supplied.
            </remarks>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.SaveErrorFormatterForm.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.SaveErrorFormatterForm.fValue">
            <summary>
            Storage for the ErrorFormatter that will be saved.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.SaveErrorFormatterForm.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.SaveErrorFormatterForm.SetValues(Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseErrorFormatter)">
            <summary>
            Sets the ErrorFormatter that will be saved. Call before ShowForm.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.SaveErrorFormatterForm.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.SaveErrorFormatterForm.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.SaveErrorFormatterForm.SaveErrorFormatterForm_Load(System.Object,System.EventArgs)">
            <summary>
            OnLoad event handler. Sets up the form.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.SaveErrorFormatterForm.textBox1_TextChanged(System.Object,System.EventArgs)">
            <summary>
            TextBox1 TextChanged event handler. Enables the Save Button when the textbox has text.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.SaveErrorFormatterForm.textBox1_KeyPress(System.Object,System.Windows.Forms.KeyPressEventArgs)">
            <summary>
            TextBox1 KeyPress event handler. Filters out illegal characters in the Name property.
            Legal characters: letters, numbers, space, underscore, and backspace.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.SaveErrorFormatterForm.SaveBtn_Click(System.Object,System.EventArgs)">
            <summary>
            Save Button Click event handler. 
            </summary>
            <remarks>
            Checks if the name already exists and prompts for confirmation to overwrite.
            Then it writes to the custom.VAM.config file.
            </remarks>
        </member>
        <member name="T:Jenzabar.Portal.Framework.Web.UI.CustomizationPortlet">
            <summary>
            The base class for all portlets that will be used to customize the site.
            </summary>
            <remarks>
            There are 3 customization portlets. Each of the customization portlets is responsible for altering a specific type of object.
            <list type="table">
            <item>CustomizePagePortlet</item><description>Used to customize a page and its context. The user can access this by clicking "Customize this Page..." on the page that they wish to customize.</description>
            <item>CustomizePortletPortlet</item><description>Used to customize a portlet (occurance). The user can access this by clicking the customize icon in the upper right corner of the portlet titlebar for portlets that are customizeable. A portlet is considered customizable if it returns true from an accessor call to the CanCustomize property of the portlet.</description>
            <item>CustomizeSitePortlet</item><description>Used to customixe a the entire site, and includes thigls like editing the layout creating new contexts and other things.</description>
            </list>
            </remarks>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.CustomizationPortlet.LoadPortletView(System.String)">
            <summary>
            Loads a Portlet View from it's file name
            </summary>
            <param name="viewFileName">The Portlet to load</param>
            <returns>Object of type PortletViewBase</returns>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.CustomizationPortlet.IdOfObjectToConfigure">
            <summary>
            Gets and sets the id of the object that this customization portlet will customize
            </summary>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.CustomizationPortlet.CanCustomize">
            <summary>
            Always returns false, indicating that the customization portlets cannot be customized!
            </summary>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.CustomizationPortlet.State">
            <summary>
            Always returns PortletState.Default
            </summary>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.CustomizationPortlet.DisplayPortletHelp">
            <summary>
            Always returns false
            </summary>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.CustomizationPortlet.Title">
            <summary>
            Gets the default text of "Customize" to be used for the title text of the portlets. Other configuration portlets like the Page customization portlet will override this to provide information about the object that they are customizing.
            </summary>
        </member>
        <member name="T:Jenzabar.Portal.Framework.Web.UI.Controls.MetaControls.Attributes.CheckBoxListMetaControlAttribute">
            <summary>
            An attribute used to declare the need for a preference or setting to be displayed as a CheckBoxList
            </summary>
            <remarks>
            This attribute can be applied to either a portlet or
            an application (a class that inherits from PortalApplicationBase).
            
            It will be used by the framework to automatically generate the appropriate preferences or
            settings overlay that allows the user to enter the data for that preference or setting
            using the control specified.
            
            This information can then be retrieved by using the various preference and settings domain objects
            in the framework. They can also be accessed by using the Preferences or Settings property of the
            PortletBase and PortalApplicationBase classes.
            </remarks>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.MetaControls.Attributes.CheckBoxListMetaControlAttribute.#ctor(System.Int32,System.String,System.String,System.String,System.Boolean,System.String,System.String,Jenzabar.Portal.Framework.NameValueDataSourceType,Jenzabar.Portal.Framework.NameValueType,System.String)">
            <summary>
            Constructs a CheckBoxList meta control
            </summary>
            <param name="sortOrder">Ordinal that determines the meta control's position</param>
            <param name="name">The name of the meta control</param>
            <param name="displayName">The display name of the meta control</param>
            <param name="description">The description for the meta control</param>
            <param name="required">Denotes whether or not a value is required for the meta control</param>
            <param name="defaultItems">The list of selected items chosen by default</param>
            <param name="items">The complete list of items to select from</param>
            <param name="nameValueDataSourceType">Denotes whether or not the name/value data source is static or dynamic</param>
            <param name="nameValueType">The type of the name/value pair</param>
            <param name="cssClass">The CSS class for the meta control</param>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.MetaControls.Attributes.CheckBoxListMetaControlAttribute.#ctor(System.Int32,System.String,System.String,System.String,System.Boolean,System.String,System.String,Jenzabar.Portal.Framework.NameValueDataSourceType,Jenzabar.Portal.Framework.NameValueType,System.String,System.Boolean,System.Int32,System.Int32)">
            <summary>
            Constructs a CheckBoxList meta control
            </summary>
            <param name="sortOrder">Ordinal that determines the meta control's position</param>
            <param name="name">The name of the meta control</param>
            <param name="displayName">The display name of the meta control</param>
            <param name="description">The description for the meta control</param>
            <param name="required">Denotes whether or not a value is required for the meta control</param>
            <param name="defaultItems">The list of selected items chosen by default</param>
            <param name="items">The complete list of items to select from</param>
            <param name="nameValueDataSourceType">Denotes whether or not the name/value data source is static or dynamic</param>
            <param name="nameValueType">The type of the name/value pair</param>
            <param name="cssClass">The CSS class for the meta control</param>
            <param name="countSelections">Denotes whether or not the number of items selected should be validated</param>
            <param name="countSelectionMinimum">The minimum number of items to be selected</param>
            <param name="countSelectionMaximum">The maximum number of items to be selected</param>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.MetaControls.Attributes.CheckBoxListMetaControlAttribute.#ctor(System.Int32,System.String,System.String,System.String,System.Boolean,System.String,System.String,Jenzabar.Portal.Framework.NameValueDataSourceType,Jenzabar.Portal.Framework.NameValueType,System.String,System.String,System.Int32,System.Web.UI.WebControls.RepeatDirection,System.Web.UI.WebControls.RepeatLayout)">
            <summary>
            Constructs a CheckBoxList meta control
            </summary>
            <param name="sortOrder">Ordinal that determines the meta control's position</param>
            <param name="name">The name of the meta control</param>
            <param name="displayName">The display name of the meta control</param>
            <param name="description">The description for the meta control</param>
            <param name="required">Denotes whether or not a value is required for the meta control</param>
            <param name="defaultItems">The list of selected items chosen by default</param>
            <param name="items">The complete list of items to select from</param>
            <param name="nameValueDataSourceType">Denotes whether or not the name/value data source is static or dynamic</param>
            <param name="nameValueType">The type of the name/value pair</param>
            <param name="cssClass">The CSS class for the meta control</param>
            <param name="toolTip">The tooltip for the meta control</param>
            <param name="repeatColumns">The number of columns used to display the items</param>
            <param name="repeatDirection">The direction the items are arranged</param>
            <param name="repeatLayout">The layout of the item arrangement</param>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.MetaControls.Attributes.CheckBoxListMetaControlAttribute.#ctor(System.Int32,System.String,System.String,System.String,System.Boolean,System.String,System.String,Jenzabar.Portal.Framework.NameValueDataSourceType,Jenzabar.Portal.Framework.NameValueType,System.String,System.String,System.Int32,System.Web.UI.WebControls.RepeatDirection,System.Web.UI.WebControls.RepeatLayout,System.Boolean,System.Int32,System.Int32)">
            <summary>
            Constructs a CheckBoxList meta control
            </summary>
            <param name="sortOrder">Ordinal that determines the meta control's position</param>
            <param name="name">The name of the meta control</param>
            <param name="displayName">The display name of the meta control</param>
            <param name="description">The description for the meta control</param>
            <param name="required">Denotes whether or not a value is required for the meta control</param>
            <param name="defaultItems">The list of selected items chosen by default</param>
            <param name="items">The complete list of items to select from</param>
            <param name="nameValueDataSourceType">Denotes whether or not the name/value data source is static or dynamic</param>
            <param name="nameValueType">The type of the name/value pair</param>
            <param name="cssClass">The CSS class for the meta control</param>
            <param name="toolTip">The tooltip for the meta control</param>
            <param name="repeatColumns">The number of columns used to display the items</param>
            <param name="repeatDirection">The direction the items are arranged</param>
            <param name="repeatLayout">The layout of the item arrangement</param>
            <param name="countSelections">Denotes whether or not the number of items selected should be validated</param>
            <param name="countSelectionMinimum">The minimum number of items to be selected</param>
            <param name="countSelectionMaximum">The maximum number of items to be selected</param>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.MetaControls.Attributes.CheckBoxListMetaControlAttribute.#ctor(System.Int32,System.String,System.String,System.String,System.Type,System.Boolean,System.String,System.String,Jenzabar.Portal.Framework.NameValueDataSourceType,Jenzabar.Portal.Framework.NameValueType,System.String)">
            <summary>
            Constructs a CheckBoxList meta control
            </summary>
            <param name="sortOrder">Ordinal that determines the meta control's position</param>
            <param name="name">The name of the meta control</param>
            <param name="friendlyNameResourceKey">The resource key for the friendly name of the operation</param>
            <param name="descriptionResourceKey">The resource key for a brief description of the operation</param>
            <param name="resourceProvider">The qualified type name of the class that implements IResourceProvider</param>
            <param name="required">Denotes whether or not a value is required for the meta control</param>
            <param name="defaultItems">The list of selected items chosen by default</param>
            <param name="items">The complete list of items to select from</param>
            <param name="nameValueDataSourceType">Denotes whether or not the name/value data source is static or dynamic</param>
            <param name="nameValueType">The type of the name/value pair</param>
            <param name="cssClass">The CSS class for the meta control</param>
            <remarks>
            The resourceProvider argument is in the format: "AssemblyName,TypeName".
            </remarks>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.MetaControls.Attributes.CheckBoxListMetaControlAttribute.#ctor(System.Int32,System.String,System.String,System.String,System.Type,System.Boolean,System.String,System.String,Jenzabar.Portal.Framework.NameValueDataSourceType,Jenzabar.Portal.Framework.NameValueType,System.String,System.Boolean,System.Int32,System.Int32)">
            <summary>
            Constructs a CheckBoxList meta control
            </summary>
            <param name="sortOrder">Ordinal that determines the meta control's position</param>
            <param name="name">The name of the meta control</param>
            <param name="friendlyNameResourceKey">The resource key for the friendly name of the operation</param>
            <param name="descriptionResourceKey">The resource key for a brief description of the operation</param>
            <param name="resourceProvider">The qualified type name of the class that implements IResourceProvider</param>
            <param name="required">Denotes whether or not a value is required for the meta control</param>
            <param name="defaultItems">The list of selected items chosen by default</param>
            <param name="items">The complete list of items to select from</param>
            <param name="nameValueDataSourceType">Denotes whether or not the name/value data source is static or dynamic</param>
            <param name="nameValueType">The type of the name/value pair</param>
            <param name="cssClass">The CSS class for the meta control</param>
            <param name="countSelections">Denotes whether or not the number of items selected should be validated</param>
            <param name="countSelectionMinimum">The minimum number of items to be selected</param>
            <param name="countSelectionMaximum">The maximum number of items to be selected</param>
            <remarks>
            The resourceProvider argument is in the format: "AssemblyName,TypeName".
            </remarks>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.MetaControls.Attributes.CheckBoxListMetaControlAttribute.#ctor(System.Int32,System.String,System.String,System.String,System.Type,System.Boolean,System.String,System.String,Jenzabar.Portal.Framework.NameValueDataSourceType,Jenzabar.Portal.Framework.NameValueType,System.String,System.String,System.Int32,System.Web.UI.WebControls.RepeatDirection,System.Web.UI.WebControls.RepeatLayout)">
            <summary>
            Constructs a CheckBoxList meta control
            </summary>
            <param name="sortOrder">Ordinal that determines the meta control's position</param>
            <param name="name">The name of the meta control</param>
            <param name="friendlyNameResourceKey">The resource key for the friendly name of the operation</param>
            <param name="descriptionResourceKey">The resource key for a brief description of the operation</param>
            <param name="resourceProvider">The qualified type name of the class that implements IResourceProvider</param>
            <param name="required">Denotes whether or not a value is required for the meta control</param>
            <param name="defaultItems">The list of selected items chosen by default</param>
            <param name="items">The complete list of items to select from</param>
            <param name="nameValueDataSourceType">Denotes whether or not the name/value data source is static or dynamic</param>
            <param name="nameValueType">The type of the name/value pair</param>
            <param name="cssClass">The CSS class for the meta control</param>
            <param name="toolTip">The tooltip for the meta control</param>
            <param name="repeatColumns">The number of columns used to display the items</param>
            <param name="repeatDirection">The direction the items are arranged</param>
            <param name="repeatLayout">The layout of the item arrangement</param>
            <remarks>
            The resourceProvider argument is in the format: "AssemblyName,TypeName".
            </remarks>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.MetaControls.Attributes.CheckBoxListMetaControlAttribute.#ctor(System.Int32,System.String,System.String,System.String,System.Type,System.Boolean,System.String,System.String,Jenzabar.Portal.Framework.NameValueDataSourceType,Jenzabar.Portal.Framework.NameValueType,System.String,System.String,System.Int32,System.Web.UI.WebControls.RepeatDirection,System.Web.UI.WebControls.RepeatLayout,System.Boolean,System.Int32,System.Int32)">
            <summary>
            Constructs a CheckBoxList meta control
            </summary>
            <param name="sortOrder">Ordinal that determines the meta control's position</param>
            <param name="name">The name of the meta control</param>
            <param name="friendlyNameResourceKey">The resource key for the friendly name of the operation</param>
            <param name="descriptionResourceKey">The resource key for a brief description of the operation</param>
            <param name="resourceProvider">The qualified type name of the class that implements IResourceProvider</param>
            <param name="required">Denotes whether or not a value is required for the meta control</param>
            <param name="defaultItems">The list of selected items chosen by default</param>
            <param name="items">The complete list of items to select from</param>
            <param name="nameValueDataSourceType">Denotes whether or not the name/value data source is static or dynamic</param>
            <param name="nameValueType">The type of the name/value pair</param>
            <param name="cssClass">The CSS class for the meta control</param>
            <param name="toolTip">The tooltip for the meta control</param>
            <param name="repeatColumns">The number of columns used to display the items</param>
            <param name="repeatDirection">The direction the items are arranged</param>
            <param name="repeatLayout">The layout of the item arrangement</param>
            <param name="countSelections">Denotes whether or not the number of items selected should be validated</param>
            <param name="countSelectionMinimum">The minimum number of items to be selected</param>
            <param name="countSelectionMaximum">The maximum number of items to be selected</param>
            <remarks>
            The resourceProvider argument is in the format: "AssemblyName,TypeName".
            </remarks>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.MetaControls.Attributes.CheckBoxListMetaControlAttribute.CreateMetaControl(System.Object)">
            <summary>
            Creates the meta control associated with the attribute
            </summary>
            <param name="key">The key used to retrieve dynamic values from a NameValueProvider, typically the object to which the attribute is attached</param>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.MetaControls.Attributes.CheckBoxListMetaControlAttribute.Items">
            <summary>
            Gets the complete list of items to select from
            </summary>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.MetaControls.Attributes.CheckBoxListMetaControlAttribute.ToolTip">
            <summary>
            Gets the tooltip for the meta control
            </summary>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.MetaControls.Attributes.CheckBoxListMetaControlAttribute.RepeatColumns">
            <summary>
            Gets the number of columns used to display the items
            </summary>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.MetaControls.Attributes.CheckBoxListMetaControlAttribute.RepeatDirection">
            <summary>
            Gets the direction the items are arranged
            </summary>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.MetaControls.Attributes.CheckBoxListMetaControlAttribute.RepeatLayout">
            <summary>
            Gets the layout of the item arrangement
            </summary>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.MetaControls.Attributes.CheckBoxListMetaControlAttribute.CountSelections">
            <summary>
            Gets whether or not the number of items selected should be validated 
            </summary>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.MetaControls.Attributes.CheckBoxListMetaControlAttribute.CountSelectionMinimum">
            <summary>
            Gets the minimum number of items to be selected
            </summary>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.MetaControls.Attributes.CheckBoxListMetaControlAttribute.CountSelectionMaximum">
            <summary>
            Gets the maximum number of items to be selected
            </summary>
        </member>
        <member name="T:Jenzabar.Portal.Framework.Web.UI.Views.SendMailView">
            <summary>
            	Summary description for SendMailView.
            </summary>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Web.UI.Views.SendMailView.btnSend">
            <summary>
            HtmlInputButton - btnSend
            </summary>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Web.UI.Views.SendMailView.btnCancel">
            <summary>
             HtmlInputButton - btnCancel
            </summary>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Web.UI.Views.SendMailView.txtTo">
            <summary>
            HtmlInputText - txtTo
            </summary>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Web.UI.Views.SendMailView.txtCC">
            <summary>
            HtmlInputText - txtCC
            </summary>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Web.UI.Views.SendMailView.txtSub">
            <summary>
            HtmlInputText - txtSub
            </summary>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Web.UI.Views.SendMailView.txtMessage">
            <summary>
            HtmlTextArea - txtMessage
            </summary>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Web.UI.Views.SendMailView.psCC">
            <summary>
            PrincipalSelector - psCC
            </summary>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Web.UI.Views.SendMailView.psTo">
            <summary>
            PrincipalSelector - psTo
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Views.SendMailView.Initialize(System.String,System.String,Jenzabar.Portal.Framework.PortalPrincipal[])">
            <summary>
            Initializes an email to be sent with the values passed in
            </summary>
            <param name="subject">The subject line of the email</param>
            <param name="message">The message body of the email</param>
            <param name="to">Who the recipient of the email is</param>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Views.SendMailView.OnInit(System.EventArgs)">
            <summary>
            Initializes the email page by trying to pull a list of recipients from session state
            </summary>
            <param name="e">The event args for the init event.</param>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Views.SendMailView.btnSend_ServerClick(System.Object,System.EventArgs)">
            <summary>
            Handles the Click event of the "send" button by creating and sending an email to the selected users.
            </summary>
            <param name="sender">The source control that raised the event</param>
            <param name="e">The arguments for the event</param>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Views.SendMailView.GetEmailAddressesForAllUsers(Jenzabar.Portal.Framework.PortalPrincipal[])">
            <summary>
            gets a list of all the unique users in a list of users and groups by finding all the users for all the groups in the list and merging that with the users inthe list, then gets the list of their email addresses.
            </summary>
            <param name="principals">The list of users and groups to get email addresses for.</param>
            <returns>A string that can be used for an email to field that includes all users directly in the list or in a group that is in the list.</returns>
        </member>
        <member name="T:Jenzabar.Portal.Framework.Web.UI.Controls.Secured.SDropDownList">
            <summary>
            A secured, operation aware version of the DropDownList control
            </summary>
            <remarks>
            Secured controls can be used to make interface elements aware of whether or not
            a user has access to a particular operation assigned to the control
            
            If the user does not have access to the operation(s) assigned to the control, the
            control can be set to render differently (or not at all) to prevent the user from
            using the control to perform the secured operation
            
            In addition, events normally raised by the control will not be raised if the control
            detects that the access check has failed. This prevents users from "spoofing" access
            by simulating a postback.
            </remarks>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Web.UI.Controls.Secured.SDropDownList.m_OperationNames">
            <summary>
            Member variable m_OperationNames
            </summary>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Web.UI.Controls.Secured.SDropDownList.m_IsSecured">
            <summary>
            Member variable m_IsSecured
            </summary>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Web.UI.Controls.Secured.SDropDownList.m_AccessCheckType">
            <summary>
            Member variable AccessCheckType
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Secured.SDropDownList.#ctor">
            <summary>
            Constructor for the SDropDownList class
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Secured.SDropDownList.OnSelectedIndexChanged(System.EventArgs)">
            <summary>
            Overrides the OnSelectedIndexChanged event in base control
            </summary>
            <param name="e">EventArgs</param>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Secured.SDropDownList.OnPreRender(System.EventArgs)">
            <summary>
            Overrides the OnPreRender event in base control
            </summary>
            <param name="e">EventArgs</param>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Secured.SDropDownList.SecureControl">
            <summary>
            Used internally to secure the control
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Secured.SDropDownList.Render(System.Web.UI.HtmlTextWriter)">
            <summary>
            Overrides the Render event in base control
            </summary>
            <param name="writer">HtmlTextWriter to render control with</param>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Secured.SDropDownList.AccessCheckFailedText">
            <summary>
            Gets or sets the text to display if an access check fails.
            </summary>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Secured.SDropDownList.AccessCheckFailedTextCSSClass">
            <summary>
            Gets or sets the style to apply to the text if displayed if the access check fails and the display type is 'Text'.
            </summary>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Secured.SDropDownList.OperationNames">
            <summary>
            Member Property - OperationNames
            </summary>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Secured.SDropDownList.IsSecured">
            <summary>
            Member Property - IsSecured
            </summary>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Secured.SDropDownList.AccessCheckType">
            <summary>
            Member Property - AccessCheckType
            </summary>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Secured.SDropDownList.DisplayType">
            <summary>
            Member Property - m_DisplayType
            </summary>
        </member>
        <member name="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.VAMTypeConverter">
            <summary>
            VAMTypeConverter provides a description of tools available to convert between
            a string and a "native data type". It supplies conversion methods on the server
            side and defines JavaScript functions to handle the client side.
            </summary>
            <remarks>
            <para>On the server side, Microsoft has defined the <see cref="T:System.ComponentModel.TypeConverter"/>
            classes to handle most conversion. The base class, VAMTypeConverter, retrieves
            the TypeConverter for the .Net type that you are converting. If your type
            does not have a TypeConverter, you have to override the 
            <see cref="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.VAMTypeConverter.ConvertFrom(System.Object)"/> and 
            <see cref="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.VAMTypeConverter.ConvertTo(System.Object)"/> methods.</para>
            <para>On the client side, VAM defines an object oriented methodology to 
            install JavaScript functions that convert between text and the native data type.
            Since the Condition's evaluation function needs to convert text to string,
            it installs a method reference to the function defined for the data type that
            the user selects in the DataType property. The VAMTypeConverter supplies
            that function name in <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.VAMTypeConverter.CSConvertFromFunction"/>.</para>
            <para>Conversion is often influenced by culture information. These classes
            use the <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.VAMPage.CultureInfo">VAMPage.CultureInfo</see> property to identify
            the culture rules. They pass the relevant parts to the client-side representation
            of the Action or Condition objects for use with the client-side conversion functions.</para>
            <para>Native data types also need to support comparison methods to determine
            equals, not equals, less than, etc. The Condition evaluation functions use
            the comparision methods. On the server side, when the data type implements
            the <see cref="T:System.IComparable"/>, it automatically handles comparisions.
            Otherwise, you must supply a class that implements <see cref="T:System.Collections.IComparer"/>
            in <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.VAMTypeConverter.Comparer"/>. On the client side,
            VAM supplies a comparision function for JavaScript native types like int, bool, and string.
            If you create a unique type, supply a JavaScript function and identify its name
            in <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.VAMTypeConverter.CSComparerFunction"/>.</para>
            <para>The DataTypeTextBoxes (<see cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseDataTypeTextBox"/>)
            use the methods to convert from native data type to string.</para>
            <para>See the <b>Developer's Guide</b> for extensive details in creating VAMTypeConverters.</para>
            <para>VAMTypeConverters are associated with the DataType property of any validator
            and condition. You can add VAMTypeConverters to the Properties Editor for the DataType
            property by adding them to the custom.VAM.config file. Use the Import VAM Classes 
            application to install your VAMTypeConverters. All VAMTypeConverters defined
            in VAM.config and custom.VAM.config are available in <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.Globals.DataTypes">Globals.DataTypes</see>.</para>
            </remarks>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.VAMTypeConverter.#ctor">
            <summary>
            Constructor with no parameters.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.VAMTypeConverter.#ctor(System.String)">
            <summary>
            Constructor that sets the Name property.
            </summary>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.VAMTypeConverter.fName">
            <summary>
            Storage for <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.VAMTypeConverter.Name"/>.
            </summary>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.VAMTypeConverter.fDataType">
            <summary>
            Storage for <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.VAMTypeConverter.DataType"/>.
            </summary>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.VAMTypeConverter.fCSConvertFromFunction">
            <summary>
            Storage for <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.VAMTypeConverter.CSConvertFromFunction"/>.
            </summary>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.VAMTypeConverter.fCSConvertToFunction">
            <summary>
            Storage for <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.VAMTypeConverter.CSConvertToFunction"/>.
            </summary>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.VAMTypeConverter.fComparer">
            <summary>
            Storage for <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.VAMTypeConverter.Comparer"/>.
            </summary>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.VAMTypeConverter.fCSComparerFunction">
            <summary>
            Storage for <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.VAMTypeConverter.CSComparerFunction"/>.
            </summary>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.VAMTypeConverter.fTypeConverter">
            <summary>
            fTypeConverter is the TypeConverter for the <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.VAMTypeConverter.DataType"/>. 
            It is setup in GetTypeConverter.
            </summary>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.VAMTypeConverter.fCSConvertFieldToValueFunction">
            <summary>
            Storage for <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.VAMTypeConverter.CSConvertFieldToValueFunction"/>.
            </summary>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.VAMTypeConverter.fOneMultiplier">
            <summary>
            Storage for <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.VAMTypeConverter.OneMultiplier"/>.
            </summary>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.VAMTypeConverter.fCSOneMultiplier">
            <summary>
            Storage for <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.VAMTypeConverter.CSOneMultiplier"/>.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.VAMTypeConverter.CompareTo(System.Object)">
            <summary>
            Implements IComparable. Compares based on Name property, case insensitive.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.VAMTypeConverter.AddCultureProperties(Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseCondition,System.Text.StringBuilder)">
            <summary>
            AddCultureProperties allows a subclass to define additional properties to the client
            side representation of the condition object for use by the Compare To function. 
            </summary>
            <remarks>
            <para>Culture specific information is available on 
            <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.VAMPage.CultureInfo">VAMPage.CultureInfo</see>.
            </para>
            <para>Add each property to the pJavaScript stringbuilder by calling
            <see cref="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseCA.RegisterValue(System.Text.StringBuilder,System.String,System.String)"/>, 
            <see cref="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseCA.RegisterMethod(System.Text.StringBuilder,System.String,System.String)"/>, and
            <see cref="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseCA.RegisterValueFromCode(System.Text.StringBuilder,System.String,System.String)"/>
            on the Condition supplied.</para>
            <para>This class does not add any properties to the stringbuilder.</para>
            </remarks>
            <param name="pCondition">The condition object whose client-side representation
            is generated. It supplies the methods to register values into the JavaScript stringbuilder.</param>
            <param name="pJavaScript">Append properties to this stringbuilder. Always use the Register
            methods on the Condition to establish the correct format.</param>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.VAMTypeConverter.AddReformatterProperties(Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseCondition,System.Text.StringBuilder)">
            <summary>
            AddReformatterProperties is used by the <see cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.DataTypeTextBoxAction"/> 
            class to add culture specific properties it uses to format on the client side.
            </summary>
            <remarks>
            <para>The properties are added to the client-side representation of the Action object
            where the Convert To function (<see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.VAMTypeConverter.CSConvertToFunction"/>)
            uses them to format the string.</para>
            <para>For example, currency formatting may provide templates for positive
            and negative numbers like this:</para>
            <code>
            PosTmp="${0}"
            NegTmp="(${0})"
            </code>
            <para>Add each property to the pJavaScript stringbuilder by calling
            <see cref="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseCA.RegisterValue(System.Text.StringBuilder,System.String,System.String)"/>, 
            <see cref="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseCA.RegisterMethod(System.Text.StringBuilder,System.String,System.String)"/>, and
            <see cref="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseCA.RegisterValueFromCode(System.Text.StringBuilder,System.String,System.String)"/>
            on the Condition supplied.</para>
            <para>This class does not add any properties to the stringbuilder.</para>
            </remarks>
            <param name="pCondition">The condition object supplies the methods to 
            register values into the JavaScript stringbuilder.</param>
            <param name="pJavaScript">Append properties to this stringbuilder. Always use the Register
            methods on the Condition to establish the correct format.</param>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.VAMTypeConverter.GetTypeConverter">
            <summary>
            GetTypeConverter returns an instance of the <see cref="T:System.ComponentModel.TypeConverter"/>
            that converts between strings and the desired native data type.
            </summary>
            <remarks>
            <para>It calls TypeDescriptor.GetConverter(DataType) to create it.</para>
            <para>Subclass if you don't define a value for the 
            <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.VAMTypeConverter.DataType"/> property or it
            doesn't have a TypeConverter.</para>
            <para>You don't need to supply a TypeConverter if you override both
            the <see cref="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.VAMTypeConverter.ConvertFrom(System.Object)"/> and 
            <see cref="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.VAMTypeConverter.ConvertTo(System.Object)"/> methods.</para>
            </remarks>
            <returns>A TypeConverter that converts between strings and the desired native data type.</returns>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.VAMTypeConverter.ConvertFrom(System.Object)">
            <summary>
            Converts a string into the native data type.
            </summary>
            <remarks>
            <para>By default, it uses the <see cref="M:System.ComponentModel.TypeConverter.ConvertFrom(System.Object)"/>
            method. It provides the <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.VAMPage.CultureInfo">VAMPage.CultureInfo</see> to the conversion
            process. The TypeConverter is retrieved from 
            <see cref="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.VAMTypeConverter.GetTypeConverter"/>.</para>
            <para>When creating the native data type, it should apply culture specific formatting
            from <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.VAMPage.CultureInfo">VAMPage.CultureInfo</see>.</para>
            <para>This method should anticipate that conversion will fail: the string
            cannot be converted into the native data type. It must return null
            if it could not convert. It should not throw an exception.</para>
            </remarks>
            <param name="pValue">The string to convert to the native data type.</param>
            <returns>The native data type or null if it could not convert.</returns>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.VAMTypeConverter.ConvertTo(System.Object)">
            <summary>
            Converts a native data type object into a string.
            </summary>
            <remarks>
            <para>By default, it uses the <see cref="M:System.ComponentModel.TypeConverter.ConvertTo(System.Object,System.Type)"/>
            method. The TypeConverter is retrieved from 
            <see cref="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.VAMTypeConverter.GetTypeConverter"/>.</para>
            <para>When creating the string, it should apply culture specific formatting
            from <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.VAMPage.CultureInfo">VAMPage.CultureInfo</see>. The default
            TypeConverter class does not.</para>
            <para>This method should anticipate that conversion will fail: the native data type
            cannot be converted into a string. It must return null
            if it could not convert. It should not throw an exception.</para>
            </remarks>
            <param name="pValue">The native data type to convert to a string .</param>
            <returns>The string or null if it could not convert.</returns>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.VAMTypeConverter.Internationalize(System.String)">
            <summary>
            Internationalize reformats the original string using CultureInfo.
            </summary>
            <remarks>
            <para>This is used when showing tokens in error messages. Tokens that get their
            values from properties on the Validator have their original value
            entered as a string in the local culture of the web server. This prepares
            the string to the culture of <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.VAMPage.CultureInfo">VAMPage.CultureInfo</see>.</para>
            <para>This class uses <see cref="M:System.ComponentModel.TypeConverter.ConvertFrom(System.Object)"/> 
            and <see cref="M:System.ComponentModel.TypeConverter.ConvertTo(System.Object,System.Type)"/> to do the job.
            If ConvertFrom returns null (the string couldn't convert), it returns "???".</para>
            <para>Subclass may determine there is no internationization needed 
            and return the original value.</para>
            </remarks>
            <param name="pOrig">The original string that needs to be internationalized.</param>
            <returns>The internationalized string or "???" if it could not be converted.</returns>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.VAMTypeConverter.TestThirdPartyControl(System.Web.UI.Control)">
            <summary>
            TestThirdPartyControl determines if the control passed in is a 
            specific control class which is supported by a subclass's 
            <see cref="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.VAMTypeConverter.GetControlValue(System.Web.UI.Control,System.Boolean)"/> method.
            </summary>
            <remarks>
            <para>It is called when <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.VAMTypeConverter.SupportsThirdPartyControl"/> 
            is true.</para>
            <para>It should return true if pControl matches the desired control and false if not.</para>
            <para><see cref="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseOneFieldCondition.GetVAMTypeConverter">BaseOneFieldCondition.GetVAMTypeConverter</see>
            uses this to switch from the VAMTypeConverter defined in the DataType property
            of a Condition to the VAMTypeConverter that returns true in this method.</para>
            <para><see cref="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.ValidationPropertyControlConnection.IsValidControl(System.Web.UI.Control)">ValidationPropertyControlConnection.IsValidControl</see>
            returns true when the control it is validating causes this to return true. This
            allows all conditions and validators that support the <see cref="T:System.Web.UI.ValidationPropertyAttribute"/> to 
            automatically support third party controls.</para>
            <para>See the <b>Developer's Guide</b> for an overview of implementing VAMTypeConverters
            for custom controls.</para>
            </remarks>
            <param name="pControl">The control to determine if this VAMTypeConverter
            supports it.</param>
            <returns>When true, the control is supported. When false, it is not. 
            This class always returns false. Override to support your own control.</returns>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.VAMTypeConverter.GetControlValue(System.Web.UI.Control,System.Boolean)">
            <summary>
            GetControlValue returns an object representing the data value of the control passed in.
            </summary>
            <remarks>
            <para>There are three possible results:</para>
            <list type="bullet">
            <item><description>
            When the data can be converted, return the value as a native data type.
            </description></item>
            <item><description>
            When the data cannot be converted because its format is invald, return null.
            </description></item>
            <item><description>
            If there is no data to convert, throw an Exception.
            </description></item>
            </list>
            <para>For example, if converting a string to an Int32, if the string is blank, throw an exception.
            If it is "ABC", return null. Otherwise, return an Int32.</para>
            <para>This class assumes the control supports the 
            <see cref="T:System.Web.UI.ValidationPropertyAttribute"/>
            and calls the static method <see cref="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseCondition.GetControlTextValue(System.Web.UI.Control,System.Boolean)">BaseCondition.GetControlTextValue</see>
            with both parameters.
            Subclass to support controls that do not support ValidationPropertyAttribute.</para>
            <para>See the <b>Developer's Guide</b> for an overview of implementing VAMTypeConverters
            for custom controls.</para>
            </remarks>
            <param name="pControl">The control whose data value you are retrieving.</param>
            <param name="pTrimString">When true, it strips leading and trailing spaces 
            on the value if the value is a string.</param>
            <returns>The value. It should be the native data type for this VAMTypeConverter 
            such as Int32, double, or DateTime.
            If it cannot convert, return null.</returns>
            <exception cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.VAMException">If there is no data to convert.</exception>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.VAMTypeConverter.GetControlHookupMethod(System.Web.UI.Control)">
            <summary>
            GetControlHookupMethod allows a subclass that supports a third
            party control to establish a Control Hookup Method on the client-side.
            </summary>
            <remarks>
            <para>The Control Hookup Method allows a control to define multiple onchange or onclick
            events that fire it. For example, if the control contains several textboxes,
            it would override this to hookup those textboxes.</para>
            <para>When defined, VAM installs the HUCtrlFnc property on the client
            side representation of the condition object and the JavaScript function
            "VAM_HookupControl" redirects to your Control Hookup Method to hook up its controls
            to the onchange or onclick events.</para>
            <para>When "", the software checks 
            <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.Globals.ControlHookupMethods">Globals.ControlHookupMethods</see>.
            If neither supply a string, no HUCtrlFnc property is specified on client side representation
            of the condition object and the default hookup method is used.</para>
            <para>See the <b>Developer's Guide</b> for a description of the Control Hookup Method,
            its parameters, and an example.</para>
            <para>It defaults to "".</para>
            </remarks>
            <param name="pControl">The control that will install its hookup method.</param>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.VAMTypeConverter.TransferPropertiesFromControl(System.Web.UI.Control,Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseValidatorAction,System.Int32)">
            <summary>
            TransferPropertiesFromControl allows a third party control that is connected
            to Validator.ControlIDToEvaluate to provide some properties to the ValidatorAction provided and its condition.
            This is generally used when a third party overrides a VAMTypeConverter to support its
            controls.
            </summary>
            <remarks>
            <para>Some third party controls already have the same property values as the validator.
            So why have the user enter them twice? For example, if the control has an error message,
            it can copy it into ErrorMessage when ErrorMessage and ErrorMessageLookupID are both blank.
            For example, if this is a RangeCondition and the control has a minimum and maximum range
            setting, transfer those to RangeCondition.Minimum and Maximum.</para>
            <para>See the <b>Developer's Guide</b> for an overview of implementing VAMTypeConverters
            for custom controls.</para>
            </remarks>
            <param name="pControl">The control whose properties will be transferred
            to the ValidatorAction and/or Condiiton object on the validator.</param>
            <param name="pAction">The destination ValidatorAction for the properties. Its
            Condition property provides the Condition.</param>
            <param name="pControlCount">When the validator has more than one ControlIDToEvaluate,
            this specifies which one it is where 1 is the first, 2 is the second, etc.</param>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.VAMTypeConverter.Clone">
            <summary>
            Implements ICloneable. 
            </summary>
            <remarks>
            Usually you will override <see cref="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.VAMTypeConverter.CopyFrom(Jenzabar.Portal.Framework.Web.UI.Controls.Validation.VAMTypeConverter)"/>.
            </remarks>
            <returns>A new instance of VAMTypeConverter with a copy of the existing properties.</returns>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.VAMTypeConverter.CopyFrom(Jenzabar.Portal.Framework.Web.UI.Controls.Validation.VAMTypeConverter)">
            <summary>
            Copies all properties from the source to this object.
            Override when your subclass adds new properties.
            </summary>
            <param name="pSource">The VAMTypeConverter whose properties will be copied.</param>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.VAMTypeConverter.DefineJavaScript(Jenzabar.Portal.Framework.Web.UI.Controls.Validation.VAMPage)">
            <summary>
            DefineJavaScript creates whatever JavaScript that is used by this VAMTypeConverter. 
            It should define JavaScript functions or load a file.
            </summary>
            <remarks>
            <para>It is passed the current VAMPage class which has two methods that make registration easy:</para>
            <para>- Call <see cref="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.VAMPage.IsScriptBlockRegistered(System.String)">VAMPage.IsScriptBlockRegistered</see> before 
            registering to determine if the script was
              written by another instance of this class.</para>
            <para>- If its not registered, call <see cref="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.VAMPage.RegisterScriptBlock(System.String,System.String)">VAMPage.RegisterScriptBlock</see>
               or <see cref="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.VAMPage.RegisterScriptFile(System.String,System.String)">VAMPage.RegisterScriptFile</see>.</para>
            </remarks>
            <param name="pPage">Current VAMPage object. Can get it from Globals.Page.</param>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.VAMTypeConverter.Name">
            <summary>
            The name of the data type as shown to the user in the Properties Window in the DataType property.
            </summary>
            <value>
            <para>It is recommended to assign it a user friendly name like "integer" instead of the class
            name "System.Int32". However, if you do not assign it, it will get the class name
            from the <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.VAMTypeConverter.DataType"/> property.</para>
            <para>This name is used to lookup a VAMTypeConverter instance stored
            in the <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.Globals.DataTypes">Globals.DataTypes</see> collection (taken from
            the config files). The config files will identify both the VAMTypeConverter
            full type name and this property so it can lookup the requested type and create
            the correct class instance.</para>
            <para>VAMTypeConverters have a number of properties. The user doesn't have to
            settle for the default values on those properties. They can define
            the same class under a new Name with different values for the properties.
            The custom.VAM.config file provides documentation to assist in redefining VAMTypeConverters with new properties.</para>
            <para>It defaults to "".</para>
            </value>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.VAMTypeConverter.DataType">
            <summary>
            The .Net Type that is the "native data type" of this VAMTypeConverter. It is used to
            create the  <see cref="T:System.ComponentModel.TypeConverter"/> that is used for
            the default conversion between string and native data type.
            </summary>
            <value>
            <para>If you use a <see cref="T:System.ComponentModel.TypeConverter"/> class to 
            convert strings, you must assign this property.
            The TypeConverter is retrieved through <c>TypeDescriptor.GetConverter(DataType)</c>.</para>
            <para>The client-side does not use this as this is a .net type, not a JavaScript type.</para>
            <para>When set, if <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.VAMTypeConverter.Name"/> is blank, 
            it's set with DataType.Name.</para>
            </value>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.VAMTypeConverter.CSConvertFromFunction">
            <summary>
            The name of the client-side Convert From function. It converts the string
            to the native data type.
            </summary>
            <value>
            <para>Each VAMTypeConverter class must define a JavaScript function
            that takes a string and returns its native data type or null to indicate
            that conversion failed.</para>
            <para>See the <b>Developer's Guide</b> for a description of this function, its parameters, and an example.</para>
            <para>It defaults to "".</para>
            </value>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.VAMTypeConverter.CSConvertToFunction">
            <summary>
            The name of the client-side Convert To function. It converts the native data type
            to a string.
            </summary>
            <value>
            <para>It is only used for a DataTypeTextBox built for the data type
            of the VAMTypeConverter subclass. You do not need to define
            it when you are not creating a DataTypeTextBox around the data type.</para>
            <para>The function is passed the native data type and returns a string.</para>
            <para>See the <b>Developer's Guide</b> for a description of this function, its parameters, and an example.</para>
            <para>It defaults to "".</para>
            </value>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.VAMTypeConverter.Comparer">
            <summary>
            Class for comparing the native data types on the server side. 
            </summary>
            <value>
            <para>Server-side Condition evaluation methods often need to compare two native data types.
            They call <see cref="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseCondition.EvalWithOperator(Jenzabar.Portal.Framework.Web.UI.Controls.Validation.ConditionOperator,System.Object,System.Object,System.Collections.IComparer)">BaseCondition.EvalWithOperator</see> to
            compare the values. That function takes this property to assist in conversion.</para>
            <para>If this is null, EvalWithOperator uses the 
            <see cref="T:System.IComparable"/> interface built into many data types.
            If your data type does not implement IComparable, supply a class that implements
            the <see cref="T:System.Collections.IComparer"/> interface and assign an instance
            of that class here.</para>
            <para>It defaults to null.</para>
            </value>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.VAMTypeConverter.CSComparerFunction">
            <summary>
            The name of the client-side Comparer function for comparing the native data types. 
            </summary>
            <value>
            <para>Client-side Condition evaluation functions often need to compare two native data types.
            By default, they call "VAM_Compare" to compare the values. VAM_Compare applies the JavaScript operators
            against two native data types, such as value1 == value2. If your native data type
            cannot be compared with simple JavaScript operators, you define a replacement
            to VAM_Compare and assign the function name to this property.</para>
            <para>See the <b>Developer's Guide</b> for a description of this function, its parameters, and an example.</para>
            </value>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.VAMTypeConverter.CSConvertFieldToValueFunction">
            <summary>
            The name of the client-side Convert Field To Value function that retrieves the value
            from a control and returns its native value. It is designed to work with 
            custom controls.
            </summary>
            <value>
            <para>It is similar to the Convert From function 
            (<see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.VAMTypeConverter.CSConvertFromFunction"/>). However,
            the Convert From function only handles string to native data types.
            This function is used instead of the Convert From function when you have 
            a custom control that already implements its own client-side code to return
            native data types. For example, that control may involve two textboxes
            and return JavaScript object to represent both values as the native data type.</para>
            <para>When blank, a default function is defined, "VAM_ConvertStrFld", which calls "VAM_GetTextValue"
            and then converts it to a native type using the Convert From function.</para>
            <para>See the <b>Developer's Guide</b> for a description of this function, its parameters, and an example.</para>
            </value>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.VAMTypeConverter.OneMultiplier">
            <summary>
            When comparing two dates to determine their difference, the dates are converted
            into integers of milliseconds. The DifferenceCondition asks the user to enter
            a value for the difference. Users should be able to enter a number of days such
            as 1.5 for 1.5 days. The computer should convert that into milliseconds.
            This is a factor for converting the number the user enters.
            </summary>
            <value>
            <para>Use 0 if the data type cannot be converted into a number.
            For example, strings cannot be converted and StringVAMTypeConverter sets this to 0.</para>
            <para>Use 1 if the data type maintains the value entered by the user.</para>
            <para>Enter another value to multiply by the Difference value to get to the value used
            by comparison. For example, dates use 86400000 on the client side
            and 24 x 60 x 60 x 10000000 on the server side.</para>
            <para>OneMultipler is for the server side. 
            <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.VAMTypeConverter.CSOneMultiplier"/> is for the client side.</para>
            <para>It defaults to 1.</para>
            </value>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.VAMTypeConverter.CSOneMultiplier">
            <summary>
            CSOneMultipler is just like <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.VAMTypeConverter.OneMultiplier"/>
            except its used on the client side.
            </summary>
            <value>
            <para>Usually this is the same value as OneMultiplier. In the case of dates,
            the native Date object on the client and server side represent
            "ticks" differently.
            </para>
            </value>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.VAMTypeConverter.SupportsThirdPartyControl">
            <summary>
            SupportsThirdPartyControl indicates that the VAMTypeConverter was built for
            a particular control class that does not implement the <see cref="T:System.Web.UI.ValidationPropertyAttribute"/>.
            </summary>
            <value>
            <para>When true, the <see cref="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.VAMTypeConverter.TestThirdPartyControl(System.Web.UI.Control)"/> 
            method is available
            for use by the ControlConnection class to see if a particular control is supported
            by this VAMTypeConverter. Basically, VAMTypeConverter can extend the list of
            valid controls when this is true.</para>
            <para>When true, you must override <see cref="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.VAMTypeConverter.GetControlValue(System.Web.UI.Control,System.Boolean)"/> 
            and <see cref="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.VAMTypeConverter.TestThirdPartyControl(System.Web.UI.Control)"/>.</para>
            <para>See the <b>Developer's Guide</b> for an overview of implementing VAMTypeConverters
            for custom controls.</para>
            <para>It defaults to false.</para>
            </value>
        </member>
        <member name="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.VAMTypeConverterCollection">
            <summary>
            A collection of <see cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.VAMTypeConverter"/> instances. 
            </summary>
            <remarks>
            It is used by <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.Globals.DataTypes">Globals.DataTypes</see> and
            is created when the config files are first loaded. Instances are gathered
            from the &lt;DataTypes&gt; section of the config files.
            </remarks>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.VAMTypeConverterCollection.#ctor">
            <summary>
            Constructor with no parameters.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.VAMTypeConverterCollection.ValidateType(System.Object)">
            <summary>
            Throws an exception if the object is not a <see cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.VAMTypeConverter"/>.
            </summary>
            <param name="pValue"></param>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.VAMTypeConverterCollection.Find(System.String)">
            <summary>
            Find locates a <see cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.VAMTypeConverter"/>
            whose name matches the Name parameter (case insensitive).
            </summary>
            <param name="pName">Find a VAMTypeConverter whose Name property
            matches this (case insensitive).</param>
            <returns>Rhe VAMTypeConverter found or null if not found.</returns>
        </member>
        <member name="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.DateVAMTypeConverter">
            <summary>
            DateVAMTypeConverter provides the comparision and conversions for Dates.
            </summary>
            <remarks>
            <para>The DataType is <see cref="T:System.DateTime"/>. However, it does not use the 
            <see cref="T:System.ComponentModel.DateTimeConverter"/> for conversion.
            Instead it overrides <see cref="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.VAMTypeConverter.ConvertFrom(System.Object)"/>
            and <see cref="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.VAMTypeConverter.ConvertTo(System.Object)"/> to convert strings
            using the culture settings in VAMPage.CultureInfo.</para>
            <para>It supports dates according to the CultureInfo.DateTimeFormatInfo.ShortDatePattern.
            It is limited to digits in Month, Day and Year parts. (In other words,
            it does not support 'dd/MMM/yyy' where the abbreviated month is used.
            For that, you can use Peter's Date Package which provides an alternative
            Date-based VAMTypeConverter.)</para>
            <para>It also supports yyyy-MM-dd format automatically because Microsoft's validators do.</para>
            </remarks>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.DateVAMTypeConverter.#ctor">
            <summary>
            Constructor with no parameters.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.DateVAMTypeConverter.#ctor(System.String)">
            <summary>
            Constructor that sets the Name property.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.DateVAMTypeConverter.Init">
            <summary>
            Called by all constructors to initialize its properties.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.DateVAMTypeConverter.AddCultureProperties(Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseCondition,System.Text.StringBuilder)">
            <summary>
            Adds the following properties to the client-side condition object: Pattern, DateSep, CentBrk.
            </summary>
            <remarks>
            <para>The following properties are added to the client-side representation
            of the condition object:</para>
            <list type="table">
            <listheader>
            <term>Name and Type</term>
            <description>Description</description>
            </listheader>
            <item>
            <term>Pattern (string)</term>
            <description>The order of the short date pattern with this format: M|D|Y.
            The M, D, and Y characters are ordered based on VAMPage.CultureInfo.DateTimeFormatInfo.ShortDatePattern.
            The pipe is always between each of these.</description>
            </item>
            <item>
            <term>DateSep (string)</term>
            <description>The Date Separator from VAMPage.CultureInfo.DateTimeFormatInfo.DateSeparator.</description>
            </item>
            <item>
            <term>CentBrk (integer)</term>
            <description>For two digit years, the century break. Must be 0-99.
            Gets the value from GregorianCalendar.TwoDigitYearMax which gets
            its value from the Regional Settings control panel.</description>
            </item>
            </list>
            </remarks>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.DateVAMTypeConverter.AddReformatterProperties(Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseCondition,System.Text.StringBuilder)">
            <summary>
            Provides reformatting rules to handle the ShortDatePattern.
            Adds the following properties to the client-side action object: DateTmpt.
            </summary>
            <remarks>
            <para>The following properties are added to the client-side representation
            of the DataTypeTextBoxValidatorAction object:</para>
            <list type="table">
            <listheader>
            <term>Name and Type</term>
            <description>Description</description>
            </listheader>
            <item>
            <term>DateTmpt (string)</term>
            <description>Formats of the string. Should be a short date format with M, MM, D, DD, YY, YYYY
              as tokens that substitute for values. All letters are uppercase. M and D - no lead zero. YY - 2 digit year.</description>
            </item>
            </list>
            </remarks>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.DateVAMTypeConverter.ConvertFrom(System.Object)">
            <summary>
            Converts the string into a System.DateTime following VAMPage.CultureInfo and 
            returns the System.DateTime in Ticks.
            </summary>
            <returns>DateTime.Ticks (System.Int64) or null.</returns>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.DateVAMTypeConverter.ConvertTo(System.Object)">
            <summary>
            pValue must be a System.DateTime or System.Int64 in DateTime.Ticks. 
            Converts to the ShortDatePattern of the current culture.
            </summary>
        </member>
        <member name="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseNumberVAMTypeConverter">
            <summary>
            BaseNumberVAMTypeConverter is a base class to any numeric VAMTypeConverter:
            Int32, Double, and Currency.
            </summary>
            <remarks>
            It introduces support for negative numbers with the 
            <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseNumberVAMTypeConverter.AllowNegatives"/>
            property and <see cref="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseNumberVAMTypeConverter.GetNegNumberTemplate"/>
            method. It also includes the reformatting property
            <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseNumberVAMTypeConverter.ShowThousandsSeparator"/>.
            </remarks>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseNumberVAMTypeConverter.#ctor">
            <summary>
            Constructor with no parameters.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseNumberVAMTypeConverter.#ctor(System.String)">
            <summary>
            Constructor that sets the Name property.
            </summary>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseNumberVAMTypeConverter.fAllowNegatives">
            <summary>
            Storage for <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseNumberVAMTypeConverter.AllowNegatives"/>.
            </summary>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseNumberVAMTypeConverter.fShowThousandsSeparator">
            <summary>
            Storage for <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseNumberVAMTypeConverter.ShowThousandsSeparator"/>.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseNumberVAMTypeConverter.AddCultureProperties(Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseCondition,System.Text.StringBuilder)">
            <summary>
            Adds the following properties to the client-side condition object: Neg, ShowTS.
            </summary>
            <remarks>
            <para>The following properties are added to the client-side representation
            of the condition object:</para>
            <list type="table">
            <listheader>
            <term>Name and Type</term>
            <description>Description</description>
            </listheader>
            <item>
            <term>Neg (bool)</term>
            <description>AllowNegative</description>
            </item>
            <item>
            <term>ShowTS (bool)</term>
            <description>ShowThousandsSeparator</description>
            </item>
            </list>
            </remarks>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseNumberVAMTypeConverter.SupportsThousandsSeparator">
            <summary>
            While <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseNumberVAMTypeConverter.ShowThousandsSeparator"/>
             can request the use of that symbol in reformatting,
            the CultureInfo.NumberFormat.CurrencyGroupSeparator and CultureInfo.NumberFormat.NumberGroupSeparator
            may be "", which subclasses should detect and turn off the feature.
            </summary>
            <returns>True to support the ShowThousandsSeparator. False to disable the feature. This 
            class evaluates CultureInfo.NumberFormat.NumberGroupSeparator.</returns>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseNumberVAMTypeConverter.GetNegNumberTemplate">
            <summary>
            GetNegNumberTemplate builds a template based on CultureInfo.NumberFormat.NumberNegativePattern.
            </summary>
            <remarks>
            <para>Subclasses use this to install a client-side template for negative numbers
            in their AddReformatterProperties methods. All you have to do is replace the {0} 
            token within the string returned here with the absolute value of the number. 
            The template will provide the negative symbols.</para>
            </remarks>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseNumberVAMTypeConverter.CopyFrom(Jenzabar.Portal.Framework.Web.UI.Controls.Validation.VAMTypeConverter)">
            <summary>
            Copies all properties from the source to this object.
            </summary>
            <param name="pSource">The VAMTypeConverter whose properties will be copied.</param>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseNumberVAMTypeConverter.AllowNegatives">
            <summary>
            AllowNegatives determines if the number can be negative or not.
            </summary>
            <value>
            <para>When true, it can be negative. </para>
            <para>It defaults to true.</para>
            <para>The format for negative numbers is determined by Globals.Page.CultureInfo.NumberFormat.</para>
            </value>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseNumberVAMTypeConverter.ShowThousandsSeparator">
            <summary>
            ShowThousandsSeparator adds the thousands separator when the text is reformatted.
            </summary>
            <value>
            <para>The Globals.Page.CultureInfo.NumberFormat defines the separator character.</para>
            <para>It defaults to false.</para>
            </value>
        </member>
        <member name="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.CurrencyVAMTypeConverter">
            <summary>
            CurrencyVAMTypeConverter provides the conversions between strings containing currency values 
            and their native data type, System.Double.
            </summary>
            <remarks>
            <para>The currency string may have culture specific currency symbols, thousands separators,
            decimal points, and negative notations.</para>
            <para>There are two forms of currency: with and without currency symbol. The 
            <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.CurrencyVAMTypeConverter.UseCurrencySymbol"/>
            property determines which to use.</para>
            <para>The DataType is Double. However, it does not use the 
            <see cref="T:System.ComponentModel.DoubleConverter"/> for conversion.
            Instead it overrides <see cref="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.VAMTypeConverter.ConvertFrom(System.Object)"/>
            and <see cref="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.VAMTypeConverter.ConvertTo(System.Object)"/> to convert strings
            using the culture settings in VAMPage.CultureInfo.NumberFormat.</para>
            <para>Conversion from string to double uses Double.Parse with the NumberStyles = Currency when
            UseCurrencySymbol is true and not provided when false.
            On the client side, it emulates the Double.Parse function with
            the "VAM_CurrFmt" Convert From Function.</para>
            <para>The format can be:</para>
            <code>
            [sp][$][+|-|(][[sp]$[sp]][digits and groupseparators][decimalsep][digits][sp][$[sp]][)]
            </code>
            <para>Rules for converting from a string to a double:</para>
            <list type="bullet">
            <item>
            <description>When '(' appears, so must ')'</description>
            </item>
            <item>
            <description>Groupseparators are allowed in any position including 
            a series: 1,,,000 is OK. 1,2,3,0.00 is OK'</description>
            </item>
            <item>
            <description>Groupseparators cannot appear after the decimal separator</description>
            </item>
            <item>
            <description>Number of digits for decimal part is not limited in Double.Parse. Here UseDecimalDigits determines
               if that rule works.</description>
            </item>
            <item>
            <description>Only one currency symbol is allowed. For example, $1.00$ is illegal</description>
            </item>
            <item>
            <description>Currency symbol can be anywhere except within the digits.
             $(1.00) ($1.00) (1.00$) (1.00)$</description>
            </item>
            <item>
            <description>Trim lead and trailing spaces</description>
            </item>
            <item>
            <description>Cannot have spaces between +|-|( and first digit unless 
            separated by currency symbol "$ 1.00" is OK "- 1.00" is not.</description>
            </item>
            <item>
            <description>No more than one decimal separator allowed</description>
            </item>
            </list>
            </remarks>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.CurrencyVAMTypeConverter.#ctor">
            <summary>
            Constructor with no parameters.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.CurrencyVAMTypeConverter.#ctor(System.Boolean)">
            <summary>
            Constructor that sets the UseCurrencySymbol property.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.CurrencyVAMTypeConverter.#ctor(System.Boolean,System.Boolean,System.String)">
            <summary>
            Constructor that sets the UseCurrencySymbol, UseDecimalDigits and Name properties.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.CurrencyVAMTypeConverter.Init(System.Boolean,System.Boolean,System.String)">
            <summary>
            Called by each constructor to initialize all of the properties.
            </summary>
            <param name="pUseCurrencySymbol">The value for UseCurrencySymbol</param>
            <param name="pUseDecimalDigits">The value for UseDecimalDigits</param>
            <param name="pName">The value for Name</param>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.CurrencyVAMTypeConverter.fUseCurrencySymbol">
            <summary>
            Storage for <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.CurrencyVAMTypeConverter.UseCurrencySymbol"/>.
            </summary>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.CurrencyVAMTypeConverter.fUseDecimalDigits">
            <summary>
            Storage for <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.CurrencyVAMTypeConverter.UseDecimalDigits"/>.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.CurrencyVAMTypeConverter.AddCultureProperties(Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseCondition,System.Text.StringBuilder)">
            <summary>
            Adds the following properties to the client-side condition object: decdigits, decsep, grpsep, symbol.
            </summary>
            <remarks>
            <para>The following properties are added to the client-side representation
            of the condition object:</para>
            <list type="table">
            <listheader>
            <term>Name and Type</term>
            <description>Description</description>
            </listheader>
            <item>
            <term>decdigits (integer)</term>
            <description>CultureInfo.NumberFormat.CurrencyDecimalDigits. Max number of digits after decimal separator.
                Uses 99 when UseDecimalDigits is false.</description>
            </item>
            <item>
            <term>decsep (char)</term>
            <description>CultureInfo.NumberFormat.CurrencyDecimalSeparator</description>
            </item>
            <item>
            <term>grpsep (char)</term>
            <description>CultureInfo.NumberFormat.CurrencyGroupSeparator. (a.k.a. Thousands separator)</description>
            </item>
            <item>
            <term>symbol (string)</term>
            <description>CultureInfo.NumberFormat.CurrencySymbol. Is "" when UseCurrencySymbol is false.</description>
            </item>
            </list>
            </remarks>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.CurrencyVAMTypeConverter.AddReformatterProperties(Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseCondition,System.Text.StringBuilder)">
            <summary>
            Adds the following properties to the client-side action object: PosTmpt, NegTmpt, mindecdig.
            </summary>
            <remarks>
            <para>The following properties are added to the client-side representation
            of the DataTypeTextBoxValidatorAction object:</para>
            <list type="table">
            <listheader>
            <term>Name and Type</term>
            <description>Description</description>
            </listheader>
            <item>
            <term>PosTmpt (string)</term>
            <description>Formats the string as a positive number. Must contain the token {0} where
              the decimal value is replaced. Uses <see cref="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.CurrencyVAMTypeConverter.GetPosCurrencyTemplate"/>
              to build this template.</description>
            </item>
            <item>
            <term>NegTmpt (string)</term>
            <description>Formats the string as a negative number. Must contain the token {0} where
              the decimal value is replaced. Uses <see cref="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.CurrencyVAMTypeConverter.GetNegCurrencyTemplate"/>
              or <see cref="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseNumberVAMTypeConverter.GetNegNumberTemplate"/>
              to build this template.</description>
            </item>
            <item>
            <term>mindecdig (integer)</term>
            <description>The normal limit of decimal digits. The Condition also
              supplies 'decdigits' which is the maximum decimal digits.</description>
            </item>
            </list>
            </remarks>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.CurrencyVAMTypeConverter.SupportsThousandsSeparator">
            <returns>This class evaluates CultureInfo.NumberFormat.NumberGroupSeparator.</returns>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.CurrencyVAMTypeConverter.GetPosCurrencyTemplate">
            <summary>
            GetPosCurrencyTemplate returns a template that formats a positive currency value
            with currency symbol.
            </summary>
            <remarks>
            <para>The token "{0}" is placed inside this template. Always replace the token
            with the decimal value.</para>
            <para>Gets international formatting from VAMPage.Current.CultureInfo.NumberFormat.
            The CultureInfo.NumberFormat.CurrencyPositivePattern determines the overall format.</para>
            </remarks>
            <returns>A template used for positive currency values with the token "{0}"
            to be replaced by the decimal value.</returns>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.CurrencyVAMTypeConverter.GetNegCurrencyTemplate">
            <summary>
            GetPosCurrencyTemplate returns a template that formats a negative currency value
            with currency symbol.
            </summary>
            <remarks>
            <para>The token "{0}" is placed inside this template. Always replace the token
            with the decimal value.</para>
            <para>Gets international formatting from VAMPage.Current.CultureInfo.NumberFormat.
            The CultureInfo.NumberFormat.CurrencyNegativePattern determines the overall format.</para>
            </remarks>
            <returns>A template used for negative currency values with the token "{0}"
            to be replaced by the decimal value.</returns>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.CurrencyVAMTypeConverter.ConvertFrom(System.Object)">
            <summary>
            Converts from the string to a double.
            </summary>
            <remarks>
            <para>It does not use the <see cref="T:System.ComponentModel.DoubleConverter"/>. Instead it uses Double.Parse
            with the VAMPage.CultureInfo.NumberFormat. If UseCurrencySymbol is true,
            it sets the Double.Parse method to use NumberStyles.Currency as a parameter.
            This ensures using the currency properties of NumberFormat.</para>
            </remarks>
            <returns>A double or null if it could not convert.</returns>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.CurrencyVAMTypeConverter.ConvertTo(System.Object)">
            <summary>
            Converts a double into a string following the CultureInfo and properties on this class.
            </summary>
            <remarks>
            <para>It does not use <see cref="T:System.ComponentModel.DoubleConverter"/>. Instead it builds the string
            using VAMPage.CultureInfo and the properties on this class.</para>
            </remarks>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.CurrencyVAMTypeConverter.CopyFrom(Jenzabar.Portal.Framework.Web.UI.Controls.Validation.VAMTypeConverter)">
            <summary>
            Copies all properties from the source to this object.
            </summary>
            <param name="pSource">The VAMTypeConverter whose properties will be copied.</param>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.CurrencyVAMTypeConverter.UseCurrencySymbol">
            <summary>
            UseCurrencySymbol determines if the currency symbol can appear in the text.
            </summary>
            <value>
            <para>When true, the currency symbol can appear.</para>
            <para>The currency symbol uses CultureInfo.NumberFormat.CurrencySymbol.</para>
            </value>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.CurrencyVAMTypeConverter.UseDecimalDigits">
            <summary>
            UseDecimalDigits determines if there is a limit for the number of decimal digits
            following CultureInfo.NumberFormat.CurrentDecimalDigits or the user is allowed to enter more digits.
            </summary>
            <value>
            When true, the limit is imposed. When false, it is not.
            </value>
        </member>
        <member name="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.CurrencyWSymbolVAMTypeConverter">
            <summary>
            CurrencyWSymbolVAMTypeConverter is the same as CurrencyVAMTypeConverter but
            it has a constructor that assigns UseCurrencySymbol to true.
            </summary>
            <remarks>
            The VAM config files always instantiate VAMTypeConverters with a no parameter
            constructor. This is the way to make CurrencyVAMTypeConverter instantiated 
            with the UseCurrencySymbol property set to true.
            </remarks>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.CurrencyWSymbolVAMTypeConverter.#ctor">
            <summary>
            Constructor with no parameters.
            </summary>
        </member>
        <member name="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.PosCurrencyVAMTypeConverter">
            <summary>
            PositiveCurrencyVAMTypeConverter is the same as CurrencyVAMTypeConverter but
            it has a constructor that assigns UseCurrencySymbol to false, AllowNegatives to false,
            and the Name to "Positive Currency".
            </summary>
            <remarks>
            The VAM config files always instantiate VAMTypeConverters with a no parameter
            constructor. This is the way to make CurrencyVAMTypeConverter instantiated 
            with the desired property settings.
            </remarks>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.PosCurrencyVAMTypeConverter.#ctor">
            <summary>
            Constructor with no parameters.
            </summary>
        </member>
        <member name="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.PosCurrencyWSymbolVAMTypeConverter">
            <summary>
            PosCurrencyWSymbolVAMTypeConverter is the same as CurrencyVAMTypeConverter but
            it has a constructor that assigns UseCurrencySymbol to true, AllowNegatives to false,
            and the Name to "Positive Currency with symbol".
            </summary>
            <remarks>
            The VAM config files always instantiate VAMTypeConverters with a no parameter
            constructor. This is the way to make CurrencyVAMTypeConverter instantiated 
            with the desired property settings.
            </remarks>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.PosCurrencyWSymbolVAMTypeConverter.#ctor">
            <summary>
            Constructor with no parameters.
            </summary>
        </member>
        <member name="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.CaseInsStringVAMTypeConverter">
            <summary>
            CaseInsStringVAMTypeConverter provides the comparision and conversions for case insensitive strings.
            It appears in the default DataType property for validators and conditions as "String-Case Insensitive".
            </summary>
            <remarks>
            <para>The DataType is System.String. It use <see cref="T:System.ComponentModel.StringConverter"/> 
            for server-side conversion
            and establishes the Comparer to <see cref="P:System.Collections.CaseInsensitiveComparer.Default"/>
            for comparision.</para>
            <para>On the client-side it uses the "VAM_CIStrConv" Convert From function.</para>
            <para>This VAMTypeConverter does not support the DifferenceCondition and sets
            OneMultiplier to 0.</para>
            </remarks>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.CaseInsStringVAMTypeConverter.#ctor">
            <summary>
            Constructor with no parameters.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.CaseInsStringVAMTypeConverter.#ctor(System.String)">
            <summary>
            Constructor that sets the Name property.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.CaseInsStringVAMTypeConverter.Internationalize(System.String)">
            <returns>The original string unmodified.</returns>
        </member>
        <member name="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.StringVAMTypeConverter">
            <summary>
            StringVAMTypeConverter provides the comparision and conversions for case sensitive strings.
            It appears in the default DataTypes property for validators and conditions as "String".
            </summary>
            <remarks>
            <para>The DataType is System.String. It use StringTypeConverter for server-side conversion.</para>
            <para>On the client-side it uses the "VAM_StrConv" Convert From function.</para>
            <para>This VAMTypeConverter does not support the DifferenceCondition and sets
            OneMultiplier to 0.</para>
            </remarks>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.StringVAMTypeConverter.#ctor">
            <summary>
            Constructor with no parameters.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.StringVAMTypeConverter.#ctor(System.String)">
            <summary>
            Constructor that sets the Name property.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.StringVAMTypeConverter.Internationalize(System.String)">
            <returns>The original value.</returns>
        </member>
        <member name="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.Int32VAMTypeConverter">
            <summary>
            Int32VAMTypeConverter provides the comparision and conversions for integers
            (using Int32).
            It appears in the default DataTypes property for validators and conditions as "Integer".
            </summary>
            <remarks>
            <para>The DataType is System.Int32. It does not use the <see cref="T:System.ComponentModel.Int32Converter"/>
            for server side conversion.
            Instead it overrides <see cref="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.VAMTypeConverter.ConvertFrom(System.Object)"/>
            and <see cref="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.VAMTypeConverter.ConvertTo(System.Object)"/> to convert strings
            using the thousands separator in VAMPage.CultureInfo.NumberFormat.NumberGroupSeparator.</para>
            <para>The client side uses the Convert From function "VAM_IntConv".</para>
            </remarks>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.Int32VAMTypeConverter.#ctor">
            <summary>
            Constructor with no parameters.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.Int32VAMTypeConverter.#ctor(System.String)">
            <summary>
            Constructor that sets the Name property.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.Int32VAMTypeConverter.Init">
            <summary>
            Called by the constructors to initialize the properties.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.Int32VAMTypeConverter.ConvertFrom(System.Object)">
            <summary>
            Converts the string to a System.Int32 value.
            </summary>
            <remarks>
            If negatives are not allowed, return null when its a negative number.
            As part of conversion, it strips out the thousands separator.
            Returns null if there is character other than a digit, thousands separator 
            or a negative symbol.
            </remarks>
            <param name="pValue">Should be a string</param>
            <returns>System.Int32 value or null</returns>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.Int32VAMTypeConverter.ConvertTo(System.Object)">
            <summary>
            Converts a System.Int32 into a string.
            </summary>
            <remarks>
            <para>When the value is negative and AllowNegatives is false, it returns null.</para>
            <para>Adds thousands separators if ShowThousandsSeparator is true.</para>
            <para>Uses VAMPage.CultureInfo.NumberFormat.</para>
            </remarks>
            <param name="pValue">System.Int32</param>
            <returns>String when conversion works; null when it doesn't.</returns>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.Int32VAMTypeConverter.Internationalize(System.String)">
            <returns>The original value.</returns>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.Int32VAMTypeConverter.AddReformatterProperties(Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseCondition,System.Text.StringBuilder)">
            <summary>
            Adds the following properties to the client-side action object: NegTmpt.
            </summary>
            <remarks>
            <para>The following properties are added to the client-side representation
            of the DataTypeTextBoxValidatorAction object:</para>
            <list type="table">
            <listheader>
            <term>Name and Type</term>
            <description>Description</description>
            </listheader>
            <item>
            <term>NegTmpt (string)</term>
            <description>Formats the string as a negative number. Must contain the token {0} where
              the integer value is replaced. Uses <see cref="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseNumberVAMTypeConverter.GetNegNumberTemplate"/>
              to build this template.</description>
            </item>
            </list>
            </remarks>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.Int32VAMTypeConverter.AddCultureProperties(Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseCondition,System.Text.StringBuilder)">
            <summary>
            Adds the following properties to the client-side condition object: grpsep.
            </summary>
            <remarks>
            <para>The following properties are added to the client-side representation
            of the condition object:</para>
            <list type="table">
            <listheader>
            <term>Name and Type</term>
            <description>Description</description>
            </listheader>
            <item>
            <term>grpsep (char)</term>
            <description>CultureInfo.NumberFormat.NumberGroupSeparator. (a.k.a. Thousands separator)</description>
            </item>
            </list>
            </remarks>
        </member>
        <member name="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.PosInt32VAMTypeConverter">
            <summary>
            PosInt32VAMTypeConverter is the same as Int32VAMTypeConverter but
            it has a constructor that assigns AllowNegatives to false.
            It appears in the default DataTypes property for validators and conditions as "Positive Integer".
            </summary>
            <remarks>
            The VAM config files always instantiate VAMTypeConverters with a no parameter
            constructor. This is the way to make Int32VAMTypeConverter instantiated 
            with the desired property settings.
            </remarks>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.PosInt32VAMTypeConverter.#ctor">
            <summary>
            Constructor with no parameters.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.PosInt32VAMTypeConverter.#ctor(System.String)">
            <summary>
            Constructor that sets the Name property.
            </summary>
        </member>
        <member name="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.DoubleVAMTypeConverter">
            <summary>
            DoubleVAMTypeConverter provides the conversions for decimal numbers
            (using System.Double).
            It appears in the default DataTypes property for validators and conditions as "Double".
            </summary>
            <remarks>
            <para>The DataType is System.Double. It does not use the <see cref="T:System.ComponentModel.DoubleConverter"/>
            for server side conversion.
            Instead it overrides <see cref="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.VAMTypeConverter.ConvertFrom(System.Object)"/>
            and <see cref="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.VAMTypeConverter.ConvertTo(System.Object)"/> to convert strings
            using the properties of VAMPage.CultureInfo.NumberFormat.</para>
            <para>The client side uses the Convert From function "VAM_DecConv".</para>
            </remarks>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.DoubleVAMTypeConverter.#ctor">
            <summary>
            Constructor with no parameters.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.DoubleVAMTypeConverter.#ctor(System.String)">
            <summary>
            Constructor that sets the Name property.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.DoubleVAMTypeConverter.Init">
            <summary>
            Called by the constructor to initialize the properties.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.DoubleVAMTypeConverter.ConvertFrom(System.Object)">
            <summary>
            Converts the string to a System.Double value.
            </summary>
            <remarks>
            If negatives are not allowed, return null when it is a negative number.
            As part of conversion, it strips out the thousands separator.
            Returns null if there is character other than a digit, decimal separator, thousands separator 
            or a negative symbol.
            </remarks>
            <param name="pValue">Should be a string</param>
            <returns>System.Double value or null</returns>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.DoubleVAMTypeConverter.ConvertTo(System.Object)">
            <summary>
            Converts a System.Double into a string.
            </summary>
            <remarks>
            <para>When the value is negative and AllowNegatives is false, it returns null.</para>
            <para>Adds thousands separators if ShowThousandsSeparator is true.</para>
            <para>Uses VAMPage.CultureInfo.NumberFormat.</para>
            </remarks>
            <param name="pValue">System.Double</param>
            <returns>String when conversion works; null when it doesn't.</returns>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.DoubleVAMTypeConverter.AddCultureProperties(Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseCondition,System.Text.StringBuilder)">
            <summary>
            Adds the following properties to the client-side condition object: decsep, grpsep.
            </summary>
            <remarks>
            <para>The following properties are added to the client-side representation
            of the condition object:</para>
            <list type="table">
            <listheader>
            <term>Name and Type</term>
            <description>Description</description>
            </listheader>
            <item>
            <term>decsep (char)</term>
            <description>CultureInfo.NumberFormat.NumberDecimalSeparator</description>
            </item>
            <item>
            <term>grpsep (char)</term>
            <description>CultureInfo.NumberFormat.NumberGroupSeparator. (a.k.a. Thousands separator)</description>
            </item>
            </list>
            </remarks>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.DoubleVAMTypeConverter.AddReformatterProperties(Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseCondition,System.Text.StringBuilder)">
            <remarks>
            <para>The following properties are added to the client-side representation
            of the DataTypeTextBoxValidatorAction object:</para>
            <list type="table">
            <listheader>
            <term>Name and Type</term>
            <description>Description</description>
            </listheader>
            <item>
            <term>NegTmpt (string)</term>
            <description>Formats the string as a negative number. Must contain the token {0} where
              the double value is replaced. Uses <see cref="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseNumberVAMTypeConverter.GetNegNumberTemplate"/>
              to build this template.</description>
            </item>
            </list>
            </remarks>
        </member>
        <member name="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.PosDoubleVAMTypeConverter">
            <summary>
            PosDoubleVAMTypeConverter is the same as DoubleVAMTypeConverter but
            it has a constructor that assigns AllowNegatives to false.
            It appears in the default DataTypes property for validators and conditions as "Positive Double".
            </summary>
            <remarks>
            The VAM config files always instantiate VAMTypeConverters with a no parameter
            constructor. This is the way to make DoubleVAMTypeConverter instantiated 
            with the desired property settings.
            </remarks>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.PosDoubleVAMTypeConverter.#ctor">
            <summary>
            Constructor with no parameters.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.PosDoubleVAMTypeConverter.#ctor(System.String)">
            <summary>
            Constructor that sets the Name property.
            </summary>
        </member>
        <member name="T:Jenzabar.Portal.Framework.Web.UI.PortletDisplayModeEventHandler">
            <summary>
            The method signature for a portlet action event handler
            </summary>
        </member>
        <member name="T:Jenzabar.Portal.Framework.Web.UI.PortletDisplayModeEventArgs">
            <summary>
            Arguments for 
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.PortletDisplayModeEventArgs.#ctor(Jenzabar.Portal.Framework.Web.UI.PortletDisplayMode)">
            <summary>
            Constructs the event arguments
            </summary>
            <param name="displayMode">The display mode</param>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.PortletDisplayModeEventArgs.DisplayMode">
            <summary>
            Gets the display mode to which the portlet has been set
            </summary>
        </member>
        <member name="T:Jenzabar.Portal.Framework.Web.UI.Controls.MetaControls.Attributes.RadioButtonListMetaControlAttribute">
            <summary>
            An attribute used to declare the need for a preference or setting to be displayed as a RadioButtonList
            </summary>
            <remarks>
            This attribute can be applied to either a portlet or
            an application.
            
            It will be used by the framework to automatically generate the appropriate preferences or
            settings overlay that allows the user to enter the data for that preference or setting
            using the control specified.
            
            This information can then be retrieved by using the various preference and settings domain objects
            in the framework. They can also be accessed by using the Preferences or Settings property of the
            PortletBase and PortalApplicationBase classes.
            </remarks>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.MetaControls.Attributes.RadioButtonListMetaControlAttribute.#ctor(System.Int32,System.String,System.String,System.String,System.Boolean,System.String,System.String,Jenzabar.Portal.Framework.NameValueDataSourceType,Jenzabar.Portal.Framework.NameValueType,System.String)">
            <summary>
            Constructs a RadioButtonList meta control
            </summary>
            <param name="sortOrder">Ordinal that determines the meta control's position</param>
            <param name="name">The name of the meta control</param>
            <param name="displayName">The display name of the meta control</param>
            <param name="description">The description for the meta control</param>
            <param name="required">Denotes whether or not a value is required for the meta control</param>
            <param name="defaultItems">The list of selected items chosen by default</param>
            <param name="items">The complete list of items to select from</param>
            <param name="nameValueDataSourceType">Denotes whether or not the name/value data source is static or dynamic</param>
            <param name="nameValueType">The type of the name/value pair</param>
            <param name="cssClass">The CSS class for the meta control</param>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.MetaControls.Attributes.RadioButtonListMetaControlAttribute.#ctor(System.Int32,System.String,System.String,System.String,System.Boolean,System.String,System.String,Jenzabar.Portal.Framework.NameValueDataSourceType,Jenzabar.Portal.Framework.NameValueType,System.String,System.String,System.Int32,System.Web.UI.WebControls.RepeatDirection,System.Web.UI.WebControls.RepeatLayout)">
            <summary>
            Constructs a RadioButtonList meta control
            </summary>
            <param name="sortOrder">Ordinal that determines the meta control's position</param>
            <param name="name">The name of the meta control</param>
            <param name="displayName">The display name of the meta control</param>
            <param name="description">The description for the meta control</param>
            <param name="required">Denotes whether or not a value is required for the meta control</param>
            <param name="defaultItems">The list of selected items chosen by default</param>
            <param name="items">The complete list of items to select from</param>
            <param name="nameValueDataSourceType">Denotes whether or not the name/value data source is static or dynamic</param>
            <param name="nameValueType">The type of the name/value pair</param>
            <param name="cssClass">The CSS class for the meta control</param>
            <param name="toolTip">The tooltip for the meta control</param>
            <param name="repeatColumns">The number of columns used to display the items</param>
            <param name="repeatDirection">The direction the items are arranged</param>
            <param name="repeatLayout">The layout of the item arrangement</param>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.MetaControls.Attributes.RadioButtonListMetaControlAttribute.#ctor(System.Int32,System.String,System.String,System.String,System.Type,System.Boolean,System.String,System.String,Jenzabar.Portal.Framework.NameValueDataSourceType,Jenzabar.Portal.Framework.NameValueType,System.String)">
            <summary>
            Constructs a RadioButtonList meta control
            </summary>
            <param name="sortOrder">Ordinal that determines the meta control's position</param>
            <param name="name">The name of the meta control</param>
            <param name="friendlyNameResourceKey">The resource key for the friendly name of the attribute</param>
            <param name="descriptionResourceKey">The resource key for a brief description of the attribute</param>
            <param name="resourceProvider">The qualified type name of the class that implements IResourceProvider</param>
            <param name="required">Denotes whether or not a value is required for the meta control</param>
            <param name="defaultItems">The list of selected items chosen by default</param>
            <param name="items">The complete list of items to select from</param>
            <param name="nameValueDataSourceType">Denotes whether or not the name/value data source is static or dynamic</param>
            <param name="nameValueType">The type of the name/value pair</param>
            <param name="cssClass">The CSS class for the meta control</param>
            <remarks>
            The resourceProvider argument is in the format: "AssemblyName,TypeName".
            </remarks>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.MetaControls.Attributes.RadioButtonListMetaControlAttribute.#ctor(System.Int32,System.String,System.String,System.String,System.Type,System.Boolean,System.String,System.String,Jenzabar.Portal.Framework.NameValueDataSourceType,Jenzabar.Portal.Framework.NameValueType,System.String,System.String,System.Int32,System.Web.UI.WebControls.RepeatDirection,System.Web.UI.WebControls.RepeatLayout)">
            <summary>
            Constructs a RadioButtonList meta control
            </summary>
            <param name="sortOrder">Ordinal that determines the meta control's position</param>
            <param name="name">The name of the meta control</param>
            <param name="friendlyNameResourceKey">The resource key for the friendly name of the attribute</param>
            <param name="descriptionResourceKey">The resource key for a brief description of the attribute</param>
            <param name="resourceProvider">The qualified type name of the class that implements IResourceProvider</param>
            <param name="required">Denotes whether or not a value is required for the meta control</param>
            <param name="defaultItems">The list of selected items chosen by default</param>
            <param name="items">The complete list of items to select from</param>
            <param name="nameValueDataSourceType">Denotes whether or not the name/value data source is static or dynamic</param>
            <param name="nameValueType">The type of the name/value pair</param>
            <param name="cssClass">The CSS class for the meta control</param>
            <param name="toolTip">The tooltip for the meta control</param>
            <param name="repeatColumns">The number of columns used to display the items</param>
            <param name="repeatDirection">The direction the items are arranged</param>
            <param name="repeatLayout">The layout of the item arrangement</param>
            <remarks>
            The resourceProvider argument is in the format: "AssemblyName,TypeName".
            </remarks>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.MetaControls.Attributes.RadioButtonListMetaControlAttribute.CreateMetaControl(System.Object)">
            <summary>
            Creates the meta control associated with the attribute
            </summary>
            <param name="key">The key used to retrieve dynamic values from a NameValueProvider, typically the object to which the attribute is attached</param>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.MetaControls.Attributes.RadioButtonListMetaControlAttribute.Items">
            <summary>
            Gets the complete list of items to select from
            </summary>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.MetaControls.Attributes.RadioButtonListMetaControlAttribute.ToolTip">
            <summary>
            Gets the tooltip for the meta control
            </summary>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.MetaControls.Attributes.RadioButtonListMetaControlAttribute.RepeatColumns">
            <summary>
            Gets the number of columns used to display the items
            </summary>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.MetaControls.Attributes.RadioButtonListMetaControlAttribute.RepeatDirection">
            <summary>
            Gets the direction the items are arranged
            </summary>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.MetaControls.Attributes.RadioButtonListMetaControlAttribute.RepeatLayout">
            <summary>
            Gets the layout of the item arrangement
            </summary>
        </member>
        <member name="T:Jenzabar.Portal.Framework.Web.UI.Controls.Secured.SPanel">
            <summary>
            A secured, operation aware version of the Panel control
            </summary>
            <remarks>
            Secured controls can be used to make interface elements aware of whether or not
            a user has access to a particular operation assigned to the control
            
            If the user does not have access to the operation(s) assigned to the control, the
            control can be set to render differently (or not at all) to prevent the user from
            using the control to perform the secured operation
            
            In addition, events normally raised by the control will not be raised if the control
            detects that the access check has failed. This prevents users from "spoofing" access
            by simulating a postback.
            </remarks>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Web.UI.Controls.Secured.SPanel.m_OperationNames">
            <summary>
            Member variable m_OperationNames
            </summary>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Web.UI.Controls.Secured.SPanel.m_IsSecured">
            <summary>
            Member variable m_IsSecured
            </summary>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Web.UI.Controls.Secured.SPanel.m_AccessCheckType">
            <summary>
            Member variable AccessCheckType
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Secured.SPanel.#ctor">
            <summary>
            Constructor for the SPanel class
            </summary> 
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Secured.SPanel.OnPreRender(System.EventArgs)">
            <summary>
            Overrides the OnPreRender event in base control
            </summary>
            <param name="e">EventArgs</param>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Secured.SPanel.SecureControl">
            <summary>
            Used internally to secure the control
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Secured.SPanel.Render(System.Web.UI.HtmlTextWriter)">
            <summary>
            Overrides the Render event in base control
            </summary>
            <param name="writer">HtmlTextWriter to render control with</param>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Secured.SPanel.AccessCheckFailedText">
            <summary>
            Gets or sets the text to display if an access check fails.
            </summary>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Secured.SPanel.AccessCheckFailedTextCSSClass">
            <summary>
            Gets or sets the style to apply to the text if displayed if the access check fails and the display type is 'Text'.
            </summary>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Secured.SPanel.OperationNames">
            <summary>
            Member Property - OperationNames
            </summary>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Secured.SPanel.IsSecured">
            <summary>
            Member Property - IsSecured
            </summary>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Secured.SPanel.AccessCheckType">
            <summary>
            Member Property - AccessCheckType
            </summary>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Secured.SPanel.DisplayType">
            <summary>
            Member Property - m_DisplayType
            </summary>
        </member>
        <member name="T:Jenzabar.Portal.Framework.Web.UI.Controls.ControlUtilities">
            <summary>
            Utilities useful for various server controls
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.ControlUtilities.FindPortletBase(System.Web.UI.Control)">
            <summary>
            Finds the PortletBase in the control hierarchy
            </summary>
            <param name="control">The control to find the PortletBase for</param>
            <returns>The PortletBaes if found, an InvalidOperationException otherwise</returns>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.ControlUtilities.FindPortletBase(System.Web.UI.Control,System.Boolean)">
            <summary>
            Finds the PortletBase in the control hierarchy
            </summary>
            <param name="control">The control to find the PortletBase for</param>
            <param name="throwException">If true, an exception is thrown if the PortletBase is not fond</param>
            <returns>If throwException is false and the portlet base is not found a null value is returned</returns>
        </member>
        <member name="T:Jenzabar.Portal.Framework.Web.UI.Controls.PrincipalSelectorValidator">
            <summary>
            A validator class for Principals
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.PrincipalSelectorValidator.ControlPropertiesValid">
            <summary>
            Overrides the BaseValidator ControlPropertiesValid() method
            </summary>
            <returns>Boolean</returns>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.PrincipalSelectorValidator.EvaluateIsValid">
            <summary>
            Overrides the BaseValidator EvaluateIsValid() method
            </summary>
            <returns>Boolean</returns>
        </member>
        <member name="T:Jenzabar.Portal.Framework.Web.UI.Controls.Secured.SHyperLink">
            <summary>
            A secured, operation aware version of the HyperLink control
            </summary>
            <remarks>
            Secured controls can be used to make interface elements aware of whether or not
            a user has access to a particular operation assigned to the control
            
            If the user does not have access to the operation(s) assigned to the control, the
            control can be set to render differently (or not at all) to prevent the user from
            using the control to perform the secured operation
            
            In addition, events normally raised by the control will not be raised if the control
            detects that the access check has failed. This prevents users from "spoofing" access
            by simulating a postback.
            </remarks>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Web.UI.Controls.Secured.SHyperLink.m_OperationNames">
            <summary>
            Member variable m_OperationNames
            </summary>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Web.UI.Controls.Secured.SHyperLink.m_IsSecured">
            <summary>
            Member variable m_IsSecured
            </summary>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Web.UI.Controls.Secured.SHyperLink.m_AccessCheckType">
            <summary>
            Member variable AccessCheckType
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Secured.SHyperLink.#ctor">
            <summary>
            Constructor for the SHyperLink class
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Secured.SHyperLink.OnPreRender(System.EventArgs)">
            <summary>
            Overrides the OnPreRender event in base control
            </summary>
            <param name="e">EventArgs</param>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Secured.SHyperLink.SecureControl">
            <summary>
            Used internally to secure the control
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Secured.SHyperLink.Render(System.Web.UI.HtmlTextWriter)">
            <summary>
            Overrides the Render event in base control
            </summary>
            <param name="writer">HtmlTextWriter to render control with</param>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Secured.SHyperLink.AccessCheckFailedText">
            <summary>
            Gets or sets the text to display if an access check fails.
            </summary>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Secured.SHyperLink.AccessCheckFailedTextCSSClass">
            <summary>
            Gets or sets the style to apply to the text if displayed if the access check fails and the display type is 'Text'.
            </summary>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Secured.SHyperLink.OperationNames">
            <summary>
            Member Property - OperationNames
            </summary>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Secured.SHyperLink.IsSecured">
            <summary>
            Member Property - IsSecured
            </summary>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Secured.SHyperLink.AccessCheckType">
            <summary>
            Member Property - AccessCheckType
            </summary>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Secured.SHyperLink.DisplayType">
            <summary>
            Member Property - m_DisplayType
            </summary>
        </member>
        <member name="T:Jenzabar.Portal.Framework.Web.UI.Controls.MetaControls.RadioButtonListMetaControl">
            <summary>
            A meta-data aware version of the RadioButtonList control
            </summary>
            <remarks>
            Meta-data aware controls can be used for rendering preference and settings based
            on meta data attributes.
            </remarks>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.MetaControls.RadioButtonListMetaControl.#ctor(Jenzabar.Portal.Framework.Web.UI.Controls.MetaControls.Attributes.RadioButtonListMetaControlAttribute,System.Object)">
            <summary>
            Constructs a RadioButtonList meta control
            </summary>
            <param name="radioButtonListMetaControlAttribute">The attribute for the RadioButtonList meta control</param>
            <param name="key">The key used to retrieve dynamic values from a NameValueProvider, typically the object to which the attribute is attached</param>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.MetaControls.RadioButtonListMetaControl.CreateChildControls">
            <summary>
            Builds children controls for this control
            </summary>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.MetaControls.RadioButtonListMetaControl.MetaControlAttribute">
            <summary>
            Gets or sets the attribute for the meta control
            </summary>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.MetaControls.RadioButtonListMetaControl.Name">
            <summary>
            Gets the name of the meta control
            </summary>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.MetaControls.RadioButtonListMetaControl.Value">
            <summary>
            Gets the value of the meta control
            </summary>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.MetaControls.RadioButtonListMetaControl.Scope">
            <summary>
            Gets the scope of the meta control
            </summary>
        </member>
        <member name="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.PropertyGridForm">
            <summary>
            The PropertyGridForm is used within several UITypeEditors.
            </summary>
            <remarks>
            It provides the PropertyGrid control to edit the properties of any object that
            you pass to the Instance property.
            </remarks>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.PropertyGridForm.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.PropertyGridForm.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.PropertyGridForm.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.PropertyGridForm.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.PropertyGridForm.OKButton_Click(System.Object,System.EventArgs)">
            <summary>
            OK button event handler.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.PropertyGridForm.CancelBtn_Click(System.Object,System.EventArgs)">
            <summary>
            Cancel button event handler.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.PropertyGridForm.Instance">
            <summary>
            Instance contains the object instance that the grid is displaying.
            </summary>
        </member>
        <member name="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseSpecialCondition">
            <summary>
            BaseSpecialCondition is a base class for any condition that doesn't evaluate
            user assigned data within form input fields. 
            </summary>
            <remarks>
            <para>It has the following features:</para>
            <list type="bullet">
            <item>
            <description>
            It is based on <see cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseOneFieldCondition"/> so 
            the user can select a control to evaluate.
            </description>
            </item>
            <item>
            <description>
            It allows the selection of any control on the page through the 
            <see cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.ControlConnection"/> class.
            </description>
            </item>
            <item>
            <description>
            It hides these properties from the Property Editor: 
            Trim, NotCondition (subclasses may add them back if needed).
            </description>
            </item>
            <item>
            <description>
            It sets EvaluateOnClickOrChange to false
            avoiding hooking up the onchange/onclick events.
            </description>
            </item>
            </list>
            </remarks>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseSpecialCondition.#ctor">
            <summary>
            Constructor with no parameters.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseSpecialCondition.#ctor(System.Web.UI.Control)">
            <summary>
            Constructor that sets the Owner property.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseSpecialCondition.#ctor(System.String)">
            <summary>
            Constructor that sets the ControlIDToEvaluate property.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseSpecialCondition.#ctor(System.Web.UI.Control,System.String)">
            <summary>
            Constructor that sets the Owner and ControlIDToEvaluate properties.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseSpecialCondition.#ctor(System.Web.UI.Control,System.Web.UI.Control)">
            <summary>
            Constructor that sets the Owner and ControlToEvaluate properties.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseSpecialCondition.GetControlToEvaluateConnectionType">
            <returns><see cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.ControlConnection"/></returns>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseSpecialCondition.DefineJavaScript(Jenzabar.Portal.Framework.Web.UI.Controls.Validation.VAMPage)">
            <summary>
            Establishes VAM_XVF.js on the page. All special conditions have their
            functions in that file.
            </summary>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseSpecialCondition.InitFunctionName">
            <summary>
            Although its based on BaseOneFieldCondition, never hookup ControlToEvaluate to the onchange
            event.
            </summary>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseSpecialCondition.NotCondition">
            <summary>
            Sets BrowsableAttribute(false)
            </summary>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseSpecialCondition.Trim">
            <summary>
            Sets BrowsableAttribute(false)
            </summary>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseSpecialCondition.EvaluateOnClickOrChange">
            <summary>
            Sets DefaultValueAttribute(false)
            </summary>
        </member>
        <member name="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.VisibleCondition">
            <summary>
            VisibleCondition is a specialized condition that determines if the 
            ControlToEvaluate is visible or not.
            </summary>
            <remarks>
            <para>For example, a Validator's <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseAnyValidator.Enabler"/>
            property may use the VisibleCondition 
            to prevent a validator from validating a control that is invisible.</para>
            <para>Set the <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseOneFieldCondition.ControlIDToEvaluate"/> property
            to the control and Visibility state with the <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.VisibleCondition.IsVisible"/>
            property.</para>
            <para>See the <b>User's Guide</b> for an overview of using this condition.</para>
            <para>Visibility is determined by the style.visibility and style.display attributes.
            An object is invisible if style.visibility = 'hidden' OR style.display = 'none'.
            Note that the ControlToEvaluate.Visible property is not involved. After all,
            when its false, no control is generated into the client-side page.</para>
            <para><b>Note:</b>Visibility is not determined by the WebControl.Visible property because
            that is really an on-off switch. When set to false, the entire webcontrol is not written
            to the page. The client-side has nothing available to detect the state of the control
            since it is not on the page.</para>
            </remarks>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.VisibleCondition.#ctor">
            <summary>
            Constructor with no parameters.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.VisibleCondition.#ctor(System.Web.UI.Control)">
            <summary>
            Constructor that sets the Owner property.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.VisibleCondition.#ctor(System.String)">
            <summary>
            Constructor that sets the ControlIDToEvaluate property.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.VisibleCondition.#ctor(System.Web.UI.Control,System.String)">
            <summary>
            Constructor that sets the Owner and ControlIDToEvaluate properties.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.VisibleCondition.#ctor(System.Web.UI.Control,System.Web.UI.Control)">
            <summary>
            Constructor that sets the Owner and ControlToEvaluate properties.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.VisibleCondition.#ctor(System.Web.UI.Control,System.String,System.Boolean)">
            <summary>
            Constructor that sets the Owner, ControlIDToEvaluate, and IsVisible properties.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.VisibleCondition.#ctor(System.Web.UI.Control,System.Web.UI.Control,System.Boolean)">
            <summary>
            Constructor that sets the Owner, ControlToEvaluate, and IsVisible properties.
            </summary>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.VisibleCondition.fIsVisible">
            <summary>
            Storage for <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.VisibleCondition.IsVisible"/>.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.VisibleCondition.EvaluateCondition">
            <summary>
            Evaluates as "success" when the visibility of the control matches the 
            <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.VisibleCondition.IsVisible"/> property.
            Evaluates as "failed" otherwise. There is no "cannot evaluate" state.
            </summary>
            <remarks>
            <para>Looks at the Styles[] collection for "Visibility" and "Display" attributes.
            Ignores the Visible property as that entirely removes the object from the client-side.</para>
            </remarks>
            <returns>1 for "success"; 0 for "failed".</returns>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.VisibleCondition.DefineProperties(System.Text.StringBuilder)">
            <summary>
            Defines the following properties in the client-side representation of this object: Vis.
            </summary>
            <remarks>
            <list type="table">
            <listheader>
            <term>Property</term>
            <description>Server side source</description>
            </listheader>
            <item><term>Vis (boolean)</term>
            <description>IsVisible</description></item>
            </list>
            </remarks>
            <param name="pJavaScript">Append the properties to this stringbuilder.</param>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.VisibleCondition.DescribeBody">
            <returns>DescribeControlToEvaluate() + " is " + (IsVisible ? "visible" : "invisible")</returns>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.VisibleCondition.CopyFrom(Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseCondition)">
            <summary>
            Copies IsVisible.
            </summary>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.VisibleCondition.IsVisible">
            <summary>
            IsVisible is the visibility state of the control that we are evaluating.
            </summary>
            <value>
            <para>When IsVisible is true, we expect the control to be visible on the page.</para>
            <para>When false, we expect the control to be invisible on the page by checking
            the style 'visibility' for a value of 'hidden' or the style 'display' for a
            value of 'none'.</para>
            <para>It defaults to true.</para>
            </value>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.VisibleCondition.EvalFunctionName">
            <summary>
            The client side Evaluation function is "VAM_EvalVisCond".
            </summary>
        </member>
        <member name="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.EnabledCondition">
            <summary>
            EnabledCondition is a specialized condition that determines 
            if the ControlToEvaluate is enabled or disabled.
            </summary>
            <remarks>
            <para>For example, a Validator's <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseAnyValidator.Enabler"/>
            property may use the EnabledCondition 
            to prevent a validator from validating a control that is disabled.</para>
            <para>Set the <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseOneFieldCondition.ControlIDToEvaluate"/> property
            to the control and Enabled state with the <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.EnabledCondition.IsEnabled"/>
            property.</para>
            <para>See the <b>User's Guide</b> for an overview of using this condition.</para>
            <para>On the client side, enabled is determined by the HTML disabled attribute.
            Note that many HTML elements may not support the disabled property on the client side.
            Only Internet Explorer 5+ provides support for it on most data entry fields.</para>
            </remarks>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.EnabledCondition.#ctor">
            <summary>
            Constructor with no parameters.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.EnabledCondition.#ctor(System.Web.UI.Control)">
            <summary>
            Constructor that sets the Owner property.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.EnabledCondition.#ctor(System.String)">
            <summary>
            Constructor that sets the ControlIDToEvaluate property.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.EnabledCondition.#ctor(System.Web.UI.Control,System.String)">
            <summary>
            Constructor that sets the Owner and ControlIDToEvaluate properties.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.EnabledCondition.#ctor(System.Web.UI.Control,System.Web.UI.Control)">
            <summary>
            Constructor that sets the Owner and ControlToEvaluate properties.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.EnabledCondition.#ctor(System.Web.UI.Control,System.String,System.Boolean)">
            <summary>
            Constructor that sets the Owner, ControlIDToEvaluate, and IsEnabled properties.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.EnabledCondition.#ctor(System.Web.UI.Control,System.Web.UI.Control,System.Boolean)">
            <summary>
            Constructor that sets the Owner, ControlToEvaluate, and IsEnabled properties.
            </summary>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.EnabledCondition.fIsEnabled">
            <summary>
            Storage for <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.EnabledCondition.IsEnabled"/>.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.EnabledCondition.EvaluateCondition">
            <remarks>
            <para>When ControlToEvaluate is a System.Web.UI.WebControl subclass, it compares
            the WebControl.Enabled property to IsEnabled.</para>
            <para>When ControlToEvaluate is a System.Web.UI.HtmlControl subclass, it compares
            the HtmlControl.Disabled property to IsEnabled.</para>
            <para>Any other class cannot be evaluated on the server side.</para>
            </remarks>
            <returns>1 when the Enabled state matches IsEnabled; 0 when it does not; 
            -1 when it cannot evaluate because the control class is not subclassed
            from WebControl or HtmlControl.</returns>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.EnabledCondition.DefineProperties(System.Text.StringBuilder)">
            <summary>
            Defines the following properties in the client-side representation of this object: IsEnab.
            </summary>
            <remarks>
            <list type="table">
            <listheader>
            <term>Property</term>
            <description>Server side source</description>
            </listheader>
            <item><term>IsEnab (boolean)</term>
            <description>IsEnabled</description></item>
            </list>
            </remarks>
            <param name="pJavaScript">Append the properties to this stringbuilder.</param>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.EnabledCondition.DescribeBody">
            <returns>DescribeControlToEvaluate() + " is " + (IsEnabled ? "enabled" : "disabled")</returns>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.EnabledCondition.CopyFrom(Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseCondition)">
            <summary>
            Copies IsEnabled.
            </summary>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.EnabledCondition.IsEnabled">
            <summary>
            IsEnabled is the enabled state of the control that we are evaluating.
            </summary>
            <remarks>
            <para>When IsEnabled is true, we expect the control to be enabled on the page.</para>
            <para>When false, we expect the control to be disabled on the page.</para>
            <para>It defaults to true.</para>
            </remarks>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.EnabledCondition.EvalFunctionName">
            <summary>
            The client-side Evaluation Function is "VAM_EvalEnabledCond".
            </summary>
        </member>
        <member name="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.ReadOnlyCondition">
            <summary>
            ReadOnlyCondition is a specialized condition that determines if a 
            TextBox is ReadOnly or not.
            </summary>
            <remarks>
            <para>For example, a Validator's <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseAnyValidator.Enabler"/>
            property may use the ReadOnlyCondition 
            to prevent a validator from validating a TextBox that is read only.</para>
            <para>Set the <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseOneFieldCondition.ControlIDToEvaluate"/> property
            to the TextBox and ReadOnly state with the <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.ReadOnlyCondition.IsReadOnly"/>
            property.</para>
            <para>See the <b>User's Guide</b> for an overview of using this condition.</para>
            </remarks>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.ReadOnlyCondition.#ctor">
            <summary>
            Constructor with no parameters.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.ReadOnlyCondition.#ctor(System.Web.UI.Control)">
            <summary>
            Constructor that sets the Owner property.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.ReadOnlyCondition.#ctor(System.String)">
            <summary>
            Constructor that sets the ControlIDToEvaluate property.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.ReadOnlyCondition.#ctor(System.Web.UI.Control,System.String)">
            <summary>
            Constructor that sets the Owner and ControlIDToEvaluate properties.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.ReadOnlyCondition.#ctor(System.Web.UI.Control,System.Web.UI.Control)">
            <summary>
            Constructor that sets the Owner and ControlToEvaluate properties.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.ReadOnlyCondition.#ctor(System.Web.UI.Control,System.String,System.Boolean)">
            <summary>
            Constructor that sets the Owner, ControlIDToEvaluate, and IsReadOnly properties.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.ReadOnlyCondition.#ctor(System.Web.UI.Control,System.Web.UI.Control,System.Boolean)">
            <summary>
            Constructor that sets the Owner, ControlToEvaluate, and IsReadOnly properties.
            </summary>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.ReadOnlyCondition.fIsReadOnly">
            <summary>
            Storage for <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.ReadOnlyCondition.IsReadOnly"/>.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.ReadOnlyCondition.GetControlToEvaluateConnectionType">
            <returns>TextBoxOnlyControlConnection</returns>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.ReadOnlyCondition.EvaluateCondition">
            <remarks>
            <para>When the control is a WebControl.TextBox, it matches TextBox.ReadOnly
            to IsReadonly.</para>
            <para>When the control is a HtmlControl.HtmlInputText, it matches HtmlInputText.Attributes["ReadOnly"]
            to IsReadonly. (HtmlInputText doesn't have a ReadOnly property.)</para>
            <para>All other controls cannot be evaluated.</para>
            </remarks>
            <returns>1 when ReadOnly matches the IsReadOnly property; 0 when it does not;
            -1 when the control is not a TextBox or HtmlInputText.</returns>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.ReadOnlyCondition.DefineProperties(System.Text.StringBuilder)">
            <summary>
            Defines the following properties in the client-side representation of this object: IsRO
            </summary>
            <remarks>
            <list type="table">
            <listheader>
            <term>Property</term>
            <description>Server side source</description>
            </listheader>
            <item><term>IsRO (boolean)</term>
            <description>IsReadOnly</description></item>
            </list>
            </remarks>
            <param name="pJavaScript">Append the properties to this stringbuilder.</param>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.ReadOnlyCondition.DescribeBody">
            <returns>DescribeControlToEvaluate() + " is " + (IsReadOnly ? "ReadOnly" : "not ReadOnly")</returns>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.ReadOnlyCondition.CopyFrom(Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseCondition)">
            <summary>
            Copies IsReadOnly
            </summary>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.ReadOnlyCondition.IsReadOnly">
            <summary>
            IsReadOnly is the readonly state of the TextBox that we are evaluating.
            </summary>
            <remarks>
            <para>When IsReadOnly is true, we expect the TextBox control to be readonly on the page.</para>
            <para>When false, we expect the TextBox control to be editable.</para>
            <para>It defaults to false.</para>
            </remarks>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.ReadOnlyCondition.EvalFunctionName">
            <summary>
            This client-side Evaluation Function is "VAM_EvalReadOnlyCond".
            </summary>
        </member>
        <member name="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.ClassNameCondition">
            <summary>
            ClassNameCondition is a specialized condition that determines if the 
            style sheet class name on ControlToEvaluate matches a specific string.
            </summary>
            <remarks>
            <para>For example, use this in a FieldStateController's <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseFieldStateController.Condition"/>
            property to switch to a new class name when it detects a specific class name.</para>
            <para>Set the <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseOneFieldCondition.ControlIDToEvaluate"/> property
            to the control and Class name state with the <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.ClassNameCondition.ClassName"/>
            property.</para>
            <para>See the <b>User's Guide</b> for an overview of using this condition.</para>
            </remarks>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.ClassNameCondition.#ctor">
            <summary>
            Constructor with no parameters.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.ClassNameCondition.#ctor(System.Web.UI.Control)">
            <summary>
            Constructor that sets the Owner property.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.ClassNameCondition.#ctor(System.String)">
            <summary>
            Constructor that sets the ControlIDToEvaluate property.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.ClassNameCondition.#ctor(System.Web.UI.Control,System.String)">
            <summary>
            Constructor that sets the Owner and ControlIDToEvaluate properties.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.ClassNameCondition.#ctor(System.Web.UI.Control,System.Web.UI.Control)">
            <summary>
            Constructor that sets the Owner and ControlToEvaluate properties.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.ClassNameCondition.#ctor(System.Web.UI.Control,System.String,System.String)">
            <summary>
            Constructor that sets the Owner, ControlIDToEvaluate, and ClassName properties.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.ClassNameCondition.#ctor(System.Web.UI.Control,System.Web.UI.Control,System.String)">
            <summary>
            Constructor that sets the Owner, ControlToEvaluate, and ClassName properties.
            </summary>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.ClassNameCondition.fClassName">
            <summary>
            Storage for <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.ClassNameCondition.ClassName"/>.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.ClassNameCondition.EvaluateCondition">
            <remarks>
            <para>When ControlToEvaluate is a System.Web.UI.WebControl subclass, it compares
            the WebControl.CssClass property to ClassName.</para>
            <para>When ControlToEvaluate is a System.Web.UI.HtmlControl subclass, it compares
            the HtmlControl.Attributes["Class"] property to ClassName.</para>
            <para>Any other class cannot be evaluated on the server side.</para>
            </remarks>
            <returns>1 when the class name state matches ClassName; 0 when it does not; 
            -1 when it cannot evaluate because the control class is not subclassed
            from WebControl or HtmlControl.</returns>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.ClassNameCondition.DefineProperties(System.Text.StringBuilder)">
            <summary>
            Defines the following properties in the client-side representation of this object: Css
            </summary>
            <remarks>
            <list type="table">
            <listheader>
            <term>Property</term>
            <description>Server side source</description>
            </listheader>
            <item><term>Css (string)</term>
            <description>ClassName</description></item>
            </list>
            </remarks>
            <param name="pJavaScript">Append the properties to this stringbuilder.</param>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.ClassNameCondition.DescribeBody">
            <returns>DescribeControlToEvaluate() + " equals '" + ClassName + "'"</returns>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.ClassNameCondition.CopyFrom(Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseCondition)">
            <summary>
            Copies ClassName.
            </summary>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.ClassNameCondition.ClassName">
            <summary>
            ClassName is evaluated against ControlToEvaluates's CssClass server side property
            and its "Class" client-side attribute.
            </summary>
            <value>
            <para>When the two match (case insensitive), the condition evaluates as "success".</para>
            <para>It defaults to "".</para>
            </value>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.ClassNameCondition.NotCondition">
            <summary>
            Sets BrowsableAttribute(true) because it makes sense to have NotCondition on this condition.
            </summary>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.ClassNameCondition.EvalFunctionName">
            <summary>
            The client-side Evaluation Function is "VAM_EvalClassNameCond"
            </summary>
        </member>
        <member name="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseAttributeCondition">
            <summary>
            BaseAttributeCondition is a base class that allows the user to define the
            name and value of any attribute or style on the ControlToEvaluate within DOM/DHTML.
            </summary>
            <remarks>
            <para>The user must know the DOM/DHTML attribute or style name and compatible values. 
            The client-side will set and get them with the JavaScript "eval()" function.</para>
            <para>The user must select an AttributeType -- Attribute or Style -- that determines
            if the field attributes or field style sheet attributes are modified.
            The server side will look at the Attributes or Styles collections on the control.
            The client side will look at:</para>
            <para><c>eval(field.attrname)</c> or <c>eval(field.style.attrname)</c></para>
            <para>The user must determine the datatype of the attribute: string, integer, or boolean.
            This is used in making the comparison and formatting the value as its passed to the client
            side. (For example, it always puts quotes around strings. If you have boolean value,
            putting quotes around 'true' or 'false' make those into strings, not boolean values.)</para>
            <para>Subclasses define the actual comparision rules and properties.</para>
            </remarks>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseAttributeCondition.#ctor">
            <summary>
            Constructor with no parameters.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseAttributeCondition.#ctor(System.Web.UI.Control)">
            <summary>
            Constructor that sets the Owner property.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseAttributeCondition.#ctor(System.String)">
            <summary>
            Constructor that sets the ControlIDToEvaluate property.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseAttributeCondition.#ctor(System.Web.UI.Control,System.String)">
            <summary>
            Constructor that sets the Owner and ControlIDToEvaluate properties.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseAttributeCondition.#ctor(System.Web.UI.Control,System.Web.UI.Control)">
            <summary>
            Constructor that sets the Owner and ControlToEvaluate properties.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseAttributeCondition.#ctor(System.Web.UI.Control,System.String,System.String,Jenzabar.Portal.Framework.Web.UI.Controls.Validation.AttributeType,Jenzabar.Portal.Framework.Web.UI.Controls.Validation.AttributeDataType)">
            <summary>
            Constructor that sets the Owner, ControlIDToEvaluate, AttributeName, 
            AttributeType, and DataType properties.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseAttributeCondition.#ctor(System.Web.UI.Control,System.Web.UI.Control,System.String,Jenzabar.Portal.Framework.Web.UI.Controls.Validation.AttributeType,Jenzabar.Portal.Framework.Web.UI.Controls.Validation.AttributeDataType)">
            <summary>
            Constructor that sets the Owner, ControlToEvaluate, AttributeName, 
            AttributeType, and DataType properties.
            </summary>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseAttributeCondition.fAttributeName">
            <summary>
            Storage for <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseAttributeCondition.AttributeName"/>.
            </summary>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseAttributeCondition.fAttributeType">
            <summary>
            Storage for <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseAttributeCondition.AttributeType"/>.
            </summary>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseAttributeCondition.fDataType">
            <summary>
            Storage for <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseAttributeCondition.DataType"/>.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseAttributeCondition.GetAttributeValue">
            <summary>
            GetAttributeValue returns an object representing the current server side attribute
            from the ControlToEvaluate's Attributes or Styles collections.
            </summary>
            <remarks>
            It returns null if ControlToEvaluate isn't setup, the AttributeName isn't setup, 
            the AttributeName isn't found in controls' Attributes collection, 
            or it could not convert the string value to its correct data type.
            </remarks>
            <returns>If the AttributeName is defined on the control and can be converted
            to the DataType, it returns an object as a string, Int32, or boolean. Otherwise it returns null.</returns>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseAttributeCondition.CanEvaluate">
            <summary>
            The AttributeName must be assigned.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseAttributeCondition.DefineProperties(System.Text.StringBuilder)">
            <summary>
            Defines the following properties in the client-side representation of this object: Name
            </summary>
            <remarks>
            <list type="table">
            <listheader>
            <term>Property</term>
            <description>Server side source</description>
            </listheader>
            <item><term>Name (string)</term>
            <description>AttributeName</description></item>
            <item><term>DT (string)</term>
            <description>DataType</description></item>
            <item><term>AT (string)</term>
            <description>The AttributeType: "A" - Attribute; "S" - Style</description></item>
            </list>
            </remarks>
            <param name="pJavaScript">Append the properties to this stringbuilder.</param>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseAttributeCondition.CopyFrom(Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseCondition)">
            <summary>
            Copies AttributeName, DataType, AttributeType.
            </summary>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseAttributeCondition.AttributeName">
            <summary>
            AttributeName is the name of the attribute or style, specific to the browser (DHTML or DOM)
            found on the control to evaluate.
            </summary>
            <value>
            <para>On the server side, it is used in the Control.Attributes[Name] or Control.Style[Name]
            properties. On the client side, it is used in 
            <c>eval(control.Name)</c> or <c>eval(control.style.Name)</c>.</para>
            <para>Browsers are case sensitive to attribute and style names.</para>
            <para>It is required. When "", the condition cannot be evaluated.</para>
            <para>It defaults to "".</para>
            </value>
            <remarks>
            <para><b>EditorAttribute:</b><see cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.StringTypeEditor"/></para>
            </remarks>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseAttributeCondition.AttributeType">
            <summary>
            AttributeType specifies whether the Name is an attribute or style.
            </summary>
            <seealso cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.AttributeType"/>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseAttributeCondition.DataType">
            <summary>
            Determines the datatype of the value.
            </summary>
            <remarks>
            <para>DataType must specify the correct datatype for the attribute or style
            based on the DOM/DHTML definition for the attribute.
            Otherwise, the client side will have errors comparing the 
            Value to the contents of the field.</para>
            <para>It defaults to AttributeDataType.String.</para>
            </remarks>
            <seealso cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.AttributeDataType"/>
        </member>
        <member name="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.AttributeType">
            <summary>
            AttributeType is used by 
            <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseAttributeCondition.AttributeType">BaseAttributeCondition.AttributeType</see> type to specify
            either Attribute or Style.
            </summary>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.AttributeType.Attribute">
            <summary>
            It is an attribute within the HTML tag.
            </summary>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.AttributeType.Style">
            <summary>
            It is within the style= attribute of the HTML tag.
            </summary>
        </member>
        <member name="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.AttributeDataType">
            <summary>
            AttributeDataType is used by 
            <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseAttributeCondition.DataType">BaseAttributeCondition.DataType</see> to specify
            the data type of the values.
            </summary>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.AttributeDataType.String">
            <summary>
            It is a string.
            </summary>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.AttributeDataType.Integer">
            <summary>
            It is an integer.
            </summary>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.AttributeDataType.Boolean">
            <summary>
            It is a boolean.
            </summary>
        </member>
        <member name="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.CompareToValueAttributeCondition">
            <summary>
            CompareToValueAttributeCondition compares the <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.CompareToValueAttributeCondition.Value"/>
            property to the value of the attribute or style
            using a <see cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.ConditionOperator"/>. It is the most common way of evaluating an attribute.
            </summary>
            <remarks>
            <para>For example, compare the Attribute named "Url" equals "http://www.myurl.com".</para>
            <para>See the <b>User's Guide</b> for an overview of using this condition.</para>
            </remarks>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.CompareToValueAttributeCondition.#ctor">
            <summary>
            Constructor with no parameters.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.CompareToValueAttributeCondition.#ctor(System.Web.UI.Control)">
            <summary>
            Constructor that sets the Owner property.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.CompareToValueAttributeCondition.#ctor(System.String)">
            <summary>
            Constructor that sets the ControlIDToEvaluate property.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.CompareToValueAttributeCondition.#ctor(System.Web.UI.Control,System.String)">
            <summary>
            Constructor that sets the Owner and ControlIDToEvaluate properties.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.CompareToValueAttributeCondition.#ctor(System.Web.UI.Control,System.Web.UI.Control)">
            <summary>
            Constructor that sets the Owner and ControlToEvaluate properties.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.CompareToValueAttributeCondition.#ctor(System.Web.UI.Control,System.String,System.String,Jenzabar.Portal.Framework.Web.UI.Controls.Validation.AttributeType,Jenzabar.Portal.Framework.Web.UI.Controls.Validation.AttributeDataType,System.String,Jenzabar.Portal.Framework.Web.UI.Controls.Validation.ConditionOperator)">
            <summary>
            Constructor that sets the Owner, ControlIDToEvaluate, AttributeName, 
            AttributeType, DataType, Value, and Operator properties.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.CompareToValueAttributeCondition.#ctor(System.Web.UI.Control,System.Web.UI.Control,System.String,Jenzabar.Portal.Framework.Web.UI.Controls.Validation.AttributeType,Jenzabar.Portal.Framework.Web.UI.Controls.Validation.AttributeDataType,System.String,Jenzabar.Portal.Framework.Web.UI.Controls.Validation.ConditionOperator)">
            <summary>
            Constructor that sets the Owner, ControlToEvaluate, AttributeName, 
            AttributeType, DataType, Value, and Operator properties.
            </summary>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.CompareToValueAttributeCondition.fValue">
            <summary>
            Storage for <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.CompareToValueAttributeCondition.Value"/>.
            </summary>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.CompareToValueAttributeCondition.fOperator">
            <summary>
            Storage for <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.CompareToValueAttributeCondition.Operator"/>.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.CompareToValueAttributeCondition.ConvertValue">
            <summary>
            ConvertValue returns an object that is the 
            <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.CompareToValueAttributeCondition.Value"/> in the correct 
            <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseAttributeCondition.DataType"/>.
            </summary>
            <remarks>
            <para>Here is how each DataType is converted:</para>
            <list type="bullet">
            <item><description>String returns Value without conversion.</description></item>
            <item><description>Integer uses Convert.ToInt32.</description></item>
            <item><description>Boolean must match to "true" or "false", case insensitive.</description></item>
            </list>
            </remarks>
            <exception cref="T:System.FormatException">When it cannot convert.</exception>
            <returns>Depends on the DataType. For String, it returns a string; for Integer, it returns
            an Int32 value; for Boolean, it returns true or false.</returns>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.CompareToValueAttributeCondition.CanEvaluate">
            <summary>
            Will not evaluate when <see cref="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.CompareToValueAttributeCondition.ConvertValue"/>
             throws an exception (it cannot convert the Value property).
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.CompareToValueAttributeCondition.EvaluateCondition">
            <summary>
            Compares <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.CompareToValueAttributeCondition.Value"/> 
            to Attribute or Style value with <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.CompareToValueAttributeCondition.Operator"/>.
            </summary>
            <remarks>
            The Attribute is on the left side of the operator. The Value property is on the right.
            </remarks>
            Returns -1 when it is blank or cannot convert the value.
            <returns>1 when the expression evaluates to true; 0 when the expression
            evaluates to false; -1 when the Attribute's value cannot be converted into
            the DataType.</returns>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.CompareToValueAttributeCondition.DefineProperties(System.Text.StringBuilder)">
            <summary>
            Defines the following properties in the client-side representation of this object: Val, Op
            </summary>
            <remarks>
            <list type="table">
            <listheader>
            <term>Property</term>
            <description>Server side source</description>
            </listheader>
            <item><term>Val (string)</term>
            <description>Value</description></item>
            <item><term>Op (integer)</term>
            <description>0 = Equals, 1 = Not Equals, 2 = GreaterThan, 3 = GreaterThanEqual,
            4 = LessThan, 5 = LessThanEqual</description></item>
            </list>
            </remarks>
            <param name="pJavaScript">Append the properties to this stringbuilder.</param>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.CompareToValueAttributeCondition.CopyFrom(Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseCondition)">
            <summary>
            Copies Value and Operator.
            </summary>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.CompareToValueAttributeCondition.Value">
            <summary>
            The value that is compared to the value of attribute or style. 
            </summary>
            <value>
            <para>While it is a string here,
            it is converted to the data type specified by the 
            <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseAttributeCondition.DataType"/> property. Exceptions
            are thrown in the <see cref="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.CompareToValueAttributeCondition.ConvertValue"/> method 
            when this is incompatible.</para>
            <para>Booleans require the strings "true" or "false". Integers expect strings of digits and not to be blank.</para>
            <para>It defaults to "".</para>
            </value>
            <remarks>
            <para><b>EditorAttribute:</b><see cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.StringTypeEditor"/></para>
            </remarks>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.CompareToValueAttributeCondition.Operator">
            <summary>
            Operator determines how the attribute value is compared to Value.
            </summary>
            <value>
            It defaults to ConditionOperator.Equal.
            </value>
            <seealso cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.ConditionOperator"/>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.CompareToValueAttributeCondition.EvalFunctionName">
            <summary>
            The client-side Evaluation Function is "VAM_EvalCompToValAttrCond".
            </summary>
        </member>
        <member name="T:Jenzabar.Portal.Framework.Web.UI.Controls.Secured.STextBox">
            <summary>
            A secured, operation aware version of the TextBox control
            </summary>
            <remarks>
            Secured controls can be used to make interface elements aware of whether or not
            a user has access to a particular operation assigned to the control
            
            If the user does not have access to the operation(s) assigned to the control, the
            control can be set to render differently (or not at all) to prevent the user from
            using the control to perform the secured operation
            
            In addition, events normally raised by the control will not be raised if the control
            detects that the access check has failed. This prevents users from "spoofing" access
            by simulating a postback.
            </remarks>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Web.UI.Controls.Secured.STextBox.m_OperationNames">
            <summary>
            Member variable m_OperationNames
            </summary>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Web.UI.Controls.Secured.STextBox.m_IsSecured">
            <summary>
            Member variable m_IsSecured
            </summary>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Web.UI.Controls.Secured.STextBox.m_AccessCheckType">
            <summary>
            Member variable AccessCheckType
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Secured.STextBox.#ctor">
            <summary>
            Constructor for the STextBox class
            </summary> 
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Secured.STextBox.OnTextChanged(System.EventArgs)">
            <summary>
            Overrides the OnTextChanged event in base control
            </summary>
            <param name="e">EventArgs</param>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Secured.STextBox.OnPreRender(System.EventArgs)">
            <summary>
            Overrides the OnPreRender event in base control
            </summary>
            <param name="e">EventArgs</param>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Secured.STextBox.SecureControl">
            <summary>
            Used internally to secure the control
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Secured.STextBox.Render(System.Web.UI.HtmlTextWriter)">
            <summary>
            Overrides the Render event in base control
            </summary>
            <param name="writer">HtmlTextWriter to render control with</param>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Secured.STextBox.AccessCheckFailedText">
            <summary>
            Gets or sets the text to display if an access check fails.
            </summary>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Secured.STextBox.AccessCheckFailedTextCSSClass">
            <summary>
            Gets or sets the style to apply to the text if displayed if the access check fails and the display type is 'Text'.
            </summary>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Secured.STextBox.OperationNames">
            <summary>
            Member Property - OperationNames
            </summary>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Secured.STextBox.IsSecured">
            <summary>
            Member Property - IsSecured
            </summary>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Secured.STextBox.AccessCheckType">
            <summary>
            Member Property - AccessCheckType
            </summary>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Secured.STextBox.DisplayType">
            <summary>
            Member Property - m_DisplayType
            </summary>
        </member>
        <member name="T:Jenzabar.Portal.Framework.Web.UI.Controls.Secured.SecuredControlDisplayType">
            <summary>
            The options for how a secured control should display itself if its access check fails
            </summary>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Web.UI.Controls.Secured.SecuredControlDisplayType.Visibility">
            <summary>
            Do not render the control to the page (Visible=false)
            </summary>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Web.UI.Controls.Secured.SecuredControlDisplayType.Text">
            <summary>
            Render text to notify the user that the access check has failed
            </summary>
        </member>
        <member name="T:Jenzabar.Portal.Framework.Web.UI.Controls.PrincipalSelectorPrincipalType">
            <summary>
            Member enumeration - PrincipalSelectorPrincipalType
            </summary>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Web.UI.Controls.PrincipalSelectorPrincipalType.Groups">
            <summary>
            Enum - Groups
            </summary>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Web.UI.Controls.PrincipalSelectorPrincipalType.Users">
            <summary>
            Enum - Users
            </summary>
        </member>
        <member name="T:Jenzabar.Portal.Framework.Web.UI.Controls.PrincipalSelectorViewType">
            <summary>
            Member enumeration - PrincipalSelectorViewType
            </summary>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Web.UI.Controls.PrincipalSelectorViewType.Basic">
            <summary>
            Enum - Basic
            </summary>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Web.UI.Controls.PrincipalSelectorViewType.Advanced">
            <summary>
            Enum - Advanced
            </summary>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Web.UI.Controls.PrincipalSelectorViewType.Selected">
            <summary>
            Enum - Selected
            </summary>
        </member>
        <member name="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseFieldStateAction">
            <summary>
            The <see cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.FieldStateController"/>
            and <see cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.MultiFieldStateController"/> controls
            both use this for their <see cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseAction"/> subclass.
            </summary>
            <remarks>
            <para>This Action is assigned a condition from the user's selection, either
            through the constructor, Condition parameter, or by the FieldStateController object.</para>
            <para>It uses two <see cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.StateSettings"/> properties
            to represent the values used when the condition succeeds and fails:
            <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseFieldStateAction.ConditionTrue"/> and 
            <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseFieldStateAction.ConditionFalse"/>.
            Most of these values are only set on the client side. Only when a setting
            differs between ConditionTrue and ConditionFalse will the attribute be changed.</para>
            <para>This class is designed to be subclassed so you can introduce a subclass
            of StateSettings. Override the <see cref="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseFieldStateAction.CreateStateSettings"/>
            method.</para>
            </remarks>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseFieldStateAction.#ctor">
            <summary>
             Constructor with no parameters. The Condition remains null.
             </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseFieldStateAction.#ctor(System.Web.UI.Control)">
            <summary>
            Constructor that sets the Owner property. The Condition remains null.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseFieldStateAction.#ctor(Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseCondition)">
            <summary>
            Constructor that sets the Condition property.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseFieldStateAction.#ctor(System.Web.UI.Control,Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseCondition)">
            <summary>
            Constructor that sets the Owner and Condition.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseFieldStateAction.#ctor(System.Web.UI.Control,Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseCondition,System.String)">
            <summary>
            Constructor that sets the Owner, Condition, and ControlIDToChange.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseFieldStateAction.#ctor(System.Web.UI.Control,Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseCondition,System.Web.UI.Control)">
            <summary>
            Constructor that sets the Owner, Condition, and ControlToChange.
            </summary>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseFieldStateAction.fControlToChangeConnection">
            <summary>
            Storage for <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseFieldStateAction.ControlToChangeConnection"/>.
            </summary>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseFieldStateAction.fInvisiblePreservesSpace">
            <summary>
            Storage for <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseFieldStateAction.InvisiblePreservesSpace"/>.
            </summary>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseFieldStateAction.fRunFunctionName">
            <summary>
            Storage for <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseFieldStateAction.RunFunctionName"/>.
            </summary>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseFieldStateAction.fConditionTrue">
            <summary>
            Storage for <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseFieldStateAction.ConditionTrue"/>.
            </summary>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseFieldStateAction.fConditionFalse">
            <summary>
            Storage for <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseFieldStateAction.ConditionFalse"/>.
            </summary>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseFieldStateAction.StateChange">
            <summary>
            StateChange is an event handler to allow you to perform additional
            state changes to the ControlToChange. 
            </summary>
            <remarks>
            <para>See <see cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.ChangeStateEventHandler"/>.</para>
            <para>Use this when you are setting up the client-side function, 
            <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseFieldStateAction.RunFunctionName"/>,
            to perform initial setup that mimics what the RunFunction uses.</para>
            <para>It does NOT support multiple event handlers 
            (StateChange += new ChangeStateEventHandler()).</para>
            <para>See the User's Guide for details.</para>
            </remarks>
            <seealso cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.ChangeStateEventHandler"/>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseFieldStateAction.fUseValidationGroup">
            <summary>
            Storage for <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseFieldStateAction.UseValidationGroup"/>.
            </summary>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseFieldStateAction.fValidationGroup">
            <summary>
            Storage for <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseFieldStateAction.ValidationGroup"/>.
            </summary>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseFieldStateAction.fControlToRunThisActionConnection">
            <summary>
            Storage for <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseFieldStateAction.ControlToRunThisActionConnection"/>.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseFieldStateAction.GetActionType">
            <summary>
            Returns "FS".
            </summary>
            <returns>"FS"</returns>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseFieldStateAction.CanDoAction">
            <returns>True when the ancestor CanDoAction is true, CanEnableClientScript
            is true and ControlToChange is assigned. False otherwise.</returns>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseFieldStateAction.CanEnableClientScript">
            <returns>True when the ancestor CanEnableClientScript is true
            and <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.TrueBrowser.SupportsFieldStateControllers">TrueBrowser.SupportsFieldStateControllers</see> is true.</returns>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseFieldStateAction.DoActionBody(System.Boolean)">
            <summary>
            DoActionBody handles the initial settings of the ControlToChange
            as the page is rendered.
            </summary>
            <remarks>
            <para>It gets called automatically within VAMPage.PagePreRender.</para>
            <para>It only applies the Visible, Enabled, ReadOnly, and CssClass properties when
            ConditionTrue and ConditionFalse differ on the same properties.
            The rest are handled on the client-side code exclusively.</para>
            <para>Uses <see cref="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseFieldStateAction.OnStateChange(System.Boolean)"/> to do the work.</para>
            </remarks>
            <param name="pSuccess">When true, the condition was successful; when false, it failed.</param>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseFieldStateAction.OnStateChange(System.Boolean)">
            <summary>
            Changes the attributes and properties on the server side prior to sending the page
            out.
            </summary>
            <remarks>
            <para>Both the client and server side have some code to initialize the ControlToChange
            based on <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseFieldStateAction.ConditionTrue"/>
            and <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseFieldStateAction.ConditionFalse"/>. 
            This is the server side part. It initializes
            visibility, enabled, readonly, style sheet class, and runs the
            <see cref="F:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseFieldStateAction.StateChange"/> event.</para>
            <para>The client-side function, "VAM_InitFieldState", handles all the rest.
            Any property that needs to preserve the initial setting is handled on the client-side
            so it can capture the initial setting.</para>
            </remarks>
            <param name="pSuccess">When true, the condition was successful; when false, it failed.</param>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseFieldStateAction.CreateStateSettings">
            <summary>
            Returns the <see cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.StateSettings"/> class used
            in both <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseFieldStateAction.ConditionTrue"/> and 
            <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseFieldStateAction.ConditionFalse"/>. 
            </summary>
            <remarks>
            Override when you subclass StateSettings.
            </remarks>
            <returns>A new instance of <see cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.StateSettings"/>.</returns>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseFieldStateAction.DefineJavaScript(Jenzabar.Portal.Framework.Web.UI.Controls.Validation.VAMPage)">
            <summary>
            Adds the VAM_FSC.js script file to the page.
            </summary>
            <param name="pPage">The current VAMPage instance.</param>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseFieldStateAction.DefineProperties(System.Text.StringBuilder)">
            <summary>
            Adds the properties to the client-side representation of the field state action object.
            </summary>
            <remarks>
            <list type="table">
            <listheader>
            <term>Property</term>
            <description>Server side source</description>
            </listheader>
            <item>
            <term>IDToChg (string)
            </term>
            <description>The clientID to the ControlToChange. Required.
            </description>
            </item>
            <item>
            <term>IDToRun (string)
            </term>
            <description>The clientID to the ControlToRunAction. Optional.
            </description>
            </item>
            <item>
            <term>CT_Vis (bool)
            </term>
            <description>ConditionTrue.Visible.
            </description>
            </item>
            <item>
            <term>CF_Vis (bool)
            </term>
            <description>ConditionFalse.Visible.
            </description>
            </item>
            <item>
            <term>CT_Enab (bool)
            </term>
            <description>ConditionTrue.Enabled.
            </description>
            </item>
            <item>
            <term>CF_Enab (bool)
            </term>
            <description>ConditionFalse.Enabled.
            </description>
            </item>
            <item>
            <term>CT_RO (bool)
            </term>
            <description>ConditionTrue.ReadOnly.
            </description>
            </item>
            <item>
            <term>CF_RO (bool)
            </term>
            <description>ConditionFalse.ReadOnly.
            </description>
            </item>
            <item>
            <term>CT_Css (string)
            </term>
            <description>ConditionTrue.CssClass.
            </description>
            </item>
            <item>
            <term>CF_Css (string)
            </term>
            <description>ConditionFalse.CssClass.
            </description>
            </item>
            <item>
            <term>CT_Val (string)
            </term>
            <description>ConditionTrue.FieldValue.
            </description>
            </item>
            <item>
            <term>CF_Val (string)
            </term>
            <description>ConditionFalse.FieldValue.
            </description>
            </item>
            <item>
            <term>CT_Html (string)
            </term>
            <description>ConditionTrue.InnerHTML.
            </description>
            </item>
            <item>
            <term>CF_Html (string)
            </term>
            <description>ConditionFalse.InnerHTML.
            </description>
            </item>
            <item>
            <term>CT_URL (string)
            </term>
            <description>ConditionTrue.URL.
            </description>
            </item>
            <item>
            <term>CF_URL (string)
            </term>
            <description>ConditionFalse.URL.
            </description>
            </item>
            <item>
            <term>CT_OName (string)
            </term>
            <description>ConditionTrue.Other.AttributeName, with "style." in front if its a style.
            </description>
            </item>
            <item>
            <term>CF_OName (string)
            </term>
            <description>ConditionFalse.Other.AttributeName, with "style." in front if its a style.
            If ConditionTrue.AttributeName != ConditionFalse.AttributeName (but both are used),
               CF_O2Name is used instead of CF_OName.
            </description>
            </item>
            <item>
            <term>CT_OVal (string)
            </term>
            <description>ConditionTrue.Other.Value, with double quotes around if datatype is a string.
            </description>
            </item>
            <item>
            <term>CF_OVal (string)
            </term>
            <description>ConditionFalse.Other.Value, with double quotes around if datatype is a string.
            If ConditionTrue.AttributeName != ConditionFalse.AttributeName (but both are used),
               CF_O2Val is used instead of CF_OVal.
            </description>
            </item>
            <item>
            <term>RunFnc (method)
            </term>
            <description>When RunFunctionName is assigned, this is a method to that function.
            </description>
            </item>
            <item>
            <term>InvPS (bool)
            </term>
            <description>InvisiblePreservesState
            </description>
            </item>
            <item>
            <term>VGrp (string)
            </term>
            <description>When UseValidationGroup is true, it contains ValidationGroup. Otherwise its null.
            </description>
            </item>
            </list>
            Omits values that are at their default. Expects VAM_InitFieldState to fill in those defaults.
            </remarks>
            <param name="pJavaScript">The properties are appended to this stringbuilder.</param>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseFieldStateAction.RegisterOnPreRender(System.Object,System.EventArgs)">
            <summary>
            RegisterOnPreRender is a PreRender event called by the Owner control.
            </summary>
            <remarks>
            It allows this control to call its <see cref="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseCA.Prepare"/> 
            method which is required by <see cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.VAMPage"/>
            during the OnPreRender phase.
            </remarks>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseFieldStateAction.SetOwner(System.Web.UI.Control)">
            <summary>
            Establishes the <see cref="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseFieldStateAction.RegisterOnPreRender(System.Object,System.EventArgs)"/> event handler
            on the Owner control.
            </summary>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseFieldStateAction.ControlIDToChange">
            <summary>
            ControlIDToChange is the ID to the control whose state will be changed. 
            </summary>
            <value>
            <para>This is ID property, not the ClientID or UniqueID. It will be translated 
            into the ClientID at runtime.</para>
            <para>If this ID is unassigned, this Action is not used.</para>
            <para>If the control cannot be found in the current or any parent NamingContainer, 
            an exception is thrown at runtime.</para>
            <para>Internally, the ID is stored in <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseFieldStateAction.ControlToChangeConnection"/></para>
            </value>
            <remarks>
            <para><b>EditorAttribute:</b><see cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.FSAControlConnectionTypeEditor"/></para>
            </remarks>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseFieldStateAction.ControlToChange">
            <summary>
            Gets and sets a reference to the control whose state will be changed.
            </summary>
            <value>
            <para>As a reference to the control, it can refer to any control on the page,
            whereas the <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseFieldStateAction.ControlIDToChange"/>
            property must refer to a control within the same or parent Naming Container as this FieldStateController.</para>
            <para>When ControlIDToChange is assigned, getting a value here will attempt to
            find the control on the page and return its instance.</para>
            <para>Assignment must be done programmatically.</para>
            <para>Internally, the reference is stored in <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseFieldStateAction.ControlToChangeConnection"/></para>
            </value>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseFieldStateAction.ControlToChangeConnection">
            <summary>
            ControlToChangeConnection is used by 
            <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseFieldStateAction.ControlIDToChange"/> and 
            <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseFieldStateAction.ControlToChange"/>
            for data storage and validation of the control class.
            </summary>
            <value>
            <para>When first used, it creates a <see cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.FSAControlConnection"/>
            object for the storage.</para>
            </value>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseFieldStateAction.InvisiblePreservesSpace">
            <summary>
            InvisiblePreservesSpace determines if a control takes up space on the page
            when its state is changed to invisible.
            </summary>
            <value>
            <para>When the ConditionTrue.Visible or ConditionFalse.Visible property 
            causes the field to be hidden, there are two ways 
            the field can be hidden:
            Preserve the space of the element or remove the element entirely. </para>
            <para>This depends on the client-side style attributes 'display' and 'visibility'.
            When true, the style is set to <c>visibility:hidden</c> with no change to the display style.
            When false, the style is <c>visibility:hidden;display:none</c>.</para>
            <para>The client-side code preserves the original value of the 'display' attribute
            before changing it so that when the element becomes visible once again, 
            the display style is restored to its original value.</para>
            <para>It defaults to true.</para>
            </value>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseFieldStateAction.RunFunctionName">
            <summary>
            RunFunctionName defines the name of an optional client-side function 
            to call to handle the state change. It allows you to customize the state change.
            </summary>
            <value>
            <para>A good usage is when the element on the page is already managed
            by client-side functions and supplies a function for you to call to change
            its state.</para>
            <para>If you want to run a function, create it in JavaScript on the page. </para>
            <para>It takes these parameters:</para>
            <list type="table">
            <item>
            <term>Field State object</term>
            <description>Client-side representation of the field state object. 
            It allows you to get properties like CssClass, Enabled 
            and Visible for use in your function.</description></item>
            <item>
            <term>ControlToChange element (object)</term>
            <description>The element that is being operated upon. It is an object 
            for the element. If you need the object’s ID, this object has a property 
            called id.</description></item>
            <item>
            <term>ConditionValue (boolean)</term>
            <description>When true, the condition indicates success; false indicates the condition failed.</description></item>
            </list>
            <para>It does not return a result.</para>
            <para>See the User's Guide for more details and an example.</para>
            </value>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseFieldStateAction.ConditionTrue">
            <summary>
            ConditionTrue contains the state settings to apply to the 
            <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseFieldStateAction.ControlIDToChange"/>
            when the Condition evaluates as 'success'. 
            </summary>
            <value>
            <para>Settings are only applied at runtime when both this and 
            <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseFieldStateAction.ConditionFalse"/> 
            differ on a property-by-property basis.</para>
            <para>To provide additional properties, subclass 
            <see cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.StateSettings"/> to add the properties
            and override <see cref="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseFieldStateAction.CreateStateSettings"/> 
            to return to the class.</para>
            </value>
            <seealso cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.StateSettings"/>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseFieldStateAction.ConditionFalse">
            <summary>
            ConditionFalse contains the state settings to apply to the 
            <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseFieldStateAction.ControlIDToChange"/>
            when the Condition evaluates as 'failed'. 
            </summary>
            <value>
            <para>Settings are only applied at runtime when both this and 
            <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseFieldStateAction.ConditionTrue"/> 
            differ on a property-by-property basis.</para>
            <para>To provide additional properties, subclass 
            <see cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.StateSettings"/> to add the properties
            and override <see cref="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseFieldStateAction.CreateStateSettings"/> 
            to return to the class.</para>
            </value>
            <seealso cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.StateSettings"/>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseFieldStateAction.UseValidationGroup">
            <summary>
            UseValidationGroup enables running all validators matching 
            <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseFieldStateAction.ValidationGroup"/> upon
            completion of the FieldState change. 
            </summary>
            <value>
            <para>Use this when you have a validator that is associated with a field
            whose state is changed with this FieldStateController and should either be
            shown or hidden. The validator should have its <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseAnyValidator.Enabler">BaseAnyValidator.Enabler</see>
            property set to detect
            the state of the field changed, usually using <see cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.VisibleCondition"/>
            or <see cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.EnabledCondition"/>. So when the validators are rerun
            on the page, your validator will disabled or enable itself.</para>
            <para>It only affects the client-side changes.</para>
            <para>It runs just like a Submit action does, including an update of ValidationSummary.</para>
            <para>It defaults to false.</para>
            </value>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseFieldStateAction.ValidationGroup">
            <summary>
            ValidationGroup defines a group name used by validators. When 
            <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseFieldStateAction.UseValidationGroup"/>
            is true, all validators matching this group name are run after the field state has
            changed. This allows validators to remove themselves when the state no longer supports them.
            </summary>
            <value>
            <para>Use "*" to run through all groups.</para>
            <para>It defaults to "".</para>
            </value>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseFieldStateAction.ControlIDToRunThisAction">
            <summary>
            ControlIDToRunThisAction is the ID to the control that runs this action when the
            user clicks on it. It is only used in special situations because the Condition
            property usually provides a control that will run this FieldStateController.
            </summary>
            <value>
            <para>When the FieldStateController should run based on a data-oriented element
            like textbox, list, or checkbox, the Condition property will specify that control.
            When the FieldStateController should be run by clicking on a non-data-oriented element
            like label, button, or image, use this property to specify that control.</para>
            <para>This is ID property, not the ClientID or UniqueID. It will be translated 
            into the ClientID at runtime. If the ID is assigned but the control cannot be 
            found in the current or any parent NamingContainer, 
            an exception is thrown at runtime.</para>
            <para>This sets the ControlID property of 
            <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseFieldStateAction.ControlToRunThisActionConnection"/>.</para>
            </value>
            <remarks>
            <para><b>EditorAttribute:</b><see cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.FSAControlConnectionTypeEditor"/></para>
            </remarks>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseFieldStateAction.ControlToRunThisAction">
            <summary>
            ControlToRunThisAction is an alternative to 
            <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseFieldStateAction.ControlIDToRunThisAction"/>
            that maintains a reference to the control.
            </summary>
            <value>
            <para>As a reference to the control, it can refer to any control on the page,
            whereas the <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseFieldStateAction.ControlIDToRunThisAction"/>
            property must refer to a control within the same or parent Naming Container 
            as this FieldStateController.</para>
            <para>When ControlIDToRunThisAction is assigned, getting a value here will attempt to
            find the control on the page and return its instance.</para>
            <para>Assignment must be done programmatically.</para>
            <para>Internally, the reference is stored in <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseFieldStateAction.ControlToRunThisActionConnection"/>.</para>
            </value>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseFieldStateAction.ControlToRunThisActionConnection">
            <summary>
            ControlToRunThisActionConnection is used by 
            <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseFieldStateAction.ControlIDToRunThisAction"/> and 
            <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseFieldStateAction.ControlToRunThisAction"/>
            for data storage and validation of the control class.
            </summary>
            <value>
            <para>When first used, it creates a <see cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.FSAControlConnection"/>
            object for the storage.</para>
            </value>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseFieldStateAction.InitFunctionName">
            <summary>
            The client-side initialization function is "VAM_InitFieldState".
            </summary>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseFieldStateAction.ActionFunctionName">
            <summary>
            The client-side Action function is "VAM_ChangeFieldState".
            </summary>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseFieldStateAction.AutoRunAction">
            <summary>
            Returns true.
            </summary>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseFieldStateAction.CSAutoRunAction">
            <summary>
            Returns true.
            </summary>
        </member>
        <member name="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.FieldStateAction">
            <summary>
            FieldStateAction is the most common form of BaseFieldStateAction to use.
            </summary>
            <remarks>
            Aside from new constructors, this class introduces no new functionality
            and is here to allow growth.
            </remarks>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.FieldStateAction.#ctor">
            <summary>
            Constructor with no parameters.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.FieldStateAction.#ctor(System.Web.UI.Control)">
            <summary>
            Constructor that sets the Owner property.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.FieldStateAction.#ctor(Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseCondition)">
            <summary>
            Constructor that sets the Condition property.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.FieldStateAction.#ctor(System.Web.UI.Control,Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseCondition)">
            <summary>
            Constructor that sets the Owner and Condition properties.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.FieldStateAction.#ctor(System.Web.UI.Control,Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseCondition,System.String)">
            <summary>
            Constructor that sets the Owner, Condition, and ControlIDToChange properties.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.FieldStateAction.#ctor(System.Web.UI.Control,Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseCondition,System.Web.UI.Control)">
            <summary>
            Constructor that sets the Owner, Condition, and ControlToChange properties.
            </summary>
        </member>
        <member name="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.StateSettings">
            <summary>
            StateSettings contains the state settings used by the
            <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseFieldStateAction.ConditionTrue"/> and
            <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseFieldStateAction.ConditionFalse"/> properties
            on the <see cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.FieldStateController"/> and 
            <see cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.MultiFieldStateController"/> controls.
            </summary>
            <remarks>
            <para>Its properties provide an extensive list of attributes that can be
            changed on a control. It even provides the <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.StateSettings.Other"/>
            where you can enter the name of a DOM/DHTML property and the value you want to set.</para>
            <para>It is designed to allow expansion through subclassing when the user identifies
            a new state to manage. When subclassed, also subclass <see cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseFieldStateAction"/>
            to override <see cref="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseFieldStateAction.CreateStateSettings">BaseFieldStateAction.CreateStateSettings</see>
            with the new class and <see cref="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseFieldStateAction.DefineProperties(System.Text.StringBuilder)">BaseFieldStateAction.DefineProperties</see>
            with the new properties.</para>
            </remarks>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.StateSettings.#ctor">
            <summary>
            Constructor with no parameters.
            </summary>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.StateSettings.fVisible">
            <summary>
            Storage for <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.StateSettings.Visible"/>.
            </summary>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.StateSettings.fEnabled">
            <summary>
            Storage for <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.StateSettings.Enabled"/>.
            </summary>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.StateSettings.fReadOnly">
            <summary>
            Storage for <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.StateSettings.ReadOnly"/>.
            </summary>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.StateSettings.fCssClass">
            <summary>
            Storage for <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.StateSettings.CssClass"/>.
            </summary>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.StateSettings.fFieldValue">
            <summary>
            Storage for <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.StateSettings.FieldValue"/>.
            </summary>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.StateSettings.fInnerHTML">
            <summary>
            Storage for <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.StateSettings.InnerHTML"/>.
            </summary>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.StateSettings.fURL">
            <summary>
            Storage for <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.StateSettings.URL"/>.
            </summary>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.StateSettings.fOther">
            <summary>
            Storage for <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.StateSettings.Other"/>.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.StateSettings.Clone">
            <summary>
            Implements the ICloneable.Clone method.
            </summary>
            <returns>A StateSettings instance cloned from the current instance.</returns>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.StateSettings.Apply(Jenzabar.Portal.Framework.Web.UI.Controls.Validation.StateSettings)">
            <summary>
            Apply copies all properties from pOrig to this instance.
            </summary>
            <param name="pOrig">The source object for properties to copy into this instance.</param>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.StateSettings.Visible">
            <summary>
            Visible determines whether the control is visible or not.
            </summary>
            <value>
            <para>Visibility changes the style attribute 'visibility', not the WebControl property 'Visible'.
            When the WebControl.Visible property is false, ASP.NET never generates any HTML representing
            the control to the client side. So you cannot later show the control on the client side.
            The style 'visibility' does not interfere with generating HTML for the control.</para>
            <para>When true, it is visible.</para>
            <para>When false, it is hidden. 
            <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseFieldStateAction.InvisiblePreservesSpace">BaseFieldStateAction.InvisiblePreservesSpace</see>
            determines if it also retains or loses the space it occupies.</para>
            <para>It defaults to true.</para>
            </value>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.StateSettings.Enabled">
            <summary>
            Enabled is used on controls that support the HTML property Disabled.
            </summary>
            <value>
            <para>When true, the control is enabled (Disabled=false)</para>
            <para>When false, the control is disabled.</para>
            <para>It defaults to true.</para>
            <para><b>Note:</b> Most browsers support enabled on a TextBox (&lt;input type='text'/&gt;).
            Consult the browsers documentation for support of other form entry fields.</para>
            </value>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.StateSettings.ReadOnly">
            <summary>
            ReadOnly is used on controls that support the HTML property ReadOnly.
            </summary>
            <value>
            <para>When true, the control is readonly.</para>
            <para>When false, the control is editable.</para>
            <para>It defaults to false.</para>
            <para><b>Note:</b> Most browsers support readonly on a TextBox (&lt;input type='text'/&gt;).
            Consult the browsers documentation for support of other form entry fields.</para>
            </value>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.StateSettings.CssClass">
            <summary>
            CssClass is the Class name for a style sheet that is used by the control.
            </summary>
            <value>
            <para>It can be "", to represent the default style.</para>
            <para>Since the style includes so many visual attributes, a style sheet is used instead
            of separate properties defined with the <see cref="T:System.Web.UI.WebControls.Style"/>
            or <see cref="T:System.Web.UI.CssStyleCollection"/>CssStyleCollection classes.</para>
            <para>You can use the <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.StateSettings.Other"/> property
            if you want to set an individual style.</para>
            <para>It defaults to "".</para>
            </value>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.StateSettings.FieldValue">
            <summary>
            FieldValue is the textual value of form element: input, button or textarea. 
            </summary>
            <value>
            <para>If the ControlToChange has a client-side 'value' attribute (input, button and textarea),
            it changes that attribute. Otherwise it does nothing.</para>
            <para>When "", it automatically uses the initial value found on the page.
            This means that you only have to set this property to change the initial value.</para>
            <para>It defaults to "".</para>
            </value>
            <remarks>
            <para><b>EditorAttribute:</b><see cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.StringTypeEditor"/></para>
            </remarks>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.StateSettings.InnerHTML">
            <summary>
            InnerHTML changes the innerHTML of the ControlToChange. The user can supply
            HTML or straight text.
            </summary>
            <value>
            <para>When "", it automatically uses the initial value found on the page.
            This means that you only have to set this property to change the initial value.</para>
            <para>It defaults to "".</para>
            <para><b>Note:</b> Not all HTML elements support innerHTML. Consult a DOM/DHTML manual to
            determine if this property is supported.</para>
            </value>
            <remarks>
            <para><b>EditorAttribute:</b><see cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.StringTypeEditor"/></para>
            </remarks>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.StateSettings.URL">
            <summary>
            URL changes the href or src attributes of the ControlToChange. These elements
            include &lt;img&gt;, &lt;input type=image&gt;, &lt;frame&gt;, &lt;iframe&gt;, and &lt;a&gt; tags.
            </summary>
            <value>
            <para>Provide whatever text is compatible with these properties including URL and scripts,
            with the JavaScript: leader.</para>
            <para>When "", it automatically uses the initial value found on the page.
            This means that you only have to set this property to change the initial value.</para>
            <para>It defaults to "".</para>
            </value>
            <remarks>
            <para><b>EditorAttribute:</b><see cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.StringTypeEditor"/></para>
            </remarks>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.StateSettings.Other">
            <summary>
            Other allows you to define an attribute that isn't defined in the other settings.
            </summary>
            <value>
            <para>You must supply a valid name in the AttributeName property and associate it with 
            the datatype, attribute style and value all compatible with the attribute or style that you are referencing.</para>
            <para>The attribute name you supply here does not have to appear on both ConditionTrue and ConditionFalse.
            If they don't share the same AttributeName, when the client-side initializes, it will use the current value.
            This way, you can actually have two attribute names.</para>
            </value>
            <remarks>
            <para><b>TypeConverterAttribute:</b><see cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.CSAttributeDescTypeConverter"/></para>
            </remarks>
            <seealso cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.CSAttributeDesc"/>
        </member>
        <member name="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.ChangeStateEventHandler">
            <summary>
            ChangeStateEventHandler is a server side event handler that allows the ControlIDToChange
            to be setup in a custom way. It is used in 
            <see cref="F:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseFieldStateAction.StateChange">BaseFieldStateAction.StateChange</see>.
            </summary>
            <remarks>
            <para>It is the server side equivalent of 
            <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseFieldStateAction.RunFunctionName">BaseFieldStateAction.RunFunctionName</see>.</para>
            <para>Use it to handle more complex controls or state settings not handled by StateSettings class.</para>
            </remarks>
        </member>
        <member name="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.ChangeStateEventArgs">
            <summary>
            ChangeStateEventArgs is the event arguments for <see cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.ChangeStateEventHandler"/>
            used in the FieldStateController controls.
            </summary>
            <remarks>
            <para>Its properties help the event handler process the action.</para>
            <para>ControlToChange - Reference to the Control whose state is being changed.</para>
            <para>Success - When true, the condition evaluated as success. When false, the condition
              evaluated as failed.</para>
            </remarks>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.ChangeStateEventArgs.#ctor(System.Web.UI.Control,System.Boolean)">
            <summary>
            Constructor that sets the ControlToChange and Success properties.
            </summary>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.ChangeStateEventArgs.fControlToChange">
            <summary>
            Storage for <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.ChangeStateEventArgs.ControlToChange"/>.
            </summary>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.ChangeStateEventArgs.fSuccess">
            <summary>
            Storage for <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.ChangeStateEventArgs.Success"/>.
            </summary>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.ChangeStateEventArgs.ControlToChange">
            <summary>
            Reference to the Control whose state is being changed.
            </summary>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.ChangeStateEventArgs.Success">
            <summary>
            When true, the condition evaluated as success. When false, the condition
              evaluated as failed.
            </summary>
        </member>
        <member name="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.FSAControlConnection">
            <summary>
            A <see cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.ControlConnection"/> class for FieldStateController
            and BaseFieldStateAction classes.
            </summary>
            <remarks>
            <para>Considers all controls to be valid except these: System.Web.UI.WebControls.Literal, 
            System.Web.UI.LiteralControl, Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseFieldStateController,
            Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseValidator and any whose ID property is blank.</para>
            </remarks>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.FSAControlConnection.#ctor(System.Web.UI.Control,System.Boolean,System.String,Jenzabar.Portal.Framework.Web.UI.Controls.Validation.INamingObject)">
            <summary>
            Standard constructor.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.FSAControlConnection.#ctor">
            <summary>
            Constructor with no parameters.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.FSAControlConnection.IsValidControl(System.Web.UI.Control)">
            <summary>
            Considers all controls to be valid except these: System.Web.UI.WebControls.Literal, 
            System.Web.UI.LiteralControl, Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseFieldStateController,
            Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseValidator and any whose ID property is blank.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.FSAControlConnection.ValidateControlException(System.Web.UI.Control)">
            <summary>
            Customizes the exception message.
            </summary>
        </member>
        <member name="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseFieldStateController">
            <summary>
            Base class to the <see cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.FieldStateController"/>
            and <see cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.MultiFieldStateController"/> controls.
            </summary>
            <remarks>
            <para>BaseFieldStateController is a control that supports the <see cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.FieldStateAction"/> classes.
            As a control, it appears on the ASP.NET page. However, it does not generate
            any HTML of its own. Instead, it sets up FieldStateAction instances for one or
            more controls on the page and the FieldStateActions do all the work.
            (On server side, their <see cref="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseAction.DoAction"/> method 
            runs during <see cref="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.VAMPage.PagePreRegister(System.Object,System.EventArgs)">VAMPage.PagePreRegister</see>.
            On the client side, they have extensive javascript to handle actions.)</para>
            
            <para>This base class provides properties needed by the FieldStateAction objects
            including the ConditionTrue, ConditionFalse, InvisiblePreservesSpace, and RunFunctionName.
            However, it doesn't provide the ControlToChange. Two subclasses determine
            the ControlToChange:</para>
            <para>FieldStateController - set up one ControlToChange. Creates one FieldStateAction.</para>
            <para>MultiFieldStateController - set up a collection of ControlToChange in 
            <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.MultiFieldStateController.ControlConnections"/>. Creates a
            <see cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.MultiAction"/> of FieldStateActions.</para>
            
            <para>OnPreRender creates the FieldStateAction instances and transfers the properties
            to them.</para>
            
            <para>The user must select a Condition on the <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseFieldStateController.Condition"/> 
            property. There is a UITypeEditor
            to let the user choose one. If there is no Condition, an exception is thrown.</para>
            </remarks>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseFieldStateController.#ctor">
            <summary>
            Constructor with no parameters.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseFieldStateController.#ctor(Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseCondition,Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseCondition)">
            <summary>
            Constructor with sets the Condition and Enabler properties. Either property 
            can be null.
            </summary>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseFieldStateController.fConditionCol">
            <summary>
            Storage for <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseFieldStateController.ConditionContainer"/>
            </summary>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseFieldStateController.fEnabled">
            <summary>
            Storage for <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseFieldStateController.ConditionContainer"/>
            </summary>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseFieldStateController.fEnablerContainer">
            <summary>
            Storage for <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseFieldStateController.EnablerContainer"/>
            </summary>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseFieldStateController.fInvisiblePreservesSpace">
            <summary>
            Storage for <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseFieldStateController.InvisiblePreservesSpace"/>
            </summary>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseFieldStateController.fRunFunctionName">
            <summary>
            Storage for <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseFieldStateController.RunFunctionName"/>
            </summary>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseFieldStateController.fConditionTrue">
            <summary>
            Storage for <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseFieldStateController.ConditionTrue"/>.
            </summary>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseFieldStateController.fConditionFalse">
            <summary>
            Storage for <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseFieldStateController.ConditionFalse"/>.
            </summary>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseFieldStateController.StateChange">
            <summary>
            StateChange is an event handler to allow you to perform additional
            state changes to the ControlToChange. 
            </summary>
            <remarks>
            <para>See <see cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.ChangeStateEventHandler"/>.</para>
            <para>Use this when you are setting up the client-side function, 
            <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseFieldStateController.RunFunctionName"/>,
            to perform initial setup that mimics what the RunFunction uses.</para>
            <para>It does NOT support multiple event handlers 
            (StateChange += new ChangeStateEventHandler()).</para>
            <para>See the User's Guide for details.</para>
            </remarks>
            <seealso cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.ChangeStateEventHandler"/>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseFieldStateController.fUseValidationGroup">
            <summary>
            Storage for <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseFieldStateController.UseValidationGroup"/>.
            </summary>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseFieldStateController.fValidationGroup">
            <summary>
            Storage for <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseFieldStateController.ValidationGroup"/>.
            </summary>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseFieldStateController.fControlToRunThisActionConnection">
            <summary>
            Storage for <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseFieldStateController.ControlToRunThisActionConnection"/>
            </summary>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseFieldStateController.fHasDefinedActions">
            <summary>
            When true, the DefineActions method was called. This avoids calling
            it twice from PrepForValidate and OnPreRender.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseFieldStateController.CreateStateSettings">
            <summary>
            Returns the <see cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.StateSettings"/> class used
            in both ConditionTrue and ConditionFalse. 
            </summary>
            <remarks>
            Override when you subclass StateSettings.
            </remarks>
            <returns>A new instance of <see cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.StateSettings"/>.</returns>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseFieldStateController.CreateFieldStateAction">
            <summary>
            CreateFieldStateAction creates an instance of the BaseFieldStateAction
            subclass for use with this control.
            </summary>
            <remarks>
            <para>It returns <see cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.FieldStateAction"/> by default.</para>
            <para>If you subclass the StateSettings object, override this and
            <see cref="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseFieldStateController.CreateStateSettings"/>
            methods.</para>
            <para>It should immediately assign the Condition and owner properties:</para>
            <para><c>new class(this, Condition).</c></para>
            </remarks>
            <returns>A new instance of a BaseFieldStateAction subclass.</returns>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseFieldStateController.OnPreRender(System.EventArgs)">
            <summary>
            In addition to calling the ancestor OnPreRender method, this calls
            <see cref="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseFieldStateController.DefineActions"/> when
            Enabled = true.
            </summary>
            <remarks>
            DefineActions creates one or more FieldStateAction objects and transfers
            the properties from this control to the FieldStateAction objects.
            </remarks>
            <exception cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.VAMException">When Condition is null.</exception>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseFieldStateController.PrepForValidation">
            <summary>
            PrepForValidation is called by VAMPage.ValidateGroup well before OnPreRender
            to get the Actions installed. Validation needs to run these actions as they change
            the UI and affect SpecialConditions (visibility, enabled, etc)
            After this is called, any changes to this object are ignored.
            </summary>
            <remarks>
            This method only calls <see cref="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseFieldStateController.DefineActions"/>.
            </remarks>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseFieldStateController.DefineActions">
            <summary>
            DefineActions is where the subclass creates one or more FieldStateActions
            based on the Controls To Change they have.
            </summary>
            <remarks>
            Call <see cref="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseFieldStateController.CreateFieldStateAction"/> 
            to create the instance. Call <see cref="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseFieldStateController.TransferProperties(Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseFieldStateAction)"/>
            to move data from this class to the FieldStateAction. These methods
            allow others to subclass the FieldStateAction class to provide additional capabilities.
            </remarks>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseFieldStateController.TransferProperties(Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseFieldStateAction)">
            <summary>
            TransferProperties copies all properties from this class to the FieldStateAction.
            </summary>
            <remarks>
            <para>A design philosophy of this class is to expose properties of the FieldStateAction
            by keeping local values of the properties and to transfer those values to the
            actual FieldStateAction during this method.</para>
            <para>The caller already handled setting the Owner, Condition, and ControlToChange.
            Override this to handle other properties on this control that must be transferred.</para>
            </remarks>
            <param name="pFSA">Transfer properties to this object.</param>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseFieldStateController.GetName">
            <summary>
            Returns the name of this control + "." for use in error messages.
            </summary>
            <remarks>
            The name is either the ID or the class type. It uses
            <see cref="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.Globals.GetControlName(System.Web.UI.Control)">Globals.GetControlName</see> to do the work.
            </remarks>
            <returns>This control's ID or its class type.</returns>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseFieldStateController.Condition">
            <summary>
            The Condition class selected by the user to determine whether to use
            the <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseFieldStateController.ConditionTrue"/>
            or <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseFieldStateController.ConditionFalse"/> properties.
            </summary>
            <value>
            <para>It provides the UITypeEditor <see cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.OneConditionTypeConverter"/>
            to select the condition in the Properties Editor.</para>
            <para>The Properties Editor and ASP.NET Attributes do not support a way
            to write out a polymorphic property. So this property is not
            written into the ASP.NET text. Instead, the object is kept in the collection
            <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseFieldStateController.ConditionContainer"/> and limits
            that collection to one item. ASP.NET attributes can write out a collection
            and provides with a workaround to the polymorphism problem.
            </para>
            <para>Transferred to BaseFieldStateAction.Condition in OnPreRender.</para>
            <para>It uses this ASP.NET format:</para>
            <code>
            &lt;vam:FieldStateController id=[id] runat=server [properties]&gt;
               &lt;ConditionContainer&gt;
                  &lt;vam:conditionclass runat=server [properties] /&gt;
               &lt;/ConditionContainer&gt;
            &lt;/vam:FieldStateController&gt;
            </code>
            </value>
            <remarks>
            <para><b>EditorAttribute:</b><see cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.OneConditionUITypeEditor"/></para>
            <para><b>TypeConverterAttribute:</b><see cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.OneConditionTypeConverter"/></para>
            </remarks>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseFieldStateController.ConditionContainer">
            <summary>
            ConditionContainer is a hack to allow the  <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseFieldStateController.Condition"/>
             property to stream between ASP.NET
            and an object. 
            </summary>
            <value>
            <para>The Condition property itself doesn't stream but modifies this list as a hack
            to work around a limitation in the ASP.NET attributes that don't know how to
            handle a polymorphic property.</para>
            <para>This class streams to the ASP.NET text but does not appear in the Properties Editor. </para>
            <para>You shouldn't attempt to add more than one condition
            as only the first will be applied to Condition.</para>
            <para>It uses this ASP.NET format:</para>
            <code>
            &lt;vam:FieldStateController id=[id] runat=server [properties]&gt;
               &lt;ConditionContainer&gt;
                  &lt;vam:conditionclass runat=server [properties] /&gt;
               &lt;/ConditionContainer&gt;
            &lt;/vam:FieldStateController&gt;
            </code>
            </value>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseFieldStateController.Enabled">
            <summary>
            Enabled determines if the object is used or not.
            </summary>
            <value>
            <para>When true, it is available for use. When false, it does nothing.</para>
            <para>You must set this to false when another control whose Visible property is false
            is referenced by this control. For example, Condition.ControlIDToEvaluate, ControlIDToChange,
            and ControlIDToRunThisAction. Otherwise a runtime exception will occur.
            </para>
            <para>It defaults to true.</para>
            <para>Transferred to BaseFieldStateAction.Enabled in OnPreRender.</para>
            </value>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseFieldStateController.Enabler">
            <summary>
            Enabler is a condition which runs prior to the rest of the conditions.
            Use it to turn on and off the FieldStateController based on conditions on the page.
            For example, this FieldStateController should not run unless a certain checkbox is checked.
            </summary>
            <value>
            <para>When no enabler is needed, it is null.</para>
            <para>It provides the UITypeEditor <see cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.OneConditionTypeConverter"/>
            to select the condition in the Properties Editor.</para>
            <para>The Properties Editor and ASP.NET Attributes do not support a way
            to write out a polymorphic property. So this property is not
            written into the ASP.NET text. Instead, the object is kept in the collection
            <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseFieldStateController.EnablerContainer"/> and limits
            that collection to one item. ASP.NET attributes can write out a collection
            and provides with a workaround to the polymorphism problem.
            </para>
            <para>Transferred to BaseFieldStateAction.Enabler in OnPreRender.</para>
            <para>It uses this ASP.NET format:</para>
            <code>
            &lt;vam:FieldStateController id=[id] runat=server [properties]&gt;
               &lt;EnablerContainer&gt;
                  &lt;vam:conditionclass runat=server [properties] /&gt;
               &lt;/EnablerContainer&gt;
            &lt;/vam:FieldStateController&gt;
            </code> 
            </value>
            <remarks>
            <para><b>EditorAttribute:</b><see cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.EnablerConditionUITypeEditor"/></para>
            <para><b>TypeConverterAttribute:</b><see cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.OneConditionTypeConverter"/></para>
            </remarks>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseFieldStateController.EnablerContainer">
            <summary>
            EnablerContainer is a hack to allow the  <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseFieldStateController.Enabler"/>
             property to stream between ASP.NET and an object. 
            </summary>
            <value>
            <para>The Enabler property itself doesn't stream but modifies this list as a hack
            to work around a limitation in the ASP.NET attributes that don't know how to
            handle a polymorphic property.</para>
            <para>This class streams to the ASP.NET text but does not appear in the Properties Editor. </para>
            <para>You shouldn't attempt to add more than one condition
            as only the first will be applied to Enabler.</para>
            <para>It uses this ASP.NET format:</para>
            <code>
            &lt;vam:FieldStateController id=[id] runat=server [properties]&gt;
               &lt;EnablerContainer&gt;
                  &lt;vam:conditionclass runat=server [properties] /&gt;
               &lt;/EnablerContainer&gt;
            &lt;/vam:FieldStateController&gt;
            </code>
            </value>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseFieldStateController.InvisiblePreservesSpace">
            <summary>
            InvisiblePreservesSpace determines if a control takes up space on the page
            when its state is changed to invisible.
            </summary>
            <value>
            <para>When the ConditionTrue.Visible or ConditionFalse.Visible property 
            causes the field to be hidden, there are two ways 
            the field can be hidden:
            Preserve the space of the element or remove the element entirely. </para>
            <para>This depends on the client-side style attributes 'display' and 'visibility'.
            When true, the style is set to <c>visibility:hidden</c> with no change to the display style.
            When false, the style is <c>visibility:hidden;display:none</c>.</para>
            <para>The client-side code preserves the original value of the 'display' attribute
            before changing it so that when the element becomes visible once again, 
            the display style is restored to its original value.</para>
            <para>It defaults to true.</para>
            </value>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseFieldStateController.RunFunctionName">
            <summary>
            RunFunctionName defines the name of an optional client-side function 
            to call to handle the state change. It allows you to customize the state change.
            </summary>
            <value>
            <para>A good usage is when the element on the page is already managed
            by client-side functions and supplies a function for you to call to change
            its state.</para>
            <para>If you want to run a function, create it in JavaScript on the page. </para>
            <para>It takes these parameters:</para>
            <list type="table">
            <item>
            <term>Field State object</term>
            <description>Client-side representation of the field state object. 
            It allows you to get properties like CssClass, Enabled 
            and Visible for use in your function.</description></item>
            <item>
            <term>ControlToChange element (object)</term>
            <description>The element that is being operated upon. It is an object 
            for the element. If you need the object’s ID, this object has a property 
            called id.</description></item>
            <item>
            <term>ConditionValue (boolean)</term>
            <description>When true, the condition indicates success; false indicates the condition failed.</description></item>
            </list>
            <para>It does not return a result.</para>
            <para>See the User's Guide for more details and an example.</para>
            </value>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseFieldStateController.ConditionTrue">
            <summary>
            ConditionTrue contains the state settings to apply to the 
            <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.FieldStateController.ControlIDToChange">FieldStateController.ControlIDToChange</see>
            or <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.MultiFieldStateController.ControlConnections">MultiFieldStateController.ControlConnections</see>
            when the Condition evaluates as 'success'. 
            </summary>
            <value>
            <para>Settings are only applied at runtime when both this and 
            <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseFieldStateController.ConditionFalse"/> 
            differ on a property-by-property basis.</para>
            <para>To provide additional properties, subclass 
            <see cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.StateSettings"/> to add the properties
            and override <see cref="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseFieldStateController.CreateStateSettings"/> 
            to return to the class.</para>
            </value>
            <seealso cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.StateSettings"/>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseFieldStateController.ConditionFalse">
            <summary>
            ConditionFalse contains the state settings to apply to the 
            <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.FieldStateController.ControlIDToChange">FieldStateController.ControlIDToChange</see>
            or <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.MultiFieldStateController.ControlConnections">MultiFieldStateController.ControlConnections</see>
            when the Condition evaluates as 'failed'. 
            </summary>
            <value>
            <para>Settings are only applied at runtime when both this and 
            <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseFieldStateController.ConditionTrue"/> 
            differ on a property-by-property basis.</para>
            <para>To provide additional properties, subclass 
            <see cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.StateSettings"/> to add the properties
            and override <see cref="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseFieldStateController.CreateStateSettings"/> 
            to return to the class.</para>
            </value>
            <seealso cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.StateSettings"/>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseFieldStateController.UseValidationGroup">
            <summary>
            UseValidationGroup enables running all validators matching 
            <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseFieldStateController.ValidationGroup"/> upon
            completion of the FieldState change. 
            </summary>
            <value>
            <para>Use this when you have a validator that is associated with a field
            whose state is changed with this FieldStateController and should either be
            shown or hidden. The validator should have its 
            <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseAnyValidator.Enabler">BaseAnyValidator.Enabler</see>
            property set to detect
            the state of the field changed, usually using <see cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.VisibleCondition"/>
            or <see cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.EnabledCondition"/>. So when the validators are rerun
            on the page, your validator will disabled or enable itself.</para>
            <para>It only affects the client-side changes.</para>
            <para>It runs just like a Submit action does, including an update of ValidationSummary.</para>
            <para>It defaults to false.</para>
            </value>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseFieldStateController.ValidationGroup">
            <summary>
            ValidationGroup defines a group name used by validators. When 
            <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseFieldStateController.UseValidationGroup"/>
            is true, all validators matching this group name are run after the field state has
            changed. This allows validators to remove themselves when the state no longer supports them.
            </summary>
            <value>
            <para>Use "*" to run through all groups.</para>
            <para>It defaults to "".</para>
            </value>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseFieldStateController.ControlIDToRunThisAction">
            <summary>
            ControlIDToRunThisAction is the ID to the control that runs this action when the
            user clicks on it. It is only used in special situations because the Condition
            property usually provides a control that will run this FieldStateController.
            </summary>
            <value>
            <para>When the FieldStateController should run based on a data-oriented element
            like textbox, list, or checkbox, the Condition property will specify that control.
            When the FieldStateController should be run by clicking on a non-data-oriented element
            like label, button, or image, use this property to specify that control.</para>
            <para>This is ID property, not the ClientID or UniqueID. It will be translated 
            into the ClientID at runtime. If the ID is assigned but the control cannot be 
            found in the current or any parent NamingContainer, 
            an exception is thrown at runtime.</para>
            <para>This sets the ControlID property of 
            <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseFieldStateController.ControlToRunThisActionConnection"/>.</para>
            </value>
            <remarks>
            <para><b>EditorAttribute:</b><see cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.FSAControlConnectionTypeEditor"/></para>
            </remarks>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseFieldStateController.ControlToRunThisAction">
            <summary>
            ControlToRunThisAction is an alternative to 
            <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseFieldStateController.ControlIDToRunThisAction"/>
            that maintains a reference to the control.
            </summary>
            <value>
            <para>As a reference to the control, it can refer to any control on the page,
            whereas the <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseFieldStateController.ControlIDToRunThisAction"/>
            property must refer to a control within the same or parent Naming Container 
            as this FieldStateController.</para>
            <para>When ControlIDToRunThisAction is assigned, getting a value here will attempt to
            find the control on the page and return its instance.</para>
            <para>Assignment must be done programmatically.</para>
            <para>Internally, the reference is stored in 
            <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseFieldStateController.ControlToRunThisActionConnection"/></para>
            </value>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseFieldStateController.ControlToRunThisActionConnection">
            <summary>
            ControlToRunThisActionConnection is used by 
            <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseFieldStateController.ControlIDToRunThisAction"/> and 
            <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseFieldStateController.ControlToRunThisAction"/>
            for data storage and validation of the control class.
            </summary>
            <value>
            <para>When first used, it creates a <see cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.FSAControlConnection"/>
            object for the storage.</para>
            </value>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseFieldStateController.Visible">
            <summary>
            The Visible property is not used because it has mixed meanings. It is an on/off
            switch for a control. So is Enabled. Enabled is used as the on/off switch for this control.
            </summary>
            <value>
            Overridden to hide this property from the Properties Editor and prevent streaming.
            </value>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseFieldStateController.ParentNamingObject">
            <summary>
            Implements INamingObject.ParentNamingObject to return null because
            the control is the root object.
            </summary>
        </member>
        <member name="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.FieldStateController">
            <summary>
            FieldStateController is a control that changes the attributes or styles of
            one control on the page based on any condition you select.
            </summary>
            <remarks>
            <para>See the <b>User's Guide</b> for an overview of using this control.</para>
            <para>Defines the <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.FieldStateController.ControlIDToChange"/>
            and <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.FieldStateController.ControlToChange"/> properties.</para>
            <para>It uses the <see cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.FieldStateAction"/> class to do most of the setup
            work. The client-side provides functions to do the actual state changes.</para>
            </remarks>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.FieldStateController.#ctor">
            <summary>
            Constructor with no parameters.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.FieldStateController.#ctor(Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseCondition,Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseCondition,System.String)">
            <summary>
            Constructor that sets the Condition, Enabler, and ControlIDToChange properties.
            Enabler can be null.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.FieldStateController.#ctor(Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseCondition,Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseCondition,System.Web.UI.Control)">
            <summary>
            Constructor that sets the Condition, Enabler, and ControlToChange properties.
            Enabler can be null.
            </summary>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.FieldStateController.fControlToChangeConnection">
            <summary>
            Storage for <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.FieldStateController.ControlToChangeConnection"/>.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.FieldStateController.DefineActions">
            <summary>
            If ControlToChange is assigned, it creates a FieldStateAction, transfers
            properties from this control to the FieldStateAction and calls Prepare.
            </summary>
            <remarks>
            If you create a subclass of the FieldStateAction, override
            <see cref="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseFieldStateController.CreateFieldStateAction"/>
            and <see cref="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseFieldStateController.TransferProperties(Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseFieldStateAction)"/>.
            </remarks>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.FieldStateController.ControlIDToChange">
            <summary>
            ControlIDToChange is the ID to the control whose state will be changed. 
            </summary>
            <value>
            <para>This is ID property, not the ClientID or UniqueID. It will be translated 
            into the ClientID at runtime.</para>
            <para>If no control is unassigned, the FieldStateController is disabled.</para>
            <para>If the control cannot be found in the current or any parent NamingContainer, 
            an exception is thrown at runtime.</para>
            <para>Internally, the ID is stored in 
            <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.FieldStateController.ControlToChangeConnection"/>.</para>
            </value>
            <remarks>
            <para><b>EditorAttribute:</b><see cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.FSAControlConnectionTypeEditor"/></para>
            </remarks>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.FieldStateController.ControlToChange">
            <summary>
            Gets and sets a reference to the control whose state will be changed.
            </summary>
            <value>
            <para>As a reference to the control, it can refer to any control on the page,
            whereas the <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.FieldStateController.ControlIDToChange"/>
            property must refer to a control within the same or parent Naming Container as 
            this FieldStateController.</para>
            <para>When ControlIDToChange is assigned, getting a value here will attempt to
            find the control on the page and return its instance.</para>
            <para>Assignment must be done programmatically.</para>
            <para>Internally, the reference is stored in 
            <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.FieldStateController.ControlToChangeConnection"/>.</para>
            </value>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.FieldStateController.ControlToChangeConnection">
            <summary>
            ControlToChangeConnection is used by 
            <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.FieldStateController.ControlIDToChange"/> and 
            <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.FieldStateController.ControlToChange"/>
            for data storage and validation of the control class.
            </summary>
            <value>
            <para>When first used, it creates a <see cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.FSAControlConnection"/>
            object for the storage.</para>
            </value>
        </member>
        <member name="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.MultiFieldStateController">
            <summary>
            MultiFieldStateController is a control that changes the attributes or styles of
            a list of controls on the page based on any condition you select.
            </summary>
            <remarks>
            <para>See the <b>User's Guide</b> for an overview of using this control.</para>
            <para>Defines the <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.MultiFieldStateController.ControlConnections"/>
            property.</para>
            <para>It creates a <see cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.FieldStateAction"/> instance for each
            control defined in ControlConnections. It uses a <see cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.MultiAction"/>
            to hold the condition and apply its evaluation function's result to the FieldStateActions.</para>
            </remarks>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.MultiFieldStateController.#ctor">
            <summary>
            Constructor with no parameters.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.MultiFieldStateController.#ctor(Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseCondition,Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseCondition)">
            <summary>
            Constructor that sets the Condition and Enabler properties. You can
            pass null for each parameter.
            </summary>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.MultiFieldStateController.fControlConnections">
            <summary>
            Storage for <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.MultiFieldStateController.ControlConnections"/>.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.MultiFieldStateController.DefineActions">
            <summary>
            For each FSAControlConnection defined in the 
            <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.MultiFieldStateController.ControlConnections"/> property,
            it creates a <see cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.FieldStateAction"/> object, transfers properties
            from this object to the action, and calls Prepare on it.
            </summary>
            <remarks>
            <para>The MultiFieldStateController uses the <see cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.MultiAction"/>
            to maintain one condition against a list of actions. Each FieldStateAction is
            added to the MultiAction instance.</para>
            </remarks>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.MultiFieldStateController.OnLoad(System.EventArgs)">
            <summary>
            Confirm that the Owner is assigned to each item in 
            <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.MultiFieldStateController.ControlConnections"/>.
            </summary>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.MultiFieldStateController.ControlConnections">
            <summary>
            ControlConnections is a collection of <see cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.ControlConnection"/>
            objects that identify the controls
            on the page whose attributes and styles will be modified.
            </summary>
            <remarks>
            <para>Each <see cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.ControlConnection"/> can reference 
            a control by its ID or an object reference. You should add
            instances of the class <see cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.FSAControlConnection"/>.</para>
            <para>Provides the UITypeEditor <see cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.MultiFSACollectionEditor"/>
            and TypeConverter <see cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.ControlConnectionCollectionConverter"/>
            to the Properties Editor.</para>
            <para>The ASP.NET text for this property should be a nested property like this:</para>
            <code>
            &lt;vam:MultiFieldStateController id=[id] runat=server &gt;
              &lt;ControlConnections&gt;
                 &lt;vam:FSAControlConnection ControlID="[controlid1]" /&gt;
                 &lt;vam:FSAControlConnection ControlID="[controlid2]" /&gt;
              &lt;/ControlConnections&gt;
            &lt;/vam:MultiFieldStateController&gt;
            </code>
            <para><b>EditorAttribute:</b><see cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.MultiFSACollectionEditor"/></para>
            <para><b>TypeConverterAttribute:</b><see cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.ControlConnectionCollectionConverter"/></para>
            </remarks>
        </member>
        <member name="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.ControlConnectionCollection">
            <summary>
            ControlConnectionCollection is an <see cref="T:System.Collections.ArrayList"/> of 
            <see cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.ControlConnection"/> elements.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.ControlConnectionCollection.#ctor">
            <summary>
            Constructor with no parameters.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.ControlConnectionCollection.Add(System.Object)">
            <summary>
            Adds ControlConnection objects.
            </summary>
            <param name="pObj">A ControlConnection object.</param>
            <returns>Position in the list that was added.</returns>
            <exception cref="T:System.ArgumentException">When the object passed is not ControlConnection.</exception>
        </member>
        <member name="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.CSAttributeDesc">
            <summary>
            CSAttributeDesc describes an Attribute or Style on a client-side field. 
            It defines a value for that style. It is an element of the
            <see cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.StateSettings"/> class
            which is used on FieldStateController controls.
            </summary>
            <remarks>
            <para>Together the attribute and value are used
            in <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseFieldStateAction.ConditionTrue">BaseFieldStateAction.ConditionTrue</see>
            and <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.BaseFieldStateAction.ConditionFalse">BaseFieldStateAction.ConditionFalse</see> 
            to change the attribute based on the condition. Its goal is to allow the user to extend the list of
            attributes available within StateSettings. StateSettings defines the 
            <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.StateSettings.Other"/> property to hold this.</para>
            <para>The user must supply a valid DHTML/DOM attribute name. 
            An invalid name will cause a JavaScript error at runtime.</para>
            <para>Attributes must have a DataType declared so the value can be formatted correctly.</para>
            <para>The value may be "" if the DataType is a string. 
            Otherwise, it must be a valid representation for the value on the client side.</para>
            </remarks>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.CSAttributeDesc.#ctor">
            <summary>
            Constructor with no parameters.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.CSAttributeDesc.#ctor(System.String,System.String,Jenzabar.Portal.Framework.Web.UI.Controls.Validation.AttributeDataType,Jenzabar.Portal.Framework.Web.UI.Controls.Validation.AttributeType)">
            <summary>
            Constructor that sets the AttributeName, Value, DataType and AttributeType
            properties.
            </summary>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.CSAttributeDesc.fAttributeName">
            <summary>
            Storage for <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.CSAttributeDesc.AttributeName"/>.
            </summary>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.CSAttributeDesc.fValue">
            <summary>
            Storage for <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.CSAttributeDesc.Value"/>.
            </summary>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.CSAttributeDesc.fDataType">
            <summary>
            Storage for <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.CSAttributeDesc.DataType"/>.
            </summary>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.CSAttributeDesc.fAttributeType">
            <summary>
            Storage for <see cref="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.CSAttributeDesc.AttributeType"/>.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.CSAttributeDesc.Clone">
            <summary>
            Implements ICloneable.Clone
            </summary>
            <returns>A new instance of this object, with the same property values.</returns>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.CSAttributeDesc.Apply(Jenzabar.Portal.Framework.Web.UI.Controls.Validation.CSAttributeDesc)">
            <summary>
            Copies the properties from the CSAttributeDesc passed in to the current
            instance.
            </summary>
            <param name="pOrig">Get properties to copy from this object.</param>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.CSAttributeDesc.AttributeName">
            <summary>
            AttributeName is the name of the client side attribute or style.
            It is required and must be a valid DOM/DHTML name.
            </summary>
            <value>
            <para>Attributes and styles are properties on a client-side object. They are defined
            by the browser product, usually following some or all of the DHTML or DOM
            standards. You must research the browsers that you want to support and their
            use of the DHTML or DOM standards to determine the name of the attribute,
            and its possible values. You may find that some browser do not support
            the attribute.</para>
            </value>
            <remarks>
            <para><b>EditorAttribute:</b><see cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.StringTypeEditor"/></para>
            </remarks>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.CSAttributeDesc.Value">
            <summary>
            Value is a string representation of the value to be assigned to the attribute.
            </summary>
            <value>
            It's textual format must be compatible with the datatype of the Attribute
            in a JavaScript assignment statement. For example, only strings support "".
            Boolean must be "false" and "true". Integer must be entirely digits.
            </value>
            <remarks>
            <para><b>EditorAttribute:</b><see cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.StringTypeEditor"/></para>
            </remarks>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.CSAttributeDesc.DataType">
            <summary>
            DataType determines the data type of the Attribute or style. It must match the defined
            datatype or you may get JavaScript errors.
            </summary>
            <value>
            <para>It defaults to AttributeDataType.String.</para>
            </value>
            <seealso cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.AttributeDataType"/>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.CSAttributeDesc.AttributeType">
            <summary>
            AttributeType determines if the AttributeName is an Attribute or Style of the field.
            </summary>
            <value>
            <para>It defaults to AttributeType.Attribute.</para>
            </value>
            <seealso cref="T:Jenzabar.Portal.Framework.Web.UI.Controls.Validation.AttributeType"/>
        </member>
    </members>
</doc>
