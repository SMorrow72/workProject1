<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Jenzabar.Portal.Framework</name>
    </assembly>
    <members>
        <member name="T:Jenzabar.Portal.Framework.PortalGroupCreationInfo">
            <summary>
            Summary description for PortalGroupCreationInfo.
            </summary>
        </member>
        <member name="T:Jenzabar.Portal.Framework.Security.ActiveDirectoryObjectCreationInfo">
            <summary>
            Summary description for ActiveDirectoryObjectCreationInfo.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Security.ActiveDirectoryObjectCreationInfo.FromXML(System.String)">
            <summary>
            Creates an object that can build portions of the site, or a whole site.
            </summary>
            <param name="xml">The raw XML that contains exported site structure.</param>
            <returns>An instance of an object that can create a site or portions of a site.</returns>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Security.ActiveDirectoryObjectCreationInfo.Grant">
            <summary>
            A semicolon delimited list of group names (within the current context only) to grant access to this 
            object. What it affects is different for each type of object. For contexts, it will grant 
            administration rights, for pages, it will grant view, for operations, it will grant the operation
            itself.
            </summary>
            <example>Leaders;Members</example>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Security.ActiveDirectoryObjectCreationInfo.GrantGlobal">
            <summary>
            A semicolon delimited list of base group names to grant access to this object. What it affects is 
            different for each type of object. For contexts, it will grant administration rights, for pages, 
            it will grant view, for operations, it will grant the operation itself.
            </summary>
            <example>Administrators;Students;Faculty</example>
        </member>
        <member name="T:Jenzabar.Portal.Framework.PortalGroupMemberEventArgs">
            <summary>
            used for Group-Member events
            </summary>
        </member>
        <member name="T:Jenzabar.Portal.Framework.PortalGroup">
            <summary>
            A collection of PortalUsers and Other PortalGroups that exists to grant security on resources in active directory.
            </summary>
            <remarks>
            These objects live within a context, and are somtimes refered to as "roles" within the context. Groups that are defined in the root 
            context are considered to be Global, mening that they can be used anywhere in the site to grant permission to a resource all 
            of the users in that group.
            </remarks>
        </member>
        <member name="T:Jenzabar.Portal.Framework.PortalPrincipal">
            <summary>
            Common base class for both <see cref="T:Jenzabar.Portal.Framework.PortalUser"/> and <see cref="T:Jenzabar.Portal.Framework.PortalGroup"/> allows the to classes to be used interchangeably in certain circomstances.
            </summary>
            <remarks>A Principal in the Jenzabar Portal Framework represents a <see cref="T:Jenzabar.Portal.Framework.PortalUser"/> or a <see cref="T:Jenzabar.Portal.Framework.PortalGroup"/> and is used to assign security permissions to pieces of data. This class is not directly instantiatable. You must create either a <see cref="T:Jenzabar.Portal.Framework.PortalUser"/> or <see cref="T:Jenzabar.Portal.Framework.PortalGroup"/> .</remarks>
        </member>
        <member name="T:Jenzabar.Portal.Framework.Security.SecuredActiveDirectoryObject">
            <summary>
            Base class for all Active Directory objects that need to be secured.
            </summary>
        </member>
        <member name="T:Jenzabar.Portal.Framework.Security.ActiveDirectoryObject">
            <summary>
            Base class for all objects that come from active directory.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Security.ActiveDirectoryObject.#ctor(Jenzabar.Portal.Framework.Security.ActiveDirectoryObject.ADDataStore)">
            <summary>
            Creates a new instance of the ActiveDirectoryObject class with a for a specific DirectoryEntry.
            </summary>
            <param name="entry">The <see cref="T:System.DirectoryServices.DirectoryEntry"/> to use to store and retrive data for this object, as well as modify security.</param>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Security.ActiveDirectoryObject.DoLoad(Jenzabar.Portal.Framework.Security.ActiveDirectoryObject.ADDataStore)">
            <summary>
            Responsible for pulling all needed data out of the DirectoryEntry instance that is needed by this object.
            </summary>
            <param name="entry">The DirectoryEntry that stores the data for this object.</param>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Security.ActiveDirectoryObject.Install">
            <summary>
            Called when a new object is created in active directory. Durring this method we should create all 
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Security.ActiveDirectoryObject.Commit">
            <summary>
            Commits the changes made to this ActiveDirectoryObject.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Security.ActiveDirectoryObject.Delete">
            <summary>
            Deletes this ActiveDirectoryObject and any children.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Security.ActiveDirectoryObject.Refresh">
            <summary>
            refresh object; override if need to refresh any state variables
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Security.ActiveDirectoryObject.Equals(System.Object)">
            <summary>
            Test for equality to another object.
            </summary>
            <param name="obj">The object to test for equality to.</param>
            <returns>True if the object being tested is an ActiveDirectoryObject and has matching id, otherwise false.</returns>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Security.ActiveDirectoryObject.Equals(Jenzabar.Portal.Framework.Security.ActiveDirectoryObject)">
            <summary>
            Determines equality between activedirectory objects.
            </summary>
            <param name="obj">The object to test for equality to this object</param>
            <returns>True if the ActiveDirectoryObject has a matching id, otherwise false.</returns>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Security.ActiveDirectoryObject.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>The hash code for this instance.</returns>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Security.ActiveDirectoryObject.ToString">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Security.ActiveDirectoryObject.op_Equality(Jenzabar.Portal.Framework.Security.ActiveDirectoryObject,Jenzabar.Portal.Framework.Security.ActiveDirectoryObject)">
            <summary>
            Allows for the comparison of two ActiveDirectoryObject for equality
            </summary>
            <param name="o1">The first ActiveDirectoryObject</param>
            <param name="o2">The second ActiveDirectoryObject</param>
            <returns>True if Equals function returns true</returns>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Security.ActiveDirectoryObject.op_Inequality(Jenzabar.Portal.Framework.Security.ActiveDirectoryObject,Jenzabar.Portal.Framework.Security.ActiveDirectoryObject)">
            <summary>
            Allows for the comparison of two ActiveDirectoryObject for equality
            </summary>
            <param name="o1">The first ActiveDirectoryObject</param>
            <param name="o2">The second ActiveDirectoryObject</param>
            <returns>True if Equals function returns false</returns>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Security.ActiveDirectoryObject.GetEntry(System.String)">
            <summary>
            Retrievs a directory entry from Active directory based on it's DistinguishedName (DN). This is the fastest, and recomended way to retrieve directory entries.
            </summary>
            <param name="DN">The DistinguishedName for the object in the form "O=ObjectName,CN=ObjectsContainer"</param>
            <returns>The <see cref="T:System.DirectoryServices.DirectoryEntry"/> with matching id or null if the entry is not found.</returns>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Security.ActiveDirectoryObject.FindByID(Jenzabar.Portal.Framework.Data.ObjectIdentifier)">
            <summary>
            Finds a ActiveDirectoryObject in active directly by it's ID.
            </summary>
            <param name="id">The id of the object that we are looking for.</param>
            <returns>The <see cref="T:System.DirectoryServices.DirectoryEntry"/> with matching id or null if the entry is not found.</returns>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Security.ActiveDirectoryObject.EnsureOrganizationalUnitExists(System.String,System.String)">
            <summary>
            Checks to make sure the specified organizational unit exists under the specified parent entry. If the organizational unit is not there then it will be created.
            </summary>
            <param name="parentDistinguishedName">The full didtinguished name of the parent object</param>
            <param name="organizationalUnitName">The name of the organizational unit to check for, and create if needed without "OU=" on the front. Example: "Groups", "Pages", "Groups"</param>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Security.ActiveDirectoryObject.GetFromCache(Jenzabar.Portal.Framework.Data.ObjectIdentifier)">
            <summary>
            Attempts to pull an AD object from a cache of pre-created objects
            </summary>
            <param name="id">The id of the object to get from the cache</param>
            <returns>The ActiveDirectoryObject with matching DN if it was cached, otherwise null</returns>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Security.ActiveDirectoryObject.GetCurrentUserCredentials">
            <summary>
            Gets the UserCredentials of the user currently logged in , or guest if no user is logged in.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Security.ActiveDirectoryObject.HijackHighPrivs">
            <summary>
            Impersonates a user in the system that has access to everything. This method should be used only as a last resort, and you should get a few members of the team to sign off on using it
            
            !WARNING! failure to call the ResetUserCredentials() method when you are done executing the code that requires full access to the site will result in the current user having full access to the entire site!
            </summary>
            <example>
            Hijacking a user that has full site access and re-setting the current user:
            <code>
            try
            {
            	// get access to the whole site
            	ActiveDirectoryObject.HijackHighPrivs();
            	
            	// execute code that needs full access to the site
            	
            }
            finally
            {
            	// ver very very very important!
            	ActiveDirectoryObject.ResetUserCredentials();
            }
            </code>
            </example>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Security.ActiveDirectoryObject.ResetUserCredentials">
            <summary>
            Resets the current user after a call to the HijackHighPrivs() method. This should always be called from a finally block whenever executing code with full access to the site.
            </summary>
            <example>
            Hijacking a user that has full site access and re-setting the current user:
            <code>
            try
            {
            	// get access to the whole site
            	ActiveDirectoryObject.HijackHighPrivs();
            	
            	// execute code that needs full access to the site
            	
            }
            finally
            {
            	// ver very very very important!
            	ActiveDirectoryObject.ResetUserCredentials();
            }
            </code>
            </example>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Jenzabar.Portal.Framework.Security.ActiveDirectoryObject.GetSafeName(System.String)" -->
        <member name="M:Jenzabar.Portal.Framework.Security.ActiveDirectoryObject.IsValidName(System.String)">
            <summary>
            Checks to make sure the name is valid for being stored as the name of an object (cn)
            in ADAM.
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Security.ActiveDirectoryObject.IsNull">
            <summary>
            True if this object is a Null instance.
            </summary>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Security.ActiveDirectoryObject.DN">
            <summary>
            Gets the Distinguished Name of the object.
            </summary>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Security.ActiveDirectoryObject.DateCreated">
            <summary>
            Gets the Date and Time that the User or Group was added to the system.
            </summary>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Security.ActiveDirectoryObject.DateModified">
            <summary>
            Gets the Date and Time the User or Group was changed.
            </summary>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Security.ActiveDirectoryObject.Guid">
            <summary>
            Gets the globaly unique id for this object
            </summary>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Security.ActiveDirectoryObject.Name">
            <summary>
            Gets the name for this ActiveDirectoryObject
            </summary>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Security.ActiveDirectoryObject.ID">
            <summary>
            Gets the <see cref="T:Jenzabar.Portal.Framework.Data.ObjectIdentifier"/> unique id for this User or Group.
            </summary>
            <remarks>The ID can be used to uniquly identify the User or Group. It is guaranteed that no two Users or Groups will have the same id.</remarks>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Security.ActiveDirectoryObject.DisplayName">
            <summary>
            Gets/sets display name for this ActiveDirectoryObject - the name that actually will be shown at Website
            </summary>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Security.ActiveDirectoryObject.IsSystemObject">
            <summary>
            True if the object is a system object, meaning that it is required for the software to function properly, like the root context, or the default roles.
            </summary>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Security.ActiveDirectoryObject.Removable">
            <summary>
            True if the object can be deleted, otherwise flase.
            </summary>
            <remarks>
            This will return false for all system objects.
            </remarks>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Security.ActiveDirectoryObject.ReadOnly">
            <summary>
            True if the object cannot be modified.
            </summary>
            <remarks>
            This will always return true for objects that are required for the framework to function properly.
            </remarks>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Security.ActiveDirectoryObject.Hidden">
            <summary>
            True to display links to this object, otherwise links to this object are not displayed.
            </summary>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Security.ActiveDirectoryObject.Path">
            <summary>
            Gets the fully qualified path to the entry for this object in active directory.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Security.ActiveDirectoryObject.ObjectFinder.GetDirectorySearcher(System.DirectoryServices.DirectoryEntry,System.DirectoryServices.SearchScope,System.String,System.String,System.DirectoryServices.SortDirection,System.String[])">
            <summary>
            Creates a new <see cref="T:System.DirectoryServices.DirectorySearcher"/> to search based on the specified criteria.
            </summary>
            <param name="root">The <see cref="T:System.DirectoryServices.DirectoryEntry"/> to use as the basis of the search.</param>
            <param name="scope">The scope of the search. This can limit the search to just one level, or to all objects under the specified root</param>
            <param name="filter">An LDAP filtering expression, in the format "(propetry=value)", or null to not filter the search</param>
            <param name="schemaClasses">A listing of the types of schema classes to search on.</param>
            <param name="sortBy">property to sort by, can be null - no sorting in this case</param>
            <param name="sortDirection">sorting direction</param>
            <returns>A <see cref="T:System.DirectoryServices.DirectorySearcher"/> initialized to search the entire tree with the criteria provided.</returns>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Security.ActiveDirectoryObject.ObjectFinder.GetDnFromSearchResult(System.DirectoryServices.SearchResult)">
            <summary>
            retrieves the dn (distinguished name) for the found object from a <see cref="T:System.DirectoryServices.SearchResult"/>
            </summary>
            <param name="result">The <see cref="T:System.DirectoryServices.SearchResult"/> to get the distinguished name from.</param>
            <returns>The distinguished name of the found object, or null if not avaliable</returns>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Security.ActiveDirectoryObject.ObjectFinder.GetSearchFilter(System.String,System.String[])">
            <summary>
            Adds arguments to the filter to limit it to only the schema classes listed
            </summary>
            <param name="customFilter">The custom filter something in the format "(jenzabar-ICSNET-GUID=[yourGuid])"</param>
            <param name="schemaClasses">The list of schema classes to limit the search to</param>
            <returns></returns>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Security.ActiveDirectoryObject.ObjectFinder.GetSchemaClassFilter(System.String[])">
            <summary>
            Creates an LDAP query filter that will limit the search to objects of the specified classes.
            </summary>
            <param name="schemaClasses">The types of classes to create a filter to search.</param>
            <returns>a string that can be used as a filter in a directorysearcher to find objects in ad of the specified types</returns>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Security.SecuredActiveDirectoryObject.DoCommit(System.DirectoryServices.DirectoryEntry)">
            <summary>
            applies changes to the security, then to the object.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Security.SecuredActiveDirectoryObject.CommitSecurity">
            <summary>
            Commmits changes to the security of this object
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Security.SecuredActiveDirectoryObject.AccessCheck(System.String)">
            <summary>
            Checks to see if the current user can perform the operation.
            </summary>
            <param name="operation">The name of the operation.</param>
            <returns>true if the user can perform the operation, otherwise false.</returns>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Security.SecuredActiveDirectoryObject.AccessCheck(Jenzabar.Portal.Framework.Security.Authorization.AccessCheckType,System.String[])">
            <summary>
            Checks to see if the current user si capable of performing the operations.
            </summary>
            <param name="accessCheckType">The type of access check to perform. If AccessCheckType.Union, this will amke sure that all of the operations can be performed by the current user, otherwise the users</param>
            <param name="operations"></param>
            <returns></returns>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Security.SecuredActiveDirectoryObject.Install">
            <summary>
            Called when a new object is created in active directory.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Security.SecuredActiveDirectoryObject.InstallOperations">
            <summary>
            Creates all of the operations needed for this object.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Security.SecuredActiveDirectoryObject.InstallOperationsNoFail">
            <summary>
            Used internaly by syncronize all operations to prevent the 
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Security.SecuredActiveDirectoryObject.InstallOperations(System.Type)">
            <summary>
            Adds all of the operations for this object, based on the attributes defined for the type passed in.
            </summary>
            <param name="type">The <see cref="T:System.Type"/> to read the list of operations from.</param>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Security.SecuredActiveDirectoryObject.GetGroupsThatHaveViewAccess">
            <summary>
            Gets a list of all the PortalGroups that have been given view rights on this object.
            </summary>
            <returns>The list of PortalGroups that can view this object.</returns>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Security.SecuredActiveDirectoryObject.GetGroupsThatHaveAdminAccess">
            <summary>
            Gets a list of all the PortalGroups that have been given administer rights on this object.
            </summary>
            <returns>The list of PortalGroups that can administer this object.</returns>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Security.SecuredActiveDirectoryObject.GetGroupsThatHaveAccess(Jenzabar.Portal.Framework.Security.AccessType)">
            <summary>
            Gets a list of all the PortalGroups that have been given the specified rights on this object.
            </summary>
            <param name="accessType">The level of access to test for</param>
            <returns>The list of PortalGroups that the specified rights on this object.</returns>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Security.SecuredActiveDirectoryObject.GetUsersThatHaveAccess(Jenzabar.Portal.Framework.Security.AccessType)">
            <summary>
            Gets a list of all the PortalUsers that have been given the specified rights on this object.
            </summary>
            <param name="accessType">The level of access to test for</param>
            <returns>The list of PortalUsers that the specified rights on this object.</returns>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Security.SecuredActiveDirectoryObject.GetUsersThatHaveViewAccess">
            <summary>
            Gets a list of all the PortalUsers that have been given view rights on this object.
            </summary>
            <returns>The list of PortalUsers that can view this object.</returns>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Security.SecuredActiveDirectoryObject.GetUsersThatHaveAdminAccess">
            <summary>
            Gets a list of all the PortalUsers that have been given administer rights on this object.
            </summary>
            <returns>The list of PortalUsers that can administer this object.</returns>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Security.SecuredActiveDirectoryObject.Administrable">
            <summary>
            True if the object being secured scopes the ability to administer (add edit delete) sub objects, otherwise false.
            </summary>
            <remarks>Should only return true for the Context class.</remarks>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Security.SecuredActiveDirectoryObject.Context">
            <summary>
            The context that this object lives in. For a context object, it should return it's self ('this' in C#).
            </summary>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Security.SecuredActiveDirectoryObject.Permissions">
            <summary>
            Gets the list of permissions for this object. This is a list of the PortalGroups (no PortalUsers here) that and the extent that they can access the object. Each entry is a wraper around the active directory Access Control Entry and this is a very simplified wraper around the Access Control List.
            </summary>
            <remarks></remarks>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Security.SecuredActiveDirectoryObject.Children">
            <summary>
            Gets a list of all the child object for a secured object. This should return all the Portlets on a Page, all the Pages in a Context, and all the Operations for a Portlet.
            </summary>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Security.SecuredActiveDirectoryObject.UsesOperations">
            <summary>
            Override and set to false if a subclass does not need operations. default value is true.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.PortalPrincipal.GetGroupMembership(Jenzabar.Portal.Framework.PortalContext)">
            <summary>
            Gets the PortalGroups in the specified context (no child nodes) that this PortalUserr or PortalGroup is directly a member of.
            </summary>
            <param name="context">context for which to return data, 
            if null - return group membership for all contexts</param>
            <returns>PortalGroup array</returns>
        </member>
        <member name="M:Jenzabar.Portal.Framework.PortalPrincipal.GetGroupMembership">
            <summary>
            Gets the groups that this principal is a directly a member of.
            </summary>
            <returns>PortalGroup array</returns>
        </member>
        <member name="M:Jenzabar.Portal.Framework.PortalPrincipal.GenerateGroupMembershipData">
            <summary>
            Fills the appropriate table with information about which groups the current principal belongs to.
            will be overriden in PortalUser and PortalGroup
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.PortalPrincipal.GenerateGroupMembershipDataSendErrToAdmin">
            <summary>
            calls GenerateGroupMembershipData, if error happened, message will be send to admins
            to synchronize group membership.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.PortalPrincipal.IsMemberOf(Jenzabar.Portal.Framework.PortalGroup)">
            <summary>
            Checks to see if this User or Group is a direct member of the specified Group. To search the entire tree of Groups that this User or Group is a member of use the overload of this method that allows you to specify checkWholeTree.
            </summary>
            <param name="group">The Group to check membership in.</param>
            <returns>True if this User or Group is a direct member of the specified Group, otherwise false.</returns>
        </member>
        <member name="M:Jenzabar.Portal.Framework.PortalPrincipal.IsMemberOf(Jenzabar.Portal.Framework.PortalGroup,System.Boolean)">
            <summary>
            Checks to see if this User or Group is a direct member of the specified Group. To search the entire tree of Groups that this User or Group is a member of use the overload of this method that allows you to specify checkWholeTree.
            </summary>
            <param name="group">The Group to check membership in.</param>
            <param name="checkWholeTree">True to recursivly search through all of the Groups in the tree og Groups that this User or Group is a member of.</param>
            <returns>True if this User or Group is a direct member of the specified Group, otherwise false.</returns>
        </member>
        <member name="M:Jenzabar.Portal.Framework.PortalPrincipal.FindByDN(System.String)">
            <summary>
            Locates and returns a User or Group by it's unique identifier.
            </summary>
            <param name="distinguishedName">The distinguished name (DN) for the User or Group to locate.</param>
            <returns>A PortalUser or PortalGroup if found, null otherwise</returns>
        </member>
        <member name="M:Jenzabar.Portal.Framework.PortalPrincipal.FindByID(Jenzabar.Portal.Framework.Data.ObjectIdentifier)">
            <summary>
            Locates and returns a User or Group by it's unique identifier.
            </summary>
            <param name="id">The unique id for the User or Group to locate.</param>
            <returns>A PortalUser or PortalGroup if found, null otherwise</returns>
        </member>
        <member name="M:Jenzabar.Portal.Framework.PortalPrincipal.FindBySid(System.String)">
            <summary>
            Gets a user or group (PortalPrincipal) from a SID (Security IDentifier).
            </summary>
            <param name="sid">The SID (Security IDentifier) for the user or group</param>
            <returns>A PortalUser or PortalGroup if found, null otherwise</returns>
        </member>
        <member name="M:Jenzabar.Portal.Framework.PortalPrincipal.InstantiatePrincipal(Jenzabar.Portal.Framework.Security.ActiveDirectoryObject.ADDataStore)">
            <summary>
            Creates a new instance of either the PortalUser or PortalGroup class depending on the SchemaClassName of the directory entry.
            </summary>
            <param name="entry">The DirectoryEntry that is the underlying data store for the User or Group</param>
            <returns>a new instance of the PortalUser class if the </returns>
        </member>
        <member name="M:Jenzabar.Portal.Framework.PortalPrincipal.GetUniqueUserList(Jenzabar.Portal.Framework.PortalPrincipal[])">
            <summary>
            Takes a list of Useers and Groups and makes a listing of the unique users directly in the list or members of one of the Groups in the list.
            </summary>
            <param name="usersAndGroups">The Users and Groups to make into a unique list of Users</param>
            <returns>A unique list of the Users that are either in the list directory, or a memeber of one or more of the Groups in the list.</returns>
        </member>
        <member name="M:Jenzabar.Portal.Framework.PortalPrincipal.GetUniqueUserPrincipalIDTable(Jenzabar.Portal.Framework.PortalPrincipal[])">
            <summary>
            Takes a list of Useers and Groups and makes a hashtable
            with key as UserID - value as GroupID
             of the unique users directly in the list or members of one of the Groups in the list.
            </summary>
            <param name="usersAndGroups">The Users and Groups to make into a unique list of Users</param>
            <returns>A unique list of the Users that are either in the list directory, or a memeber of one or more of the Groups in the list.</returns>
        </member>
        <member name="M:Jenzabar.Portal.Framework.PortalPrincipal.GetHashCode">
            <summary>
            Returns the hash code for this user or group.
            </summary>
            <returns>The hash code for this user or group.</returns>
        </member>
        <member name="M:Jenzabar.Portal.Framework.PortalPrincipal.Equals(System.Object)">
            <summary>
            Tests for equality to an object
            </summary>
            <param name="obj">The object to test for equality to this user or group</param>
            <returns>true if the object is a user or group that has the same SID (security identifier) as this, otherwise false</returns>
        </member>
        <member name="M:Jenzabar.Portal.Framework.PortalPrincipal.Equals(Jenzabar.Portal.Framework.PortalPrincipal)">
            <summary>
            Tests for equality to another user or group.
            </summary>
            <param name="obj">The user or gourp to test for equality</param>
            <returns>true if the user or group being tested has the same SID (security identifier) as this, otherwise false</returns>
        </member>
        <member name="M:Jenzabar.Portal.Framework.PortalPrincipal.SendMailSilent(Jenzabar.Portal.Framework.PortalUser,Jenzabar.Portal.Framework.PortalPrincipal[],Jenzabar.Portal.Framework.PortalPrincipal[],System.String,System.String,System.Web.HttpFileCollection)">
            <summary>
            Creates a new email message, and sends it.
            If error happened - publish, but not rethrow it.
            </summary>
            <param name="from">The email address to use in the "From" field, if null - default smtp address will be used</param>
            <param name="to">array of principals to send to</param>
            <param name="cc">array of principals to cc to</param>
            <param name="subject">The subject of the message.</param>
            <param name="message">The body of the message.</param>
            <param name="attachments">An HttpFileCollection containing files to send ass attachments with the messge or null to send no attachments.</param>
        </member>
        <member name="M:Jenzabar.Portal.Framework.PortalPrincipal.SendMail(Jenzabar.Portal.Framework.PortalUser,Jenzabar.Portal.Framework.PortalPrincipal[],Jenzabar.Portal.Framework.PortalPrincipal[],System.String,System.String,System.Web.HttpFileCollection)">
            <summary>
            Creates a new email message, and sends it.
            </summary>
            <param name="from">The email address to use in the "From" field, if null - default smtp address will be used</param>
            <param name="to">array of principals to send to</param>
            <param name="cc">array of principals to cc to</param>
            <param name="subject">The subject of the message.</param>
            <param name="message">The body of the message.</param>
            <param name="attachments">An HttpFileCollection containing files to send ass attachments with the messge or null to send no attachments.</param>
        </member>
        <member name="M:Jenzabar.Portal.Framework.PortalPrincipal.GetEmails(Jenzabar.Portal.Framework.PortalPrincipal[])">
            <summary>
            return string, contains comma separated user emails
            </summary>
            <param name="principals">array of users and groups, can be null</param>
            <returns>comma-separated user emails, or emty string if no one has email</returns>
        </member>
        <member name="P:Jenzabar.Portal.Framework.PortalPrincipal.SID">
            <summary>
            Gets and sets the SID (Security Identifier) for this User or Group
            </summary>
            <remarks>The Security Identifier of the User or Group.</remarks>
        </member>
        <member name="M:Jenzabar.Portal.Framework.PortalGroup.AddMember(Jenzabar.Portal.Framework.PortalPrincipal)">
            <summary>
            Adds the passed principal to this group's members list.
            </summary>
            <param name="member"></param>
        </member>
        <member name="M:Jenzabar.Portal.Framework.PortalGroup.RemoveMember(Jenzabar.Portal.Framework.PortalPrincipal)">
            <summary>
            Removes the passed principal from this group's members list.
            </summary>
            <param name="member"></param>
        </member>
        <member name="M:Jenzabar.Portal.Framework.PortalGroup.ModifyMembers(Jenzabar.Portal.Framework.PortalPrincipal[],Jenzabar.Portal.Framework.PortalPrincipal[])">
            <summary>
            Modify group members
            </summary>
            <param name="oldMembers">current group members</param>
            <param name="newMembers">new group members</param>
        </member>
        <member name="M:Jenzabar.Portal.Framework.PortalGroup.GetPrincipals">
            <summary>
            Gets the list of Users and Groups that are direct memebers of this PortalGroup.
            </summary>
            <returns>An array of Users and Groups that are members of this Group.</returns>
        </member>
        <member name="M:Jenzabar.Portal.Framework.PortalGroup.GetPortalUsers(System.Boolean)">
            <summary>
            If getEntireList is passed true, this method will return every PortalUser in this group and all of it's member groups. This method does many
            recursive loops to figure out group membership and care should be taken to limit the number of calls to this method.
            </summary>
            <param name="getEntireList">If this value is true, all sub groups of the this group will be returned. If false, only users that are direct
            members will be returned.</param>
            <returns></returns>
        </member>
        <member name="M:Jenzabar.Portal.Framework.PortalGroup.GetPortalUsers">
            <summary>
            Gets all of the PortalUsers which are stored as direct members of this group.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Jenzabar.Portal.Framework.PortalGroup.GetPortalGroups">
            <summary>
            Gets all of the PortalGroups which are stored as direct members of this group.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Jenzabar.Portal.Framework.PortalGroup.AddMembersToHashtable(System.Collections.Hashtable,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Adds unique Users and/or Groups to a hashtable, and optionaly runs recursivly through all groups that are members of this group.
            </summary>
            <param name="ht">The hashtable to add the Users and/or Groups to (the key is the DN for the User or Group, and the value is the instance of either the PortalUser or PortalPrincipal class)</param>
            <param name="addUsers">true to add Users to the hashtable</param>
            <param name="addGroups">true to add Groups to the hashtable</param>
            <param name="recursive">true to make this method run recursivly through all the groups that are a member of this groups</param>
        </member>
        <member name="M:Jenzabar.Portal.Framework.PortalGroup.FindByDN(System.String)">
            <summary>
            Locates a PortalGroup by it's distinguished name. This is the fastest method of accessing a PortalGroup.
            </summary>
            <param name="DN">The distinguished name of the PortalGroup to find.</param>
            <returns>The portal group for the Distinguished name, or null if nothing is found.</returns>
        </member>
        <member name="M:Jenzabar.Portal.Framework.PortalGroup.FindByPortalContext(Jenzabar.Portal.Framework.PortalContext)">
            <summary>
            Searches for the groups (roles) defined for a context.
            </summary>
            <param name="context">The context to find all the groups for.</param>
            <returns></returns>
        </member>
        <member name="M:Jenzabar.Portal.Framework.PortalGroup.FindByPortalContext(Jenzabar.Portal.Framework.PortalContext,System.String)">
            <summary>
            Locates a group within it's parent context by the name of the group.
            </summary>
            <param name="context">The context that the group is a memmer of.</param>
            <param name="groupName">The name of the group to get from the context.</param>
            <returns>The requested group, or null if no group exists for the specified context with a matching name.</returns>
        </member>
        <member name="M:Jenzabar.Portal.Framework.PortalGroup.Create(System.String,Jenzabar.Portal.Framework.PortalContext,System.Boolean)">
            <summary>
            create portal group
            </summary>
            <param name="groupName">group name</param>
            <param name="context">where to create</param>
            <param name="isSystemObject">if true - group is readonly from GUI, if false - users can edit/delete it</param>
            <returns></returns>
        </member>
        <member name="M:Jenzabar.Portal.Framework.PortalGroup.Delete">
            <summary>
            Deletes this Group and any children. Overriden cause we need to delete group membership from DB
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.PortalGroup.GenerateGroupMembershipData">
            <summary>
            Fills the appropriate table with information about which groups all users in current group belongs to.
            </summary>
        </member>
        <member name="P:Jenzabar.Portal.Framework.PortalGroup.Guests">
            <summary>
            Gets the PortalGroup (role) that represents all of the users that are browsing the site without being logged in.
            </summary>
        </member>
        <member name="P:Jenzabar.Portal.Framework.PortalGroup.Faculty">
            <summary>
            Gets the PortalGroup (role) that represents all of the users who are faculty
            </summary>
        </member>
        <member name="P:Jenzabar.Portal.Framework.PortalGroup.Staff">
            <summary>
            Gets the PortalGroup (role) that represents all of the users who are staff
            </summary>
        </member>
        <member name="P:Jenzabar.Portal.Framework.PortalGroup.Students">
            <summary>
            Gets the PortalGroup (role) that represents all of the users who are students
            </summary>
        </member>
        <member name="P:Jenzabar.Portal.Framework.PortalGroup.Users">
            <summary>
            Gets the PortalGroup (role) that represents all of the users that are browsing the site logged in as themselves.
            </summary>
        </member>
        <member name="P:Jenzabar.Portal.Framework.PortalGroup.Everyone">
            <summary>
            Gets the PortalGroup (role) that represents everyone browsing the site (both logged in and un authenticated users).
            </summary>
        </member>
        <member name="P:Jenzabar.Portal.Framework.PortalGroup.Administrators">
            <summary>
            Gets the PortalGroup (role) that represents administrators of the site.
            </summary>
        </member>
        <member name="T:Jenzabar.Portal.Framework.Data.PersistableObjectBase">
            <summary>
            The base class implementation of IPersistableObject
            </summary>
        </member>
        <member name="T:Jenzabar.Portal.Framework.Data.IPersistableObject">
            <summary>
            Must be implemented in order to support object persistance
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Data.IPersistableObject.Commit">
            <summary>
            Commits changes to an object to the data source
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Data.IPersistableObject.Commit(Jenzabar.Portal.Framework.Data.BatchToken)">
            <summary>
            Commits changes to an object to the data source and participates in a batch
            </summary>
            <param name="token">The token for the batch to participate in</param>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Data.IPersistableObject.Delete">
            <summary>
            Marks an object for deletion from the data source
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Data.IPersistableObject.Refresh">
            <summary>
            Forces the refreshing of data from the data source, bypassing caching where applicable
            </summary>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Data.IPersistableObject.ObjectPersistenceState">
            <summary>
            Gets the persistance state of the object
            </summary>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Data.IPersistableObject.ID">
            <summary>
            Gets the ID of the object
            </summary>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Data.IPersistableObject.ObjectData">
            <summary>
            Gets or sets the object's data
            </summary>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Data.IPersistableObject.SupportsTransactions">
            <summary>
            Gets whether or not the object supports transactions
            </summary>
        </member>
        <member name="E:Jenzabar.Portal.Framework.Data.IPersistableObject.OnCommit">
            <summary>
            Raised when an object has been commited to the data source
            </summary>
        </member>
        <member name="E:Jenzabar.Portal.Framework.Data.IPersistableObject.OnMarkedForDeletion">
            <summary>
            Raised when an object has been marked for deletion from the data source
            </summary>
        </member>
        <member name="E:Jenzabar.Portal.Framework.Data.IPersistableObject.OnRefresh">
            <summary>
            Raised when an object has been refreshed from the data source
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Data.PersistableObjectBase.#ctor">
            <summary>
            Constructs a new domain object
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Data.PersistableObjectBase.#ctor(Jenzabar.Portal.Framework.IParentObject)">
            <summary>
            Constructs a the persistable object base
            </summary>
            <param name="parentObject">The parent domain object</param>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Data.PersistableObjectBase.Initialize">
            <summary>
            Used internally to initialize the persistable object
            </summary>
            <remarks>
            Automatic schema populate and event handler setup occurs here
            </remarks>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Data.PersistableObjectBase.#ctor(Jenzabar.Portal.Framework.Data.ObjectDataStore)">
            <summary>
            Constructs a domain object with data that already exists in the data source
            </summary>
            <param name="objectData"></param>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Data.PersistableObjectBase.InitMembers">
            <summary>
            Overriden by inheriting classes to initialze members when Refresh is called
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Data.PersistableObjectBase.Commit">
            <summary>
            Commits changes to the domain object to the data source
            </summary>
            <remarks>
            Once this method is completed, the OnCommit event is raised.
            </remarks>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Data.PersistableObjectBase.Commit(Jenzabar.Portal.Framework.Data.BatchToken)">
            <summary>
            Commits changes to the domain object to the data source and participates in a batch
            </summary>
            <remarks>
            Once this method is completed, the OnCommit event is raised.
            </remarks>
            <param name="token">The token for the batch to participate in</param>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Data.PersistableObjectBase.Delete">
            <summary>
            Sets the persistence state of the domain object to MarkedForDeletion
            </summary>
            <remarks>
            This method does not mark the ObjectDataStore data for deletion. This must be done in overriden implementations which then call base.Delete().
            Once this method is completed, the OnMarkedForDeletion event is raised.
            </remarks>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Data.PersistableObjectBase.Refresh">
            <summary>
            Forces the domain object's data to be refresh from the data source
            </summary>
            <remarks>
            This method bypasses caching and forces the data to come directly from the data source.
            In addition, any changes previously made to the domain object are lost, and the persistence state is reset to Current.
            Once this method is completed, the OnCommit event is raised.
            </remarks>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Data.PersistableObjectBase.RegisterMember(Jenzabar.Portal.Framework.Data.IPersistableObject,Jenzabar.Portal.Framework.Data.ObjectPersistenceEventHandler)">
            <summary>
            Registers a domain object member variable so that state can be maintained and the objects can be automatically committed when necessary
            </summary>
            <param name="member">The domain object member variable</param>
            <param name="objectEventHandler">The event handler to call when the member is committed</param>
            <remarks>
            A member that is registered will automatically be commited when the parent object is commited.
            
            The event handler should be used to null out member variables that have been deleted from the datasource.
            </remarks>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Data.PersistableObjectBase.RegisterMember(Jenzabar.Portal.Framework.Data.IPersistableObject[],Jenzabar.Portal.Framework.Data.ObjectPersistenceEventHandler)">
            <summary>
            Registers a domain object array member variable so that state can be maintained and the objects can be automatically committed when necessary
            </summary>
            <param name="memberArray">The member variable which is an array of domain objects</param>
            <param name="objectEventHandler">The event handler to call when one of the domain objects is committed</param>
            <remarks>
            A member that is registered will automatically be commited when the parent object is commited.
            
            The event handler should be used to null out member variables that have been deleted from the datasource.
            </remarks>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Data.PersistableObjectBase.RegisterMember(Jenzabar.Portal.Framework.Data.IPersistableObject)">
            <summary>
            Registers a domain object member variable so that state can be maintained and the objects can be automatically committed when necessary
            </summary>
            <param name="member">The domain object member variable</param>
            <remarks>
            A member that is registered will automatically be commited when the parent object is commited.
            </remarks>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Data.PersistableObjectBase.RegisterMember(Jenzabar.Portal.Framework.Data.IPersistableObject[])">
            <summary>
            Registers a domain object array member variable so that state can be maintained and the objects can be automatically committed when necessary
            </summary>
            <param name="memberArray">The member variable which is an array of domain objects</param>
            <remarks>
            A member that is registered will automatically be commited when the parent object is commited.
            </remarks>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Data.PersistableObjectBase.UnRegisterMember(Jenzabar.Portal.Framework.Data.IPersistableObject,Jenzabar.Portal.Framework.Data.ObjectPersistenceEventHandler)">
            <summary>
            Removes the registration for a domain object member variable
            </summary>
            <param name="member">The domain object to unregister</param>
            <param name="objectEventHandler">The event handler originally passed when registering the domain object</param>
            <remarks>
            Members that are unregistered will no longer be commited when the parent is commited.
            UnRegisterMember is typically called when the member is no longer valid for the parent domain object, 
            like when the member is changed or deleted.
            </remarks>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Data.PersistableObjectBase.UnRegisterMember(Jenzabar.Portal.Framework.Data.IPersistableObject[],Jenzabar.Portal.Framework.Data.ObjectPersistenceEventHandler)">
            <summary>
            Removes the registration for a domain object member variable
            </summary>
            <param name="memberArray">The member domain object array to unregister</param>
            <param name="objectEventHandler">The event handler originally passed when registering the domain object array</param>
            <remarks>
            Members that are unregistered will no longer be commited when the parent is commited.
            UnRegisterMember is typically called when the member is no longer valid for the parent domain object, 
            like when the member is changed or deleted.
            </remarks>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Data.PersistableObjectBase.UnRegisterMember(Jenzabar.Portal.Framework.Data.IPersistableObject)">
            <summary>
            Removes the registration for a domain object member variable
            </summary>
            <param name="member">The domain object to unregister</param>
            <remarks>
            Members that are unregistered will no longer be commited when the parent is commited.
            UnRegisterMember is typically called when the member is no longer valid for the parent domain object, 
            like when the member is changed or deleted.
            </remarks>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Data.PersistableObjectBase.UnRegisterMember(Jenzabar.Portal.Framework.Data.IPersistableObject[])">
            <summary>
            Removes the registration for a domain object member variable
            </summary>
            <param name="memberArray">The member domain object array to unregister</param>
            <remarks>
            Members that are unregistered will no longer be commited when the parent is commited.
            UnRegisterMember is typically called when the member is no longer valid for the parent domain object, 
            like when the member is changed or deleted.
            </remarks>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Data.PersistableObjectBase.RegisterBatch(Jenzabar.Portal.Framework.Data.BatchToken)">
            <summary>
            Registers the domain object to participate in a batch
            </summary>
            <param name="token">The token for the batch to participate in</param>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Data.PersistableObjectBase.BatchCompleted(Jenzabar.Portal.Framework.Data.BatchTransactionResult)">
            <summary>
            Called when a batch that the domain object is participating in has been completed
            </summary>
            <remarks>
            This method is responsible for updating the persistence state of domain object during batch processing
            </remarks>
            <param name="result">The result of the batch</param>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Data.PersistableObjectBase.DataEventHandlerSetup">
            <summary>
            Establishes the handlers for data events such as RowChanged and RowDeleted
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Data.PersistableObjectBase.OnDataChanged(System.Object,System.Data.DataRowChangeEventArgs)">
            <summary>
            Handles the DataChanged event for the domain object's data table
            </summary>
            <remarks>
            This method is responsible for updating the persistence state of domain object
            </remarks>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Data.PersistableObjectBase.CheckStatus">
            <summary>
            Throws an exception if the state of the domain object is Deleted
            </summary>
            <remarks>
            This method should be called in any complex property or method that relies on data from the domain object.
            It does not need to be called if accessing data through the ObjectDataStore because the ObjectDataStore does this check automatically.
            </remarks>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Data.PersistableObjectBase.SaveToFileCabinetItem(Jenzabar.Portal.Framework.FileCabinetItem)">
            <summary>
            Uses the <see cref="T:Jenzabar.Portal.Framework.Data.IObjectDescriptor"/> for this object to save data from the <see cref="T:Jenzabar.Portal.Framework.Data.ObjectDataStore"/> into the Properties of the <see cref="T:Jenzabar.Portal.Framework.FileCabinetItem"/>.
            </summary>
            <param name="item">The <see cref="T:Jenzabar.Portal.Framework.FileCabinetItem"/> to save this objects data to.</param>
            <remarks>
            Override this method in your domain obejcts to provide custom save to FileCabinet functionality.
            </remarks>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Data.PersistableObjectBase.RestorePropertiesFromFileCabinetItem(Jenzabar.Portal.Framework.FileCabinetItem)">
            <summary>
            Uses the <see cref="T:Jenzabar.Portal.Framework.Data.IObjectDescriptor"/> for this object to read data from the Properties of the <see cref="T:Jenzabar.Portal.Framework.FileCabinetItem"/> into the <see cref="T:Jenzabar.Portal.Framework.Data.ObjectDataStore"/>
            </summary>
            <param name="item">The <see cref="T:Jenzabar.Portal.Framework.FileCabinetItem"/> to restore data from.</param>
            <remarks>
            Override this method in your domain obejcts to provide custom restore from FileCabinet functionality.
            </remarks>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Data.PersistableObjectBase.RestoreFromFileCabinetItem(Jenzabar.Portal.Framework.FileCabinetItem,System.Boolean)">
            <summary>
            Restores an item from data saved in the FileCabinet
            </summary>
            <param name="item">The <see cref="T:Jenzabar.Portal.Framework.FileCabinetItem"/> that holds the data for the object.</param>
            <param name="saveBackToFileCabinet"></param>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Data.PersistableObjectBase.Parse(System.String,System.Type)">
            <summary>
            Used to convert a string to a real datatype using the proper Parse method for that datatype
            </summary>
            <param name="val">The <see cref="T:System.String"/> to parse into the specified datatype</param>
            <param name="dataType">The <see cref="T:System.Type"/> to parse the string into</param>
            <returns>an instance of the specified datatype acquired by calling Parse on the specified <see cref="T:System.Type"/></returns>
        </member>
        <member name="E:Jenzabar.Portal.Framework.Data.PersistableObjectBase.OnCommit">
            <summary>
            Raised when the domain object has been committed to the data source
            </summary>
        </member>
        <member name="E:Jenzabar.Portal.Framework.Data.PersistableObjectBase.OnMarkedForDeletion">
            <summary>
            Raised when the domain object has been marked for deletion from the data source
            </summary>
        </member>
        <member name="E:Jenzabar.Portal.Framework.Data.PersistableObjectBase.OnRefresh">
            <summary>
            Raised when the domain object has been refresh from the data source
            </summary>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Data.PersistableObjectBase.ParentObject">
            <summary>
            Points to a parent object when applicable
            </summary>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Data.PersistableObjectBase.ID">
            <summary>
            Gets the id of the domain object. If this object is being stored in the FileCabinet this will be the id of the <see cref="T:Jenzabar.Portal.Framework.FileCabinetItem"/> that holds the data for this obejct in the FileCabinet.
            </summary>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Data.PersistableObjectBase.IsStoredInFileCabinet">
            <summary>
            True if this object is stored in the FileCabinet, otherwise false.
            </summary>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Data.PersistableObjectBase.ObjectDataMapper">
            <summary>
            Gets the data mapper for the domain object
            </summary>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Data.PersistableObjectBase.SupportsTransactions">
            <summary>
            Gets whether or not the data mapper for the domain object supports transactions
            </summary>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Data.PersistableObjectBase.ObjectPersistenceState">
            <summary>
            Gets the persistence state of the domain object
            </summary>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Data.PersistableObjectBase.ObjectData">
            <summary>
            The domain object's data
            </summary>
            <remarks>
            This should typically only be used by the persistence framework
            </remarks>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Data.PersistableObjectBase.ObjectDescriptor">
            <summary>
            Gets the <see cref="T:Jenzabar.Portal.Framework.Data.IObjectDescriptor"/> that describes the data storage needs of this object
            </summary>
            <remarks>
            The implementation of this property uses reflection to try to find a static field defined on subclasses, since the majority of the existing domain objects hold their object descriptor in a static private field.
            </remarks>
        </member>
        <member name="P:Jenzabar.Portal.Framework.PortalUserProperty.ID">
            <summary>
            Unique ID of object that can't be modified.
            </summary>
        </member>
        <member name="T:Jenzabar.Portal.Framework.Data.BatchManager">
            <summary>
            Manages batches and transactions and the thread level for the framework.
            Specifically, it allows for multiple domain object operations to be executed
            under a single batch or transaction so that failures can be rolled back
            if the underlying data store supports it.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Data.BatchManager.BeginBatch(System.String,System.Boolean)">
            <summary>
            Starts a new thread level batch
            </summary>
            <param name="batchName">The name of the batch to begin</param>
            <param name="withTransaction">If true, the batch is assigned a transaction</param>
            <returns>The token representing the new batch</returns>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Data.BatchManager.CommitBatch(Jenzabar.Portal.Framework.Data.BatchToken)">
            <summary>
            Commits the batch corrisponding to a token to the data store
            </summary>
            <param name="batchToken">The token corrisponding to the batch to commit</param>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Data.BatchManager.CancelBatch(Jenzabar.Portal.Framework.Data.BatchToken)">
            <summary>
            Cancels a batch and rolls back any transaction that corrisponds to the batch token
            </summary>
            <param name="batchToken">The token corrisponding to the batch to cancel</param>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Data.BatchManager.Dispose">
            <summary>
            Cancels all existing batches and frees the thread level memory
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Data.BatchManager.Dispose(System.Boolean)">
            <summary>
            Cancels all existing batches and frees the thread level memory
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Data.BatchManager.ClearThreadBatches">
            <summary>
            Cancels all existing batches and frees the thread level memory
            </summary>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Data.BatchManager.ThreadLevelBatches">
            <summary>
            All current thread level batches
            </summary>
        </member>
        <member name="T:Jenzabar.Portal.Framework.Data.BatchTransactionResult">
            <summary>
            The result of the batch transaction
            </summary>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Data.BatchTransactionResult.Committed">
            <summary>
            The transaction was successfully commited to the data source
            </summary>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Data.BatchTransactionResult.Rolledback">
            <summary>
            The transaction was rolled back and no changes were made to the data source
            </summary>
        </member>
        <member name="T:Jenzabar.Portal.Framework.Data.BatchInfo">
            <summary>
            Encapsulates all information about a batch, including any transactions associated with the batch
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Data.BatchInfo.#ctor(System.String,System.Boolean)">
            <summary>
            Constructs a new batch info object
            </summary>
            <param name="batchName">The name of the batch</param>
            <param name="requiresTransaction">Whether or not it requires a transaction</param>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Data.BatchInfo.SetTransactionComplete(Jenzabar.Portal.Framework.Data.BatchTransactionResult)">
            <summary>
            Notifies handlers of the OnTransactionCompleted event that the transaction is complete
            </summary>
            <param name="result">The result of the completed transaction</param>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Data.BatchInfo.Dispose">
            <summary>
            Rolls back any transactions associated with this batch, and sets the batch transaction state to complete
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Data.BatchInfo.Dispose(System.Boolean)">
            <summary>
            Rolls back any transactions associated with this batch, and sets the batch transaction state to complete
            </summary>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Data.BatchInfo.Token">
            <summary>
            The token that represents this batch
            </summary>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Data.BatchInfo.RequiresTransaction">
            <summary>
            Whether or not the batch requires a transaction
            </summary>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Data.BatchInfo.TransactionComplete">
            <summary>
            Whether or not the transacation associated with this batch is complete
            </summary>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Data.BatchInfo.Transaction">
            <summary>
            The transaction object associated with this batch
            </summary>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Data.BatchInfo.Connection">
            <summary>
            The connection object associated with this batch
            </summary>
        </member>
        <member name="T:Jenzabar.Portal.Framework.Data.BatchToken">
            <summary>
            Represents a batch that is managed by the BatchManager class
            </summary>
        </member>
        <member name="T:Jenzabar.Portal.Framework.Data.IObjectDataMapper">
            <summary>
            Required methods and properties for all object data mappers
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Data.IObjectDataMapper.Persist(Jenzabar.Portal.Framework.Data.IPersistableObject,Jenzabar.Portal.Framework.Data.BatchToken)">
            <summary>
            Persists the object to the data source
            </summary>
            <param name="obj">The object to persist</param>
            <param name="token">The batch token representing the batch to participate in</param>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Data.IObjectDataMapper.PopulateSchema(Jenzabar.Portal.Framework.Data.IPersistableObject)">
            <summary>
            Populates the schema of an object
            </summary>
            <param name="obj">The object to populate the schema for</param>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Data.IObjectDataMapper.FindByID(Jenzabar.Portal.Framework.Data.ObjectIdentifier)">
            <summary>
            Finds an object's data based on an ID
            </summary>
            <param name="id">The ID to search for</param>
            <returns>The object's data</returns>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Data.IObjectDataMapper.FindByID(Jenzabar.Portal.Framework.Data.ObjectIdentifier,System.Boolean)">
            <summary>
            Finds an object's data based on an ID
            </summary>
            <param name="id">The ID to search for</param>
            <param name="noCache">Obsolete. Not Used. Exists only to support previous interface.</param>
            <returns>The object's data</returns>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Data.IObjectDataMapper.FindByQuery(Jenzabar.Portal.Framework.Data.Querying.ObjectQuery)">
            <summary>
            Finds and object's data based on a query targeting that object
            </summary>
            <param name="query">The query that targets the object</param>
            <returns>The object's data</returns>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Data.IObjectDataMapper.FindByPartialQuery(Jenzabar.Portal.Framework.Data.Querying.ObjectQuery)">
            <summary>
            Finds part of an object's data based on a query targeting that object
            </summary>
            <param name="query">The query that targets the object's data</param>
            <returns>The requested data from the object(s)</returns>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Data.IObjectDataMapper.EvaluteQueryPart(Jenzabar.Portal.Framework.Data.Querying.IObjectQueryPart)">
            <summary>
            Evaluates a query part
            </summary>
            <param name="part">The query part</param>
            <returns>A string representing the evaluated query</returns>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Data.IObjectDataMapper.SupportsQuery(Jenzabar.Portal.Framework.Data.Querying.IObjectQueryPart)">
            <summary>
            Examines a query part to determine if the query can be evaluated
            </summary>
            <param name="part">The query part to be examined</param>
            <returns>True if supported, false otherwise</returns>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Data.IObjectDataMapper.SupportsTransactions">
            <summary>
            Whether or not the underlying data source supports transactions
            </summary>
        </member>
        <member name="T:Jenzabar.Portal.Framework.Security.Authorization.OperationAttribute">
            <summary>
            Represents a securable action that is performed by the target
            </summary>
            <remarks>
            Used internally to apply operations to various types, as well as a base class for PortletOperationAtttribute and ApplicationOperationAttribute
            </remarks>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Security.Authorization.OperationAttribute.#ctor(System.String,System.String,System.String,Jenzabar.Portal.Framework.Security.Authorization.OperationContainerType)">
            <summary>
            Constructs the attribute
            </summary>
            <param name="name">The name of the operation</param>
            <param name="friendlyName">The friendly name of the operation</param>
            <param name="description">A brief description of the operation</param>
            <param name="containerType">The type of the parent container for the operation</param>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Security.Authorization.OperationAttribute.Install(Jenzabar.Portal.Framework.Security.SecuredActiveDirectoryObject)">
            <summary>
            Creates the ad entries needed for the operation.
            </summary>
            <param name="obj">The object to install the operation for.</param>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Security.Authorization.OperationAttribute.Name">
            <summary>
            Gets the name of the operation
            </summary>
            <remarks>
            This is used during access checks
            </remarks>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Security.Authorization.OperationAttribute.FriendlyName">
            <summary>
            Gets the friendly name of the operation
            </summary>
            <remarks>
            This is displayed to the user during administration tasks
            </remarks>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Security.Authorization.OperationAttribute.Description">
            <summary>
            Gets the description of this operation
            </summary>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Security.Authorization.OperationAttribute.ContainerType">
            <summary>
            Gets the scope of this operation
            </summary>
        </member>
        <member name="T:Jenzabar.Portal.Framework.State.IPortletStateProvider">
            <summary>
            Stores and retrieves state information for data in a portlet.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.State.IPortletStateProvider.StoreState(System.Guid,System.Guid,System.Guid,System.String,System.String)">
            <summary>
            Saves state aassociated with a specific piece of data being displayed in an occurance of a portlet on a page.
            </summary>
            <param name="portletOccuanceId">The unique identifier for the occurance of the portlet that state information will be stored for.</param>
            <param name="userId">The unique identifier for the user that the state information will be stored for.</param>
            <param name="dataId">The unique identifier for the piece of data that the state information is related to.</param>
            <param name="key">The key used to store and retrieve the state information that is being stored.</param>
            <param name="value">The state information that is being stored.</param>
        </member>
        <member name="M:Jenzabar.Portal.Framework.State.IPortletStateProvider.StoreState(System.Guid,System.Guid,System.String,System.String)">
            <summary>
            Saves state associated with a specific occurance of a portlet on a page.
            </summary>
            <param name="portletOccuanceId">The unique identifier for the occurance of the portlet that state information will be stored for.</param>
            <param name="userId">The unique identifier for the user that the state information will be stored for.</param>
            <param name="key">The key used to store and retrieve the state information that is being stored.</param>
            <param name="value">The state information that is being stored.</param>
        </member>
        <member name="M:Jenzabar.Portal.Framework.State.IPortletStateProvider.FillState(System.Guid,System.Guid,Jenzabar.Portal.Framework.State.PortletState)">
            <summary>
            
            </summary>
            <param name="userId"></param>
            <param name="portletOccuanceId"></param>
            <param name="state"></param>
        </member>
        <member name="T:Jenzabar.Portal.Framework.PortletDisplay">
            <summary>
            Summary description for PortletDisplay.
            </summary>
        </member>
        <member name="T:Jenzabar.Portal.Framework.Web.ILinkable">
            <summary>
            Properties required by an object that can be linked to via a hyperlink
            </summary>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.ILinkable.URL">
            <summary>
            The relative URL to the resource. This will be resolved using Control.ResolveURL to include the application path if it is an application relative URL (starting with ~).
            </summary>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.ILinkable.ToolTip">
            <summary>
            The text for the tool tip that will be displayed to the user. The string used here will be in
            </summary>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.ILinkable.Text">
            <summary>
            The string that will be used as the text of the link.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.PortletDisplay.Delete">
            <summary>
            Permanantly removes this portlet or shrotcut from it's page and destroys it!
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.PortletDisplay.FindByID(Jenzabar.Portal.Framework.Data.ObjectIdentifier)">
            <summary>
            Searches for a Portlet or PortletShortcut with matching id.
            </summary>
            <param name="id">The id to search for.</param>
            <returns>A Portlet or PortletShortcut with matching id, or null if none was found.</returns>
        </member>
        <member name="M:Jenzabar.Portal.Framework.PortletDisplay.FindByDN(System.String)">
            <summary>
            Retrieves a Portlet or PortletShortcut based on its distinguished name (dn).
            </summary>
            <param name="dn">The distinguished name of the Portlet or PortletShortcut to find.</param>
            <returns>The Portlet or PortletShortcut with the specified distinguished name, or null if a Portlet or PortletShortcut was not found with the specified dn.</returns>
        </member>
        <member name="M:Jenzabar.Portal.Framework.PortletDisplay.FindByGuid(System.Guid)">
            <summary>
            Searches for a Portlet or PortletShortcut with a matching guid.
            </summary>
            <param name="guid">The guid to search for.</param>
            <returns>A Portlet or PortletShortcut with matching Guid, or null if no Portlet or PortletShortcut was found with a matching guid.</returns>
        </member>
        <member name="M:Jenzabar.Portal.Framework.PortletDisplay.FindByPage(Jenzabar.Portal.Framework.PortalPageInfo)">
            <summary>
            Searches for all of the Portlets and PortletShortcuts on a page.
            </summary>
            <param name="page">The page to find all the Portlets and PortletShortcuts for.</param>
            <returns>An array of all the Portlets and PortletShortcuts on the page specified.</returns>
        </member>
        <member name="M:Jenzabar.Portal.Framework.PortletDisplay.CompareTo(System.Object)">
            <summary>
            Provides the ability to sort portlet shortcuts by column and order
            </summary>
            <param name="obj">The portlet shortcut to compare to</param>
            <returns>0 if they are the same, -1 if this is less than the target, 1 if greater</returns>
            <remarks>
            When portlet shortcuts are sorted their column value is multipled by a factor of 100
            and the result is added to their order value. This results in portlet shortcuts being sorted
            first by column, then be their order within that column.
            
            The resulting array of portlet shortcuts will start with column 0, order 0. All portlet
            shortcuts within that column will follow according to their order. This continues on for
            each column.
            </remarks>
        </member>
        <member name="P:Jenzabar.Portal.Framework.PortletDisplay.Column">
            <summary>
            Gets and sets the column of the page that this Portlet or PortletShortcut will be displayed in. This property is 1 based
            </summary>
        </member>
        <member name="P:Jenzabar.Portal.Framework.PortletDisplay.Order">
            <summary>
            Gets and sets the position of this Portlet or PortletShortcut within it's column. Higher numbers are lower on the page.
            </summary>
        </member>
        <member name="P:Jenzabar.Portal.Framework.PortletDisplay.PortletTemplate">
            <summary>
            Gets the template used to create instances of this portlet or portlet shortcut.
            </summary>
        </member>
        <member name="P:Jenzabar.Portal.Framework.PortletDisplay.Portlet">
            <summary>
            Gets the portlet that this shortcut points to.
            </summary>
        </member>
        <member name="P:Jenzabar.Portal.Framework.PortletDisplay.ParentPage">
            <summary>
            Gets the page that this portlet or shortcut is on
            </summary>
        </member>
        <member name="P:Jenzabar.Portal.Framework.PortletDisplay.URL">
            <summary>
            Gets the application relative URL for this portlet display (portlet or shortcut).
            Ex. ~/Context1/Context2/Page.jnz?portlet=PortletName
            </summary>
            <remarks>
            THe application relative URL will include a ~ and will need to be turned into a full url by calling Page.
            </remarks>
        </member>
        <member name="T:Jenzabar.Portal.Framework.Web.PrincipalCollection">
            <summary>
            A list of PortalUsers snd PortalGroups associated with a domain object.
            </summary>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Web.PrincipalCollection._item">
            <summary>
            The item that this list is for
            </summary>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Web.PrincipalCollection._ADOItem">
            <summary>
            The ACtive Directory item the list is for
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.PrincipalCollection.Add(Jenzabar.Portal.Framework.PortalPrincipal)">
            <summary>
            Adds the PortalUser or PortalGroup to the collection.
            </summary>
            <param name="principal">The PortalUser or PortalGroup to add to the collection.</param>
            <returns>The index of the newly added PortalUser or PortalGroup.</returns>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.PrincipalCollection.AddRange(Jenzabar.Portal.Framework.PortalPrincipal[])">
            <summary>
            Adds multipull Users and Groups to the collection.
            </summary>
            <param name="principals">The Users and Groups to add to the collection.</param>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.PrincipalCollection.Contains(Jenzabar.Portal.Framework.PortalPrincipal)">
            <summary>
            Determines whether a PortalUser or PortalGroup is in the collection.
            </summary>
            <param name="principal">The PortalUser or PortalGroup to locate in the collection.</param>
            <returns>True if the PortalUser or PortalGroup exists in the collection, otherwise false.</returns>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.PrincipalCollection.Remove(Jenzabar.Portal.Framework.PortalPrincipal)">
            <summary>
            Removes the specified PortalUser or PortalGroup from the collection at the specified index.
            </summary>
            <param name="principal">The PortalUser or PortalGroup to remove from the collection.</param>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.PrincipalCollection.RemoveAll">
            <summary>
            Removes all PortalUsers and PortalGroups from the collection 
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.PrincipalCollection.RemoveAt(System.Int32)">
            <summary>
            Removes a PortalUser or PortalGroup from the collection at the specified index.
            </summary>
            <param name="index">The index of the PortalUser or PortalGroup to remove from the collection.</param>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.PrincipalCollection.GetItems(System.Type)">
            <summary>
            Returns the items of the collection in the type specified
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.PrincipalCollection.FindByItem(Jenzabar.Portal.Framework.Data.IPersistableObject)">
            <summary>
            Returns a collection of Users and Groups that have been granted access to the object supplied.
            </summary>
            <param name="item">The presistable object to retrieve the list of Userss and Groups for.</param>
            <returns>A list of PortalUsers snd PortalGroups associated with the supplied domain object.</returns>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.PrincipalCollection.FindPCObjectIdentifiersByItem(Jenzabar.Portal.Framework.Data.IPersistableObject)">
            <summary>
            Returns an array of ObjectIdentifers of the principals.  This is useful by not actually going to ADAM to 
            create ActiveDirectory objects if we're just trying to compare IDs
            </summary>
            <param name="item">The presistable object to retrieve the list of Userss and Groups for.</param>
            <returns>Returns an array of ObjectIdentifers of the principals</returns>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.PrincipalCollection.FindByItem(Jenzabar.Portal.Framework.Security.ActiveDirectoryObject,System.Int32)">
            <summary>
            Returns a collection of Users and Groups that have been granted access to the object supplied.
            </summary>
            <param name="item">The Active Directory object to retrieve the list of Users and Groups for.</param>
            <param name="key">The key in the SelectedPrincipal row</param>
            <returns>A list of PortalUsers snd PortalGroups associated with the supplied domain object.</returns>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.PrincipalCollection.HasAccessToPrincipal(Jenzabar.Portal.Framework.Security.ActiveDirectoryObject,Jenzabar.Portal.Framework.Security.ActiveDirectoryObject,System.Int32)">
            <summary>
            Returns bool as to whether a user has access to a selected principal
            </summary>
            <param name="userToView">The user requesting access to view a principal</param>
            <param name="currentUser">The AD object of the current user</param>
            <param name="key">The key in the SelectedPrincipal row</param>
            <returns>Boolean (can view/can't view)</returns>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.PrincipalCollection.UpdateValues(Jenzabar.Portal.Framework.Security.ActiveDirectoryObject,System.Int32,Jenzabar.Portal.Framework.PortalPrincipal[])">
            <summary>
            Updates the selected principals for this item and key
            </summary>
            <param name="item">An ActiveDirectoryObject to gather info from for the DB update</param>
            <param name="key">The key to update in the SelectedPrincipal Table</param>
            <param name="principals">The principals to add rows for in the SelectedPrincipals</param>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.PrincipalCollection.Item">
            <summary>
            Gets the Item that this list of Users and Groups is associated with.
            </summary>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.PrincipalCollection.ADOItem">
            <summary>
            Gets the Item that this list of Users and Groups is associated with.
            </summary>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.PrincipalCollection.List">
            <summary>
            Gets the items of the collection as a list.
            </summary>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.PrincipalCollection.Items">
            <summary>
            Gets the items of the collection as an array of PortalGroup objects
            </summary>
        </member>
        <member name="T:Jenzabar.Portal.Framework.Data.DataMapperUtilities">
            <summary>
            Utilities that are useful for all data mappers, regardless of their target data source
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Data.DataMapperUtilities.CombineObjectDataStores(Jenzabar.Portal.Framework.Data.ObjectDataStore,Jenzabar.Portal.Framework.Data.ObjectDataStore)">
            <summary>
            Combines the data in two ObjectDataStore instances into a single instance
            </summary>
            <remarks>
            Useful when dealing with IPersistableObjects that inherit from each other.
            Typically used to combine the data from inherited domain objects with derived domain objects.
            </remarks>
            <param name="baseDataStore">The data from the inherited domain object</param>
            <param name="derivedDataStore">The data from the dervied domain object</param>
            <returns>The combined data that can be used to populate the derived object</returns>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Data.DataMapperUtilities.CreateObjectDataStore(System.Data.DataTable,Jenzabar.Portal.Framework.Data.IObjectDescriptor)">
            <summary>
            Creates an ObjectDataStore from a DataTable
            </summary>
            <param name="objectDataTable">The DataTable to use to create the ObjectDataStore</param>
            <param name="objectDescriptor">The object descriptor for the target domain object</param>
            <returns>An ObjectDataStore populated with the DataTable</returns>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Data.DataMapperUtilities.CreateObjectDataStore(System.Data.DataTable[],Jenzabar.Portal.Framework.Data.IObjectDescriptor)">
            <summary>
            Creates an ObjectDataStore from an array of DataTables
            </summary>
            <param name="objectDataTables">The DataTables to use to create the ObjectDataStore</param>
            <param name="objectDescriptor">The object descriptor for the target domain object</param>
            <returns>An ObjectDataStore array, with each ObjectDataStore populated with a DataTable</returns>
            <remarks>
            All of the data tables must be data for the domain object that corrisponds to the object descriptor used
            </remarks>
        </member>
        <member name="T:Jenzabar.Portal.Framework.Security.ActiveDirectoryObjectInstantiationHandler">
            <summary>
            Signature for a method that creates instances of site structure objects from active directory entries.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Security.CacheStrategy.GetCurrentUserCredentials">
            <summary>
            Gets the UserCredentials of the user currently logged in , or guest if no user is logged in.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Jenzabar.Portal.Framework.Licensing.JicsLicense">
            <summary>
            Use this class to access licensing information.
            The CRM status can be obtained from:
              JicsLicense.Current.IsCrmEnabled(crmCode);
            The ERP can be obtained from:
              JicsLicense.Current.Erp.OptionCode
                 OptionCode returns a two-character code representing the ERP (EX, CX, QX, etc.)
              JicsLicense.Current.Erp.DisplayName
                 DisplayName returns the name that should be used if communicating the ERP to the user.  
                 Currently, it is identical to the OptionCode
            </summary>
        </member>
        <member name="T:Jenzabar.Portal.Framework.Data.Directory.IADConnectionInfo">
            <summary>
            Information about a directory connection
            </summary>
        </member>
        <member name="T:Jenzabar.Portal.Framework.Data.IConnectionInfo">
            <summary>
            Information about a data source connection
            </summary>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Data.IConnectionInfo.ConnectionString">
            <summary>
            The connection string for the data source
            </summary>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Data.IConnectionInfo.IsConnectionStringEncrypted">
            <summary>
            Whether or not the connection string is encrypted
            </summary>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Data.Directory.IADConnectionInfo.UserDN">
            <summary>
            Gets the distinguished name of the user associated with the connection
            </summary>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Data.Directory.IADConnectionInfo.Password">
            <summary>
            Gets the password for the user associated with the connection
            </summary>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Data.Directory.IADConnectionInfo.LinkedDatabaseConnectionInfo">
            <summary>
            Gets the linked database connection information
            </summary>
            <remarks>
            A linked database is required when data in the directory requires referential integrity with data in the database
            </remarks>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Data.Directory.IADConnectionInfo.IsUserDNEncrypted">
            <summary>
            Gets whether or not the distinguished name of the user is encrypted
            </summary>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Data.Directory.IADConnectionInfo.IsPasswordEncrypted">
            <summary>
            Gets whether or not the password for the user is encrypted
            </summary>
        </member>
        <member name="T:Jenzabar.Portal.Framework.Data.PersistableListBase">
            <summary>
            A base class implementation of the IPersistableList interface
            </summary>
        </member>
        <member name="T:Jenzabar.Portal.Framework.Data.IPersistableList">
            <summary>
            Required methods and properties for all persistable lists
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Data.IPersistableList.ListItemPersistenceState(Jenzabar.Portal.Framework.Data.ObjectIdentifier)">
            <summary>
            Gets the persistance state of an item in the list
            </summary>
            <param name="id">The id of the list item</param>
            <returns>The state of the item</returns>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Data.IPersistableList.ListItemPersistenceState(Jenzabar.Portal.Framework.Data.IPersistableObject)">
            <summary>
            Gets the persistance state of an item in the list
            </summary>
            <param name="obj">The persistable object that corrisponds to the list item</param>
            <returns>The state of the item</returns>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Data.IPersistableList.RegisterBatch(Jenzabar.Portal.Framework.Data.BatchToken)">
            <summary>
            Registers the list to participate in a batch
            </summary>
            <param name="token">The token for the batch to participate in</param>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Data.IPersistableList.ListData">
            <summary>
            Gets or sets the object's data
            </summary>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Data.IPersistableList.ObjectDescriptor">
            <summary>
            The object descriptor for the list
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Data.PersistableListBase.#ctor(System.Data.DataTable,Jenzabar.Portal.Framework.Data.IPersistableObject,Jenzabar.Portal.Framework.Data.IPropertyDescriptor,Jenzabar.Portal.Framework.Data.IPropertyDescriptor,System.Boolean)">
            <summary>
            Constructor
            </summary>
            <param name="listData">The list items data</param>
            <param name="parentObject">The parent domain object</param>
            <param name="parentIDProperty">The parent domain object's id property from the list's object descriptor</param>
            <param name="childIDProperty">The child domain object's id property from the list's object descriptor</param>
            <param name="lazyLoadObjects">Whether or not to lazy load the domain objects into the list</param>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Data.PersistableListBase.#ctor(System.Data.DataTable,Jenzabar.Portal.Framework.Data.IPersistableObject,Jenzabar.Portal.Framework.Data.IPropertyDescriptor,Jenzabar.Portal.Framework.Data.IPropertyDescriptor,System.Boolean,System.Boolean)">
            <summary>
            Constructor
            </summary>
            <param name="listData">The list items data</param>
            <param name="parentObject">The parent domain object</param>
            <param name="parentIDProperty">The parent domain object's id property from the list's object descriptor</param>
            <param name="childIDProperty">The child domain object's id property from the list's object descriptor</param>
            <param name="lazyLoadObjects">Whether or not to lazy load the domain objects into the list</param>
            <param name="autoCommit">Whether or not to automatically commit the list when the parent object is committed</param>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Data.PersistableListBase.FindListObject(Jenzabar.Portal.Framework.Data.ObjectIdentifier)">
            <summary>
            Find an individual domain object in the list
            </summary>
            <remarks>
            
            </remarks>
            <param name="id">The id of the domain object</param>
            <returns>The domain object if found, null otherwise</returns>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Data.PersistableListBase.LoadListObjects">
            <summary>
            Loads all domain objects into the list
            </summary>
            <remarks>
            The loading is done by calling the FindListObject method, passing the ID from each item in the list
            </remarks>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Data.PersistableListBase.OnParentPersistenceEvent(Jenzabar.Portal.Framework.Data.ObjectPersistenceEventArgs)">
            <summary>
            Used internally to listen for parent persistence events and commit the list if auto-commit is enabled
            </summary>
            <param name="e">The persistence event arguments</param>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Data.PersistableListBase.OnListItemPersistenceEvent(Jenzabar.Portal.Framework.Data.ObjectPersistenceEventArgs)">
            <summary>
            Used internally to listen for persistence events on the list itself and do any necessary cleanup
            </summary>
            <param name="e">The persistence event arguments</param>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Data.PersistableListBase.DataEventHandlerSetup(System.Data.DataTable)">
            <summary>
            Establishes the handlers for item events such as RowChanged and RowDeleted
            </summary>
            <param name="data">The data table to register with</param>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Data.PersistableListBase.RegisterBatch(Jenzabar.Portal.Framework.Data.BatchToken)">
            <summary>
            Registers the list to participate in a batch
            </summary>
            <param name="token">The token for the batch to participate in</param>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Data.PersistableListBase.BatchCompleted(Jenzabar.Portal.Framework.Data.BatchTransactionResult)">
            <summary>
            Called when a batch that the list is participating in has been completed
            </summary>
            <remarks>
            This method is responsible for updating the persistence state of list items during batch processing
            </remarks>
            <param name="result">The result of the batch</param>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Data.PersistableListBase.OnDataChanged(System.Object,System.Data.DataRowChangeEventArgs)">
            <summary>
            Handles the DataChanged event for the list items data table
            </summary>
            <remarks>
            This method is responsible for updating the persistence state of list items
            </remarks>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Data.PersistableListBase.ListItemPersistenceState(Jenzabar.Portal.Framework.Data.ObjectIdentifier)">
            <summary>
            Gets the persistence state of an item in the list
            </summary>
            <param name="id">The id of the domain object</param>
            <returns>The persistence state of the list item</returns>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Data.PersistableListBase.ListItemPersistenceState(Jenzabar.Portal.Framework.Data.IPersistableObject)">
            <summary>
            Gets the persistence state of an item in the list
            </summary>
            <param name="obj">The domain object in the list</param>
            <returns>The persistence state of the list item</returns>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Data.PersistableListBase.CleanUp">
            <summary>
            Cleans up objects and states after modifications have taken place
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Data.PersistableListBase.CopyTo(Jenzabar.Portal.Framework.Data.IPersistableObject[])">
            <summary>
            	Copies the entire <c>PersistableListBase</c> to a one-dimensional
            	<see cref="T:Jenzabar.Portal.Framework.Data.IPersistableObject"/> array.
            </summary>
            <param name="array">The one-dimensional <see cref="T:Jenzabar.Portal.Framework.Data.IPersistableObject"/> array to copy to.</param>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Data.PersistableListBase.CopyTo(Jenzabar.Portal.Framework.Data.IPersistableObject[],System.Int32)">
            <summary>
            	Copies the entire <c>PersistableListBase</c> to a one-dimensional
            	<see cref="T:Jenzabar.Portal.Framework.Data.IPersistableObject"/> array, starting at the specified index of the target array.
            </summary>
            <param name="array">The one-dimensional <see cref="T:Jenzabar.Portal.Framework.Data.IPersistableObject"/> array to copy to.</param>
            <param name="start">The zero-based index in <paramref name="array"/> at which copying begins.</param>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Data.PersistableListBase.Add(Jenzabar.Portal.Framework.Data.IPersistableObject)">
            <summary>
            	Adds a <see cref="T:Jenzabar.Portal.Framework.Data.IPersistableObject"/> to the end of the <c>PersistableListBase</c>.
            </summary>
            <param name="obj">The <see cref="T:Jenzabar.Portal.Framework.Data.IPersistableObject"/> to be added to the end of the <c>PersistableListBase</c>.</param>
            <returns>The index at which the value has been added.</returns>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Data.PersistableListBase.Contains(Jenzabar.Portal.Framework.Data.IPersistableObject)">
            <summary>
            	Determines whether a given <see cref="T:Jenzabar.Portal.Framework.Data.IPersistableObject"/> is in the <c>PersistableListBase</c>.
            </summary>
            <param name="obj">The <see cref="T:Jenzabar.Portal.Framework.Data.IPersistableObject"/> to check for.</param>
            <returns><c>true</c> if <paramref name="obj"/> is found in the <c>PersistableListBase</c>; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Data.PersistableListBase.IndexOf(Jenzabar.Portal.Framework.Data.IPersistableObject)">
            <summary>
            	Returns the zero-based index of the first occurrence of a <see cref="T:Jenzabar.Portal.Framework.Data.IPersistableObject"/>
            	in the <c>PersistableListBase</c>.
            </summary>
            <param name="obj">The <see cref="T:Jenzabar.Portal.Framework.Data.IPersistableObject"/> to locate in the <c>PersistableListBase</c>.</param>
            <returns>
            	The zero-based index of the first occurrence of <paramref name="obj"/> 
            	in the entire <c>PersistableListBase</c>, if found; otherwise, -1.
            </returns>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Data.PersistableListBase.Insert(System.Int32,Jenzabar.Portal.Framework.Data.IPersistableObject)">
            <summary>
            	Inserts an element into the <c>PersistableListBase</c> at the specified index.
            </summary>
            <param name="index">The zero-based index at which <paramref name="obj"/> should be inserted.</param>
            <param name="obj">The <see cref="T:Jenzabar.Portal.Framework.Data.IPersistableObject"/> to insert.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            	<para><paramref name="index"/> is less than zero</para>
            	<para>-or-</para>
            	<para><paramref name="index"/> is equal to or greater than <see cref="P:Jenzabar.Portal.Framework.Data.PersistableListBase.Count"/>.</para>
            </exception>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Data.PersistableListBase.Remove(Jenzabar.Portal.Framework.Data.IPersistableObject)">
            <summary>
            	Removes the first occurrence of a specific <see cref="T:Jenzabar.Portal.Framework.Data.IPersistableObject"/> from the <c>PersistableListBase</c>.
            </summary>
            <param name="obj">The <see cref="T:Jenzabar.Portal.Framework.Data.IPersistableObject"/> to remove from the <c>PersistableListBase</c>.</param>
            <exception cref="T:System.ArgumentException">
            	The specified <see cref="T:Jenzabar.Portal.Framework.Data.IPersistableObject"/> was not found in the <c>PersistableListBase</c>.
            </exception>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Data.PersistableListBase.RemoveAt(System.Int32)">
            <summary>
            	Removes the element at the specified index of the <c>PersistableListBase</c>.
            </summary>
            <param name="index">The zero-based index of the element to remove.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            	<para><paramref name="index"/> is less than zero</para>
            	<para>-or-</para>
            	<para><paramref name="index"/> is equal to or greater than <see cref="P:Jenzabar.Portal.Framework.Data.PersistableListBase.Count"/>.</para>
            </exception>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Data.PersistableListBase.GetEnumerator">
            <summary>
            	Returns an enumerator that can iterate through the <c>PersistableListBase</c>.
            </summary>
            <returns>An <see cref="T:Jenzabar.Portal.Framework.Data.PersistableListBase.Enumerator"/> for the entire <c>PersistableListBase</c>.</returns>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Data.PersistableListBase.ValidateIndex(System.Int32)">
            <exception cref="T:System.ArgumentOutOfRangeException">
            	<para><paramref name="index"/> is less than zero</para>
            	<para>-or-</para>
            	<para><paramref name="index"/> is equal to or greater than <see cref="P:Jenzabar.Portal.Framework.Data.PersistableListBase.Count"/>.</para>
            </exception>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Data.PersistableListBase.ValidateIndex(System.Int32,System.Boolean)">
            <exception cref="T:System.ArgumentOutOfRangeException">
            	<para><paramref name="index"/> is less than zero</para>
            	<para>-or-</para>
            	<para><paramref name="index"/> is equal to or greater than <see cref="P:Jenzabar.Portal.Framework.Data.PersistableListBase.Count"/>.</para>
            </exception>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Data.PersistableListBase.ListDataMapper">
            <summary>
            Gets the data mapper for the domain object
            </summary>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Data.PersistableListBase.ListData">
            <summary>
            The data for the list items
            </summary>
            <remarks>
            This should typically only be used by the persistence framework
            </remarks>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Data.PersistableListBase.ObjectDescriptor">
            <summary>
            The list's object descriptor
            </summary>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Data.PersistableListBase.Count">
            <summary>
            	Gets the number of elements actually contained in the <c>PersistableListBase</c>.
            </summary>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Data.PersistableListBase.IsSynchronized">
            <summary>
            	Gets a value indicating whether access to the collection is synchronized (thread-safe).
            </summary>
            <returns>true if access to the ICollection is synchronized (thread-safe); otherwise, false.</returns>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Data.PersistableListBase.SyncRoot">
            <summary>
            	Gets an object that can be used to synchronize access to the collection.
            </summary>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Data.PersistableListBase.Item(System.Int32)">
            <summary>
            	Gets or sets the <see cref="T:Jenzabar.Portal.Framework.Data.IPersistableObject"/> at the specified index.
            </summary>
            <param name="index">The zero-based index of the element to get or set.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            	<para><paramref name="index"/> is less than zero</para>
            	<para>-or-</para>
            	<para><paramref name="index"/> is equal to or greater than <see cref="P:Jenzabar.Portal.Framework.Data.PersistableListBase.Count"/>.</para>
            </exception>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Data.PersistableListBase.Item(Jenzabar.Portal.Framework.Data.ObjectIdentifier)">
            <summary>
            	Gets or sets the <see cref="T:Jenzabar.Portal.Framework.Data.IPersistableObject"/> with the specific Guid.
            </summary>
            <param name="id">The ID of the element to get.</param>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Data.PersistableListBase.IsFixedSize">
            <summary>
            	Gets a value indicating whether the collection has a fixed size.
            </summary>
            <value>true if the collection has a fixed size; otherwise, false. The default is false</value>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Data.PersistableListBase.IsReadOnly">
            <summary>
            	gets a value indicating whether the IList is read-only.
            </summary>
            <value>true if the collection is read-only; otherwise, false. The default is false</value>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Data.PersistableListBase.Capacity">
            <summary>
            	Gets or sets the number of elements the <c>PersistableListBase</c> can contain.
            </summary>
        </member>
        <member name="T:Jenzabar.Portal.Framework.Data.PersistableListBase.IPersistableListBaseEnumerator">
            <summary>
            	Supports type-safe iteration over a <see cref="T:Jenzabar.Portal.Framework.Data.PersistableListBase"/>.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Data.PersistableListBase.IPersistableListBaseEnumerator.MoveNext">
            <summary>
            	Advances the enumerator to the next element in the collection.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            	The collection was modified after the enumerator was created.
            </exception>
            <returns>
            	<c>true</c> if the enumerator was successfully advanced to the next element; 
            	<c>false</c> if the enumerator has passed the end of the collection.
            </returns>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Data.PersistableListBase.IPersistableListBaseEnumerator.Reset">
            <summary>
            	Sets the enumerator to its initial position, before the first element in the collection.
            </summary>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Data.PersistableListBase.IPersistableListBaseEnumerator.Current">
            <summary>
            	Gets the current element in the collection.
            </summary>
        </member>
        <member name="T:Jenzabar.Portal.Framework.Data.PersistableListBase.Enumerator">
            <summary>
            	Supports simple iteration over a <see cref="T:Jenzabar.Portal.Framework.Data.PersistableListBase"/>.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Data.PersistableListBase.Enumerator.#ctor(Jenzabar.Portal.Framework.Data.PersistableListBase)">
            <summary>
            	Initializes a new instance of the <c>Enumerator</c> class.
            </summary>
            <param name="tc"></param>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Data.PersistableListBase.Enumerator.MoveNext">
            <summary>
            	Advances the enumerator to the next element in the collection.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            	The collection was modified after the enumerator was created.
            </exception>
            <returns>
            	<c>true</c> if the enumerator was successfully advanced to the next element; 
            	<c>false</c> if the enumerator has passed the end of the collection.
            </returns>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Data.PersistableListBase.Enumerator.Reset">
            <summary>
            	Sets the enumerator to its initial position, before the first element in the collection.
            </summary>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Data.PersistableListBase.Enumerator.Current">
            <summary>
            	Gets the current element in the collection.
            </summary>
        </member>
        <member name="T:Jenzabar.Portal.Framework.Data.Querying.PartialQueryResult">
            <summary>
            Summary description for PartialQueryResult.
            </summary>
        </member>
        <member name="T:Jenzabar.Portal.Framework.Data.Querying.IObjectQueryPart">
            <summary>
            The required methods and properties for an object that acts as a query part for an ObjectQuery
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Data.Querying.IObjectQueryPart.Evaluate">
            <summary>
            Evaluates the query part using the parent query's target object's object data mapper
            </summary>
            <returns>
            A string that represents either the results of a query if the query part is a query
            or a query in a form that can be evaluated by the parent query's target object's data mapper
            </returns>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Data.Querying.IObjectQueryPart.ParentQuery">
            <summary>
            Gets or sets the query that contains the conditional
            </summary>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Data.Querying.IObjectQueryPart.Type">
            <summary>
            Gets the query part type
            </summary>
            <remarks>
            This will always return ObjectQueryPartType.Grouping for a conditional group
            </remarks>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Data.Querying.IObjectQueryPart.IsEvaluated">
            <summary>
            Gets whether or not the query part has been evaluated
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Data.Querying.PartialQueryResult.#ctor(Jenzabar.Portal.Framework.Data.Querying.ObjectQuery)">
            <summary>
            Constructs a partial query result
            </summary>
            <param name="query">The query the partial query result is a part of</param>
            <remarks>
            The query cannot be a full query. Only partial or sub queries can evaluate to partial query results
            </remarks>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Data.Querying.PartialQueryResult.#ctor(Jenzabar.Portal.Framework.Data.Querying.ObjectQuery,System.Data.DataTable)">
            <summary>
            Constructs a partial query result
            </summary>
            <param name="query">The query the partial query result is a part of</param>
            <param name="results">The results from the evaluated partial query</param>
            <remarks>
            The query cannot be a full query. Only partial or sub queries can evaluate to partial query results
            </remarks>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Data.Querying.PartialQueryResult.Init(Jenzabar.Portal.Framework.Data.Querying.ObjectQuery)">
            <summary>
            Used internally to initialize the partial query results
            </summary>
            <param name="query">The query the partial query result is a part of</param>
            <remarks>
            The query cannot be a full query. Only partial or sub queries can evaluate to partial query results
            </remarks>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Data.Querying.PartialQueryResult.Evaluate">
            <summary>
            Evaluates the query part using the parent query's target object's object data mapper
            </summary>
            <returns>
            A string that represents either the results of a query if the query part is a query
            or a query in a form that can be evaluated by the parent query's target object's data mapper
            </returns>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Data.Querying.PartialQueryResult.Item(Jenzabar.Portal.Framework.Data.IPropertyDescriptor,System.Int32)">
            <summary>
            Gets the value that corrisponds to a property of a domain object
            </summary>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Data.Querying.PartialQueryResult.Item(System.Int32,System.Int32)">
            <summary>
            Gets the value that corrisponds to a column ordinal
            </summary>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Data.Querying.PartialQueryResult.Count">
            <summary>
            Gets the number of results in the partial query
            </summary>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Data.Querying.PartialQueryResult.Results">
            <summary>
            Gets or sets the results of the partial query
            </summary>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Data.Querying.PartialQueryResult.TargetObject">
            <summary>
            Gets the object descriptor for the target of the object query
            </summary>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Data.Querying.PartialQueryResult.TargetProperties">
            <summary>
            Gets an array of properties to be returned in the results
            </summary>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Data.Querying.PartialQueryResult.ParentQuery">
            <summary>
            Gets or sets the query that contains the partial results
            </summary>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Data.Querying.PartialQueryResult.IsEvaluated">
            <summary>
            Gets whether or not the query part has been evaluated
            </summary>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Data.Querying.PartialQueryResult.Type">
            <summary>
            Gets the query part type
            </summary>
            <remarks>
            This will always return ObjectQueryPartType.Result for a partial query result
            </remarks>
        </member>
        <member name="P:Jenzabar.Portal.Framework.PortalContextCreationInfo.ShowSubContextsInSideBar">
            <summary>
            true to display a list of links to the contexts below this one in the sidebar of the site, otherwise contexts below the one created are not shown in the sidebar.
            </summary>
        </member>
        <member name="P:Jenzabar.Portal.Framework.PortalContextCreationInfo.Order">
            <summary>
            Gets and sets the order for this context when displayed in a list. higher numbers are lower in the list
            </summary>
        </member>
        <member name="P:Jenzabar.Portal.Framework.PortalContextCreationInfo.ChildContexts">
            <summary>
            Gets a listing of the contexts that should be created under this one when it is created.
            </summary>
        </member>
        <member name="P:Jenzabar.Portal.Framework.PortalContextCreationInfo.Pages">
            <summary>
            Gets a listing of all the pages that should be created in this context when it is created.
            </summary>
        </member>
        <member name="T:Jenzabar.Portal.Framework.SiteCreationInfo">
            <summary>
            This class is used to create or update the root context of the site.
            </summary>
        </member>
        <member name="P:Jenzabar.Portal.Framework.SiteCreationInfo.Applications">
            <summary>
            Gets a listing of the Applications that should be installed.
            </summary>
        </member>
        <member name="P:Jenzabar.Portal.Framework.SiteCreationInfo.PortletTemplates">
            <summary>
            Gets a listing of the Templates that should be installed.
            </summary>
        </member>
        <member name="P:Jenzabar.Portal.Framework.PortalContextCreationInfoCollection.System#Collections#ICollection#IsSynchronized">
            <summary>
            Gets a value indicating wether access to the PortalContextCreationInfoCollection is syncronized (thread-safe)
            </summary>
        </member>
        <member name="P:Jenzabar.Portal.Framework.PortalContextCreationInfoCollection.Count">
            <summary>
            Gets the number of <see cref="T:Jenzabar.Portal.Framework.PortalContextCreationInfo"/> objects are contained in this collection.
            </summary>
        </member>
        <member name="T:Jenzabar.Portal.Framework.IOrderable">
            <summary>
            Interfaces used in OrderUtilities - 
            if ADAM or Domain object suppoesed to be orderable - it should implement those
            </summary>
        </member>
        <member name="T:Jenzabar.Portal.Framework.State.ClientSideStateHandler">
            <summary>
            Processes messages from the client's user agent (browser) that contain information about state changes that happen purly on the client's computer and do not require a postback.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.State.ClientSideStateHandler.#ctor">
            <summary>
            Creates a new instance of the Jenzabar.Portal.Framework.State.ClientSideStateHandler class.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.State.ClientSideStateHandler.ProcessRequest(System.Web.HttpContext)">
            <summary>
            Reads some of the querystring variables, using them to save state that changed on the client side, and was persisted to the server through a hiden iframe.
            </summary>
            <param name="context">The HttpContext to be processed.</param>
        </member>
        <member name="P:Jenzabar.Portal.Framework.State.ClientSideStateHandler.IsReusable">
            <summary>
            always gets true, allowing this HttpHandler to be re-used if it is defined by in the web.config (will not be re-used if defined by an ashx file)
            </summary>
        </member>
        <member name="T:Jenzabar.Framework.Licensing.ILicenseComponent">
            <summary>
            Summary description for ILicenseComponent.
            </summary>
        </member>
        <member name="T:Jenzabar.Portal.Framework.INameValueDataSource">
            <summary>
            Interface for name/value pairs.
            </summary>
        </member>
        <member name="P:Jenzabar.Portal.Framework.INameValueDataSource.ID">
            <summary>
            The ID of the name/value pair
            </summary>
        </member>
        <member name="P:Jenzabar.Portal.Framework.INameValueDataSource.Name">
            <summary>
            Gets or sets the name
            </summary>
        </member>
        <member name="P:Jenzabar.Portal.Framework.INameValueDataSource.Value">
            <summary>
            Gets or sets the value
            </summary>
        </member>
        <member name="P:Jenzabar.Portal.Framework.INameValueDataSource.Scope">
            <summary>
            Gets the scope of the name value pair
            </summary>
        </member>
        <member name="T:Jenzabar.Portal.Framework.PortalPageInfoCreationInfo">
            <summary>
            Represents all of the information that is needed to create a new page.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.PortalPageInfoCreationInfo.Create(Jenzabar.Portal.Framework.PortalContext)">
            <summary>
            Creates a new page using the information provided to this object in the context specified.
            </summary>
            <param name="createUnder"></param>
            <returns></returns>
        </member>
        <member name="P:Jenzabar.Portal.Framework.PortalPageInfoCreationInfo.PageLayout">
            <summary>
            Gets and sets the layout (2 column 2 column, 3 column etc) that the page will have when created.
            </summary>
        </member>
        <member name="P:Jenzabar.Portal.Framework.PortalPageInfoCreationInfo.Portlets">
            <summary>
            Gets a listing of the portlets that should be created on the new page when it is created.
            </summary>
        </member>
        <member name="T:Jenzabar.Framework.Licensing.LicenseOptionSetBase">
            <summary>
            Summary description for LicenseOptionSetBase.
            </summary>
        </member>
        <member name="T:Jenzabar.Framework.Licensing.LicenseComponentBase">
            <summary>
            Summary description for LicenseComponentBase.
            </summary>
        </member>
        <member name="T:Jenzabar.Portal.Framework.IGroupMembershipModule">
            <summary>
            Defines methods that a class must implement to be made aware of changes in group membership.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.IGroupMembershipModule.OnMemberAdded(Jenzabar.Portal.Framework.PortalGroup,Jenzabar.Portal.Framework.PortalPrincipal)">
            <summary>
            Called when a <see cref="T:Jenzabar.Portal.Framework.PortalUser"/> or <see cref="T:Jenzabar.Portal.Framework.PortalGroup"/> is added to a <see cref="T:Jenzabar.Portal.Framework.PortalGroup"/>.
            </summary>
            <param name="addedTo">The <see cref="T:Jenzabar.Portal.Framework.PortalGroup"/> the <see cref="T:Jenzabar.Portal.Framework.PortalUser"/> or <see cref="T:Jenzabar.Portal.Framework.PortalGroup"/> is being added to.</param>
            <param name="member">The <see cref="T:Jenzabar.Portal.Framework.PortalUser"/> or <see cref="T:Jenzabar.Portal.Framework.PortalGroup"/> that is being added.</param>
        </member>
        <member name="M:Jenzabar.Portal.Framework.IGroupMembershipModule.OnMemberRemoved(Jenzabar.Portal.Framework.PortalGroup,Jenzabar.Portal.Framework.PortalPrincipal)">
            <summary>
            Called when a <see cref="T:Jenzabar.Portal.Framework.PortalUser"/> or <see cref="T:Jenzabar.Portal.Framework.PortalGroup"/> is removed from a <see cref="T:Jenzabar.Portal.Framework.PortalGroup"/>
            </summary>
            <param name="removedFrom">The <see cref="T:Jenzabar.Portal.Framework.PortalGroup"/> the <see cref="T:Jenzabar.Portal.Framework.PortalUser"/> or <see cref="T:Jenzabar.Portal.Framework.PortalGroup"/> is being removed from.</param>
            <param name="member">The <see cref="T:Jenzabar.Portal.Framework.PortalUser"/> or <see cref="T:Jenzabar.Portal.Framework.PortalGroup"/> that is being removed.</param>
        </member>
        <member name="T:Jenzabar.Portal.Framework.GroupMembershipModule">
            <summary>
            Provides a base class for components that need to be aware of changes in group membership.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.GroupMembershipModule.OnMemberAdded(Jenzabar.Portal.Framework.PortalGroup,Jenzabar.Portal.Framework.PortalPrincipal)">
            <summary>
            Called when a <see cref="T:Jenzabar.Portal.Framework.PortalUser"/> or <see cref="T:Jenzabar.Portal.Framework.PortalGroup"/> is added to a <see cref="T:Jenzabar.Portal.Framework.PortalGroup"/>.
            </summary>
            <param name="addedTo">The <see cref="T:Jenzabar.Portal.Framework.PortalGroup"/> the <see cref="T:Jenzabar.Portal.Framework.PortalUser"/> or <see cref="T:Jenzabar.Portal.Framework.PortalGroup"/> is being added to.</param>
            <param name="member">The <see cref="T:Jenzabar.Portal.Framework.PortalUser"/> or <see cref="T:Jenzabar.Portal.Framework.PortalGroup"/> that is being added.</param>
        </member>
        <member name="M:Jenzabar.Portal.Framework.GroupMembershipModule.OnMemberRemoved(Jenzabar.Portal.Framework.PortalGroup,Jenzabar.Portal.Framework.PortalPrincipal)">
            <summary>
            Called when a <see cref="T:Jenzabar.Portal.Framework.PortalUser"/> or <see cref="T:Jenzabar.Portal.Framework.PortalGroup"/> is removed from a <see cref="T:Jenzabar.Portal.Framework.PortalGroup"/>
            </summary>
            <param name="removedFrom">The <see cref="T:Jenzabar.Portal.Framework.PortalGroup"/> the <see cref="T:Jenzabar.Portal.Framework.PortalUser"/> or <see cref="T:Jenzabar.Portal.Framework.PortalGroup"/> is being removed from.</param>
            <param name="member">The <see cref="T:Jenzabar.Portal.Framework.PortalUser"/> or <see cref="T:Jenzabar.Portal.Framework.PortalGroup"/> that is being removed.</param>
        </member>
        <member name="T:Jenzabar.Portal.Framework.Data.Database.DBPrimitiveDataMapper">
            <summary>
            Manages the transport of domain object data and schema to and from the database for CRUD operations
            </summary>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Data.Database.DBPrimitiveDataMapper._enableConstraints">
            <summary>
            used to enable disable constrains before actual update.
            For DO based on tables should be true.
            For DO based on views where tables joined have different PKs should be false.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Data.Database.DBPrimitiveDataMapper.#ctor(Jenzabar.Portal.Framework.Data.Database.IDBConnectionInfo,System.String)">
            <summary>
            Constructs the DBPrimitiveDataMapper
            </summary>
            <param name="connectionInfo">The database connection information</param>
            <param name="sqlSelectQuery">The SELECT clause to be used for the domain object</param>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Data.Database.DBPrimitiveDataMapper.#ctor(Jenzabar.Portal.Framework.Data.Database.IDBConnectionInfo,Jenzabar.Portal.Framework.Data.Database.IDBObjectDescriptor)">
            <summary>
            Constructs the DBPrimitiveDataMapper
            </summary>
            <param name="connectionInfo">The database connection information</param>c
            <param name="objectDescriptor">The object descriptor for the type of domain object to work with</param>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Data.Database.DBPrimitiveDataMapper.#ctor(Jenzabar.Portal.Framework.Data.Database.IDBConnectionInfo,Jenzabar.Portal.Framework.Data.IPropertyDescriptor,Jenzabar.Portal.Framework.Data.IPropertyDescriptor)">
            <summary>
            Constructs the DBPrimitiveDataMapper for use with persistable list domain objects
            </summary>
            <param name="connectionInfo">The database connection information</param>
            <param name="parentIDProperty">The parent object's ID property</param>
            <param name="childIDProperty">The child object's ID property</param>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Data.Database.DBPrimitiveDataMapper.OpenConnection">
            <summary>
            Used internally to open connections
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Data.Database.DBPrimitiveDataMapper.CloseConnection">
            <summary>
            Used internally to close connections
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Data.Database.DBPrimitiveDataMapper.OpenBatchConnection(Jenzabar.Portal.Framework.Data.BatchToken)">
            <summary>
            Used internally to open batch/transaction connections
            </summary>
            <param name="token">The batch token to use</param>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Data.Database.DBPrimitiveDataMapper.CloseBatchConnection">
            <summary>
            Used internally to close batch transactions
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Data.Database.DBPrimitiveDataMapper.DataSetup">
            <summary>
            Used internally to setup the internal data structures and connections used during various CRUD and schema operations
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Data.Database.DBPrimitiveDataMapper.Persist(Jenzabar.Portal.Framework.Data.IPropertyDescriptor,Jenzabar.Portal.Framework.Data.IPropertyDescriptor,System.Data.DataTable,Jenzabar.Portal.Framework.Data.BatchToken)">
            <summary>
            Saves a persistable list to the database
            </summary>
            <param name="parentIDProperty">The parent ID property</param>
            <param name="childIDProperty">The child ID property</param>
            <param name="listData">The data for the list</param>
            <param name="batchToken">The batch token if participating in a batch</param>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Data.Database.DBPrimitiveDataMapper.Persist(Jenzabar.Portal.Framework.Data.IObjectDescriptor,System.Data.DataTable,Jenzabar.Portal.Framework.Data.BatchToken)">
            <summary>
            Saves a persistable object to the database
            </summary>
            <param name="objectDescriptor">The object descriptor for the domain object whose data is to be saved</param>
            <param name="objectData">The data for the domain object</param>
            <param name="batchToken">The batch token if participating in a batch</param>
            <remarks>
            The objectData should represent only the data for the object described by the objectDescriptor.
            If the domain object consists of multiple, inherited parts, those parts must be persisted seperately
            </remarks>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Data.Database.DBPrimitiveDataMapper.DoPersist(System.Data.DataTable,Jenzabar.Portal.Framework.Data.BatchToken,System.String)">
            <summary>
            Used internally to persist data to the database
            </summary>
            <param name="objectData">The data to persist</param>
            <param name="batchToken">The batch token if participating in a batch</param>
            <param name="cacheKey">Obsolete. Not Used. The cache key to be used for caching operations</param>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Data.Database.DBPrimitiveDataMapper.DoPersist(System.Data.DataTable,Jenzabar.Portal.Framework.Data.BatchToken)">
            <summary>
            Used internally to persist data to the database
            </summary>
            <param name="objectData">The data to persist</param>
            <param name="batchToken">The batch token if participating in a batch</param>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Data.Database.DBPrimitiveDataMapper.HasChanges(System.Data.DataTable)">
            <summary>
            Used internally to determine if a data table has been modified since it was populated
            </summary>
            <param name="data">The data table to check for modifacations</param>
            <returns>True if the table has been modified, false otherwise</returns>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Data.Database.DBPrimitiveDataMapper.PopulateSchema(System.Data.DataTable@,System.Boolean)">
            <summary>
            Popuplates the schema of a data table using the object descriptors used when constructing the primitive data mapper
            </summary>
            <param name="objectData">The data table the populate the schema into</param>
            <param name="createNewRow">If true, a new blank row will be added to the data table</param>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Data.Database.DBPrimitiveDataMapper.FindByID(System.Guid,Jenzabar.Portal.Framework.Data.Database.IDBObjectDescriptor,Jenzabar.Portal.Framework.Data.Database.IDBConnectionInfo)">
            <summary>
            Finds the data for a domain object by its ID
            </summary>
            <param name="id">The ID of the domain object</param>
            <param name="objectDescriptor">The object descriptor for the domain object whose data is to be found</param>
            <param name="connectionInfo">The connection information for the database where the domain object lives</param>
            <returns>A data table that contains the data for the domain object</returns>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Data.Database.DBPrimitiveDataMapper.FindByID(System.Guid,Jenzabar.Portal.Framework.Data.Database.IDBObjectDescriptor,Jenzabar.Portal.Framework.Data.Database.IDBConnectionInfo,System.Boolean)">
            <summary>
            Finds the data for a domain object by its ID
            </summary>
            <param name="id">The ID of the domain object</param>
            <param name="objectDescriptor">The object descriptor for the domain object whose data is to be found</param>
            <param name="connectionInfo">The connection information for the database where the domain object lives</param>
            <param name="noCache">Obsolete. Not Used. Exists only to support previous interface.</param>
            <returns>A data table that contains the data for the domain object</returns>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Data.Database.DBPrimitiveDataMapper.FindByID(System.Guid,Jenzabar.Portal.Framework.Data.Database.IDBObjectDescriptor,Jenzabar.Portal.Framework.Data.Database.IDBConnectionInfo,System.String)">
            <summary>
            Finds the data for a domain object by its ID
            </summary>
            <param name="id">The ID of the domain object</param>
            <param name="objectDescriptor">The object descriptor for the domain object whose data is to be found</param>
            <param name="connectionInfo">The connection information for the database where the domain object lives</param>
            <param name="sqlQuery">The query to use to find the domain object</param>
            <returns>A data table that contains the data for the domain object</returns>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Data.Database.DBPrimitiveDataMapper.FindByID(System.Guid,Jenzabar.Portal.Framework.Data.Database.IDBObjectDescriptor,Jenzabar.Portal.Framework.Data.Database.IDBConnectionInfo,System.String,System.Boolean)">
            <summary>
            Used to find the data for a domain object using its ID
            </summary>
            <param name="id">The ID of the domain object</param>
            <param name="objectDescriptor">The object descriptor for the domain object whose data is to be found</param>
            <param name="connectionInfo">The connection information for the database where the domain object lives</param>
            <param name="sqlQuery">The query to use to find the list domain object's data</param>
            <param name="noCache">Obsolete. Not Used. Exists only to support previous interface.</param>
            <returns>A data table containing the object's data</returns>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Data.Database.DBPrimitiveDataMapper.DoFindByID(System.Guid,Jenzabar.Portal.Framework.Data.Database.IDBConnectionInfo,Jenzabar.Portal.Framework.Data.Database.IDBObjectDescriptor)">
            <summary>
            Used internally to find an object's from its ID
            </summary>
            <param name="id">The ID of the domain object</param>
            <param name="objectDescriptor">The object descriptor for the domain object whose data is to be found</param>
            <param name="connectionInfo">The connection information for the database where the domain object lives</param>
            <returns>A data table containing the object's data</returns>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Data.Database.DBPrimitiveDataMapper.DoFindByID(System.Guid,Jenzabar.Portal.Framework.Data.Database.IDBConnectionInfo,System.String)">
            <summary>
            Used internally to find an object's from its ID
            </summary>
            <param name="id">The ID of the domain object</param>
            <param name="connectionInfo">The connection information for the database where the domain object lives</param>
            <param name="sqlQuery">The query to use to find the domain object</param>
            <returns>A data table containing the object's data</returns>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Data.Database.DBPrimitiveDataMapper.FindByQuery(System.String,Jenzabar.Portal.Framework.Data.Database.IDBConnectionInfo)">
            <summary>
            Finds an object's data based on a SQL query
            </summary>
            <param name="queryText">The SQL query</param>
            <param name="connectionInfo">The connection information for the database where the domain object lives</param>
            <returns>A data table containing the objects' data</returns>
            <remarks>
            Since this method may return the data for more than one domain object, each row of the returned data table represents a domain object in the database
            A method such as DataMapperUtilities.ExpandDataTable should be used to turn this into multiple DataTable objects, which can then be turned into
            object data stores using the DataMapperUtilities.CreateObjectDataStore method.
            </remarks>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Data.Database.DBPrimitiveDataMapper.GetColumnValue(System.Data.DataRow,System.Int32)">
            <summary>
            Used internally to get the value of a column even if that value has been deleted
            </summary>
            <param name="row">The row to obtain the value from</param>
            <param name="columnOrdinal">The ordinal of the column</param>
            <returns>The value</returns>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Data.Database.DBPrimitiveDataMapper.HandleSqlException(System.Data.SqlClient.SqlException,System.String)">
            <summary>
            Used internally to handle various SQL exceptions
            </summary>
            <param name="ex">The SQL exception to wrap</param>
            <param name="message">A message to add to the exception</param>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Data.Database.DBPrimitiveDataMapper.HandleSqlException(System.Data.SqlClient.SqlException)">
            <summary>
            Used internally to handle various SQL exceptions
            </summary>
            <param name="ex">The SQL exception to wrap</param>
        </member>
        <member name="T:Jenzabar.Portal.Framework.Web.PortalURL">
            <summary>
            Represents a URL in the portal and provides various methods for working and parsing portal URLs
            </summary>
            <remarks>
            Portal URL use the following formatting.
            
            Contexts are surrounded by / (like directories) - /ContextName/.
            Pages have extention .jnz - PageName.jnz.
            Portlets are passed as parameter
            
            The URL can end in a context, a page, or a portlet.
            
            If the URL ends in a context, the user will be redirected to the redirection
            target for the context.
            
            If the URL ends in a page, the page is loaded.
            
            If the URL ends in a portlet, the page the portlet is on is loaded and the portlet is in a maximized state.
            </remarks>
            <example>
            "/#AppName#/" - Navigates to the root portal homepage
            "/#AppName#/ContextName1/" - Navigates to the redirection target for the context "ContextName1".
            "/#AppName#/ContextName1/ContextName2/PageName.jnz" - Navigates to the page "PageName".
            "/#AppName#/ContextName1/ContextName2/PageName.jnz?portlet=PortletName" - Navigates to the page "PageName" and maximizes the portlet "PortletName".
            where #AppName# is virtual directory name for JICS app
            </example>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.PortalURL.#ctor(System.String)">
            <summary>
            Constructs a portal URL that points to a context
            </summary>
            <param name="PortalContext">The context name</param>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.PortalURL.#ctor(System.String,System.String)">
            <summary>
            Constructs a portal URL that points to a page
            </summary>
            <param name="PortalContext">The name of the context that contains the page</param>
            <param name="Page">The page name</param>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.PortalURL.#ctor(System.String,System.String,System.String)">
            <summary>
            Constructs a portal URL that points to a portlet
            </summary>
            <param name="PortalContext">The name of the context that contains the page</param>
            <param name="Page">The name of the page on which the portlet is located</param>
            <param name="Portlet">The portlet name</param>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.PortalURL.#ctor(System.String,System.String,System.String,System.String[])">
            <summary>
            Constructs a portal URL that points to a portlet
            </summary>
            <param name="PortalContext">The name of the context that contains the page</param>
            <param name="Page">The name of the page on which the portlet is located</param>
            <param name="Portlet">The portlet name</param>
            <param name="options">The query string options to append to the URL</param>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.PortalURL.#ctor(System.String,System.String,System.String,System.String[],System.Boolean)">
            <summary>
            Used internally to initialize the portal URL
            </summary>
            <param name="PortalContext">The name of the context that contains the page</param>
            <param name="Page">The name of the page on which the portlet is located</param>
            <param name="Portlet">The portlet name</param>
            <param name="options">The query string options to append to the URL</param>
            <param name="isProcessedURL">Flags the URL as a URL to be processed</param>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.PortalURL.ToURL">
            <summary>
            Gets the string representation of the URL
            </summary>
            <returns>The URL</returns>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.PortalURL.Encode(System.String)">
            <summary>
            Encodes a portion of a URL to be used in a portal url
            </summary>
            <param name="url">The portion of the url to encode to a usable string</param>
            <returns>a string that can be used for a url in the portal</returns>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.PortalURL.ChangeContextToRoot">
            <summary>
            changes context to emty string - root one;
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.PortalURL.Parse(System.Uri)">
            <summary>
            Parses a URL into a portal URL
            </summary>
            <param name="url">The URL to process</param>
            <returns>A portal URL instance</returns>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.PortalURL.GetHashCode">
            <summary>
            Gets a hash code that uniquely identifies a URL
            </summary>
            <returns>The hash code</returns>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.PortalURL.op_Equality(Jenzabar.Portal.Framework.Web.PortalURL,Jenzabar.Portal.Framework.Web.PortalURL)">
            <summary>
            Allows for the comparison of two URLs for equality
            </summary>
            <param name="o1">The first URL</param>
            <param name="o2">The second URL</param>
            <returns>True if all parts of the URL are the same, false otherwise</returns>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.PortalURL.op_Inequality(Jenzabar.Portal.Framework.Web.PortalURL,Jenzabar.Portal.Framework.Web.PortalURL)">
            <summary>
            Allows for the comparison of two URLs for equality
            </summary>
            <param name="o1">The first URL</param>
            <param name="o2">The second URL</param>
            <returns>True if any part of the URLs differ, true otherwise</returns>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.PortalURL.Equals(System.Object)">
            <summary>
            Allows for the comparison of two URLs for equality
            </summary>
            <param name="obj">The URL to compare to</param>
            <returns>True if all parts of the URL are the same, false otherwise</returns>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.PortalURL.Empty">
            <summary>
            Gets a portal URL that points to the portal homepage
            </summary>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.PortalURL.IsProcessedURL">
            <summary>
            Gets whether or not the URL is a URL that is processed by the portal module
            </summary>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.PortalURL.PortalContext">
            <summary>
            Gets the full path to the context the URL points to
            </summary>
            <example>
            "/ContextName1/ContextName2/TargetContext"
            </example>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.PortalURL.Page">
            <summary>
            Gets the page that the URL points to
            </summary>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.PortalURL.Portlet">
            <summary>
            Gets the portlet the URL points to
            </summary>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.PortalURL.Options">
            <summary>
            Gets the query string options for the URL
            </summary>
        </member>
        <member name="T:Jenzabar.Framework.Licensing.License">
            <summary>
            Summary description for License.
            </summary>
        </member>
        <member name="T:Jenzabar.Portal.Framework.Data.Database.DBConnectionInfo">
            <summary>
            Connection information for a database
            </summary>
        </member>
        <member name="T:Jenzabar.Portal.Framework.Data.Database.IDBConnectionInfo">
            <summary>
            Information about a database connection
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Data.Database.DBConnectionInfo.#ctor(System.String,System.Boolean)">
            <summary>
            Constructs the DBConnectionInfo class
            </summary>
            <param name="connectionString">The connection string for the database, including any login information</param>
            <param name="isEncrypted">Whether or not the connection string is encrypted</param>
            <example>
            Example connection string:
            "User Id=USER_NAME;password=PASSWORD;Initial Catalog=DATABASE_NAME;Data Source=SERVER_NAME;"
            </example>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Data.Database.DBConnectionInfo.ConnectionString">
            <summary>
            Gets the connection string for the database
            </summary>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Data.Database.DBConnectionInfo.IsConnectionStringEncrypted">
            <summary>
            Gets whether or not the connection string is encrypted
            </summary>
        </member>
        <member name="T:Jenzabar.Framework.Licensing.LicenseOptionSet_SingleSelect">
            <summary>
            Summary description for LicenseOptionSetExclusive.
            </summary>
        </member>
        <member name="T:Jenzabar.Portal.Framework.Data.Database.DBDataMapperUtilities">
            <summary>
            Utilities for use in the data mapper for the database
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Data.Database.DBDataMapperUtilities.BuildObjectSQL(Jenzabar.Portal.Framework.Data.IObjectDescriptor,System.String@,System.String@)">
            <summary>
            Builds the full SELECT SQL statement for a particular domain object
            </summary>
            <param name="objectDescriptor">The object descriptor for the domain object</param>
            <param name="selectStatement">A string to store the select statement in</param>
            <param name="whereClause">A string to store the where clause in</param>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Data.Database.DBDataMapperUtilities.BuildObjectSQL(Jenzabar.Portal.Framework.Data.IPropertyDescriptor[],System.String@,System.String@)">
            <summary>
            Builds the full SELECT SQL statement for a particular domain object
            </summary>
            <param name="properties">The properties to include in the select statement</param>
            <param name="selectStatement">A string to store the select statement in</param>
            <param name="whereClause">A string to store the where clause in</param>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Data.Database.DBDataMapperUtilities.BuildObjectSQLSelect(Jenzabar.Portal.Framework.Data.IObjectDescriptor,Jenzabar.Portal.Framework.Data.IPropertyDescriptor[])">
            <summary>
            Builds the SELECT statement only for a particular domain object
            </summary>
            <param name="objectDescriptor">The object descriptor for the domain object</param>
            <param name="properties">The properties to include in the select statement</param>
            <returns>The SELECT statement</returns>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Data.Database.DBDataMapperUtilities.BuildObjectSQLWhere(Jenzabar.Portal.Framework.Data.IObjectDescriptor)">
            <summary>
            Builds the WHERE clause of the SELECT statement for a particular domain object
            </summary>
            <param name="objectDescriptor">The object descriptor for the domain object</param>
            <returns>The where clause of the SELECT statement</returns>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Data.Database.DBDataMapperUtilities.BuildListSQL(Jenzabar.Portal.Framework.Data.IPropertyDescriptor,Jenzabar.Portal.Framework.Data.IPropertyDescriptor,System.String@,System.String@)">
            <summary>
            Builds the full SELECT statement for a persistable list domain object
            </summary>
            <param name="parentIDProperty">The property ID of the parent</param>
            <param name="childIDProperty">The property ID of the child</param>
            <param name="selectStatement">A string to store the select statement in</param>
            <param name="whereClause">A string to store the where clause in</param>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Data.Database.DBDataMapperUtilities.PopulateObjectSchema(Jenzabar.Portal.Framework.Data.IPersistableObject,Jenzabar.Portal.Framework.Data.IObjectDescriptor,Jenzabar.Portal.Framework.Data.Database.DBPrimitiveDataMapper)">
            <summary>
            Populates the schema for a persistable object
            </summary>
            <param name="obj">The object to populate</param>
            <param name="objectDescriptor">The object descriptor for the domain object</param>
            <param name="primitiveDataMapper">The primitive data mapper to use to populate the schema</param>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Data.Database.DBDataMapperUtilities.PopulateObjectSchema(Jenzabar.Portal.Framework.Data.ObjectDataStore,Jenzabar.Portal.Framework.Data.IObjectDescriptor,Jenzabar.Portal.Framework.Data.Database.DBPrimitiveDataMapper)">
            <summary>
            Populates the schema for a object data store
            </summary>
            <param name="objData">The object data store to populate</param>
            <param name="objectDescriptor">The object descriptor for the domain object</param>
            <param name="primitiveDataMapper">The primitive data mapper to use to populate the schema</param>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Data.Database.DBDataMapperUtilities.PopulateListSchema(Jenzabar.Portal.Framework.Data.IPersistableList,Jenzabar.Portal.Framework.Data.Database.DBPrimitiveDataMapper)">
            <summary>
            Populates the schema for a persistable list
            </summary>
            <param name="list">The persistable list to populate</param>
            <param name="primitiveDataMapper">The primitive data mapper to use to populate the schema</param>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Data.Database.DBDataMapperUtilities.ObjectFindByID(Jenzabar.Portal.Framework.Data.IObjectDescriptor,Jenzabar.Portal.Framework.Data.ObjectIdentifier,Jenzabar.Portal.Framework.Data.Database.IDBConnectionInfo)">
            <summary>
            Finds a persistable object using its ID
            </summary>
            <param name="objectDescriptor">The object descriptor for the domain object to find</param>
            <param name="id">The ID of the domain object to find</param>
            <param name="connectionInfo">The connection information to use to find the domain object</param>
            <returns>The object data store for the domain object</returns>
            <remarks>
            A null object data store will be returned if no object is found
            The select statement used is automatically generated via the object descriptor
            </remarks>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Data.Database.DBDataMapperUtilities.ObjectFindByID(Jenzabar.Portal.Framework.Data.IObjectDescriptor,Jenzabar.Portal.Framework.Data.ObjectIdentifier,Jenzabar.Portal.Framework.Data.Database.IDBConnectionInfo,System.Boolean)">
            <summary>
            Finds a persistable object using its ID
            </summary>
            <param name="objectDescriptor">The object descriptor for the domain object to find</param>
            <param name="id">The ID of the domain object to find</param>
            <param name="connectionInfo">The connection information to use to find the domain object</param>
            <param name="noCache">Obsolete. Not Used. Exists only to support previous interface.</param>
            <returns>The object data store for the domain object</returns>
            <remarks>
            A null object data store will be returned if no object is found
            The select statement used is automatically generated via the object descriptor
            </remarks>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Data.Database.DBDataMapperUtilities.ObjectFindByID(Jenzabar.Portal.Framework.Data.IObjectDescriptor,Jenzabar.Portal.Framework.Data.ObjectIdentifier,Jenzabar.Portal.Framework.Data.Database.IDBConnectionInfo,System.String,System.String)">
            <summary>
            Finds a persistable object using its ID
            </summary>
            <param name="objectDescriptor">The object descriptor for the domain object to find</param>
            <param name="id">The ID of the domain object to find</param>
            <param name="connectionInfo">The connection information to use to find the domain object</param>
            <param name="selectQuery">The select statement to use to find the object</param>
            <param name="whereClause">The where caluse to use the find the object</param>
            <returns>The object data store for the domain object</returns>
            <remarks>
            A null object data store will be returned if no object is found
            </remarks>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Data.Database.DBDataMapperUtilities.ObjectFindByID(Jenzabar.Portal.Framework.Data.IObjectDescriptor,Jenzabar.Portal.Framework.Data.ObjectIdentifier,Jenzabar.Portal.Framework.Data.Database.IDBConnectionInfo,System.String,System.String,System.Boolean)">
            <summary>
            Finds a persistable object using its ID
            </summary>
            <param name="objectDescriptor">The object descriptor for the domain object to find</param>
            <param name="id">The ID of the domain object to find</param>
            <param name="connectionInfo">The connection information to use to find the domain object</param>
            <param name="selectQuery">The select statement to use to find the object</param>
            <param name="whereClause">The where caluse to use the find the object</param>
            <param name="noCache">Obsolete. Not Used. Exists only to support previous interface.</param>
            <returns>The object data store for the domain object</returns>
            <remarks>
            A null object data store will be returned if no object is found
            </remarks>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Data.Database.DBDataMapperUtilities.ListFindByID(Jenzabar.Portal.Framework.Data.IPropertyDescriptor,Jenzabar.Portal.Framework.Data.IPropertyDescriptor,Jenzabar.Portal.Framework.Data.ObjectIdentifier,Jenzabar.Portal.Framework.Data.Database.IDBConnectionInfo)">
            <summary>
            Finds the list data by the parent ID
            </summary>
            <param name="parentIDProperty">The ID property of the parent</param>
            <param name="courseIDProperty">The ID property of the child</param>
            <param name="id">The ID of the parent</param>
            <param name="connectionInfo">The connection information to use to find the list data</param>
            <returns>The list data</returns>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Data.Database.DBDataMapperUtilities.ListFindByID(Jenzabar.Portal.Framework.Data.ObjectIdentifier,Jenzabar.Portal.Framework.Data.Database.IDBConnectionInfo,System.String,System.String)">
            <summary>
            Finds the list data by the parent ID
            </summary>
            <param name="id">The ID of the parent</param>
            <param name="connectionInfo">The connection information to use to find the list data</param>
            <param name="selectQuery">The select statement to use to find the list data</param>
            <param name="whereClause">The where caluse to use the find the list data</param>
            <returns>The list data</returns>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Data.Database.DBDataMapperUtilities.FindByQuery(Jenzabar.Portal.Framework.Data.Querying.ObjectQuery,Jenzabar.Portal.Framework.Data.Database.IDBConnectionInfo)">
            <summary>
            Finds domain objects that match a particular query
            </summary>
            <param name="query">The query to use to find the object(s)</param>
            <param name="databaseConnectionInfo">The connection information to use to find the target of the query</param>
            <returns>An array of results</returns>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Data.Database.DBDataMapperUtilities.FindByPartialQuery(Jenzabar.Portal.Framework.Data.Querying.ObjectQuery,Jenzabar.Portal.Framework.Data.Database.IDBConnectionInfo)">
            <summary>
            Finds a portions of a domain objects that match a particular query
            </summary>
            <param name="query">The query to use to find the object(s)</param>
            <param name="databaseConnectionInfo">The connection information to use to find the target of the query</param>
            <returns>A partial query result</returns>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Data.Database.DBDataMapperUtilities.SupportsQuery(Jenzabar.Portal.Framework.Data.Querying.IObjectQueryPart)">
            <summary>
            Determines if a query part is supported by the datasource (in this case, the database)
            </summary>
            <param name="part">The query part</param>
            <returns>True if it is supported, false otherwise</returns>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Data.Database.DBDataMapperUtilities.EvaluateQueryPart(Jenzabar.Portal.Framework.Data.Querying.IObjectQueryPart,Jenzabar.Portal.Framework.Data.IObjectDataMapper)">
            <summary>
            Processes a query part and turns it into a result or a query that the containing query can process
            </summary>
            <param name="part">The query part to evaluate</param>
            <param name="objectDataMapper">The object data mapper to use to process the query</param>
            <returns>A string that represents the evaluated query</returns>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Data.Database.DBDataMapperUtilities.ConvertQueryOperator(Jenzabar.Portal.Framework.Data.Querying.ObjectQueryOperator)">
            <summary>
            Converts a query operator into the operator recognized by the database
            </summary>
            <param name="op">The operator to convert</param>
            <returns>The converted operator</returns>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Data.Database.DBDataMapperUtilities.ConvertQueryModifier(Jenzabar.Portal.Framework.Data.Querying.ObjectQueryModifier)">
            <summary>
            Converts a query modifier into the operator recognized by the database
            </summary>
            <param name="modifier">The modifier to convert</param>
            <returns>The converted modifier</returns>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Data.Database.DBDataMapperUtilities.FormatObjectProperty(Jenzabar.Portal.Framework.Data.IPropertyDescriptor)">
            <summary>
            Formats the object property so that is it recognized by the database
            </summary>
            <param name="property">The property to format</param>
            <returns>The formatted property</returns>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Data.Database.DBDataMapperUtilities.ExpandDataTable(System.Data.DataTable)">
            <summary>
            Creates a new DataTable for each of the rows in a different DataTable
            </summary>
            <param name="objectRows">The DataTable whose rows will be turned into DataTables</param>
            <returns>An array of DataTables, with each DataTable containing one row from the source DataTable</returns>
            <remarks>
            This method is specific to the database. It should not be used with the directory.
            Use ADDataMapperUtilities.ExpandDataTable instead.
            </remarks>
        </member>
        <member name="T:Jenzabar.Portal.Framework.Web.PortletInfoAttribute">
            <summary>
            Provides install time information to the Portal framewok about a portlet that is tagged with this attribute.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Web.PortletInfoAttribute.#ctor(System.String,System.String)">
            <summary>
            Provides install time information to the Portal framewok about a portlet that is tagged with this attribute.
            </summary>
            <param name="systemName">The name used for this portlet in the system. This will not be globalized, and can be used to locate the template for this portlet by using PortletTemplate.FindByName.</param>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.PortletInfoAttribute.ApplicationName">
            <summary>
            Gets the name of the application the portlet is part of.
            </summary>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Web.PortletInfoAttribute.SystemName">
            <summary>
            Gets the system name for the portlet. This is not globalized, and can be used to find the portlet template for this portlet.
            </summary>
        </member>
        <member name="T:Jenzabar.Portal.Framework.PortletShortcutCreationInfo">
            <summary>
            Summary description for PortletShortcutCreationInfo.
            </summary>
        </member>
        <member name="T:Jenzabar.Portal.Framework.PortletDisplayCreationInfo">
            <summary>
            Provides information about how to create Portlets and Portlet Shortcuts.
            </summary>
            <remarks>
            This creation info can be used over an over to create portlets or portlet shortcuts on different pages that will all 
            be the same. To use it create a new instance, set any properties that you need to change from 
            the defaults and call the Create method, passing the page to create a portlet on.
            <seealso cref="T:Jenzabar.Portal.Framework.PortletCreationInfo"/>
            <seealso cref="T:Jenzabar.Portal.Framework.PortletShortcutCreationInfo"/>
            </remarks>
        </member>
        <member name="M:Jenzabar.Portal.Framework.PortletDisplayCreationInfo.Create(Jenzabar.Portal.Framework.PortalPageInfo)">
            <summary>
            Creates a portlet or portlet shortcut on the page specified using the information provided to this object.
            </summary>
            <param name="pageToCreateOn">The page to create the new portlet or portlet shortcut on.</param>
            <returns>The newly created portlet or portlet shortcut.</returns>
        </member>
        <member name="P:Jenzabar.Portal.Framework.PortletDisplayCreationInfo.Order">
            <summary>
            [1 based] Gets and sets the  order that the portlet appears in on the page. A lower number here places the portlet closer to the top of the page than a portlet with a greater Order number. The default is 1.
            </summary>
        </member>
        <member name="P:Jenzabar.Portal.Framework.PortletDisplayCreationInfo.Column">
            <summary>
            [1 based] Gets and sets the index of the column to place this portlet in. The default is 1.
            </summary>
        </member>
        <member name="T:Jenzabar.Portal.Framework.NameValueType">
            <summary>
            The type of the name/value pairs
            </summary>
        </member>
        <member name="F:Jenzabar.Portal.Framework.NameValueType.ApplicationPreference">
            <summary>
            A user specific name/value pair for an application
            </summary>
        </member>
        <member name="F:Jenzabar.Portal.Framework.NameValueType.ApplicationSetting">
            <summary>
            A name/value pair for an application
            </summary>
        </member>
        <member name="F:Jenzabar.Portal.Framework.NameValueType.PortletPreference">
            <summary>
            A user specific name/value pair for a portlet
            </summary>
        </member>
        <member name="F:Jenzabar.Portal.Framework.NameValueType.PortletSetting">
            <summary>
            A name/value pair for a portlet
            </summary>
        </member>
        <member name="T:Jenzabar.Portal.Framework.UserProfileType">
            <summary>
            used for search for FindByRoleLNameFNameVisibility,
            part of Jenzabar-ICSNET-Flags field
            </summary>
        </member>
        <member name="F:Jenzabar.Portal.Framework.UserProfileType.All">
            <summary>
            Flags are not relevant
            </summary>
        </member>
        <member name="F:Jenzabar.Portal.Framework.UserProfileType.Visible">
            <summary>
            Flags are not set, or 
            FLAG_HIDE_FROM_CAMPUS_DIRECTORY and FLAG_ADMIN_HIDE_FROM_CAMPUS_DIRECTORY are not set
            </summary>
        </member>
        <member name="F:Jenzabar.Portal.Framework.UserProfileType.Hidden">
            <summary>
            FLAG_HIDE_FROM_CAMPUS_DIRECTORY or FLAG_ADMIN_HIDE_FROM_CAMPUS_DIRECTORY are set
            </summary>
        </member>
        <member name="T:Jenzabar.Portal.Framework.PortalUser">
            <summary>
            Summary description for PortalUser.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.PortalUser.SetPassword(System.String)">
            <summary>
            Changes the password instantly. This method is independent of any other changes that are queued up waiting to be commited.
            </summary>
            <param name="password"></param>
        </member>
        <member name="M:Jenzabar.Portal.Framework.PortalUser.SetPasswordNotLoggedIn(System.String)">
            <summary>
            Changes the password instantly when the user in question isn't logged in. 
            The Credential of HighPrivs will be used.
            This method is independent of any other changes that are queued up waiting to be commited.
            </summary>
            <param name="password"></param>
        </member>
        <member name="M:Jenzabar.Portal.Framework.PortalUser.Create(System.String,Jenzabar.Common.DataStructures.Name)">
            <summary>
            Creates a user in the portal users container.
            </summary>
            <remarks>The user is commited to ADAM with the minimum information before this function returns.</remarks>
            <param name="username"></param>
            <param name="nameDetails"></param>
            <returns></returns>
        </member>
        <member name="M:Jenzabar.Portal.Framework.PortalUser.FindByDN(System.String)">
            <summary>
            Retrievs a PortalUser from Active Directory based on it's DistinguishedName (DN)
            </summary>
            <param name="DN">The DistinguishedName for the user in the form "O=ObjectName,CN=ObjectsContainer"</param>
            <returns>The PortalUser with matching Distinguished Name or null if the entry is not found.</returns>
        </member>
        <member name="M:Jenzabar.Portal.Framework.PortalUser.FindByID(Jenzabar.Portal.Framework.Data.ObjectIdentifier)">
            <summary>
            Finds a PortalUser by it's uniqe id.
            </summary>
            <param name="id">The unique id for the user.</param>
            <returns>The user requested, or null if the user was not found.</returns>
        </member>
        <member name="M:Jenzabar.Portal.Framework.PortalUser.FindMyBaseRoles">
            <summary>
            Finds the base PortalGroup objects by the current user
            </summary>
            <returns>An array of PortalGroups for the current user </returns>
        </member>
        <member name="M:Jenzabar.Portal.Framework.PortalUser.FindAll">
            <summary>
            Returns all of the users in the system. Use this with extreme caution as the results can be very large.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Jenzabar.Portal.Framework.PortalUser.FindByPortalContext(Jenzabar.Portal.Framework.PortalContext)">
            <summary>
            Returns array of unique users who belongs to groups, which belongs to context
            </summary>
            <param name="context">portal context</param>
            <returns>array of portal users</returns>
        </member>
        <member name="M:Jenzabar.Portal.Framework.PortalUser.FindBySearch(Jenzabar.Portal.Framework.PortalUserSearch)">
            <summary>
            find users by given parameters, if parameter is null or emty string - it is ignored
            </summary>
            <param name="pusearch">portal user search object</param>
            <returns>array of portal users</returns>
        </member>
        <member name="M:Jenzabar.Portal.Framework.PortalUser.Delete">
            <summary>
            Delete. as discussed 03/25/2004 (Jay, MikeO, Victoria)
            delete is changed to disable
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.PortalUser.GenerateGroupMembershipData">
            <summary>
            Fills the appropriate table with information about which groups the current logged in user belongs to.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.PortalUser.CanAdmin(Jenzabar.Portal.Framework.PortalContext)">
            <summary>
            Checks to see if this user is allowed to administer the context specified
            </summary>
            <param name="context">The context to check.</param>
            <returns>true if the user is allowed to administer (edit) the context, otherwise false.</returns>
        </member>
        <member name="M:Jenzabar.Portal.Framework.PortalUser.CanAdmin(Jenzabar.Portal.Framework.PortalPageInfo)">
            <summary>
            Checks to see if this user is allowed to administer the context that the specified page is in 
            </summary>
            <param name="page">The page to check.</param>
            <returns>true if the user is allowed to administer (edit) the context (and page), otherwise false.</returns>
        </member>
        <member name="M:Jenzabar.Portal.Framework.PortalUser.CanAdmin(Jenzabar.Portal.Framework.PortletDisplay)">
            <summary>
            Checks to see if this user is allowed to administer the context the specified portlet is in.
            </summary>
            <param name="portlet">The page to check.</param>
            <returns>true if the user is allowed to administer (edit) the context (and portlet), otherwise false.</returns>
        </member>
        <member name="M:Jenzabar.Portal.Framework.PortalUser.HashtableValuesToArray(System.Collections.Hashtable)">
            <summary>
            return values of hashtable as array of Portal users;
            used in FindByPortalContext function as easy way to get unique users
            </summary>
            <param name="table">Hashtable with values as PortalUser objects</param>
            <returns>array of PortalUser objects; return null if table is null</returns>
        </member>
        <member name="P:Jenzabar.Portal.Framework.PortalUser.UsesOperations">
            <summary>
            false to signal that this does not need to have operations.
            </summary>
        </member>
        <member name="P:Jenzabar.Portal.Framework.PortalUser.HideFromCampusDirectory">
            <summary>
            property tells whether this user want to be hidden from the campus directory;
            </summary>
        </member>
        <member name="P:Jenzabar.Portal.Framework.PortalUser.HideFromCampusDirectoryByAdmin">
            <summary>
            property tells whether admin want to hide this user from the campus directory;
            </summary>
        </member>
        <member name="P:Jenzabar.Portal.Framework.PortalUser.IsGuest">
            <summary>
            true if the user is the guest user account, otherwise the user is logged in.
            </summary>
        </member>
        <member name="P:Jenzabar.Portal.Framework.PortalUser.IsSiteAdmin">
             <summary>
             true if the user is the site admin
             </summary>
             <remarks>
            	admin is everyone who can admin root context
             can not use Administrators group cause High Privs users can be members of Administrator role
            	which is member of Administrators group -> we can not find them this way
            </remarks>
        </member>
        <member name="P:Jenzabar.Portal.Framework.PortalUser.IsCurrentUser">
            <summary>
            True if this user is the current interactive user the the web request is being processed for.
            </summary>
        </member>
        <member name="P:Jenzabar.Portal.Framework.PortalUser.PrivacySettings">
            <summary>
            Gets the users privacy settings. This is where a user can define who can view their personal information.
            </summary>
        </member>
        <member name="P:Jenzabar.Portal.Framework.PortalUser.SecureEmailAddress">
            <summary>
            Gets this users email adddess if the current user has access to view it, otherwise gets text indicating that the email address is hidden.
            </summary>
        </member>
        <member name="P:Jenzabar.Portal.Framework.PortalUser.HostID">
            <summary>
            Gets the unique identifyer for this user in the back end ERP system
            </summary>
        </member>
        <member name="P:Jenzabar.Portal.Framework.PortalUser.LastLogon">
            <summary>
            Get the <see cref="T:System.DateTime"/> of the last time this user logged into JICS
            </summary>
        </member>
        <member name="P:Jenzabar.Portal.Framework.PortalUser.MyPages">
            <summary>
            Gets the PortalContext where all of the users personal pages are stored.
            </summary>
        </member>
        <member name="P:Jenzabar.Portal.Framework.PortalUser.Property">
            <summary>
            Gets the Property object that contains PortalUser data that is stored in the db instead of ADAM
            </summary>
        </member>
        <member name="P:Jenzabar.Portal.Framework.PortalUser.GraduationDate">
            <summary>
            Gets and sets the graduation date; If unknown -DateTime.MinValue will be returned
            </summary>
        </member>
        <member name="P:Jenzabar.Portal.Framework.PortalUser.Enabled">
            <summary>
            show if user is enabled;
            </summary>
        </member>
        <member name="P:Jenzabar.Portal.Framework.PortalUser.DisplayName">
            <summary>
            Gets the name to be displayed for this user.
            </summary>
        </member>
        <member name="P:Jenzabar.Portal.Framework.PortalUser.Guest">
            <summary>
            Gets the Guest user account.
            </summary>
        </member>
        <member name="P:Jenzabar.Portal.Framework.PortalUser.GuestCredentials">
            <summary>
            Gets the UserCredentials for the guest user.
            </summary>
        </member>
        <member name="P:Jenzabar.Portal.Framework.PortalUser.Current">
            <summary>
            Gets the currently logged on user in the system.
            </summary>
        </member>
        <member name="T:Jenzabar.Portal.Framework.PortalUser.InfoAccess">
            <summary>
            This is a little Helper class to manage User Info Privacy settings
            </summary>
        </member>
        <member name="F:Jenzabar.Portal.Framework.PortalUser.InfoAccess._OtherUserID">
            <summary>
            Stores the OtherUser's ID for reaccessing a new portaluser object (if necessary)
            </summary>
        </member>
        <member name="F:Jenzabar.Portal.Framework.PortalUser.InfoAccess._dt">
            <summary>
            Internal DataTable that holds the PrivacyElement/User Table's info
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.PortalUser.InfoAccess.#ctor(Jenzabar.Portal.Framework.Data.ObjectIdentifier)">
            <summary>
            Constructor takes a userID as a parameter
            </summary>
            <param name="OtherUserID">The ID of the user to check privs on</param>
        </member>
        <member name="M:Jenzabar.Portal.Framework.PortalUser.InfoAccess.GetGlobalizedAccessTable">
            <summary>
            Returns the globalized internal DataTable that holds a users permissions
            </summary>
            <returns>A Data Table of a user's privacy settings (with globalized Element Names)</returns>
        </member>
        <member name="M:Jenzabar.Portal.Framework.PortalUser.InfoAccess.GetAccessTable">
            <summary>
            Returns the non-globalized internal DataTable that holds a users permissions
            </summary>
            <returns>A Data Table of a user's privacy settings (with non-globalized Element Names)</returns>
        </member>
        <member name="M:Jenzabar.Portal.Framework.PortalUser.InfoAccess.UpdatePrivacySetting(System.Boolean,System.Guid)">
            <summary>
            Updates a particular Privacy Setting for a user with a new value
            </summary>
            <param name="Private">The bool value to set this setting to</param>
            <param name="PrivacyElementID">The Key in the PrivacyElement table</param>
        </member>
        <member name="M:Jenzabar.Portal.Framework.PortalUser.InfoAccess.IsEverythingPrivate">
            <summary>
            Loops through the internal datatable and finds out if everything is private
            </summary>
            <returns>TRUE if all settings are private for this user, else, FALSE.</returns>
        </member>
        <member name="M:Jenzabar.Portal.Framework.PortalUser.InfoAccess.HasAccess(Jenzabar.Portal.Framework.PortalUser.InfoAccess.SecureInfo)">
            <summary>
            Takes an Enum to a type of Data And finds out whether that info has been
            declared private by the user. 
            </summary>
            <param name="info">Enum representing the setting to check access for</param>
            <returns>TRUE if a user can see this Setting</returns>
        </member>
        <member name="M:Jenzabar.Portal.Framework.PortalUser.InfoAccess.IsCityPrivate">
            <summary>
            Checks City Privacy bit in Database
            </summary>
            <returns>Boolean as to whether this information is private or not</returns>
        </member>
        <member name="M:Jenzabar.Portal.Framework.PortalUser.InfoAccess.IsAddressPrivate">
            <summary>
            Checks Address Privacy bit in Database
            </summary>
            <returns>Boolean as to whether this information is private or not</returns>
        </member>
        <member name="M:Jenzabar.Portal.Framework.PortalUser.InfoAccess.IsNamePrivate">
            <summary>
            Checks Name Privacy bit in Database
            </summary>
            <returns>Boolean as to whether this information is private or not</returns>
        </member>
        <member name="M:Jenzabar.Portal.Framework.PortalUser.InfoAccess.IsCountryPrivate">
            <summary>
            Checks Country Privacy bit in Database
            </summary>
            <returns>Boolean as to whether this information is private or not</returns>
        </member>
        <member name="M:Jenzabar.Portal.Framework.PortalUser.InfoAccess.IsPhonePrivate">
            <summary>
            Checks Phone Privacy bit in Database
            </summary>
            <returns>Boolean as to whether this information is private or not</returns>
        </member>
        <member name="M:Jenzabar.Portal.Framework.PortalUser.InfoAccess.IsPhotoPrivate">
            <summary>
            Checks Photo Privacy bit in Database
            </summary>
            <returns>Boolean as to whether this information is private or not</returns>
        </member>
        <member name="M:Jenzabar.Portal.Framework.PortalUser.InfoAccess.IsEmailPrivate">
            <summary>
            Checks Email Privacy bit in Database
            </summary>
            <returns>Boolean as to whether this information is private or not</returns>
        </member>
        <member name="M:Jenzabar.Portal.Framework.PortalUser.InfoAccess.IsClassYearPrivate">
            <summary>
            Checks ClassYear Privacy bit in Database
            </summary>
            <returns>Boolean as to whether this information is private or not</returns>
        </member>
        <member name="M:Jenzabar.Portal.Framework.PortalUser.InfoAccess.IsStatePrivate">
            <summary>
            Checks State Privacy bit in Database
            </summary>
            <returns>Boolean as to whether this information is private or not</returns>
        </member>
        <member name="M:Jenzabar.Portal.Framework.PortalUser.InfoAccess.IsMajorPrivate">
            <summary>
            Checks Major Privacy bit in Database
            </summary>
            <returns>Boolean as to whether this information is private or not</returns>
        </member>
        <member name="M:Jenzabar.Portal.Framework.PortalUser.InfoAccess.IsZipPrivate">
            <summary>
            Checks Zip Privacy bit in Database
            </summary>
            <returns>Boolean as to whether this information is private or not</returns>
        </member>
        <member name="M:Jenzabar.Portal.Framework.PortalUser.InfoAccess.IsEmployerPrivate">
            <summary>
            Checks Employer Privacy bit in Database
            </summary>
            <returns>Boolean as to whether this information is private or not</returns>
        </member>
        <member name="P:Jenzabar.Portal.Framework.PortalUser.InfoAccess.AlwaysHasAccess">
            <summary>
            Checks and caches whether the current user always has access to a student's information 
            </summary>
        </member>
        <member name="T:Jenzabar.Portal.Framework.PortalUser.InfoAccess.SecureInfo">
            <summary>
            The various peices of user info you can set access privileges on
            </summary>
        </member>
        <member name="T:Jenzabar.Portal.Framework.Settings.Mappers.PortletSettingDataMapper">
            <summary>
            The object data mapper for the PortletSetting domain object.
            </summary>
        </member>
        <member name="T:Jenzabar.Portal.Framework.Data.Database.DBObjectDataMapperBase">
            <summary>
            A base class for DBObjectDataMapper classes
            </summary>
            <remarks>
            Provides a minimal abstract implementation for IObjectDataMapper for the database
            </remarks>
        </member>
        <member name="T:Jenzabar.Portal.Framework.Data.ObjectDataMapperBase">
            <summary>
            Utility base class for object data mappers
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Data.ObjectDataMapperBase.ValidateNonTransactionalBatch(Jenzabar.Portal.Framework.Data.BatchToken)">
            <summary>
            Determines whether or not a batch is transactional and throws a NotSupportedException if it is
            </summary>
            <param name="batch">The token for the batch to check</param>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Data.ObjectDataMapperBase.IsCorrectType(Jenzabar.Portal.Framework.Data.IPersistableObject,System.Type)">
            <summary>
            Checks the class type of an IPersistableObject
            </summary>
            <param name="obj">The object to check</param>
            <param name="validType">The valid type</param>
            <returns>True if types are the same, false otherwise</returns>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Data.Database.DBObjectDataMapperBase.ExecuteObjectDataStore(System.String,Jenzabar.Portal.Framework.Data.IObjectDescriptor,System.Object[])">
            <summary>
            Executes a stored procedure and returns a single ObjectDataStore for the first record in the results
            </summary>
            <param name="storedProcedureName">The name of the stored procedure to execute</param>
            <param name="descriptor">The <see cref="T:Jenzabar.Portal.Framework.Data.IObjectDescriptor"/> that contains information about how to create the object descriptor.</param>
            <param name="args">The arguments to use for the parameters of the stored procedure</param>
            <returns>An instance of the <see cref="T:Jenzabar.Portal.Framework.Data.ObjectDataStore"/> class that contains the data returned from the stored procedure</returns>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Data.Database.DBObjectDataMapperBase.ExecuteObjectDataStore(System.String,System.Object[])">
            <summary>
            Executes a stored procedure and returns a single ObjectDataStore for the first row in the results.
            </summary>
            <param name="storedProcedureName">The name of the stored procedure to execute</param>
            <param name="args">any arguments the procedure needs</param>
            <returns>an ObjectDataStore instance for the first record found, or null if there were no matching records in the database.</returns>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Data.Database.DBObjectDataMapperBase.ExecuteObjectDataStoreUniqueKey(System.String,Jenzabar.Portal.Framework.Data.IObjectDescriptor,System.Object[])">
            <summary>
            Executes a stored procedure and returns a single ObjectDataStore for the first record in the results
            Uses the stored procedure name as an additional cache key, causing the table attribute caching to be unique to that procedure.
            </summary>
            <param name="storedProcedureName">The name of the stored procedure to execute</param>
            <param name="descriptor">The <see cref="T:Jenzabar.Portal.Framework.Data.IObjectDescriptor"/> that contains information about how to create the object descriptor.</param>
            <param name="args">The arguments to use for the parameters of the stored procedure</param>
            <returns>An instance of the <see cref="T:Jenzabar.Portal.Framework.Data.ObjectDataStore"/> class that contains the data returned from the stored procedure</returns>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Data.Database.DBObjectDataMapperBase.ExecuteObjectDataStoreUniqueKey(System.String,System.Object[])">
            <summary>
            Executes a stored procedure and returns a single ObjectDataStore for the first row in the results.
            Uses the stored procedure name as an additional cache key, causing the table attribute caching to be unique to that procedure.
            </summary>
            <param name="storedProcedureName">The name of the stored procedure to execute</param>
            <param name="args">any arguments the procedure needs</param>
            <returns>an ObjectDataStore instance for the first record found, or null if there were no matching records in the database.</returns>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Data.Database.DBObjectDataMapperBase.ExecuteObjectDataStoreArray(System.String,Jenzabar.Portal.Framework.Data.IObjectDescriptor,System.Object[])">
            <summary>
            Gets an array of <see cref="T:Jenzabar.Portal.Framework.Data.ObjectDataStore"/> objects by executing the specified stored procedure with the parameters supplied.
            </summary>
            <param name="storedProcedureName">The name of the stored procedure to execute</param>
            <param name="descriptor">The <see cref="T:Jenzabar.Portal.Framework.Data.IObjectDescriptor"/> that contains information about how to create the object descriptor.</param>
            <param name="args">The arguments to use for the parameters of the stored procedure</param>
            <returns>An array of <see cref="T:Jenzabar.Portal.Framework.Data.ObjectDataStore"/> objects that contain the data returned from the stored procedure. If no data is returned from the stored procedure this method will return a zero length array of <see cref="T:Jenzabar.Portal.Framework.Data.ObjectDataStore"/> objects.</returns>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Data.Database.DBObjectDataMapperBase.ExecuteObjectDataStoreArray(System.String,System.Object[])">
            <summary>
            Executes a SQL Stored Procedure and returns an array of the object data stores that are created fron the query result.
            </summary>
            <param name="storedProcedureName">The name of the stored procedure to execute</param>
            <param name="args">The arguments to the stored procedure.</param>
            <returns>ObjectDataStore instances created from the query results.</returns>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Data.Database.DBObjectDataMapperBase.ExecuteObjectDataStoreArrayUniqueKey(System.String,Jenzabar.Portal.Framework.Data.IObjectDescriptor,System.Object[])">
            <summary>
            Gets an array of <see cref="T:Jenzabar.Portal.Framework.Data.ObjectDataStore"/> objects by executing the specified stored procedure with the parameters supplied.
            Uses the stored procedure name as an additional cache key, causing the table attribute caching to be unique to that procedure.
            </summary>
            <param name="storedProcedureName">The name of the stored procedure to execute</param>
            <param name="descriptor">The <see cref="T:Jenzabar.Portal.Framework.Data.IObjectDescriptor"/> that contains information about how to create the object descriptor.</param>
            <param name="args">The arguments to use for the parameters of the stored procedure</param>
            <returns>An array of <see cref="T:Jenzabar.Portal.Framework.Data.ObjectDataStore"/> objects that contain the data returned from the stored procedure. If no data is returned from the stored procedure this method will return a zero length array of <see cref="T:Jenzabar.Portal.Framework.Data.ObjectDataStore"/> objects.</returns>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Data.Database.DBObjectDataMapperBase.ExecuteObjectDataStoreArrayUniqueKey(System.String,System.Object[])">
            <summary>
            Executes a SQL Stored Procedure and returns an array of the object data stores that are created fron the query result.
            Uses the stored procedure name as an additional cache key, causing the table attribute caching to be unique to that procedure.
            </summary>
            <param name="storedProcedureName">The name of the stored procedure to execute</param>
            <param name="args">The arguments to the stored procedure.</param>
            <returns>ObjectDataStore instances created from the query results.</returns>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Data.Database.DBObjectDataMapperBase.ExecuteNonQuery(System.String,System.Object[])">
            <summary>
            Executes a 
            </summary>
            <param name="storedProcedureName">The name of the stored procedure to execute</param>
            <param name="args">The arguments to use for the parameters of the stored procedure</param>
            <returns>The number of records that were effected by the query</returns>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Data.Database.DBObjectDataMapperBase.ExecuteDataReader(System.String,System.Object[])">
            <summary>
            Executes the specified stored procedure and returns a <see cref="T:System.Data.IDataReader"/> that can be used to read data from the results of the stored procedure
            </summary>
            <param name="storedProcedureName">The name of the stored procedure to execute</param>
            <param name="args">The arguments to use for the parameters of the stored procedure</param>
            <returns></returns>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Data.Database.DBObjectDataMapperBase.ExecuteScalar(System.String,System.Object[])">
            <summary>
            Execures the specified query and returns the value of the first row of the first column
            </summary>
            <param name="storedProcedureName">The name of the stored procedure to execute</param>
            <param name="args">Any arguments required by the stored procedure</param>
            <returns>The value of the first row of the first column of the results</returns>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Data.Database.DBObjectDataMapperBase.SupportsTransactions">
            <summary>
            Gets whether or not the data mapper supports transactions
            </summary>
            <remarks>
            The database implementation will always return true
            </remarks>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Data.Database.DBObjectDataMapperBase.ObjectDescriptor">
            <summary>
            Gets the <see cref="T:Jenzabar.Portal.Framework.Data.IObjectDescriptor"/> that describes the data storage needs of this object
            </summary>
            <remarks>
            The implementation of this property uses reflection to try to find a static field defined on subclasses, since the majority of the existing domain objects hold their object descriptor in a static private field.
            </remarks>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Settings.Mappers.PortletSettingDataMapper.FindByID(Jenzabar.Portal.Framework.Data.ObjectIdentifier)">
            <summary>
            Finds the portlet setting data store by a specified object identifier.
            </summary>
            <param name="id">The object identifier for the portlet setting</param>
            <returns>The data from the data source for the domain object</returns>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Settings.Mappers.PortletSettingDataMapper.FindByName(Jenzabar.Portal.Framework.Data.ObjectIdentifier,Jenzabar.Portal.Framework.Data.ObjectIdentifier,System.String)">
            <summary>
            Finds the portlet setting data store by name.
            </summary>
            <param name="portletID">The object identifier for the portlet object</param>
            <param name="portletInstanceID">The object identifier for the portlet instance object</param>
            <param name="name">The name of the portlet setting</param>
            <returns>The data from the data source for the domain object</returns>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Settings.Mappers.PortletSettingDataMapper.FindByName(Jenzabar.Portal.Framework.Data.ObjectIdentifier,Jenzabar.Portal.Framework.Data.ObjectIdentifier,System.String,System.Boolean)">
            <summary>
            Finds the portlet setting data store by name.
            </summary>
            <param name="portletID">The object identifier for the portlet object</param>
            <param name="portletInstanceID">The object identifier for the portlet instance object</param>
            <param name="name">The name of the portlet setting</param>
            <param name="noCache">Obsolete. Not Used. Exists only to support previous interface.</param>
            <returns>The data from the data source for the domain object</returns>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Settings.Mappers.PortletSettingDataMapper.FindSettingsByPortletInstance(Jenzabar.Portal.Framework.Data.ObjectIdentifier,Jenzabar.Portal.Framework.Data.ObjectIdentifier)">
            <summary>
            Finds a collection of portlet setting data stores by portlet instance.
            </summary>
            <param name="portletID">The object identifier for the portlet object</param>
            <param name="portletInstanceID">The object identifier for the portlet instance object</param>
            <returns>The data from the data source for the domain object</returns>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Settings.Mappers.PortletSettingDataMapper.FindSettingsByPortletAndSettingName(Jenzabar.Portal.Framework.Data.ObjectIdentifier,System.String)">
            <summary>
            Finds a collection of portlet setting data stores by portlet and setting name.
            </summary>
            <param name="portletID">The object identifier for the portlet object</param>
            <param name="name">The name of the portlet setting</param>
            <returns>The data from the data source for the domain object</returns>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Settings.Mappers.PortletSettingDataMapper.FindByQuery(Jenzabar.Portal.Framework.Data.Querying.ObjectQuery)">
            <summary>
            Finds a collection of portlet setting data stores by query.
            </summary>
            <param name="query">The query object</param>
        </member>
        <member name="T:Jenzabar.Portal.Framework.PortalPrincipalCreationInfo">
            <summary>
            Summary description for PortalPrincipalCreationInfo.
            </summary>
        </member>
        <member name="T:Jenzabar.Portal.Framework.PortalPageInfo">
            <summary>
            A page object
            </summary>
            <remarks>
            This object is used to access and manipulate the data for a page
            
            Page contain portlet shortcuts, portlets and have some properties to manipulate as Layout, DisplayName..
            </remarks>
        </member>
        <member name="T:Jenzabar.Portal.Framework.IParentObject">
            <summary>
            A marker interface that identifies a valid parent object
            </summary>
        </member>
        <member name="P:Jenzabar.Portal.Framework.IParentObject.ID">
            <summary>
            Gets the ID of the parent object
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.PortalPageInfo.Create(Jenzabar.Portal.Framework.PortalContext,Jenzabar.Portal.Framework.PortalPageLayout,System.String,System.String,System.Boolean)">
            <summary>
            create object
            </summary>
            <param name="parentContext">parent context</param>
            <param name="pageLayout">page layout</param>
            <param name="name">page name (if not unique in current context - error will be thrown)</param>
            <param name="displayName">display name - what user will see</param>
            <param name="changeDuplicatedName">true to alter the name of the page, and create it with the new name, if a page already exists with that name.</param>
            <returns></returns>
        </member>
        <member name="M:Jenzabar.Portal.Framework.PortalPageInfo.Create(Jenzabar.Portal.Framework.PortalContext,Jenzabar.Portal.Framework.PortalPageLayout,System.String,System.String)">
            <summary>
            See description above
            </summary>
            <returns></returns>
        </member>
        <member name="M:Jenzabar.Portal.Framework.PortalPageInfo.Create(Jenzabar.Portal.Framework.PortalContext,System.String)">
            <summary>
            see description above
            </summary>
            <param name="parent"></param>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:Jenzabar.Portal.Framework.PortalPageInfo.Create(Jenzabar.Portal.Framework.PortalContext,Jenzabar.Portal.Framework.PortalPageLayout,System.String)">
            <summary>
            see description above
            </summary>
            <param name="parent"></param>
            <param name="pageLayout"></param>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:Jenzabar.Portal.Framework.PortalPageInfo.FindByDN(System.String)">
            <summary>
            find by distinguished name
            </summary>
            <param name="dn">name</param>
            <returns>object if found or null</returns>
        </member>
        <member name="M:Jenzabar.Portal.Framework.PortalPageInfo.FindByGuid(System.Guid)">
            <summary>
            Searches for a page by guid.
            </summary>
            <param name="guid">the guid for the page to find.</param>
            <returns>A PortalPageInfo with matching guid, or null if no matching pages are found.</returns>
        </member>
        <member name="M:Jenzabar.Portal.Framework.PortalPageInfo.FindByID(Jenzabar.Portal.Framework.Data.ObjectIdentifier)">
            <summary>
            Searches for an object by its ID
            </summary>
            <param name="id">The ID of the page to find</param>
            <returns>The page if found, null otherwise</returns>
        </member>
        <member name="M:Jenzabar.Portal.Framework.PortalPageInfo.FindByPortalContext(Jenzabar.Portal.Framework.PortalContext)">
            <summary>
            Finds all the pages directly underneith a particular context
            </summary>
            <param name="context">The context which contains the pages</param>
            <returns>An array of data for the pages if found, an empty array otherwise</returns>
        </member>
        <member name="M:Jenzabar.Portal.Framework.PortalPageInfo.FindByPortalContextAndPageName(Jenzabar.Portal.Framework.PortalContext,System.String)">
            <summary>
            Finds a page by its context and name
            </summary>
            <param name="context">The context in which the page is located</param>
            <param name="pageName">The name of the page</param>
            <returns>The page if found, null otherwise</returns>
        </member>
        <member name="M:Jenzabar.Portal.Framework.PortalPageInfo.Delete">
            <summary>
            Delete this page and all it's portlets
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.PortalPageInfo.Refresh">
            <summary>
            Refresh context 
            </summary>
        </member>
        <member name="P:Jenzabar.Portal.Framework.PortalPageInfo.IsDefaultPage">
            <summary>
            True if this page is the default page for the context.
            </summary>
        </member>
        <member name="P:Jenzabar.Portal.Framework.PortalPageInfo.Removable">
            <summary>
            True if the page can be removed from the context, otherwise flase.
            </summary>
            <remarks>
            A page can be removed from a context if the page is not a system object, and is not the default page for the context.
            </remarks>
        </member>
        <member name="P:Jenzabar.Portal.Framework.PortalPageInfo.PortletDisplays">
            <summary>
            Gets the portlets on the page
            </summary>
            <remarks>
            Returns a array of portlets sorted by the column the portlet is in
            The array starts with the first column
            </remarks>
        </member>
        <member name="P:Jenzabar.Portal.Framework.PortalPageInfo.Layout">
            <summary>
            Gets and sets the layout to use when rendering the page
            </summary>
            <remarks>
            Includes table information (cols/rows, padding, etc)
            </remarks>
        </member>
        <member name="P:Jenzabar.Portal.Framework.PortalPageInfo.ParentPortalContext">
            <summary>
            Gets the context in which the page is located
            </summary>
        </member>
        <member name="P:Jenzabar.Portal.Framework.PortalPageInfo.DisplayInSideBar">
            <summary>
            True if a link to this page can be displayed in the sidebar, otherwise false, meaning a link cannot be displayed to this page in the sidebar.
            </summary>
        </member>
        <member name="P:Jenzabar.Portal.Framework.PortalPageInfo.URL">
            <summary>
            Gets the application relative URL for this context.
            </summary>
            <remarks>
            THe application relative URL will include a ~ and will need to be turned into a full url by calling Page.
            </remarks>
        </member>
        <member name="P:Jenzabar.Portal.Framework.PortalPageInfo.Text">
            <summary>
            gets the text that will be displayed for links to this context.
            </summary>
        </member>
        <member name="P:Jenzabar.Portal.Framework.PortalPageInfo.ToolTip">
            <summary>
            Gets the text that will be displayed when the user mouses over a hyperlink to this context
            </summary>
        </member>
        <member name="T:Jenzabar.Portal.Framework.Data.Querying.SortItem">
            <summary>
            structure for sort items
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Data.Querying.SortItem.#ctor(Jenzabar.Portal.Framework.Data.IPropertyDescriptor,Jenzabar.Common.Collections.Direction)">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Data.Querying.SortItem.#ctor(Jenzabar.Portal.Framework.Data.IPropertyDescriptor)">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Data.Querying.SortItem.ToString">
            <summary>
            Converts the SortItem to a string
            </summary>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Data.Querying.SortItem.Direction">
            <summary>
            direction
            </summary>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Data.Querying.SortItem.Property">
            <summary>
            direction
            </summary>
        </member>
        <member name="T:Jenzabar.Portal.Framework.Data.Querying.ObjectQuery">
            <summary>
            Used to formulate ad hoc queries for domain objects or data from domain objects
            </summary>
            <remarks>
            The ObjectQuery class allows for the creation of queries based on object descriptors.
            The ObjectQuery object is then passed to the appropiate FindByQuery method on the
            domain object or domain object's data mapper to execute the query.
            </remarks>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Data.Querying.ObjectQuery.#ctor(Jenzabar.Portal.Framework.Data.IObjectDescriptor)">
            <summary>
            Constructs a query for a domain object which corripsonds an object descriptor
            </summary>
            <param name="objectDescriptor">The object descriptor that corrisponds to the domain object to be queried</param>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Data.Querying.ObjectQuery.#ctor(Jenzabar.Portal.Framework.Data.IPropertyDescriptor)">
            <summary>
            Constructs a sub query to be used from within a parent query to simulate join operations
            </summary>
            <param name="subQueryProperty">The property to return in the sub query results (typically ID)</param>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Data.Querying.ObjectQuery.#ctor(Jenzabar.Portal.Framework.Data.IPropertyDescriptor[])">
            <summary>
            Constructs a partial query that can be use to return portions of a domain object's data instead of an entire domain object
            </summary>
            <param name="targetProperties">The properties to return in the results</param>
            <remarks>
            To execute partial queries, pass the ObjectQuery object to the FindByPartialQuery method on the domain object's data mapper
            </remarks>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Data.Querying.ObjectQuery.InitQuery(Jenzabar.Portal.Framework.Data.IObjectDescriptor,Jenzabar.Portal.Framework.Data.IPropertyDescriptor[])">
            <summary>
            Used internally to initialize the the object query
            </summary>
            <param name="objectDescriptor">The target domain object's descriptor</param>
            <param name="targetProperties">The properties to return in the results</param>
            <remarks>
            The target properties array will always be null for full queries.
            </remarks>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Data.Querying.ObjectQuery.AddConditional(Jenzabar.Portal.Framework.Data.Querying.ObjectQueryModifier,Jenzabar.Portal.Framework.Data.IPropertyDescriptor,Jenzabar.Portal.Framework.Data.Querying.ObjectQueryOperator,Jenzabar.Portal.Framework.Data.Querying.ConditionalValue)">
            <summary>
            Add a conditional to the query that has an operand which is a conditional value
            </summary>
            <param name="modifier">The modifier to apply to the conditional</param>
            <param name="property">The property of the domain object to evaluate the condition against</param>
            <param name="op">The operator to use for the comparison</param>
            <param name="value">The value evaluate the propery against</param>
            <returns>
            The conditional added to the query
            </returns>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Data.Querying.ObjectQuery.AddConditional(Jenzabar.Portal.Framework.Data.Querying.ObjectQueryModifier,Jenzabar.Portal.Framework.Data.IPropertyDescriptor,Jenzabar.Portal.Framework.Data.Querying.ObjectQueryOperator,Jenzabar.Portal.Framework.Data.Querying.ConditionalValue,System.Boolean)">
            <summary>
            Add a conditional to the query that has an operand which is a conditional value
            </summary>
            <param name="modifier">The modifier to apply to the conditional</param>
            <param name="property">The property of the domain object to evaluate the condition against</param>
            <param name="op">The operator to use for the comparison</param>
            <param name="value">The value evaluate the propery against</param>
            <param name="caseSensitive">if search on this value to be case sensitive</param>
            <returns>
            The conditional added to the query
            </returns>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Data.Querying.ObjectQuery.AddConditional(Jenzabar.Portal.Framework.Data.Querying.ObjectQueryModifier,Jenzabar.Portal.Framework.Data.IPropertyDescriptor,Jenzabar.Portal.Framework.Data.Querying.ObjectQueryOperator,Jenzabar.Portal.Framework.Data.Querying.ConditionalGroup)">
            <summary>
            Add a conditional to the query that has an operand which is another conditional group
            </summary>
            <param name="modifier">The modifier to apply to the conditional</param>
            <param name="property">The property of the domain object to evaluate the condition against</param>
            <param name="op">The operator to use for the comparison</param>
            <param name="group">The conditional group to evaluate the propery against</param>
            <returns>
            The conditional added to the query
            </returns>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Data.Querying.ObjectQuery.AddConditional(Jenzabar.Portal.Framework.Data.Querying.ObjectQueryModifier,Jenzabar.Portal.Framework.Data.IPropertyDescriptor,Jenzabar.Portal.Framework.Data.Querying.ObjectQueryOperator,Jenzabar.Portal.Framework.Data.Querying.ObjectQuery)">
            <summary>
            Add a conditional to the query that has an operand which is a sub query
            </summary>
            <param name="modifier">The modifier to apply to the conditional</param>
            <param name="property">The property of the domain object to evaluate the condition against</param>
            <param name="op">The operator to use for the comparison</param>
            <param name="subQuery">The sub query to evaluate the property against</param>
            <returns>
            The conditional added to the conditional group
            </returns>
            <remarks>
            Conditionals that have sub queries as the operand are typically used for simulating joins.
            For example, one might add a conditional with a property that represents an ID, an
            operator of ObjectQueryOperator.In, and a sub query that finds a list of IDs.
            </remarks>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Data.Querying.ObjectQuery.DoAddConditional(Jenzabar.Portal.Framework.Data.Querying.ObjectQueryModifier,Jenzabar.Portal.Framework.Data.IPropertyDescriptor,Jenzabar.Portal.Framework.Data.Querying.ObjectQueryOperator,Jenzabar.Portal.Framework.Data.Querying.IObjectQueryPart)">
            <summary>
            Used internally to add a conditional to the query
            </summary>
            <param name="modifier">The modifier to apply to the conditional</param>
            <param name="property">The property of the domain object to evaluate the condition against</param>
            <param name="op">The operator to use for the comparison</param>
            <param name="part">The query part to evaluate the propery against</param>
            <returns>
            The conditional added to the query
            </returns>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Data.Querying.ObjectQuery.DoAddConditional(Jenzabar.Portal.Framework.Data.Querying.ObjectQueryModifier,Jenzabar.Portal.Framework.Data.IPropertyDescriptor,Jenzabar.Portal.Framework.Data.Querying.ObjectQueryOperator,Jenzabar.Portal.Framework.Data.Querying.IObjectQueryPart,System.Boolean)">
            <summary>
            Used internally to add a conditional to the query
            </summary>
            <param name="modifier">The modifier to apply to the conditional</param>
            <param name="property">The property of the domain object to evaluate the condition against</param>
            <param name="op">The operator to use for the comparison</param>
            <param name="part">The query part to evaluate the propery against</param>
            <param name="caseSensitive">is condition sace sensitive</param>
            <returns>
            The conditional added to the query
            </returns>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Data.Querying.ObjectQuery.AddSortItem(Jenzabar.Portal.Framework.Data.IPropertyDescriptor)">
            <summary>
            add sort item with Asc direction
            </summary>
            <param name="property">property</param>
            <returns></returns>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Data.Querying.ObjectQuery.AddSortItem(Jenzabar.Portal.Framework.Data.IPropertyDescriptor,Jenzabar.Common.Collections.Direction)">
            <summary>
            add sort item
            </summary>
            <param name="property">property</param>
            <param name="direction">direction</param>
            <returns></returns>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Data.Querying.ObjectQuery.AddGroup(Jenzabar.Portal.Framework.Data.Querying.ObjectQueryModifier)">
            <summary>
            Adds a conditional group to the query
            </summary>
            <param name="modifier">The modifier to apply to the conditional group</param>
            <returns>The conditional group just added</returns>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Data.Querying.ObjectQuery.Add(Jenzabar.Portal.Framework.Data.Querying.IObjectQueryPart)">
            <summary>
            Adds a query part to the query
            </summary>
            <param name="part">The query part to add</param>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Data.Querying.ObjectQuery.Remove(Jenzabar.Portal.Framework.Data.Querying.IObjectQueryPart)">
            <summary>
            Removes a query part from the group
            </summary>
            <param name="part">The query part to remove</param>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Data.Querying.ObjectQuery.Clear">
            <summary>
            Clears all query parts out of the query
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Data.Querying.ObjectQuery.Evaluate">
            <summary>
            Evaluates the query part using the parent query's target object's object data mapper
            </summary>
            <returns>
            A string that represents either the results of a query if the query part is a query
            or a query in a form that can be evaluated by the parent query's target object's data mapper
            </returns>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Data.Querying.ObjectQuery.ToString">
            <summary>
            Gets a plain english representation of the query
            </summary>
            <returns>
            A plain english version of the query
            </returns>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Data.Querying.ObjectQuery.TargetObject">
            <summary>
            Gets the object descriptor for the target of the object query
            </summary>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Data.Querying.ObjectQuery.TargetProperties">
            <summary>
            Gets an array of properties to be returned in the results
            </summary>
            <remarks>
            This array will be null for full object queries
            </remarks>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Data.Querying.ObjectQuery.SortItems">
            <summary>
            Gets an array of sort items
            </summary>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Data.Querying.ObjectQuery.Items">
            <summary>
            Gets an array of query parts that are part of the query
            </summary>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Data.Querying.ObjectQuery.SortOrders">
            <summary>
            Not implemented yet
            </summary>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Data.Querying.ObjectQuery.Type">
            <summary>
            Gets the query part type
            </summary>
            <remarks>
            This will always return ObjectQueryPartType.Subject for an object query
            </remarks>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Data.Querying.ObjectQuery.QueryType">
            <summary>
            Gets the type of query
            </summary>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Data.Querying.ObjectQuery.ParentQuery">
            <summary>
            Gets or sets the query that contains the query
            </summary>
            <remarks>
            This will be null if this is the top most object query
            </remarks>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Data.Querying.ObjectQuery.QueryText">
            <summary>
            Used internally to get or set the evaluated query text
            </summary>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Data.Querying.ObjectQuery.IsEvaluated">
            <summary>
            Gets whether or not the query part has been evaluated
            </summary>
        </member>
        <member name="T:Jenzabar.Portal.Framework.Data.ObjectIdentifier">
            <summary>
            Uniquely identifies a domain object
            </summary>
            <remarks>
            An ObjectIdentifier can be treated as if it were either a string or a GUID.
            
            The ObjectIdentifier implements operator overloads that allow it to be cast
            directly to a string or a GUID. When this cast occurs, the ObjectIdentifier will
            return the data that corrisponds with the cast.
            </remarks>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Data.ObjectIdentifier.#ctor(System.Guid)">
            <summary>
            Constructs with a Guid
            </summary>
            <param name="id">The id of the domain object</param>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Data.ObjectIdentifier.#ctor(System.String)">
            <summary>
            Constructs with a string which may be either a path or a GUID
            </summary>
            <param name="id">The id of the domain object</param>
            <remarks>
            This constructor will make a best effort attempt to treat the string as a GUID.
            If this fails, it assumes it is a path.
            </remarks>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Data.ObjectIdentifier.#ctor(System.Guid,System.String)">
            <summary>
            Constructs with a guid and a string
            </summary>
            <remarks>
            Typically used when dealing with an object that must be represented in more than one data source type
            </remarks>
            <param name="id">The id of the object</param>
            <param name="path">The path to the object</param>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Data.ObjectIdentifier.#ctor(System.Object)">
            <summary>
            Constructs with an object
            </summary>
            <param name="id">The guid or path to the object</param>
            <remarks>
            This constructor will make a best effort attempt to treat the string as a GUID.
            If this fails, it assumes it is a path.
            </remarks>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Data.ObjectIdentifier.op_Implicit(Jenzabar.Portal.Framework.Data.ObjectIdentifier)~System.Guid">
            <summary>
            Casts to a Guid
            </summary>
            <param name="o">The object to cast</param>
            <returns>The Guid. If no Guid is found, an empty Guid is returned.</returns>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Data.ObjectIdentifier.op_Implicit(Jenzabar.Portal.Framework.Data.ObjectIdentifier)~System.String">
            <summary>
            Casts to a String
            </summary>
            <param name="o">The object to cast</param>
            <returns>The String. If no String is found, an empty String is returned.</returns>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Data.ObjectIdentifier.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>The hash code for this instance.</returns>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Data.ObjectIdentifier.Equals(System.Object)">
            <summary>
            Test to see if an object is equal to this ObjectIdentifier.
            </summary>
            <param name="obj">The object to compare to.</param>
            <returns>True if the object is an ObjectIdentifier and points to the same resource as this ObjectIdentifier</returns>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Data.ObjectIdentifier.Equals(Jenzabar.Portal.Framework.Data.ObjectIdentifier)">
            <summary>
            Test to see if an ObjectIdentifiers is equal to this one.
            </summary>
            <param name="objId">The ObjectIdentifier to test for equality to this.</param>
            <returns>True if the ObjectIdentifier points to the same resource as this ObjectIdentifier.</returns>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Data.ObjectIdentifier.ToString">
            <summary>
            Converts the ObjectIdentifier to a string
            </summary>
            <returns>If the type is string, the string is returned, otherwise the Guid is converted to a string and returned</returns>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Data.ObjectIdentifier.Empty">
            <summary>
            Gets an empty ObjectIdentifier
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Data.ObjectIdentifier.NewId">
            <summary>
            Creates a new <see cref="T:Jenzabar.Portal.Framework.Data.ObjectIdentifier"/> that is guaranteed to be unique.
            </summary>
            <returns>A new <see cref="T:Jenzabar.Portal.Framework.Data.ObjectIdentifier"/> that is guaranteed to be unique.</returns>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Data.ObjectIdentifier.Type">
            <summary>
            The type of the object identifier
            </summary>
            <remarks>
            If it has a path, its type is string. Otherwise, its type is Guid
            </remarks>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Data.ObjectIdentifier.Value">
            <summary>
            The value of the object identifier
            </summary>
            <remarks>
            If it has a path, the path is returned. Otherwise, the Guid is returned
            </remarks>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Data.ObjectIdentifier.AsGuid">
            <summary>
            Gets the ObjectItentifier as the globaly uniqe id that is stored within it. NOTE: Will return null, and not throw an error if the Type for this ObjectIdentifier is Path
            </summary>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Data.ObjectIdentifier.AsPath">
            <summary>
            Gets this ObjectIdentifier as a path to an active directory object. NOTE: Will return null, and not throw an error if the Type for this ObjectIdentifier is Guid
            </summary>
        </member>
        <member name="T:Jenzabar.Portal.Framework.Data.ObjectIdentifierType">
            <summary>
            The type of ObjectIdentifier
            </summary>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Data.ObjectIdentifierType.Guid">
            <summary>
            Globally Unqiue Identifier
            </summary>
            <remarks>
            Typically used when dealing with a database data source
            </remarks>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Data.ObjectIdentifierType.Path">
            <summary>
            A path to the object in the data source
            </summary>
            <remarks>
            Typically used when dealing with a directory data source, and usually in conjunction with Guids
            </remarks>
        </member>
        <member name="T:Jenzabar.Portal.Framework.Data.ObjectPersistenceEventHandler">
            <summary>
            The signature for a method that handles persistence events raised by domain objects
            </summary>
        </member>
        <member name="T:Jenzabar.Portal.Framework.Data.ObjectPersistenceEventArgs">
            <summary>
            The arguments passed to handlers of persistence events raised by domain objects
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Data.ObjectPersistenceEventArgs.#ctor(Jenzabar.Portal.Framework.Data.IPersistableObject,Jenzabar.Portal.Framework.Data.ObjectIdentifier,Jenzabar.Portal.Framework.Data.ObjectPersistenceEventType,Jenzabar.Portal.Framework.Data.PersistenceState)">
            <summary>
            Constructs the object
            </summary>
            <param name="obj">The domain object raising the event</param>
            <param name="id">The id of the domain object raising the event</param>
            <param name="type">The type of persistence event</param>
            <param name="preCommitObjectState">The state of the domain object before it caused the event to be raised</param>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Data.ObjectPersistenceEventArgs.#ctor(Jenzabar.Portal.Framework.Data.IPersistableObject,Jenzabar.Portal.Framework.Data.ObjectIdentifier,Jenzabar.Portal.Framework.Data.ObjectPersistenceEventType,Jenzabar.Portal.Framework.Data.PersistenceState,Jenzabar.Portal.Framework.Data.BatchToken)">
            <summary>
            Constructs the object
            </summary>
            <param name="obj">The domain object raising the event</param>
            <param name="id">The id of the domain object raising the event</param>
            <param name="type">The type of persistence event</param>
            <param name="preCommitObjectState">The state of the domain object before it caused the event to be raised</param>
            <param name="batchToken">The state of the domain object before it caused the event to be raised</param>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Data.ObjectPersistenceEventArgs.PersistableObject">
            <summary>
            Gets the domain object raising the event
            </summary>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Data.ObjectPersistenceEventArgs.ObjectID">
            <summary>
            Gets the id of the domain object raising the event
            </summary>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Data.ObjectPersistenceEventArgs.Type">
            <summary>
            Gets the type of event raised by the domain object
            </summary>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Data.ObjectPersistenceEventArgs.PreCommitObjectState">
            <summary>
            Gets the state of the object before the event was raised
            </summary>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Data.ObjectPersistenceEventArgs.Batch">
            <summary>
            Gets the batch token that was used during the commit (null if no batch was used)
            </summary>
        </member>
        <member name="T:Jenzabar.Portal.Framework.Data.ObjectPersistenceEventType">
            <summary>
            Types of events raised by domain objects
            </summary>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Data.ObjectPersistenceEventType.Committed">
            <summary>
            The object was commited to the data source
            </summary>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Data.ObjectPersistenceEventType.MarkedForDeletion">
            <summary>
            The object was marked for deletion from the data source
            </summary>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Data.ObjectPersistenceEventType.Refreshed">
            <summary>
            The object was refreshed from the data source
            </summary>
        </member>
        <member name="T:Jenzabar.Portal.Framework.ApplicationInfoCreationInfo">
            <summary>
            Summary description for ApplicationInfoCreationInfo.
            </summary>
        </member>
        <member name="P:Jenzabar.Portal.Framework.ApplicationInfoCreationInfoCollection.System#Collections#ICollection#IsSynchronized">
            <summary>
            Gets a value indicating wether access to the PortalContextCreationInfoCollection is syncronized (thread-safe)
            </summary>
        </member>
        <member name="P:Jenzabar.Portal.Framework.ApplicationInfoCreationInfoCollection.Count">
            <summary>
            Gets the number of <see cref="T:Jenzabar.Portal.Framework.PortalContextCreationInfo"/> objects are contained in this collection.
            </summary>
        </member>
        <member name="T:Jenzabar.Portal.Framework.Data.Querying.Conditional">
            <summary>
            Represents the portion of a query that filters the results
            </summary>
            <example>
            A portion of a WHERE clause in SQL such as:
            "ColumnName = 'SomeValue'
            </example>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Data.Querying.Conditional.#ctor(Jenzabar.Portal.Framework.Data.Querying.ObjectQueryModifier,Jenzabar.Portal.Framework.Data.IPropertyDescriptor,Jenzabar.Portal.Framework.Data.Querying.ObjectQueryOperator,Jenzabar.Portal.Framework.Data.Querying.IObjectQueryPart)">
            <summary>
            Constructs the conditional
            </summary>
            <param name="modifier">The modifier to apply to the conditional</param>
            <param name="property">The property of the domain object to evaluate the condition against</param>
            <param name="op">The operator to use for the comparison</param>
            <param name="operand">The value to compare the property with</param>
            <remarks>
            The modifier is typically set to ObjectQueryModifier.None when the conditional is the first added to a query
            </remarks>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Data.Querying.Conditional.#ctor(Jenzabar.Portal.Framework.Data.Querying.ObjectQueryModifier,Jenzabar.Portal.Framework.Data.IPropertyDescriptor,Jenzabar.Portal.Framework.Data.Querying.ObjectQueryOperator,Jenzabar.Portal.Framework.Data.Querying.IObjectQueryPart,System.Boolean)">
            <summary>
            Constructs the conditional
            </summary>
            <param name="modifier">The modifier to apply to the conditional</param>
            <param name="property">The property of the domain object to evaluate the condition against</param>
            <param name="op">The operator to use for the comparison</param>
            <param name="operand">The value to compare the property with</param>
            <param name="caseSensitive">if search should be case sensitive</param>
            <remarks>
            The modifier is typically set to ObjectQueryModifier.None when the conditional is the first added to a query
            </remarks>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Data.Querying.Conditional.Evaluate">
            <summary>
            Evaluates the query part using the parent query's target object's object data mapper
            </summary>
            <returns>
            A string that represents either the results of a query if the query part is a query
            or a query in a form that can be evaluated by the parent query's target object's data mapper
            </returns>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Data.Querying.Conditional.ToString">
            <summary>
            Gets a plain english representation of the query part
            </summary>
            <returns>
            A plain english version of the query part
            </returns>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Data.Querying.Conditional.ParentQuery">
            <summary>
            Gets or sets the query that contains the conditional
            </summary>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Data.Querying.Conditional.Modifer">
            <summary>
            Gets or sets the modifier for the conditional
            </summary>
            <remarks>
            The modifier is typically set to ObjectQueryModifier.None when the conditional is the first added to a query
            </remarks>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Data.Querying.Conditional.Property">
            <summary>
            Gets or sets the property of the domain object to evaluate the condition against
            </summary>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Data.Querying.Conditional.Operator">
            <summary>
            Gets or sets the operator to use for the comparison
            </summary>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Data.Querying.Conditional.Operand">
            <summary>
            Gets or sets value to compare the property with
            </summary>
            <remarks>
            The operand can be a a value or a sub query
            </remarks>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Data.Querying.Conditional.Type">
            <summary>
            Gets the query part type
            </summary>
            <remarks>
            This will always return ObjectQueryPartType.Conditional for a conditional
            </remarks>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Data.Querying.Conditional.IsEvaluated">
            <summary>
            Gets whether or not the query part has been evaluated
            </summary>
        </member>
        <member name="T:Jenzabar.Portal.Framework.Preferences.PortletPreference">
            <summary>
            Summary description for PortletPreference.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Preferences.PortletPreference.#ctor(Jenzabar.Portal.Framework.Portlet,Jenzabar.Portal.Framework.PortalUser,System.String,System.String,Jenzabar.Portal.Framework.NameValueScope)">
            <summary>
            Constructs an application preference
            </summary>
            <param name="portlet">Portlet in which the porlet preference is created</param>
            <param name="user">User for whom the portlet preference is created</param>
            <param name="preferenceName">Name of the preference</param>
            <param name="preferenceValue">Value of the preference</param>
            <param name="scope">Scope of the preference</param>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Preferences.PortletPreference.#ctor(Jenzabar.Portal.Framework.Data.ObjectDataStore)">
            <summary>
            Constructs a portlet preference
            </summary>
            <param name="objectData">A portlet preference object data store</param>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Preferences.PortletPreference.FindByID(Jenzabar.Portal.Framework.Data.ObjectIdentifier)">
            <summary>
            Finds an portlet preference by ID
            </summary>
            <param name="id">The object identifier of the portlet preference</param>
            <returns>The portlet preference with the specified object identifier</returns>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Preferences.PortletPreference.FindByQuery(Jenzabar.Portal.Framework.Data.Querying.ObjectQuery)">
            <summary>
            Finds portlet preferences by query
            </summary>
            <param name="query">The query for the portlet preferences</param>
            <returns>The portlet preferences that match the specified query</returns>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Preferences.PortletPreference.FindByName(Jenzabar.Portal.Framework.PortletTemplate,Jenzabar.Portal.Framework.Portlet,Jenzabar.Portal.Framework.PortalUser,System.String)">
            <summary>
            Returns the portlet preference by name.
            </summary>
            <param name="template">The portlet template for the portlet</param>
            <param name="portlet">The portlet instance in which the portlet preference exists</param>
            <param name="user">A PortalUser object representing the current user</param>
            <param name="name">The name of the portlet preference</param>
            <returns>The portlet preference by name</returns>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Preferences.PortletPreference.FindPreferencesByPortletInstance(Jenzabar.Portal.Framework.PortletTemplate,Jenzabar.Portal.Framework.Portlet,Jenzabar.Portal.Framework.PortalUser)">
            <summary>
            Returns the portlet preferences for a given portlet instance.
            </summary>
            <param name="template">The portlet template object</param>
            <param name="portlet">The portlet in which the portlet preference exists</param>
            <param name="user">The portlet preference's user</param>
            <returns>The portlet preferences for a given portlet instance</returns>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Preferences.PortletPreference.FindPreferencesByPortletAndPreferenceName(Jenzabar.Portal.Framework.PortletTemplate,Jenzabar.Portal.Framework.PortalUser,System.String)">
            <summary>
            Returns the application preferences for a given preference name and user.
            </summary>
            <param name="template">The portlet template object</param>
            <param name="user">The portlet preference's user</param>
            <param name="name">The name of the application preference</param>
            <returns>The application preferences for a given preference name and user</returns>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Preferences.PortletPreference.Create(Jenzabar.Portal.Framework.Portlet,Jenzabar.Portal.Framework.PortalUser,System.String,System.String,Jenzabar.Portal.Framework.NameValueScope)">
            <summary>
            Creates an application preference.
            </summary>
            <param name="portlet">The portlet in which the portlet preference exists</param>
            <param name="user">The portlet preference's user</param>
            <param name="preferenceName">The name of the portlet preference</param>
            <param name="preferenceValue">The value of the portlet preference</param>
            <param name="scope">Denotes the scope of the portlet preference</param>
            <returns>An portlet preference with the given input parameters</returns>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Preferences.PortletPreference.ChangeScope(Jenzabar.Portal.Framework.Preferences.PortletPreference,Jenzabar.Portal.Framework.Portlet,Jenzabar.Portal.Framework.ScopeChangeType)">
            <summary>
            Updates the scope of a portlet preference
            </summary>
            <param name="portletPreference">The portlet preference whose scope is being changed</param>
            <param name="portlet">The portlet the preference exists in</param>
            <param name="scopeChangeType">Denotes the change in scope for the portlet preference</param>
            <returns>A portlet preference with the appropriately changed scope</returns>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Preferences.PortletPreference.CreateArray(Jenzabar.Portal.Framework.Data.ObjectDataStore[])">
            <summary>
            Used internally to create an array of domain objects from an array of ObjectDataStores
            </summary>
            <param name="portletPreferenceDataStores">The object data stores to create domain objects from</param>
            <returns>An array of domain objects</returns>	
        </member>
        <member name="P:Jenzabar.Portal.Framework.Preferences.PortletPreference.ID">
            <summary>
            Gets the object identifer for the preference
            </summary>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Preferences.PortletPreference.PortletTemplate">
            <summary>
            Gets the portlet for the preference
            </summary>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Preferences.PortletPreference.Portlet">
            <summary>
            Gets the portlet instance for the preference
            </summary>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Preferences.PortletPreference.User">
            <summary>
            Gets the user of the preference
            </summary>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Preferences.PortletPreference.Name">
            <summary>
            Gets the name of the preference
            </summary>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Preferences.PortletPreference.Value">
            <summary>
            Gets the value of the preference
            </summary>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Preferences.PortletPreference.Scope">
            <summary>
            Gets the scope of the preference
            </summary>
        </member>
        <member name="T:Jenzabar.Portal.Framework.Security.Authorization.AccessCheckType">
            <summary>
            The type of access check to perform on one or more operations
            </summary>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Security.Authorization.AccessCheckType.Intersection">
            <summary>
            An intersection requires that all operations passed be accessible for the access check to succeed
            </summary>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Security.Authorization.AccessCheckType.Union">
            <summary>
            A union requires that only one of the operations passed be accessible for the access check to succeed
            </summary>
        </member>
        <member name="T:Jenzabar.Portal.Framework.Security.Authorization.OperationContainerType">
            <summary>
            The type of container that the operations live under
            </summary>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Security.Authorization.OperationContainerType.Unknown">
            <summary>
            An unknown container
            </summary>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Security.Authorization.OperationContainerType.Application">
            <summary>
            A portal application (typically ApplicationInfo)
            </summary>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Security.Authorization.OperationContainerType.PortletTemplate">
            <summary>
            A portlet template (typically PortletTemplate)
            </summary>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Security.Authorization.OperationContainerType.Context">
            <summary>
            A portal context (typically PortalContext)
            </summary>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Security.Authorization.OperationContainerType.Page">
            <summary>
            A portal page (typically PortalPageInfo)
            </summary>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Security.Authorization.OperationContainerType.Portlet">
            <summary>
            A portlet (typically Portlet)
            </summary>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Security.Authorization.OperationContainerType.PortletShortcut">
            <summary>
            A portlet shortcut (typically PortletShortcut)
            </summary>
        </member>
        <member name="T:Jenzabar.Portal.Framework.Security.Authorization.AuthorizationManager">
            <summary>
            Manages authorization checks on operations for contexts, pages, portlets, portlet s, and applications
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Security.Authorization.AuthorizationManager.SynchronizeAllOperations">
            <summary>
            Syncronize all operations: all context, pages, portlets etc..
            Have to do it as admin to be sure we syncronized all contexts
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Security.Authorization.AuthorizationManager.SynchAllContextObjects(Jenzabar.Portal.Framework.PortalContext)">
            <summary>
            Syncronize operations for all context lower level objects - pages, other contexts
            </summary>
            <param name="rootContext">context to synchorize </param>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Security.Authorization.AuthorizationManager.SynchronizeAllGlobalOperations">
            <summary>
            Syncronize all global operations: those which set on PortletTempales
            Have to do it as admin to be sure we syncronized all contexts
            </summary>
        </member>
        <member name="T:Jenzabar.Portal.Framework.Settings.Mappers.SiteSettingDataMapper">
            <summary>
            The object data mapper for the SiteSetting domain object.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Settings.Mappers.SiteSettingDataMapper.FindByID(Jenzabar.Portal.Framework.Data.ObjectIdentifier)">
            <summary>
            Finds the Site setting data store by a specified object identifier.
            </summary>
            <param name="id">The object identifier for the Site setting</param>
            <returns>The data from the data source for the domain object</returns>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Settings.Mappers.SiteSettingDataMapper.FindByName(System.String)">
            <summary>
            Finds the Site setting data store by name.
            </summary>
            <param name="name">The name of the Site setting</param>
            <returns>The data from the data source for the domain object</returns>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Settings.Mappers.SiteSettingDataMapper.FindByQuery(Jenzabar.Portal.Framework.Data.Querying.ObjectQuery)">
            <summary>
            Finds a collection of Site setting data stores by query.
            </summary>
            <param name="query">The query object</param>
        </member>
        <member name="T:Jenzabar.Portal.Framework.IRequiresCleanup">
            <summary>
            Defines functionality that a Portlet must implement to cleanup after it's self.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.IRequiresCleanup.Cleanup(Jenzabar.Portal.Framework.Portlet)">
            <summary>
            Signals to a Portlet that it is being deleted, and that it should remove any resources that it is using.
            </summary>
            <param name="portlet">The portlet to clean up after.</param>
        </member>
        <member name="T:Jenzabar.Portal.Framework.Mappers.LoginRedirectDataMapper">
            <summary>
            The object data mapper for the LoginRedirect domain object.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Mappers.LoginRedirectDataMapper.FindAll">
            <summary>
            Finds a collection of all login redirect data stores 
            </summary>
            <returns>The data from the data source for the domain object</returns>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Mappers.LoginRedirectDataMapper.FindByType(System.Int16)">
            <summary>
            Finds an active login redirect data store by type.
            </summary>
            <param name="type">redirect type</param>
            <returns>The data from the data source for the domain object</returns>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Mappers.LoginRedirectDataMapper.FindActive">
            <summary>
            Finds an active login redirect data store
            </summary>
            <returns>The data from the data source for the domain object</returns>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Mappers.LoginRedirectDataMapper.CreateEntry(System.Guid,System.Int16,System.Boolean,System.String)">
            <summary>
            Create a new entry in DB 
            </summary>
            <param name="guid">new entry guid</param>
            <param name="type">redirect type</param>
            <param name="active">is active</param>
            <param name="URL">url</param>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Mappers.LoginRedirectDataMapper.DeleteEntry(System.Guid)">
            <summary>
            Delete entry in DB 
            </summary>
            <param name="guid">entry guid</param>
        </member>
        <member name="T:Jenzabar.Portal.Framework.Data.DataGridExporterBase">
            <summary>
            Serves as the base class that defines the methods, properties and events common 
            to all datagrid exporters in the Web.Generic.DataGridTools
            </summary>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Data.DataGridExporterBase.MyDataGrid">
            <summary>
            Holds a reference to the datagrid being exported
            </summary>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Data.DataGridExporterBase.CurrentPage">
            <summary>
            Holds a reference to the page where the datagrid locates
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Data.DataGridExporterBase.#ctor(System.Web.UI.WebControls.DataGrid,System.Web.UI.Page)">
            <summary>
            Overloaded. Initializes a new instance of the DataGridExporterBase class.
            </summary>
            <param name="dg">The datagrid to be exported</param>
            <param name="pg">The page to which the datagrid is to be exported</param>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Data.DataGridExporterBase.#ctor(System.Web.UI.WebControls.DataGrid)">
            <summary>
            Overloaded. Initializes a new instance of the DataGridExporterBase class.
            </summary>
            <param name="dg">The datagrid to be exported</param>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Data.DataGridExporterBase.Export">
            <summary>
            Exports the current datagrid
            </summary>
        </member>
        <member name="T:Jenzabar.Portal.Framework.Data.DataGridExcelExporter">
            <summary>
            Exports a datagrid to a excel file. 
            </summary>
            <requirements>Microsoft Excel 97 or above should be installed on the client machine in order to make 
            this function work
            </requirements>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Data.DataGridExcelExporter.#ctor(System.Web.UI.WebControls.DataGrid,System.Web.UI.Page)">
            <summary>
            Overloaded. Initializes a new instance of the DataGridExcelExporter class.
            </summary>
            <param name="dg">The datagrid to be exported</param>
            <param name="pg">The page to which the datagrid is to be exported</param>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Data.DataGridExcelExporter.#ctor(System.Web.UI.WebControls.DataGrid)">
            <summary>
            Overloaded. Initializes a new instance of the DataGridExcelExporter class.
            </summary>
            <param name="dg">The datagrid to be exported</param>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Data.DataGridExcelExporter.Export">
            <summary>
            Overloaded. Exports a datagrid to an excel file, the title of which is empty
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Data.DataGridExcelExporter.FrontDecorator(System.Web.UI.HtmlTextWriter)">
            <summary>
            Renders the html text before the datagrid.
            </summary>
            <param name="writer">A HtmlTextWriter to write html to output stream</param>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Data.DataGridExcelExporter.RearDecorator(System.Web.UI.HtmlTextWriter)">
            <summary>
            Renders the html text after the datagrid.
            </summary>
            <param name="writer">A HtmlTextWriter to write html to output stream</param>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Data.DataGridExcelExporter.Export(System.String)">
            <summary>
            Exports the datagrid to an Excel file with the name of the datasheet provided by the passed in parameter
            </summary>
            <param name="reportName">Name of the datasheet.
            </param>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Data.DataGridExcelExporter.RecursiveClear(System.Web.UI.Control)">
            <summary>
            Iterates a control and its children controls, ensuring they are all LiteralControls
            <remarks>
            Only LiteralControl can call RenderControl(System.Web.UI.HTMLTextWriter htmlWriter) method. Otherwise 
            a runtime error will occur. This is the reason why this method exists.
            </remarks>
            </summary>
            <param name="control">The control to be cleared and verified</param>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Data.DataGridExcelExporter.ClearChildControls(System.Web.UI.WebControls.DataGrid)">
            <summary>
            Clears the child controls of a Datagrid to make sure all controls are LiteralControls
            </summary>
            <param name="dg">Datagrid to be cleared and verified</param>
        </member>
        <member name="T:Jenzabar.Portal.Framework.Data.CellFormater">
            <summary>
            HTML Encodes an entire DataGrid. 
            It iterates through each cell in the TableRow, ensuring that all 
            the text being displayed is HTML Encoded, irrespective of whether 
            they are just plain text, buttons, hyperlinks, multiple controls etc..
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Data.CellFormater.#ctor">
            <summary>
            Constructs an instance of the CellFormater class.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Data.CellFormater.AdHocHTMLEncode(System.Web.UI.WebControls.DataGridItem)">
            <summary>
            Method that HTML Encodes an entire DataGrid. 
            It iterates through each cell in the TableRow, ensuring that all 
            the text being displayed is HTML Encoded, irrespective of whether 
            they are just plain text, buttons, hyperlinks, multiple controls etc..
            <seealso cref="E:System.Web.UI.WebControls.DataGrid.ItemDataBound">DataGrid.ItemDataBound Event</seealso>
            </summary>
            <param name="item">
            The DataGridItem that is currently being bound in the calling Web 
            Page's DataGrid.ItemDataBound Event.
            </param>
            <remarks>
            This method should be called from the 
            <c>DataGrid_ItemDataBound(object sender, System.Web.UI.WebControls.DataGridItemEventArgs e)</c> 
            event in the respective Web View Codebehind.
            </remarks>
            <example>
                     We want to HTMLEncode a complete DataGrid (all columns and all 
                     rows that may/do contain characters that will require encoding 
                     for display in HTML) called dgIssues.
                     Use the following code for the ItemDataBound Event:
                     <code>
                          private void dgIssues_ItemDataBound(object sender, System.Web.UI.WebControls.DataGridItemEventArgs e)
                          {
                               WebMethod wm = new WebMethod();
                               wm.DataGrid_ItemDataBound_HTMLEncode((DataGridItem) e.Item);
                          }//dgIssues_ItemDataBound
                     </code>
            </example>
        </member>
        <member name="T:Jenzabar.Portal.Framework.Data.PersistenceState">
            <summary>
            The state of the object in relation to the data source
            </summary>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Data.PersistenceState.New">
            <summary>
            The object is new, but has not been added to the data source
            </summary>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Data.PersistenceState.Modified">
            <summary>
            The object has been modified, but has not been updated in the data source
            </summary>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Data.PersistenceState.MarkedForDeletion">
            <summary>
            The object has been marked for deletion, but has not been deleted from the data source
            </summary>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Data.PersistenceState.Deleted">
            <summary>
            The object has been deleted from the data source, and is now invalid
            </summary>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Data.PersistenceState.Current">
            <summary>
            The object has the same data as the data source since the last time it was checked
            </summary>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Data.PersistenceState.BatchCurrent">
            <summary>
            The object has the same data as the data source, but any changes have not been commited because the batch is still pending
            </summary>
        </member>
        <member name="T:Jenzabar.Portal.Framework.PortletTemplate">
            <summary>
            Summary description for PortletTemplate.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.PortletTemplate.Create(System.Type)">
            <summary>
            Creates a new portlet template for the type specified if there is not already one.
            </summary>
            <param name="portletType">The <see cref="T:System.Type"/> for the portlet</param>
            <returns>The newly created and committed PortletTemplate</returns>
        </member>
        <member name="M:Jenzabar.Portal.Framework.PortletTemplate.Create(System.String,System.String,Jenzabar.Portal.Framework.ApplicationInfo)">
            <summary>
            Creates a new portlet template entry in the directory.
            </summary>
            <param name="name">The name. The format should be like: '[ICS] MyPortlet'</param>
            <param name="portletPath">The assembly name, namespace and class name associated with this portlet template. Ex: Jenzabar.Portal.Web,Jenzabar.ICS.Web.Portlets.HandoutPortlet.HandoutPortlet</param>
            <param name="application">The application associated with this template. Ex: ApplicationInfo.FindByName("ICS")</param>
            <returns></returns>
        </member>
        <member name="M:Jenzabar.Portal.Framework.PortletTemplate.FindByDN(System.String)">
            <summary>
            Retrieves a PortletTemplate from its distinguished name.
            </summary>
            <param name="dn">The distinguished name for the PortletTemplate to find.</param>
            <returns>The PortletTemplate with coresponding distinguished name, or null if there is no match.</returns>
            <remarks>This is the most efficient way of accessing a PortletTemplate. It is recomended that you use this finder method for locating PortletTemplates when possible.</remarks>
        </member>
        <member name="M:Jenzabar.Portal.Framework.PortletTemplate.FindByName(System.String)">
            <summary>
            Finds a portlet template from it's name. This will acces the object without searching and is just as fast as accessing it via it's distinguished name.
            </summary>
            <param name="name">The name of the portlet template to find.</param>
            <returns>The PortletTemplate with matching name, or null if the template is not found.</returns>
            <remarks>This method will not use a <see cref="T:System.DirectoryServices.DirectorySearcher"/> to find the PortletTemplate, it will access the entry directly by calculating the distinguished name for the PortletTemplate give the name passed into this function.</remarks>
        </member>
        <member name="M:Jenzabar.Portal.Framework.PortletTemplate.FindAll">
            <summary>
            Searches for all of the installed PortletTemplates.
            </summary>
            <returns>An array of all the PortletTemplates that have been installed.</returns>
            <remarks>It is recomended that you use FindByDN or FindByName when possible, as that will be the fastest way of accessing a PortletTemplate.</remarks>
        </member>
        <member name="M:Jenzabar.Portal.Framework.PortletTemplate.FindByID(Jenzabar.Portal.Framework.Data.ObjectIdentifier)">
            <summary>
            Searches for a PortletTemplate based on it's ID.
            </summary>
            <param name="id">The ID of the PortletTemplate to find.</param>
            <returns>The PortletTemplate with the specified Id, or null if the template is not found.</returns>
            <remarks>It is recomended that you use FindByDN or FindByName when possible, as that will be the fastest way of accessing a PortletTemplate.</remarks>
        </member>
        <member name="M:Jenzabar.Portal.Framework.PortletTemplate.FindByType(System.Type)">
            <summary>
            Searches for a PortletTemplate based on the System.Type for a class that inherits from PortletBase.
            </summary>
            <param name="type">The Sytem.Type for the PortletBase inheriting class.</param>
            <returns>The PortletTemplate for the specified type of portlet, or null if there is no portlet type to match that portlet type.</returns>
            <remarks>It is recomended that you use FindByDN or FindByName when possible, as that will be the fastest way of accessing a PortletTemplate.</remarks>
        </member>
        <member name="M:Jenzabar.Portal.Framework.PortletTemplate.CreateInstance">
            <summary>
            Creates a new instance of the Portlet that will be used to serve requests.
            </summary>
            <returns>An instance of the portlet or null if the portlet type is incorrect.</returns>
        </member>
        <member name="M:Jenzabar.Portal.Framework.PortletTemplate.GetReleaseTemplates(Jenzabar.Portal.Framework.PortletTemplate[])">
            <summary>
            In Release mode function returns from given array of templates thise which have property 
            InDevelopment = false, i.e. done
            In debug mode arrTemplates will be returned
            </summary>
            <param name="arrTemplates">array of templates</param>
            <returns>array of templates</returns>
            <remarks>used in PortalContext.PortletTemplatesAllowed property - to prevent in Release mode creation 
            of portlets from templates which are not fully developed </remarks>
        </member>
        <member name="M:Jenzabar.Portal.Framework.PortletTemplate.GetAddableToPageTemplates(Jenzabar.Portal.Framework.PortletTemplate[])">
            <summary>
            returns addable to page templates
            </summary>
            <param name="arrTemplates">array of templates</param>
            <returns>array of templates</returns>
            <remarks>used in Admin portlets for templates like MyInfo to prevent adding them to page</remarks>
        </member>
        <member name="P:Jenzabar.Portal.Framework.PortletTemplate.Application">
            <summary>
            The application associated with this template.
            </summary>
        </member>
        <member name="P:Jenzabar.Portal.Framework.PortletTemplate.PortletPath">
            <summary>
            The assembly name, namespace and class name associated with this portlet template.
            </summary>
            <example>Jenzabar.Portal.Web,Jenzabar.ICS.Web.Portlets.HandoutPortlet.HandoutPortlet</example>
        </member>
        <member name="P:Jenzabar.Portal.Framework.PortletTemplate.SystemType">
            <summary>
            Gets the <see cref="T:System.Type"/> for the Portlet that this is a template for. This will be a class that inherits from PortletBase
            </summary>
        </member>
        <member name="P:Jenzabar.Portal.Framework.PortletTemplate.Children">
            <summary>
            Childer - return all child Secured Active Directory Objects
            in this case - only operations
            </summary>
        </member>
        <member name="P:Jenzabar.Portal.Framework.PortletTemplate.IsInDevelopment">
            <summary>
            property tells whether portlet template is still in development ;
            used in Site admin to show such in DEBUG mode, but to hide in RELEASE mode
            
            </summary>
        </member>
        <member name="P:Jenzabar.Portal.Framework.PortletTemplate.IsHiddenFromAddToPage">
            <summary>
            property tells whether portlet template is hidden from Add to page
            If true - portlet template willnot be available for adding to page 
            from site admin and page admin screens. Used in templates like MyInfo
            </summary>
        </member>
        <member name="T:Jenzabar.Portal.Framework.PortalCampusGroupContext">
            <summary>
            A PortalContext for campus groups.
            </summary>
        </member>
        <member name="T:Jenzabar.Portal.Framework.PortalContext">
            <summary>
            A context
            </summary>
            <remarks>
            This domain object is used to access and manipulate the data for a portal context
            
            Contexts contain pages, portlet instances, security groups, and other contexts
            </remarks>
        </member>
        <member name="M:Jenzabar.Portal.Framework.PortalContext.FindPortlet(System.Type)">
            <summary>
            Locates a portlet within this context based on it's type regardless of the page it is on.
            </summary>
            <param name="portletType">The <see cref="T:System.Type"/> of the portlet to find.</param>
            <returns>The first portlet of matching type, or null if no portlet is found.</returns>
        </member>
        <member name="M:Jenzabar.Portal.Framework.PortalContext.Create(Jenzabar.Portal.Framework.PortalContext,System.String)">
            <summary>
            Create new instance of PortalContext
            </summary>
            <param name="parentContext">parent context</param>
            <param name="name">name of context</param>
            <returns>new instance of PortalContext</returns>
        </member>
        <member name="M:Jenzabar.Portal.Framework.PortalContext.Create(Jenzabar.Portal.Framework.PortalContext,System.String,System.String)">
            <summary>
            Create new instance of PortalContext
            </summary>
            <param name="parentContext">parent context</param>
            <param name="name">name of context</param>
            <param name="displayName">display name</param>
            <returns>new instance of PortalContext</returns>
        </member>
        <member name="M:Jenzabar.Portal.Framework.PortalContext.Create(Jenzabar.Portal.Framework.PortalContext,System.String,System.String,System.Boolean,System.Boolean)">
            <summary>
            Create new instance of PortalContext
            </summary>
            <param name="parentContext">parent context</param>
            <param name="name">name of context</param>
            <param name="displayName">display name</param>
            <param name="createDefaultPage">if true - default page for context will be created</param>
            <param name="changeDuplicatedName">if true - if object with such name exist in ADAM - name will be changed to unique string,
            display name will stay the same; if false - error "object already exists" will be thrown</param>
            <returns>new instance of PortalContext</returns>
        </member>
        <member name="M:Jenzabar.Portal.Framework.PortalContext.FindByID(Jenzabar.Portal.Framework.Data.ObjectIdentifier)">
            <summary>
            Searches for a PortalContext using it's id.
            </summary>
            <param name="id">The id for the PortalContext to find.</param>
            <returns>The PortalContext with matching id, or null if there is no PortalContext that the current user hass access to with the specified id.</returns>
            <remarks>It is more efficient to use the FindByDn method to locate a PortalContext, this method may require a search through all of the PortalContext objects to locate the specific PortalContext that you are looking for.</remarks>
        </member>
        <member name="M:Jenzabar.Portal.Framework.PortalContext.FindByDN(System.String)">
            <summary>
            find by distinguished name
            </summary>
            <param name="dn">the name</param>
            <example>PortalContext.FindByDN(CN=new one,CN=ICS,CN=Portal,O=Jenzabar,C=US)</example>
            <returns></returns>
        </member>
        <member name="M:Jenzabar.Portal.Framework.PortalContext.FindByGuid(System.Guid)">
            <summary>
            Searches for a PortalContext using it's globaly unique id.
            </summary>
            <param name="guid">The globaly unique id for the PortalContext to find.</param>
            <returns>The PortalContext with matching globaly unique id, or null if there is no PortalContext that the current user hass access to with the specified id.</returns>
            <remarks>It is more efficient to use the FindByDn method to locate a PortalContext, this method requires a search through all of the PortalContext objects to locate the specific PortalContext that you are looking for.</remarks>
        </member>
        <member name="M:Jenzabar.Portal.Framework.PortalContext.FindByPath(System.String)">
            <summary>
            Finds a context from a path
            </summary>
            <param name="path">The path to the context</param>
            <returns>The context if found, null otherwise</returns>
            <remarks>
            The path to a context is represented by a series of context names seperated by either a forward slash or a backslash.
            Leading and trailing slashes are ignored.
            </remarks>
            <example>
            PortalContext context = PortalContext.FindByPath("/ContextName1/ContextName2/TheTargetContext/");
            -- or --
            PortalContext context = PortalContext.FindByPath("\ContextName1\ContextName2\TheTargetContext\");
            </example>
        </member>
        <member name="M:Jenzabar.Portal.Framework.PortalContext.FindByParentContextAndName(Jenzabar.Portal.Framework.PortalContext,System.String)">
            <summary>
            Finds a context by given parent context and name
            </summary>
            <param name="name">The name to the context</param>
            <param name="parent">parent context</param>
            <returns>The context if found, null otherwise</returns>
        </member>
        <member name="M:Jenzabar.Portal.Framework.PortalContext.FindRootAdminContexts">
            <summary>
            Finds all of the lowest level portal contexts that the current user is an admin of.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Jenzabar.Portal.Framework.PortalContext.GetDefaultPage">
            <summary>
            return default page
            </summary>
            <returns>default page or null</returns>
        </member>
        <member name="M:Jenzabar.Portal.Framework.PortalContext.IsPortletTemplateAllowed(Jenzabar.Portal.Framework.PortletTemplate)">
            <summary>
            return true if temlpate is for creation allowed in the context;
            false otherview ot if template is null
            </summary>
            <param name="template">PortletTemplate object</param>
            <returns></returns>
        </member>
        <member name="M:Jenzabar.Portal.Framework.PortalContext.IsParentOf(Jenzabar.Portal.Framework.PortalContext)">
            <summary>
            Checks to see if the specified decendant context is somewhere under this context in the tree of contexts.
            </summary>
            <param name="decendant">The PortalContext to check existance under this context in the tree</param>
            <returns>true if decendant is under this context in the tree</returns>
        </member>
        <member name="M:Jenzabar.Portal.Framework.PortalContext.Delete">
            <summary>
            Delete context and all it's childs
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.PortalContext.Refresh">
            <summary>
            Refresh context 
            </summary>
        </member>
        <member name="P:Jenzabar.Portal.Framework.PortalContext.AllowManagementOfCampusGroups">
            <summary>
            True if this context should allow campus groups admins to administer the entire list of groups from a link in the sidebar
            </summary>
        </member>
        <member name="P:Jenzabar.Portal.Framework.PortalContext.ContextType">
            <summary>
            Gets the type of the context;
            </summary>
            <remarks>no corresponding private var cause it is enum</remarks>
        </member>
        <member name="P:Jenzabar.Portal.Framework.PortalContext.ParentContext">
            <summary>
            return parent context for this context or null if this is the root context.
            </summary>
        </member>
        <member name="P:Jenzabar.Portal.Framework.PortalContext.IsRoot">
            <summary>
            true if the context is the root context for the entire site. otherwise false.
            </summary>
        </member>
        <member name="P:Jenzabar.Portal.Framework.PortalContext.DisableAdminScreen">
            <summary>
            True, meaning that there is no "Admin [this contexts name]" link at the top of the pages for this typ of context.
            </summary>
        </member>
        <member name="P:Jenzabar.Portal.Framework.PortalContext.DefaultPage">
            <summary>
            Gets and sets the page that will be displayed when a user navigates to the context.
            </summary>
        </member>
        <member name="P:Jenzabar.Portal.Framework.PortalContext.Pages">
            <summary>
            return all pages under this context
            </summary>
        </member>
        <member name="P:Jenzabar.Portal.Framework.PortalContext.ShowChildNodesInSideBar">
            <summary>
            property tells whether child nodes (sub-contexts) will be shown in side bar;
            </summary>
        </member>
        <member name="P:Jenzabar.Portal.Framework.PortalContext.Order">
            <summary>
            Context order; Property is optional in ADAM so there is probability some context will not have it;
            </summary>
        </member>
        <member name="P:Jenzabar.Portal.Framework.PortalContext.PortletTemplatesAllowed">
            <summary>
            Gets a list of all portlet templates availabe for this Context.
            Supposed to be used in admin portlets only. 
            Logic: property "jenzabar-ICSNET-AllowedPortlets" is optional. If it exists and not empty -
            it stores DNs of available portlet templates; If it does not exist - go to
            upper level context search for the porperty.
            If it is not found in all parent nodes - all Portlet Templates are available.
            </summary>
        </member>
        <member name="P:Jenzabar.Portal.Framework.PortalContext.Roles">
            <summary>
            Gets a list of the roles that are defined for this Context.
            </summary>
        </member>
        <member name="P:Jenzabar.Portal.Framework.PortalContext.ChildNodes">
            <summary>
            Gets the contexts directly under this context
            </summary>
            <remarks>
            A read-only list of contexts that are direct children of the current context
            </remarks>
        </member>
        <member name="P:Jenzabar.Portal.Framework.PortalContext.ParentNodes">
            <summary>
            Gets the contexts above this context
            </summary>
            <remarks>
            A read-only list of parent contexts all the way up the hierarchy
            </remarks>
        </member>
        <member name="P:Jenzabar.Portal.Framework.PortalContext.Children">
            <summary>
            Gets a listing of all the pages in this context.
            </summary>
            <remarks>For use internaly in editing security.</remarks>
        </member>
        <member name="P:Jenzabar.Portal.Framework.PortalContext.RootContext">
            <summary>
            Gets the root Context for the portal, this is basicly the home directory
            </summary>
        </member>
        <member name="P:Jenzabar.Portal.Framework.PortalContext.RootMyPagesContext">
            <summary>
            Gets the root container for the my pages contexts
            </summary>
        </member>
        <member name="P:Jenzabar.Portal.Framework.PortalContext.RootCampusGroupsContext">
            <summary>
            Gets the root context for the campus life section of the site, where campus groups are
            </summary>
        </member>
        <member name="P:Jenzabar.Portal.Framework.PortalContext.RootDISContext">
            <summary>
            root courses context
            </summary>
        </member>
        <member name="P:Jenzabar.Portal.Framework.PortalContext.URL">
            <summary>
            Gets the application relative URL for this context.
            Ex. ./Context1/Context2/
            </summary>
            <remarks>
            THe application relative URL will include a . and will need to be turned into a full url by calling Page.
            </remarks>
        </member>
        <member name="P:Jenzabar.Portal.Framework.PortalContext.Text">
            <summary>
            gets the text that will be displayed for links to this context.
            </summary>
        </member>
        <member name="P:Jenzabar.Portal.Framework.PortalContext.ToolTip">
            <summary>
            Gets the text that will be displayed when the user mouses over a hyperlink to this context
            </summary>
        </member>
        <member name="P:Jenzabar.Portal.Framework.PortalCampusGroupContext.AllowManagementOfCampusGroups">
            <summary>
            true, indicating that the user if capable of admining all campus groups should see a link on the sidebar to admin the campus groups
            </summary>
        </member>
        <member name="T:Jenzabar.Portal.Framework.Security.PortalOperationGrantInfo">
            <summary>
            Summary description for PortalOperationCreationInfo.
            </summary>
        </member>
        <member name="T:Jenzabar.Portal.Framework.NameValueDataSource">
            <summary>
            A serializable name value pair
            </summary>
            <remarks>
            NameValueDataSource implements customize XML serialization
            that handles both individual NameValueDataSource objects and NameValueDataSource arrays
            </remarks>
        </member>
        <member name="M:Jenzabar.Portal.Framework.NameValueDataSource.#ctor(Jenzabar.Portal.Framework.Data.ObjectIdentifier,System.String,System.String)">
            <summary>
            Constructs a name value data source
            </summary>
            <param name="id">The ID of the source</param>
            <param name="name">The name</param>
            <param name="value">The value</param>
        </member>
        <member name="M:Jenzabar.Portal.Framework.NameValueDataSource.Create(System.String,System.String)">
            <summary>
            Creates a name value data source
            </summary>
            <param name="name">The name</param>
            <param name="value">The value</param>
        </member>
        <member name="M:Jenzabar.Portal.Framework.NameValueDataSource.Deserialize(System.String)">
            <summary>
            Deserialize a serialized XML array of NameValueDataSources
            </summary>
            <param name="inputXML">The XML</param>
            <returns>An array of name/value data sources</returns>
        </member>
        <member name="M:Jenzabar.Portal.Framework.NameValueDataSource.Serialize(Jenzabar.Portal.Framework.NameValueDataSource[])">
            <summary>
            Serializes an array of NameValueDataSources
            </summary>
            <param name="nameValueDataSources">The NameValueDataSource array to serialize</param>
            <returns>An array of name/value data sources</returns>
        </member>
        <member name="M:Jenzabar.Portal.Framework.NameValueDataSource.ExtractStringValue(Jenzabar.Portal.Framework.NameValueDataSource[])">
            <summary>
            Retrieves the value of the first item of an array of name/value pairs
            </summary>
            <param name="nvds">The array of NameValueDataSources of which to get the first value</param>
            <returns>String value of the first item of the array of name/value pairs</returns>
        </member>
        <member name="M:Jenzabar.Portal.Framework.NameValueDataSource.ExtractIntValue(Jenzabar.Portal.Framework.NameValueDataSource[])">
            <summary>
            Retrieves the value of the first element of an array of name/value pairs
            </summary>
            <param name="nvds">The array of NameValueDataSources of which to get the first value</param>
            <returns>Int value of the first element of the array of name/value pairs</returns>
        </member>
        <member name="M:Jenzabar.Portal.Framework.NameValueDataSource.ExtractBoolValue(Jenzabar.Portal.Framework.NameValueDataSource[])">
            <summary>
            Retrieves the value of the first element of an array of name/value pairs
            </summary>
            <param name="nvds">The array of NameValueDataSources of which to get the first value</param>
            <returns>Bool value which is true if the first element of the name/value pair is not an empty string</returns>
        </member>
        <member name="M:Jenzabar.Portal.Framework.NameValueDataSource.ExtractBoolValue(Jenzabar.Portal.Framework.NameValueDataSource[],System.String)">
            <summary>
            Retrieves the value of the first element of an array of name/value pairs
            </summary>
            <param name="nvds">The array of NameValueDataSources of which to get the first value</param>
            <param name="correctValue">The string which is checked against the value of the first element (not case-sensitive)</param>
            <returns>Bool value which is true if the first element of the name/value pair matches the correctValue parameter</returns>
        </member>
        <member name="M:Jenzabar.Portal.Framework.NameValueDataSource.ExtractBoolValue(Jenzabar.Portal.Framework.NameValueDataSource[],System.String,System.Boolean)">
            <summary>
            Retrieves the value of the first item of an array of name/value pairs
            </summary>
            <param name="nvds">The array of NameValueDataSources of which to get the first value</param>
            <param name="correctValue">The string which is checked against the value of the first element</param>
            <param name="isCaseSensitive">Whether the comparison of correctValue and the first element's value should be case-sensitive</param>
            <returns>Bool value which is true if the first element of the name/value pair matches the correctValue parameter</returns>
        </member>
        <member name="P:Jenzabar.Portal.Framework.NameValueDataSource.ID">
            <summary>
            Gets the ID of the data source
            </summary>
        </member>
        <member name="P:Jenzabar.Portal.Framework.NameValueDataSource.Name">
            <summary>
            Gets or sets the name of the pair
            </summary>
        </member>
        <member name="P:Jenzabar.Portal.Framework.NameValueDataSource.Value">
            <summary>
            Gets or sets the value of the pair
            </summary>
        </member>
        <member name="P:Jenzabar.Portal.Framework.NameValueDataSource.Scope">
            <summary>
            Gets the scope of the pair
            </summary>
        </member>
        <member name="T:Jenzabar.Framework.Licensing.LicenseOption">
            <summary>
            Summary description for LicenseOption.
            </summary>
        </member>
        <member name="T:Jenzabar.Portal.Framework.IRequiresInstall">
            <summary>
            The required methods and properties for an object that can be installed
            </summary>
        </member>
        <member name="T:Jenzabar.Portal.Framework.PortalContextType">
            <summary>
            The type of context
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.StudentInfo.IsOnLeaveOfAbsence">
            <summary>
            Whether the user associated with this object is on a leave of absence
            </summary>
            <returns>bool showing if user is on a leave of absence</returns>
        </member>
        <member name="M:Jenzabar.Portal.Framework.StudentInfo.IsOnLeaveOfAbsence(System.DateTime)">
            <summary>
            Whether the user associated with this object is on a leave of absence
            </summary>
            <param name="dt">The date we want to test the loa for</param>
            <returns>bool showing if user is on a leave of absence</returns>
        </member>
        <member name="P:Jenzabar.Portal.Framework.StudentInfo.ID">
            <summary>
            Unique ID of object that can't be modified.
            </summary>
        </member>
        <member name="P:Jenzabar.Portal.Framework.StudentInfo.Probation">
            <summary>
            A code string  for the user's current academic probation
            </summary>
        </member>
        <member name="P:Jenzabar.Portal.Framework.StudentInfo.Standing">
            <summary>
            A string giving a description of the user's current academic probation standing
            </summary>
        </member>
        <member name="T:Jenzabar.Portal.Framework.PortalCampusContext">
            <summary>
            Represents a Campus or School, like the School of Business or University of Massachusetts Boston Campus.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.PortalCampusContext.#ctor(Jenzabar.Portal.Framework.Security.ActiveDirectoryObject.ADDataStore)">
            <summary>
            Creates a new instance of the PortalCampusContext filling it with data from the specified directory entry.
            </summary>
            <param name="entry"></param>
        </member>
        <member name="M:Jenzabar.Portal.Framework.PortalCampusContext.FindAll">
            <summary>
            Finds all of the Campuses that the current user has access to.
            </summary>
            <returns>All campuses that the current user has access to.</returns>
        </member>
        <member name="P:Jenzabar.Portal.Framework.PortalCampusContext.Tabs">
            <summary>
            Gets a listing of all the contexts directly below this context that are to be used as the tabs.
            </summary>
        </member>
        <member name="T:Jenzabar.Portal.Framework.JICSApplication">
            <summary>
            This class is similar to the HttpApplication class, but for all types of applications (web, winforms, service, etc.).
            </summary>
        </member>
        <member name="T:Jenzabar.Framework.Licensing.ILicenseKeyFormatter">
            <summary>
            Summary description for ILicenseKeyFormatter.
            </summary>
        </member>
        <member name="T:Jenzabar.Framework.Cryptography.Cryptography">
            <summary>
            Summary description for Cryptography.
            </summary>
        </member>
        <member name="T:Jenzabar.Framework.Licensing.LicenseOptionSet_MultiSelect">
            <summary>
            Summary description for LicenseOptionSet_MultiSelect.
            </summary>
        </member>
        <member name="T:Jenzabar.Portal.Framework.Settings.Meta.PortletSettingDescriptor">
            <summary>
            Summary description for PortletSettingDescriptor.
            </summary>
        </member>
        <member name="T:Jenzabar.Portal.Framework.Data.Database.DBObjectDescriptorBase">
            <summary>
            A base class for DBObjectDescriptor classes
            </summary>
            <remarks>
            Provides a minimal abstract implementation for IObjectDataMapper for the database
            </remarks>
        </member>
        <member name="T:Jenzabar.Portal.Framework.Data.ObjectDescriptorBase">
            <summary>
            A utility base class for object descriptors
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Data.ObjectDescriptorBase.ToString">
            <summary>
            Gets a plain english representation of the object descriptor
            </summary>
            <returns>The name of the object descriptor, not including the word "Descriptor"</returns>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Data.Database.DBObjectDescriptorBase.LoadObjectID(Jenzabar.Portal.Framework.Data.ObjectDataStore,Jenzabar.Portal.Framework.Data.IObjectDescriptor)">
            <summary>
            Loads the object identifier for a domain object that lives in the database
            </summary>
            <param name="objectData">The object data store for the domain object</param>
            <param name="objectDescriptor">The object descriptor for the domain object</param>
            <returns>The object identifier</returns>
        </member>
        <member name="T:Jenzabar.Portal.Framework.Data.IObjectDescriptor">
            <summary>
            Required methods and properties for all object descriptors
            Object descriptors is a
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Data.IObjectDescriptor.LoadObjectID(Jenzabar.Portal.Framework.Data.ObjectDataStore)">
            <summary>
            Loads the ID for the current object type from the object's data store
            If no ID is found (null, DBNull, etc), the one should be generated automatically
            </summary>
            <param name="objectData">The data store for the object</param>
            <returns>The ID for the object</returns>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Data.IObjectDescriptor.ObjectName">
            <summary>
            Gets the name of the table (or similar construct) in the underlying data source
            </summary>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Data.IObjectDescriptor.ObjectPrimaryKey">
            <summary>
            Gets the primary key (or similar construct) of the table
            </summary>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Data.IObjectDescriptor.ObjectProperties">
            <summary>
            Gets the array of properties for the object descriptor
            </summary>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Data.IObjectDescriptor.CacheTimeout">
            <summary>
            Gets the amount of time (in seconds) until a cached object of this type expires
            </summary>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Data.IObjectDescriptor.ObjectDataMapper">
            <summary>
            Gets the .NET type for the object data mapper that corrisponds to the domain object for the object descriptor
            </summary>
        </member>
        <member name="T:Jenzabar.Portal.Framework.Data.Database.IDBObjectDescriptor">
            <summary>
            Required methods and properties for an object descriptor that describes a domain object that lives in a database
            </summary>
            <remarks>
            If any one of the stored procedure properties returns the name of a stored procedure, all must return one
            </remarks>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Data.Database.IDBObjectDescriptor.SelectStoredProcedure">
            <summary>
            Gets the SELECT stored procedure used to retrieve an objects data from the database
            </summary>
            <remarks>
            This stored procedure must accept one argument, the uniqueidentifier that is the primary key for the record
            </remarks>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Data.Database.IDBObjectDescriptor.UpdateStoredProcedure">
            <summary>
            Gets the UPDATE stored procedure used to update an object's data in the database
            </summary>
            <remarks>
            This stored procedure must accept an argument for each property defined in the object descriptor
            The types of these properties must match the types defined in the object descriptor
            </remarks>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Data.Database.IDBObjectDescriptor.InsertStoredProcedure">
            <summary>
            Gets the INSERT stored procedure used to insert an object's data in the database
            </summary>
            <remarks>
            This stored procedure must accept an argument for each property defined in the object descriptor
            The types of these properties must match the types defined in the object descriptor
            </remarks>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Data.Database.IDBObjectDescriptor.DeleteStoredProcedure">
            <summary>
            Gets the DELETE stored procedure used to delete an objects data from the database
            </summary>
            <remarks>
            This stored procedure must accept one argument, the uniqueidentifier that is the primary key for the record
            </remarks>
        </member>
        <member name="T:Jenzabar.Portal.Framework.IPortletInstaller">
            <summary>
            Defines functionality required by a class that provides install time functionality for a portlet.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.IPortletInstaller.PortletAddedToPage(Jenzabar.Portal.Framework.Portlet,Jenzabar.Portal.Framework.PortalPageInfo)">
            <summary>
            Called when a portlet is added to a page.
            </summary>
            <param name="portlet"></param>
            <param name="page"></param>
        </member>
        <member name="M:Jenzabar.Portal.Framework.IPortletInstaller.PortletRemovedFromPage(Jenzabar.Portal.Framework.Portlet,Jenzabar.Portal.Framework.PortalPageInfo)">
            <summary>
            Called when a portlet is removed from a page.
            </summary>
            <param name="portlet">The portlet that is being removed from the page.</param>
            <param name="page">The page that the portlet is being removed from</param>
        </member>
        <member name="T:Jenzabar.Portal.Framework.PortletInstaller">
            <summary>
            Provides base functionality for a class that provides install-time support for a portlet
            </summary>
            <remarks>
            Override the members of this class to provide code that should be executed when a portlet is added to a page or removed from a page.
            </remarks>
        </member>
        <member name="M:Jenzabar.Portal.Framework.PortletInstaller.PortletAddedToPage(Jenzabar.Portal.Framework.Portlet,Jenzabar.Portal.Framework.PortalPageInfo)">
            <summary>
            Override this function to execute custom code when a new portlet is created and added to a page
            </summary>
            <param name="portlet">The portlet that was added to the page</param>
            <param name="page">The page that the portlet was added to</param>
        </member>
        <member name="M:Jenzabar.Portal.Framework.PortletInstaller.PortletRemovedFromPage(Jenzabar.Portal.Framework.Portlet,Jenzabar.Portal.Framework.PortalPageInfo)">
            <summary>
            Override this function to execute custom code when an existing portlet is removed from a page and deleted.
            </summary>
            <param name="portlet">The portlet that is being removed from a page</param>
            <param name="page">The page that the portlet is being removed from</param>
        </member>
        <member name="T:Jenzabar.Portal.Framework.PortletInstallerAttribute">
            <summary>
            Specifies the class used to implement install-time services for a portlet.
            </summary>
            <remarks>
            The class you use for the install-time services must implement the IPortletInstaller interface.
            </remarks>
        </member>
        <member name="M:Jenzabar.Portal.Framework.PortletInstallerAttribute.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the PortletInstallerAttribute class using the type that provides install-time services.
            </summary>
            <param name="portletInstallerType">A <see cref="T:System.Type"/> that represents the class that provides install-time services for the portlet this attribute is bound to.</param>
            <remarks>
            The class you use for the install-time services must implement the IPortletInstaller interface.
            </remarks>
        </member>
        <member name="P:Jenzabar.Portal.Framework.PortletInstallerAttribute.InstallerType">
            <summary>
            Gets the <see cref="T:System.Type"/> that represents the class that provides install-time services for the portlet this attribute is bound to.
            </summary>
            <remarks>
            The class you use for the install-time services must implement the IPortletInstaller interface.
            </remarks>
        </member>
        <member name="T:Jenzabar.Portal.Framework.Preferences.Meta.PortletPreferenceDescriptor">
            <summary>
            Summary description for PortletPreferenceDescriptor.
            </summary>
        </member>
        <member name="T:Jenzabar.Framework.Licensing.Licensing.LicenseInteger">
            <summary>
            Summary description for LicenseInteger.
            </summary>
        </member>
        <member name="T:Jenzabar.Portal.Framework.Data.ObjectDataStore">
            <summary>
            Stores the data for a domain object, including any data for inherited domain objects
            </summary>
            <remarks>
            The object data store is little more than a "smart wrapper" around a Hashtable.
            
            This smart wrapper allows access to the data using the object descriptors for the
            domain objects whose data is contained within the object data store.
            </remarks>
            <example>
            Inside a domain object, primitive data types are accessed through the object data store
            like the following:
            
            string theProperty = (string)this.ObjectData[anObjectDescriptor.PropertyName];
            
            The this.ObjectData property is, in fact, an ObjectDataStore that contains the data for
            the domain object.
            </example>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Data.ObjectDataStore.#ctor">
            <summary>
            Constructs the object data store
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Data.ObjectDataStore.#ctor(Jenzabar.Portal.Framework.Data.IPersistableObject)">
            <summary>
            Instantiates the data store and provides a parent domain object
            </summary>
            <param name="parentObject">The parent domain object</param>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Data.ObjectDataStore.Inititialize">
            <summary>
            Used internally to initialze the ObjectDataStore
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Data.ObjectDataStore.GetPropertyRowAndValidatePropertyDescriptor(Jenzabar.Portal.Framework.Data.IPropertyDescriptor)">
            <summary>
            validates the property descriptor to see if it is valid on this object data store.
            </summary>
            <param name="propertyDescriptor">The descriptor for the property being accessed</param>
            <exception cref="T:System.ArgumentException">If the propertyDescriptor is null.</exception>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Data.ObjectDataStore.ValidatePropertyReturnValue(System.Object)">
            <summary>
            Validates the return value when getting data that has been stored in the database.
            </summary>
            <param name="storedValue">The value stored in the database.</param>
            <returns>A masaged version of the data</returns>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Data.ObjectDataStore.ValidatePropertySetValue(System.Object)">
            <summary>
            Validates the value being set when there is a call to the setter of the indexer (when we are setting a property in this object data store)
            </summary>
            <param name="val">The value that the front end is setting in the datastore.</param>
            <returns>a cleaned version of the data being set, one that should be more capable of being stored in the database.</returns>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Data.ObjectDataStore.MarkForDeletion(Jenzabar.Portal.Framework.Data.IObjectDescriptor)">
            <summary>
            Marks a domain object's data as deleted
            </summary>
            <remarks>
            This must be called for each object in an inherited hierarchy of domain objects to delete the entire object
            </remarks>
            <param name="objectDescriptor">The domain object to mark for deletion</param>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Data.ObjectDataStore.Validate(Jenzabar.Portal.Framework.Data.IObjectDescriptor)">
            <summary>
            Validates that all required properties are present in the object data store
            </summary>
            <remarks>
            This must be called for each object in an inherited hierarchy of domain objects to validate the entire object
            </remarks>
            <param name="objectDescriptor">The domain object whose data should be validated</param>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Data.ObjectDataStore.Contains(Jenzabar.Portal.Framework.Data.IObjectDescriptor)">
            <summary>
            Checks to see if the object data store contains the required data for a particular domain object
            </summary>
            <remarks>
            This must be called for each object in an inherited hierarchy of domain objects to validate the entire object
            </remarks>
            <param name="objectDescriptor">The domain object whose data should be validated</param>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Data.ObjectDataStore.Item(Jenzabar.Portal.Framework.Data.IPropertyDescriptor)">
            <summary>
            Gets or sets the data for a property of the domain object
            </summary>
            <param name="propertyDescriptor">The property to get or set data for</param>
            <returns>The data from the data source for the property</returns>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Data.ObjectDataStore.Item(Jenzabar.Portal.Framework.Data.IObjectDescriptor)">
            <summary>
            Gets or sets the data for an entire domain object
            </summary>
            <remarks>
            This should typically only be used by the persistance framework
            </remarks>
            <param name="objectDescriptor">The domain object to get or set data for</param>
            <returns>The data from the data source for the domain object</returns>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Data.ObjectDataStore.ObjectTables">
            <summary>
            Gets or sets the object data tables
            </summary>
            <remarks>
            This should typically only be used by the persistance framework
            </remarks>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Data.ObjectDataStore.ParentObject">
            <summary>
            Gets or sets the parent object for the data store
            </summary>
        </member>
        <member name="T:Jenzabar.Portal.Framework.Data.ListDataMapperBase">
            <summary>
            Utility base class for list data mappers
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Data.ListDataMapperBase.PersistListItems(Jenzabar.Portal.Framework.Data.IPersistableList,Jenzabar.Portal.Framework.Data.BatchToken)">
            <summary>
            Commits IPersistableObjects contained in an persistable list to the data store
            </summary>
            <param name="list">The list containing the objects to persist</param>
            <param name="token">The token for the batch to participate in (can be null)</param>
        </member>
        <member name="T:Jenzabar.Portal.Framework.Configuration.Settings">
            <summary>
            General settings for the framework assembly.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Configuration.Settings.Refresh">
            <summary>
            Pulls in new settings information from the configuration files.
            </summary>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Configuration.Settings._EXDBServerName">
            <summary>
            EX database server name used to build the plugin connection string
            </summary>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Configuration.Settings._EXDBName">
            <summary>
            EX database name used to build the plugin connection string
            </summary>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Configuration.Settings._EXDBUserName">
            <summary>
            EX database user name used to build the plugin connection string
            </summary>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Configuration.Settings._EXDBPassword">
            <summary>
            EX database password used to build the plugin connection string
            </summary>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Configuration.Settings._EXDBAdditionalInfo">
            <summary>
            Additional EX database connection string info used to build 
            the plugin connection string
            </summary>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Configuration.Settings._EXDBType">
            <summary>
            EX DBMS (MSS or ORA) used to build the plugin connection string
            </summary>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Configuration.Settings._ERPWebServiceURL">
            <summary>
            URL for the host of ERP Web Service in the format of "http://hostname:portnumber" 
            </summary>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Configuration.Settings._ERPWebServiceAuth">
            <summary>
            Turn on/off authentication for the host of ERP Web Service. 
            </summary>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Configuration.Settings._ERPWebServiceAuthUser">
            <summary>
            The user to use for authentication for the host of ERP Web Service. 
            </summary>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Configuration.Settings._ERPWebServiceAuthPassword">
            <summary>
            The password to use for authentication for the host of ERP Web Service. 
            </summary>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Configuration.Settings._ERPWebServiceDebugXML">
            <summary>
            Turn on/off of XML debug output for ERP Web Service.
            </summary>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Configuration.Settings._ERPWebServiceDebugXMLOutputPath">
            <summary>
            The path to place the debug XML file if it is turned on. 
            </summary>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Configuration.Settings._TEDBConnection">
            <summary>
            URL for the host of TE Web Service in the format of "http://hostname:portnumber" 
            </summary>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Configuration.Settings._AuthorizeNetURL">
            <summary>
            The URL for Authorize.Net. 
            </summary>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Configuration.Settings._PluginTrace">
            <summary>
            The switch for plugin tracing. 
            </summary>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Configuration.Settings._PluginTraceFile">
            <summary>
            The filename to write plugin tracing. 
            </summary>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Configuration.Settings._PluginTraceInterfaces">
            <summary>
            The interfaces allowed for plugin tracing. 
            </summary>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Configuration.Settings._PluginTraceHostIDs">
            <summary>
            The HostIDs allowed for plugin tracing. 
            </summary>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Configuration.Settings._PluginTraceMethods">
            <summary>
            The methods allowed for plugin tracing. 
            </summary>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Configuration.Settings.Current">
            <summary>
            Gets the settings for this installation of the framework.
            </summary>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Configuration.Settings.RootPortalContextNode">
            <summary>
            Gets and sets the root node in the directory for the portal
            </summary>
            <example>
            "Portal"
            </example>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Configuration.Settings.RootCampusGroupsDN">
            <summary>
            Gets and sets the root node for Campus Groups
            </summary>
            <example>
            "CN=Campus Groups,CN=Campus Life,CN=Portal,O=Jenzabar,C=US"
            </example>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Configuration.Settings.RootDISDN">
            <summary>
            Gets and sets the root node for the DIS
            </summary>
            <example>
            "CN=Academics,CN=Portal,O=Jenzabar,C=US"
            </example>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Configuration.Settings.SmtpServer">
            <summary>
            Gets the domain name for the SMTP Server that eMail will be sent using.
            </summary>
            <remarks>This property will default to string.Empty</remarks>
            <example></example>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Configuration.Settings.SmtpDefaultEmailAddress">
            <summary>
            Gets the default address that eMail will be sent from.
            </summary>
            <remarks>This property will default to string.Empty</remarks>
            <example></example>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Configuration.Settings.DatabaseConnectionInfo">
            <summary>
            Gets and sets the connection information for the database
            </summary>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Configuration.Settings.BaseSearchDN">
            <summary>
            Gets and sets the base search distinguished name used during directory operations
            </summary>
            <example>
            "O=jenzabar,c=us"
            </example>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Configuration.Settings.PortalUsersContainer">
            <summary>
            Gets and sets the directory container used to store the users of the portal
            </summary>
            <example>
            "OU=PortalUsers,CN=Portal,O=jenzabar,c=us"
            </example>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Configuration.Settings.GuestUsername">
            <summary>
            Gets and sets the guest user's username
            </summary>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Configuration.Settings.GuestUserDN">
            <summary>
            Gets and sets the guest user's distinguished name
            </summary>
            <example>
            "CN=guest,OU=PortalUsers,CN=ICS.NET,O=jenzabar,C=us"
            </example>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Configuration.Settings.MyPagesDistinguishedName">
            <summary>
            Gets and sets the distinguished name (part of the AD path to the object) for the "My Pages" context where all of the users personal pages are stored.
            </summary>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Configuration.Settings.GuestUserPassword">
            <summary>
            Gets and sets the guest user's password
            </summary>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Configuration.Settings.EmailRegularExpression">
            <summary>
            Gets and sets the regular expression to use to validate email addresses.
            </summary>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Configuration.Settings.URLRegularExpression">
            <summary>
            Gets and sets the regular expression to use to validate URL's.
            </summary>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Configuration.Settings.UseExternalAuthentication">
            <summary>
            Whether the school uses their own authentication or if we use JENZA-ADAM.
            If this is true, Password Management must be turned off!
            </summary>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Configuration.Settings.ExternalAuthenticationPassword">
            <summary>
            If the schools uses it's own authentication, this is the generic password that all JICS ADAM users will have.
            </summary>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Configuration.Settings.LoginContext">
            <summary>
            Which LoginContext we want to load from Web.Config for the Jenzabar.Framework.Authentication Module.
            </summary>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Configuration.Settings.ERPType">
            <summary>
            Which ERPType we are accessing for ERP information
            </summary>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Configuration.Settings.ERPConnectionProfile">
            <summary>
            Which ERPConnectionProfile to connect to to retrieve ERP info
            </summary>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Configuration.Settings.ERPLinksURL">
            <summary>
            Which ERPLinksURL we are accessing for ERP URL information
            </summary>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Configuration.Settings.DirectoryConnectionInfo">
            <summary>
            Gets and sets the connection information to connect to Active Drectory.
            </summary>
            <remarks>
            This connection information does not include credentials. Instead, the current user's credentials are used during connections.
            </remarks>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Configuration.Settings.DirectoryElevatedPrivledgesConnectionInfo">
            <summary>
            Gets and sets the connection information to connect to Active Drectory when more access is needed than the default connection can provide.
            </summary>
            <remarks>
            This connection information includes the credentials of the "HighPrivs" account and is used when performing low-level operations like schema mapping
            </remarks>
        </member>
        <member name="T:Jenzabar.Portal.Framework.Configuration.ConnectionInfo">
            <summary>
            Provides basic connection information to the framework.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Configuration.ConnectionInfo.#ctor">
            <summary>
            Creates a new instance of the ConnectionInfo class with no ConnectionString.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Configuration.ConnectionInfo.#ctor(System.String)">
            <summary>
            Creates a new instance of the ConnectionInfo class with the ConnectionString specified.
            </summary>
            <param name="connectionString">The connection string that will be used to connect to the datasource.</param>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Configuration.ConnectionInfo.#ctor(System.String,System.Boolean)">
            <summary>
            Creates a new instance of the ConnectionInfo class with the ConnectionString specified and a flag indicating if the connection string is encrypted.
            </summary>
            <param name="connectionString">The connection string that will be used to connect to the datasource.</param>
            <param name="isEncrypted">A flag indicating if the connection string is encrypted.</param>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Configuration.ConnectionInfo.ConnectionString">
            <summary>
            Gets and sets the connection string that will be used to connect to the datasource.
            </summary>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Configuration.ConnectionInfo.IsConnectionStringEncrypted">
            <summary>
            Gets and sets a flag indicating if the ConnectionString is encrypted and needs to be decrypted before it can be used.
            </summary>
        </member>
        <member name="T:Jenzabar.Portal.Framework.Configuration.DatabaseConnectionInfo">
            <summary>
            Provides connection information for connecting to a database.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Configuration.DatabaseConnectionInfo.#ctor">
            <summary>
            Creates a new instance of the DatabaseConnectionInfo class without a connection string.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Configuration.DatabaseConnectionInfo.#ctor(System.String)">
            <summary>
            Creates a new instance of the DatabaseConnectionInfo class with the connection string specified.
            </summary>
            <param name="connectionString">The connection string that will be used to connect to the datasource.</param>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Configuration.DatabaseConnectionInfo.#ctor(System.String,System.Boolean)">
            <summary>
            Creates a new instance of the DatabaseConnectionInfo class with the connection string specified.
            </summary>
            <param name="connectionString">The connection string that will be used to connect to the datasource.</param>
            <param name="isEncrypted">A flag indicating if the connection string is encrypted.</param>
        </member>
        <member name="T:Jenzabar.Portal.Framework.Configuration.ActiveDirectoryConnectionInfo">
            <summary>
            Provides connection information for connecting to an active directory data store.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Configuration.ActiveDirectoryConnectionInfo.#ctor">
            <summary>
            Creates a new instance of the Jenzabar.Portal.Framework.Configuration.ActiveDirectoryConnectionInfo class.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Configuration.ActiveDirectoryConnectionInfo.#ctor(System.String,System.Boolean)">
            <summary>
            Creates a new instance of the Jenzabar.Portal.Framework.Configuration.ActiveDirectoryConnectionInfo class with the connection string specified.
            </summary>
            <param name="connectionString">The connection string that will be used to connect to the datasource.</param>
            <param name="isConnectionStringEncrytped">A flag indicating if the connection string is encrypted.</param>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Configuration.ActiveDirectoryConnectionInfo.#ctor(System.String,System.Boolean,Jenzabar.Portal.Framework.Configuration.DatabaseConnectionInfo)">
            <summary>
            Creates a new instance of the Jenzabar.Portal.Framework.Configuration.ActiveDirectoryConnectionInfo class with the connection string specified and a linked database.
            </summary>
            <param name="connectionString">The connection string that will be used to connect to the datasource.</param>
            <param name="isConnectionStringEncrytped">A flag indicating if the connection string is encrypted.</param>
            <param name="linkedDatabaseConnectionInfo">The connection information for the linked database (a database where unique ids are persisted to maintain referential integrity with portal content)</param>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Configuration.ActiveDirectoryConnectionInfo.#ctor(System.String,System.Boolean,System.String,System.Boolean,System.String,System.Boolean)">
            <summary>
            Creates a new instance of the Jenzabar.Portal.Framework.Configuration.ActiveDirectoryConnectionInfo class with the connection string specified.
            </summary>
            <param name="connectionString">The connection string that will be used to connect to the datasource.</param>
            <param name="isConnectionStringEncrytped">A flag indicating if the connection string is encrypted.</param>
            <param name="userDN">The users used to connect to active directory</param>
            <param name="IsUserDNEncrypted">true if userDN is encrypted otherwise false</param>
            <param name="password">The password used to connect to active directory</param>
            <param name="isPasswordEncrytped">true if password is encrypted otherwise false</param>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Configuration.ActiveDirectoryConnectionInfo.#ctor(System.String,System.Boolean,System.String,System.Boolean,System.String,System.Boolean,Jenzabar.Portal.Framework.Configuration.DatabaseConnectionInfo)">
            <summary>
            Creates a new instance of the Jenzabar.Portal.Framework.Configuration.ActiveDirectoryConnectionInfo class with the connection string specified.
            </summary>
            <param name="connectionString">The connection string that will be used to connect to the datasource.</param>
            <param name="isConnectionStringEncrytped">A flag indicating if the connection string is encrypted.</param>
            <param name="userDN">The users used to connect to active directory</param>
            <param name="IsUserDNEncrypted">true if userDN is encrypted otherwise false</param>
            <param name="password">The password used to connect to active directory</param>
            <param name="isPasswordEncrytped">true if password is encrypted otherwise false</param>
            <param name="linkedDatabaseConnectionInfo">The connection information for the linked database (a database where unique ids are persisted to maintain referential integrity with portal content)</param>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Configuration.ActiveDirectoryConnectionInfo.UserDN">
            <summary>
            Gets and sets the distinguished name of the user used to connect to the directory
            </summary>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Configuration.ActiveDirectoryConnectionInfo.Password">
            <summary>
            Gets and sets the password to be used when connecting to active directory
            </summary>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Configuration.ActiveDirectoryConnectionInfo.Jenzabar#Portal#Framework#Data#Directory#IADConnectionInfo#LinkedDatabaseConnectionInfo">
            <summary>
            Gets the connection information for the linked database.
            </summary>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Configuration.ActiveDirectoryConnectionInfo.LinkedDatabase">
            <summary>
            Gets and sets the connection information for the linked database.
            </summary>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Configuration.ActiveDirectoryConnectionInfo.IsUserDNEncrypted">
            <summary>
            True if UserDN is encrypted otherwise false.
            </summary>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Configuration.ActiveDirectoryConnectionInfo.IsPasswordEncrypted">
            <summary>
            True if Password is encrypted otherwise false.
            </summary>
        </member>
        <member name="T:Jenzabar.Portal.Framework.Configuration.PasswordManagementInfo">
            <summary>
            Provides connection information for connecting to an active directory data store.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Configuration.PasswordManagementInfo.#ctor">
            <summary>
            Creates a new instance of the PasswordManagement class.
            </summary>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Configuration.PasswordManagementInfo._minLength">
            <summary>
            Minimum password length.
            </summary>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Configuration.PasswordManagementInfo._maxLength">
            <summary>
            Maximum password length.
            </summary>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Configuration.PasswordManagementInfo._validationExpression">
            <summary>
            A Regular Expression that can validate a user's inputted password
            </summary>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Configuration.PasswordManagementInfo.IsAllowed">
            <summary>
            Whether users can change their password.
            </summary>
        </member>
        <member name="T:Jenzabar.Portal.Framework.PortletCreationInfo">
            <summary>
            Provides a way of specifying information about a portlet before it is created.
            </summary>
            <remarks>
            This creation info can be used over an over to create portlets on different pages that will all 
            be the same. To use it create a new instance, set any properties that you need to change from 
            the defaults and call the Create method, passing the page to create a portlet on.
            </remarks>
        </member>
        <member name="M:Jenzabar.Portal.Framework.PortletCreationInfo.Create(Jenzabar.Portal.Framework.PortalPageInfo)">
            <summary>
            Creates a portlet on the specified page using the information provided to this PortletCreationInfo instance.
            </summary>
            <param name="pageToCreateOn">The page to create a portlet as defined by this object</param>
            <returns>The newly created portlet.</returns>
        </member>
        <member name="P:Jenzabar.Portal.Framework.PortletCreationInfo.Template">
            <summary>
            Gets and sets the template (the type of portlet) to create. This must be set as it has no default value.
            </summary>
        </member>
        <member name="T:Jenzabar.Portal.Framework.State.PortletState">
            <summary>
            Stores and retrieves user specific state information for data in a portlet.
            </summary>
            <remarks>This class is used to save and retrieve state related information for portlet occurances and individual pieces of data being displayed within a portlet. State information is stored uniquely for each user.</remarks>
        </member>
        <member name="F:Jenzabar.Portal.Framework.State.PortletState._portletDisplayId">
            <summary>
            the unique identifier for the portlet occurance that state info is being stored for
            </summary>
        </member>
        <member name="F:Jenzabar.Portal.Framework.State.PortletState._userId">
            <summary>
            the unique identifier for the user that state info is being stored for
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.State.PortletState.GetState(Jenzabar.Portal.Framework.PortletDisplay)">
            <summary>
            Creates or retrieves a PortletState object for use in saving portlet Shortcut related state.
            </summary>
            <param name="o">The <see cref="T:Jenzabar.Portal.Framework.PortletShortcut"/> to get state information for.</param>
            <returns>An instance of the <see cref="T:Jenzabar.Portal.Framework.State.PortletState"/> class that can be used to save and retrieve state information.</returns>
            <remarks>This method must be called form the ASP.NET worker thread that created the request. If you are calling this from a thread other than the original worker thread, then you will need to use one of the overloaded versions of this method and pass the user object.</remarks>
        </member>
        <member name="M:Jenzabar.Portal.Framework.State.PortletState.GetState(Jenzabar.Portal.Framework.PortletDisplay,Jenzabar.Portal.Framework.PortalUser)">
            <summary>
            Creates or retrieves a PortletState object for use in saving portlet Shortcut related state.
            </summary>
            <param name="o">The <see cref="T:Jenzabar.Portal.Framework.PortletShortcut"/> to get state information for.</param>
            <param name="u">The <see cref="T:Jenzabar.Portal.Framework.PortalUser"/> to get state information for.</param>
            <returns>An instance of the <see cref="T:Jenzabar.Portal.Framework.State.PortletState"/> class that can be used to save and retrieve state information.</returns>
            <remarks>This method must be called form the ASP.NET worker thread that created the request. If you are calling this from a thread other than the original worker thread, then you will need to use one of the overloaded versions of this method and pass the user object.</remarks>
        </member>
        <member name="F:Jenzabar.Portal.Framework.State.PortletState._portletStateProviderType">
            <summary>
            the type to be used to create instances of the state providers
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.State.PortletState.GetStateProvider">
            <summary>
            Returns an instance of a class that can be used to talk directly to the state store.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Jenzabar.Portal.Framework.State.PortletState.#ctor(System.Guid,System.Guid)">
            <summary>
            Creates a new instance of the Jenzabar.Portal.Framework.State.PortletState class that is associated with a specific user and portlet occurance.
            </summary>
            <param name="userId">The uniqe identifier for the user that state will be saved and restored for.</param>
            <param name="portletDisplayId">The unique identifier for the portlet occurance that state will be saved and restored for.</param>
        </member>
        <member name="F:Jenzabar.Portal.Framework.State.PortletState._portletDataState">
            <summary>
            inner storage for the state that is associated with a piece of data being displayed in a specific portlet occurance for a user
            </summary>
        </member>
        <member name="F:Jenzabar.Portal.Framework.State.PortletState._portletState">
            <summary>
            inner storage for the state that is associated with the portlet occurance itself, and not a piece of data in the portlet
            </summary>
        </member>
        <member name="P:Jenzabar.Portal.Framework.State.PortletState.Item(Jenzabar.Portal.Framework.Data.ObjectIdentifier,System.String)">
            <summary>
            Gets and sets state information for a specific object being displayed in a specific occurance of a portlet on a page.
            </summary>
            <remarks>Returns null if the dataId has no state associated with it or if the dataId has no state associated with the specified id.</remarks>
        </member>
        <member name="P:Jenzabar.Portal.Framework.State.PortletState.Item(System.Guid,System.String)">
            <summary>
            Gets and sets state information for a specific object being displayed in a specific occurance of a portlet on a page. Returns null if the dataId has no state associated with it or if the dataId has no state associated with the specified id.
            </summary>
        </member>
        <member name="P:Jenzabar.Portal.Framework.State.PortletState.Item(System.String)">
            <summary>
            Gets and sets state information for a specific occurance of a portlet on a page. Returns null if the key has no state associated with it.
            </summary>
        </member>
        <member name="T:Jenzabar.Portal.Framework.PortalApplicationBase">
            <summary>
            The base class for portal applications
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.PortalUserSearchCriteria.Equals(System.Object)">
            <summary>
            Test to see if an object is equal to this one.
            </summary>
            <param name="obj">The object to compare to.</param>
        </member>
        <member name="M:Jenzabar.Portal.Framework.PortalUserSearchCriteria.GetHashCode">
            <summary>
            override added just to get rig of compilation warnings
            </summary>
            <returns></returns>
        </member>
        <member name="M:Jenzabar.Portal.Framework.PortalUserSearchCriteria.ToSearchFilterString">
            <summary>
            Converts the ObjectIdentifier to a string
            </summary>
            <returns>If the type is string, the string is returned, otherwise the Guid is converted to a string and returned</returns>
        </member>
        <member name="F:Jenzabar.Portal.Framework.PortalUserSearchCriteria.Empty">
            <summary>
            Gets an empty ObjectIdentifier
            </summary>
        </member>
        <member name="P:Jenzabar.Portal.Framework.PortalUserSearchCriteria.Groups">
            <summary>
            groups array (to search if user is member of group)
            </summary>
        </member>
        <member name="P:Jenzabar.Portal.Framework.PortalUserSearchCriteria.FirstName">
            <summary>
            The first name
            </summary>
        </member>
        <member name="P:Jenzabar.Portal.Framework.PortalUserSearchCriteria.LastName">
            <summary>
            The last name
            </summary>
        </member>
        <member name="P:Jenzabar.Portal.Framework.PortalUserSearchCriteria.UserType">
            <summary>
            The user profile type
            </summary>
        </member>
        <member name="P:Jenzabar.Portal.Framework.PortalUserSearchCriteria.ExactSearch">
            <summary>
            The user profile type
            </summary>
        </member>
        <member name="T:Jenzabar.Portal.Framework.PortalUserSearch">
             <summary>
            PortalUser Search Criteria.
             </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.PortalUserSearch.#ctor(System.Boolean,System.Int32,System.Int32)">
            <summary>
            constructor
            </summary>
        </member>
        <member name="P:Jenzabar.Portal.Framework.PortalUserSearch.UseAddlCriteria">
            <summary>
            is additional critetia supposed to be used in case N of results less than MinN or more than MaxN
            </summary>
        </member>
        <member name="P:Jenzabar.Portal.Framework.PortalUserSearch.AddlCriteriaUsed">
            <summary>
            after search got populated; says if additional critetia was used
            </summary>
        </member>
        <member name="P:Jenzabar.Portal.Framework.PortalUserSearch.MinN">
            <summary>
            min number of results after which additional critetia to be used
            </summary>
        </member>
        <member name="P:Jenzabar.Portal.Framework.PortalUserSearch.MaxN">
            <summary>
            max number of results after which additional critetia to be used
            </summary>
        </member>
        <member name="T:Jenzabar.Portal.Framework.Runtime.Logger">
            <summary>
            User action logging code
            </summary>
        </member>
        <member name="T:Jenzabar.Portal.Framework.Data.IListDataMapper">
            <summary>
            Required methods for all list data mappers
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Data.IListDataMapper.Persist(Jenzabar.Portal.Framework.Data.IPersistableList,Jenzabar.Portal.Framework.Data.BatchToken)">
            <summary>
            Persists a list to the data source
            </summary>
            <param name="list">The list to persist</param>
            <param name="token">The batch token representing the batch to participate in</param>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Data.IListDataMapper.PopulateSchema(Jenzabar.Portal.Framework.Data.IPersistableList)">
            <summary>
            Populates the schema of a list
            </summary>
            <param name="list">The list to populate the schema for</param>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Data.IListDataMapper.FindByID(Jenzabar.Portal.Framework.Data.ObjectIdentifier)">
            <summary>
            Finds the child object ids for a list
            </summary>
            <param name="id">The parent object's ID</param>
            <returns>The list of parent and child object ids</returns>
        </member>
        <member name="T:Jenzabar.Portal.Framework.PortletTemplateCreationInfo">
            <summary>
            Summary description for PortletTemplateCreationInfo.
            </summary>
        </member>
        <member name="P:Jenzabar.Portal.Framework.PortletTemplateCreationInfoCollection.System#Collections#ICollection#IsSynchronized">
            <summary>
            Gets a value indicating wether access to the PortalContextCreationInfoCollection is syncronized (thread-safe)
            </summary>
        </member>
        <member name="P:Jenzabar.Portal.Framework.PortletTemplateCreationInfoCollection.Count">
            <summary>
            Gets the number of <see cref="T:Jenzabar.Portal.Framework.PortalContextCreationInfo"/> objects are contained in this collection.
            </summary>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Data.IPropertyDescriptor.PropertyName">
            <summary>
            The name of the property in the underlying data source
            </summary>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Data.IPropertyDescriptor.PropertyOrdinal">
            <summary>
            The ordinal position of the property in the underlying data source
            </summary>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Data.IPropertyDescriptor.PropertySize">
            <summary>
            The size (in bytes) of the property in the underlying data source
            </summary>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Data.IPropertyDescriptor.PropertyDataType">
            <summary>
            The data type of the property, translated from the underlying data source
            </summary>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Data.IPropertyDescriptor.PropertyIsPrimaryKey">
            <summary>
            Whether or not the property is the primary key of the object in the underlying data source
            </summary>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Data.IPropertyDescriptor.PropertyIsRequired">
            <summary>
            Whether or not the property is required
            </summary>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Data.IPropertyDescriptor.ParentObjectDescriptor">
            <summary>
            The parent object descriptor for the property
            </summary>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Data.IPropertyDescriptor.IncludeInSchema">
            <summary>
            Gets whether or not the property should be included when building the schema
            </summary>
        </member>
        <member name="T:Jenzabar.Portal.Framework.Data.PropertyDescriptor">
            <summary>
            The default implementation of the IPropertyDescriptor interface
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Data.PropertyDescriptor.#ctor(System.String,System.Int32,System.Int32,System.Type,System.Boolean,System.Boolean,System.Type)">
            <summary>
            Constructs a property descriptor
            </summary>
            <param name="name">The name of the property in the data source</param>
            <param name="ordinal">The ordinal position of the property</param>
            <param name="size">The size of the property, in bytes</param>
            <param name="dataType">The .NET datatype for the property</param>
            <param name="isPrimaryKey">Whether or not the property is the primary key for the domain object</param>
            <param name="isRequired">Whether or not the property is required</param>
            <param name="parentObjectDescriptor">The parent object descriptor for the property</param>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Data.PropertyDescriptor.#ctor(System.String,System.Int32,System.Int32,System.Type,System.Boolean,System.Boolean,System.Type,System.Boolean)">
            <summary>
            Constructs a property descriptor
            </summary>
            <param name="name">The name of the property in the data source</param>
            <param name="ordinal">The ordinal position of the property</param>
            <param name="size">The size of the property, in bytes</param>
            <param name="dataType">The .NET datatype for the property</param>
            <param name="isPrimaryKey">Whether or not the property is the primary key for the domain object</param>
            <param name="isRequired">Whether or not the property is required</param>
            <param name="parentObjectDescriptor">The parent object descriptor for the property</param>
            <param name="includeInSchema">Whether or not to include the property in the schema population</param>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Data.PropertyDescriptor.GetParentObjectDescriptor(Jenzabar.Portal.Framework.Data.IPropertyDescriptor)">
            <summary>
            Obtains an instance of the property's parent object descriptor
            </summary>
            <param name="propertyDescriptor">The property descriptor whose parent is to be obtained</param>
            <returns>The parent object descriptor</returns>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Data.PropertyDescriptor.ToString">
            <summary>
            Returns a plain english representation of the property
            </summary>
            <returns>
            A string in the format "ObjectDescriptorName.PropertyName"
            </returns>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Data.PropertyDescriptor.PropertyName">
            <summary>
            Gets the name of the property in the data source
            </summary>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Data.PropertyDescriptor.PropertyOrdinal">
            <summary>
            Gets the ordinal of the property in the data source
            </summary>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Data.PropertyDescriptor.PropertySize">
            <summary>
            Gets the name of the size in the data source (in bytes)
            </summary>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Data.PropertyDescriptor.PropertyDataType">
            <summary>
            Gets the data type of the property, translated from the data type in the data source
            </summary>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Data.PropertyDescriptor.PropertyIsPrimaryKey">
            <summary>
            Gets whether or not the property is the primary key of the object in the data source
            </summary>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Data.PropertyDescriptor.PropertyIsRequired">
            <summary>
            Gets whether or not the property is the primary key of the object in the data source
            </summary>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Data.PropertyDescriptor.ParentObjectDescriptor">
            <summary>
            Gets the type of the property's parent object descriptor
            </summary>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Data.PropertyDescriptor.IncludeInSchema">
            <summary>
            Gets whether or not the property should be included in the schema used by the primitive data mappers
            </summary>
        </member>
        <member name="T:Jenzabar.Portal.Framework.PortletDisplayCreationInfoCollection">
            <summary>
            A collection of information about how to create portlets or portlet shortcuts.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.PortletDisplayCreationInfoCollection.Add(Jenzabar.Portal.Framework.PortletDisplayCreationInfo)">
            <summary>
            Adds information about how to create a portlet or a portlet shortcut.
            </summary>
            <param name="creationInfo">The information about how to create a portlet or a portlet shortcut to add.</param>
        </member>
        <member name="T:Jenzabar.Portal.Framework.INameValueProvider">
            <summary>
            Interface for name/value providers.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.INameValueProvider.RetrieveItems(System.String,System.Object)">
            <summary>
            Gets the items associated with a name and a particular key
            </summary>
            <param name="name">The name</param>
            <param name="key">The key</param>
            <returns>An array of items</returns>
        </member>
        <member name="M:Jenzabar.Portal.Framework.INameValueProvider.RetrieveDefaultItems(System.String,System.Object)">
            <summary>
            Gets the default items associated with a name and a particular key
            </summary>
            <param name="name">The name</param>
            <param name="key">The key</param>
            <returns>An array of default items</returns>
        </member>
        <member name="T:Jenzabar.Portal.Framework.NameValueDataSourceType">
            <summary>
            The type of name value data source
            </summary>
        </member>
        <member name="F:Jenzabar.Portal.Framework.NameValueDataSourceType.Static">
            <summary>
            A literal XML string
            </summary>
        </member>
        <member name="F:Jenzabar.Portal.Framework.NameValueDataSourceType.Dynamic">
            <summary>
            The full type name of a class that implements Jenzabar.Portal.Framework.INameValueProvider
            </summary>
            <remarks>
            The full type name must be in the format AssemblyName,TypeName
            </remarks>
        </member>
        <member name="T:Jenzabar.Portal.Framework.ScopeChangeType">
            <summary>
            The type of scope change to perform
            </summary>
        </member>
        <member name="F:Jenzabar.Portal.Framework.ScopeChangeType.GlobalToPortlet">
            <summary>
            Changing the scope of a name/value pair from Global to Portlet
            </summary>
        </member>
        <member name="F:Jenzabar.Portal.Framework.ScopeChangeType.PortletToGlobal">
            <summary>
            Changing the scope of a name/value pair from Portlet to Global
            </summary>
        </member>
        <member name="T:Jenzabar.Portal.Framework.Portlet">
            <summary>
            What used to be called a portlet instance
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Portlet.Create(Jenzabar.Portal.Framework.PortalPageInfo,System.String,Jenzabar.Portal.Framework.PortletTemplate,System.String,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Create new instance of Portlet
            </summary>
            <param name="page">parent page</param>
            <param name="name">name of portlet</param>
            <param name="template">portlet template</param>
            <param name="displayName">display name</param>
            <param name="column">column (to display on page)</param>
            <param name="order">order (to display on page)</param>
            <param name="changeDuplicatedName">if true - if object with such name exist in ADAM - name will be changed to unique string,
            display name will stay the same; if false - error "object already exists" will be thrown</param>
            <returns>new instance of Portlet</returns>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Portlet.CallPortletCleanUpCode">
            <summary>
            Calls portlet instance clean up method.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Portlet.Refresh">
            <summary>
            
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Portlet.FindByURL(System.String)">
            <summary>
            Locates a portlet give it's url
            </summary>
            <param name="url">The URL of the portlet to find</param>
            <returns>The portlet located at the specified url or null if there is no portlet at teh specified url.</returns>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Portlet.FindByDN(System.String)">
            <summary>
            Retrieves the Portlet using it's distinguished name.
            </summary>
            <param name="dn">THe distinguished name for the portlet.</param>
            <returns>The portlet identified by the distinguished name, or null if there is no portlet with the specified distinguished name.</returns>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Portlet.FindByGuid(System.Guid)">
            <summary>
            Searches for a portlet using it's guid.
            </summary>
            <param name="guid">The guid for the portlet to find.</param>
            <returns>The portlet with matching guid, or null if no match is found.</returns>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Portlet.FindByID(Jenzabar.Portal.Framework.Data.ObjectIdentifier)">
            <summary>
            Searches for a Portlet using it's uniqe id.
            </summary>
            <param name="id">The unique id for the portlet</param>
            <returns>The portlet with matching id, or null if no matching portlet is found.</returns>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Portlet.FindByPage(Jenzabar.Portal.Framework.PortalPageInfo)">
            <summary>
            Searches for all portlets that belong to the page specified.
            </summary>
            <param name="page">The page to find all of the portlets for.</param>
            <returns>An array of Portlets that belong on the page specified.</returns>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Portlet.FindByPage(Jenzabar.Portal.Framework.PortalPageInfo,System.String)">
            <summary>
            Locates a portlet based on the page it is on, and it's name.
            </summary>
            <param name="page">The page that the portlet is on</param>
            <param name="portletName">The name of the portlet</param>
            <returns>The portlet with the specified name on the page, or null if there is no portlet with a matching name on that page.</returns>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Portlet.FindByPortletTemplate(Jenzabar.Portal.Framework.PortletTemplate)">
            <summary>
            Searches for all portlets for the specified PortletTemplate.
            </summary>
            <param name="template">The PortletTemplate to find all of the Portlets for.</param>
            <returns>An array of portlets that are instances of the PortletTemplate specified.</returns>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Portlet.AccessCheck(System.String)">
            <summary>
            Checks for the current users ability to perform the specified operation. The operation can either be portlet specific or global
            </summary>
            <param name="operation">The name of the operation to check</param>
            <returns>true if the current user can perform the specified operation, otherwise false</returns>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Portlet.PortletTemplate">
            <summary>
            Gets the PortletTemplate for this Portlet.
            </summary>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Portlet.Children">
            <summary>
            Gets a listing of the Operations that are defined for this portlet.
            </summary>
        </member>
        <member name="T:Jenzabar.Portal.Framework.StaticPortlet">
            <summary>
            A portlet that doesn't exist in AD. This is used to hack the preferences into working for MyInfo, and may be usefull in the future.
            </summary>
        </member>
        <member name="T:Jenzabar.Portal.Framework.Settings.SiteSetting">
            <summary>
            Domain object for site settings. Used In Admin site.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Settings.SiteSetting.#ctor(System.String,System.String)">
            <summary>
            Constructs a site setting
            </summary>
            <param name="settingName">Name of the setting</param>
            <param name="settingValue">Value of the setting</param>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Settings.SiteSetting.#ctor(Jenzabar.Portal.Framework.Data.ObjectDataStore)">
            <summary>
            Constructs a site setting
            </summary>
            <param name="objectData">A site setting object data store</param>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Settings.SiteSetting.FindByID(Jenzabar.Portal.Framework.Data.ObjectIdentifier)">
            <summary>
            Finds an site setting by ID
            </summary>
            <param name="id">The object identifier of the site setting</param>
            <returns>The site setting with the specified object identifier</returns>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Settings.SiteSetting.FindByQuery(Jenzabar.Portal.Framework.Data.Querying.ObjectQuery)">
            <summary>
            Finds site settings by query
            </summary>
            <param name="query">The query for the site settings</param>
            <returns>The site settings that match the specified query</returns>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Settings.SiteSetting.FindByName(System.String)">
            <summary>
            Returns the site setting by name.
            </summary>
            <param name="name">The name of the site setting</param>
            <returns>The site setting by name</returns>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Settings.SiteSetting.Create(System.String,System.String)">
            <summary>
            Creates an application setting.
            </summary>
            <param name="settingName">The name of the site setting</param>
            <param name="settingValue">The value of the site setting</param>
            <returns>An site setting with the given input parameters</returns>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Settings.SiteSetting.CreateArray(Jenzabar.Portal.Framework.Data.ObjectDataStore[])">
            <summary>
            Used internally to create an array of domain objects from an array of ObjectDataStores
            </summary>
            <param name="SiteSettingDataStores">The object data stores to create domain objects from</param>
            <returns>An array of domain objects</returns>	
        </member>
        <member name="P:Jenzabar.Portal.Framework.Settings.SiteSetting.ID">
            <summary>
            Gets the object identifer for the setting
            </summary>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Settings.SiteSetting.Name">
            <summary>
            Gets the name of the setting
            </summary>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Settings.SiteSetting.Value">
            <summary>
            Gets the value of the setting
            </summary>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Settings.SiteSetting.Scope">
            <summary>
            Gets the scope of the setting
            </summary>
        </member>
        <member name="T:Jenzabar.Portal.Framework.FileCabinetSearchType">
            <summary>
            Tye type of search done when FileCabinet.Search() is called
            </summary>
            <remarks>
            ExactMatch - Find the exact phrase passed in
            FindAny - Find any of the phrases passed in
            </remarks>
        </member>
        <member name="T:Jenzabar.Portal.Framework.FileCabinet">
            <summary>
            Provides a user specific data store where domain objects can be stored.
            </summary>
            <remarks>
            The main gateway to all FileCabinet functionality
            </remarks>
        </member>
        <member name="M:Jenzabar.Portal.Framework.FileCabinet.RetrieveCourseTemplate(Jenzabar.Portal.Framework.FileCabinetItem,Jenzabar.Portal.Framework.PortalContext)">
            <summary>
            Retrieve a PortalContext from the FileCabinet and insert under parentContext.
            </summary>
            <param name="item">The top PortalContext that we want to retrieve with all its children</param>
            <param name="parentContext">What item should be a child of.</param>
        </member>
        <member name="M:Jenzabar.Portal.Framework.FileCabinet.LoadCourseInfoRecursive(Jenzabar.Portal.Framework.PortalContext,Jenzabar.Portal.Framework.FileCabinetItem)">
            <summary>
            Recursive method that will load PortalContext courseInfo and all it's children from the FileCabinet
            </summary>
            <param name="courseInfo">A pre-created PortalContext with name and displayName.</param>
            <param name="itm">The FileCabinetItem that is the ParentContext for the tree we're copying.</param>
        </member>
        <member name="M:Jenzabar.Portal.Framework.FileCabinet.Add(Jenzabar.Portal.Framework.Data.PersistableObjectBase)">
            <summary>
            Adds an existing object to the filecabinet
            </summary>
            <param name="obj"></param>
        </member>
        <member name="M:Jenzabar.Portal.Framework.FileCabinet.AddFolder(System.String,System.Type,System.String)">
            <summary>
            Creates a new folder for the current user intheir filecabinet with the name specified to store the type specified.
            </summary>
            <param name="folderName">The name to give the new folder</param>
            <param name="objectType"></param>
            <returns></returns>
        </member>
        <member name="M:Jenzabar.Portal.Framework.FileCabinet.AddFolder(Jenzabar.Portal.Framework.Data.ObjectIdentifier,System.String,System.Type,System.String)">
            <summary>
            Creates a new folder for the passed user intheir filecabinet with the name specified to store the type specified.
            </summary>
            <param name="folderName">The name to give the new folder</param>
            <param name="objectType"></param>
            <returns></returns>
        </member>
        <member name="M:Jenzabar.Portal.Framework.FileCabinet.GetFolders(System.Type)">
            <summary>
            Gets all of the folders for the current user that are used to store the specified object type.
            </summary>
            <param name="objectType">The <see cref="T:System.Type"/> for the objects that are stored in the folder</param>
            <returns>The folders that are used to store the specified <see cref="T:System.Type"/></returns>
        </member>
        <member name="M:Jenzabar.Portal.Framework.FileCabinet.GetFolder(Jenzabar.Portal.Framework.Data.ObjectIdentifier)">
            <summary>
            Gets a specific folder form it's unique id
            </summary>
            <param name="id">The unique id of the folder to get form the FileCabinet</param>
            <returns>The folder that has the specified unique identifier</returns>
        </member>
        <member name="M:Jenzabar.Portal.Framework.FileCabinet.GetAllObjectsOfType(System.Type)">
            <summary>
            Gets all objects of the specified type and all of their children.
            </summary>
            <param name="type">The System.Type for the objects to return.</param>
            <returns>An array of domain objects that inherit from <see cref="T:Jenzabar.Portal.Framework.Data.PersistableObjectBase"/></returns>
        </member>
        <member name="M:Jenzabar.Portal.Framework.FileCabinet.GetAllObjectsOfType(System.Type,System.Boolean)">
            <summary>
            Gets objects of the specified type that have been stored in the File Cabinet for the current user.
            </summary>
            <param name="type">The System.Type for the objects to return.</param>
            <param name="loadChildren">True to load all of the children for the objects that are found (slower). False to only load the objects of the specified type.</param>
            <returns>An array of domain objects that inherit from <see cref="T:Jenzabar.Portal.Framework.Data.PersistableObjectBase"/></returns>
        </member>
        <member name="M:Jenzabar.Portal.Framework.FileCabinet.GetAllObjectsOfTypeAndNotInFolder(System.Type)">
            <summary>
            Gets objects of the specified type that have been stored in the File Cabinet for the current user that have no folder.
            </summary>
            <param name="type">The System.Type for the objects to return.</param>
            <returns>An array of domain objects that inherit from <see cref="T:Jenzabar.Portal.Framework.Data.PersistableObjectBase"/></returns>
        </member>
        <member name="M:Jenzabar.Portal.Framework.FileCabinet.GetObject(Jenzabar.Portal.Framework.Data.ObjectIdentifier)">
            <summary>
            Gets the object with the specified id from the filecabinet, and loads all of it's children (example pulling a a <see cref="!:Jenzabar.LMS.Coursework"/> object out of the FileCabinet with this method would also load all of it's <see cref="!:Jenzabar.LMS.CourseworkSection"/> children, their <see cref="!:Jenzabar.LMS.CourseworkQuestion"/> childrent, and any <see cref="!:Jenzabar.LMS.CourseworkChoice"/> childrent the questions migh have)
            </summary>
            <param name="id">The id of the object to return from the filecabinet</param>
            <returns>The object identified by the specified id</returns>
        </member>
        <member name="M:Jenzabar.Portal.Framework.FileCabinet.GetObject(Jenzabar.Portal.Framework.Data.ObjectIdentifier,System.Boolean)">
            <summary>
            Gets an object with the specified id form the FileCabinet and optionaly loads all the children of that object
            </summary>
            <param name="id">The unique identifier of the object to get from the FileCabinet</param>
            <param name="loadChildren">true to load all of the child objects of the object being retrieved, false to only return the object without it's children (mostly for displaying in grids)</param>
            <returns>The object identified by the specified id</returns>
        </member>
        <member name="M:Jenzabar.Portal.Framework.FileCabinet.GetAllObjectsInFolder(Jenzabar.Portal.Framework.FileCabinetFolder)">
            <summary>
            Gets all of the objects in the specific folder of the FileCabinet and all of thoes objects children (example pulling a a <see cref="!:Jenzabar.LMS.Coursework"/> object out of the FileCabinet with this method would also load all of it's <see cref="!:Jenzabar.LMS.CourseworkSection"/> children, their <see cref="!:Jenzabar.LMS.CourseworkQuestion"/> childrent, and any <see cref="!:Jenzabar.LMS.CourseworkChoice"/> childrent the questions migh have)
            </summary>
            <param name="folder">The <see cref="T:Jenzabar.Portal.Framework.FileCabinetFolder"/> to get objects from</param>
            <returns>All of the objects in the specified folder and their children</returns>
        </member>
        <member name="M:Jenzabar.Portal.Framework.FileCabinet.GetAllObjectsInFolder(Jenzabar.Portal.Framework.FileCabinetFolder,System.Boolean)">
            <summary>
            Gets all of the objects in the specified folder, and optionaly all of thier children
            </summary>
            <param name="folder">The <see cref="T:Jenzabar.Portal.Framework.FileCabinetFolder"/> to get objects from</param>
            <param name="loadChildren">true to load all of the child objects of the objects being retrieved, false to only return the objects without any of their children (mostly for displaying in grids)</param>
            <returns>All of the objects in the specified folder, and optionaly their children</returns>
        </member>
        <member name="M:Jenzabar.Portal.Framework.FileCabinet.Search(System.Type,Jenzabar.Portal.Framework.FileCabinetSearchType,System.String,System.String)">
            <summary>
            This method return objects that match passed in criteria.
            </summary>
            <param name="objectType">What kind of object we're looking at</param>
            <param name="searchType">What kind of search (any phrase, all phrases)</param>
            <param name="propertyList">Which property of the objects we want to search, | delimited</param>
            <param name="phraseList">Search string we want to find in any of the Properties in the PropertyList, parsed differently depending on search type.</param>
            <returns>Array of PersistableObjectBase objects that fulfill search requirements </returns>
        </member>
        <member name="M:Jenzabar.Portal.Framework.FileCabinet.Search(System.Type,Jenzabar.Portal.Framework.FileCabinetSearchType,System.String,System.String,System.String,System.String)">
            <summary>
            This method return objects that match passed in criteria.
            </summary>
            <param name="objectType">What kind of object we're looking at</param>
            <param name="searchType">What kind of search (any phrase, all phrases)</param>
            <param name="propertyList">Which property of the objects we want to search, | delimited</param>
            <param name="phraseList">Search string we want to find in any of the Properties in the PropertyList, parsed differently depending on search type.</param>
            <param name="RequiredPropertyNames">A list of Properties that will have a corresponding Value in the next param that we need to match exactly or an object will not be considered for the return list. | delimited</param>
            <param name="RequiredPropertyValues">The values that map to the parallel Properties. | delimited</param>
            <returns>Array of PersistableObjectBase objects that fulfill search requirements </returns>
        </member>
        <member name="T:Jenzabar.Portal.Framework.FileCabinetItem">
            <summary>
            Represents the data that one instance of a domain object has stored in the FileCabinet
            </summary>
            <remarks>
            This is used as a generic data store that can store the properties of an object and it's children
            </remarks>
        </member>
        <member name="M:Jenzabar.Portal.Framework.FileCabinetItem.#ctor(Jenzabar.Portal.Framework.Data.ObjectIdentifier,System.Type)">
            <summary>
            Creates a new instance of the FileCabinetItem class given the items id, and the <see cref="T:System.Type"/> of the object that is stored in this FileCabinteItem.
            </summary>
            <param name="id">The ID of the FileCabinetItem</param>
            <param name="objectType">The <see cref="T:System.Type"/> of the object stored in the FileCabinetItem</param>
        </member>
        <member name="M:Jenzabar.Portal.Framework.FileCabinetItem.GetObject">
            <summary>
            Gets the domain object that has been stored in the file cabinet
            </summary>
            <returns>The domain object that has been stored in the file cabinet</returns>
        </member>
        <member name="M:Jenzabar.Portal.Framework.FileCabinetItem.GetObject(System.Boolean)">
            <summary>
            Gets the domain object that has been stored in the file cabinet
            </summary>
            <returns>The domain object that has been stored in the file cabinet</returns>
        </member>
        <member name="M:Jenzabar.Portal.Framework.FileCabinetItem.CreateCopyOfObject">
            <summary>
            Creates a new instance of the object stored in the file cabinet. This new instance of the object will not besaved back to the file cabinet.
            </summary>
            <returns>An instance of the object that </returns>
        </member>
        <member name="P:Jenzabar.Portal.Framework.FileCabinetItem.ID">
            <summary>
            Gets the Id for this <see cref="T:Jenzabar.Portal.Framework.FileCabinetItem"/>
            </summary>
        </member>
        <member name="P:Jenzabar.Portal.Framework.FileCabinetItem.ObjectType">
            <summary>
            Gets the type of object that is stored.
            </summary>
        </member>
        <member name="P:Jenzabar.Portal.Framework.FileCabinetItem.Children">
            <summary>
            Gets a listing of all the children of this item
            </summary>
        </member>
        <member name="P:Jenzabar.Portal.Framework.FileCabinetItem.Properties">
            <summary>
            Gets a listing by name of the properties for this item
            </summary>
        </member>
        <member name="P:Jenzabar.Portal.Framework.FileCabinetItemPropertyCollection.Item(System.String)">
            <summary>
            Gets and sets a property by it's name
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.FileCabinetItemCollection.AddRange(Jenzabar.Portal.Framework.FileCabinetItem[])">
            <summary>
            Adds an array of FileCabinetItems as children to a FileCabinetItem
            </summary>
            <param name="items">The array of FileCabinetItems to add as children</param>
        </member>
        <member name="M:Jenzabar.Portal.Framework.FileCabinetItemCollection.AddRange(Jenzabar.Portal.Framework.Data.PersistableObjectBase[])">
            <summary>
            Takes an array of domain objects, serializes them to FileCabinetItems, and adds them as children to a FileCabinetItem
            </summary>
            <param name="objs">The domain objects to serialize and store as children</param>
        </member>
        <member name="M:Jenzabar.Portal.Framework.FileCabinetItemCollection.GetInstancesOfType(System.Type)">
            <summary>
            Gets instances of all the obejcts of the specified type in the collection
            </summary>
            <param name="type">The <see cref="T:System.Type"/> of the objects to get from the collection</param>
            <returns>objects of the specified type</returns>
        </member>
        <member name="M:Jenzabar.Portal.Framework.FileCabinetItemCollection.GetItemsOfType(System.Type)">
            <summary>
            Gets a listing of all the FileCabinetItems that are storage info for an object of the specified type
            </summary>
            <param name="type">THe <see cref="T:System.Type"/> of the </param>
            <returns></returns>
        </member>
        <member name="P:Jenzabar.Portal.Framework.FileCabinetItemCollection.Item(System.Int32)">
            <summary>
            Gets and sets the <see cref="T:Jenzabar.Portal.Framework.FileCabinetItem"/> for the 
            </summary>
        </member>
        <member name="T:Jenzabar.Portal.Framework.FileCabinetMapper">
            <summary>
            Provides reading and writing of <see cref="T:Jenzabar.Portal.Framework.FileCabinetItem"/> instances to a database
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.FileCabinetMapper.GetTypeName(System.Type)">
            <summary>
            Gets a string that identifies the type in the form "[Class FullName], [Assembly Weak Name]" (example: "Jenzabar.ICS.Bookmark, Jenzabar.ICS"
            </summary>
            <param name="type">The <see cref="T:System.Type"/> to ge the string id of</param>
            <returns>The string representation of the type that can be used in a call to System.Type.GetType(string) to get the <see cref="T:System.Type"/> without worrying about version strong name or language</returns>
            <remarks>
            This allows us to ignore versioning and strong names for the types and hopefuly a few type load exceptions (at least durring development)
            </remarks>
        </member>
        <member name="T:Jenzabar.Portal.Framework.FileCabinetItemMapper">
            <summary>
            Provides reading and writing of <see cref="T:Jenzabar.Portal.Framework.FileCabinetItem"/> instances to a database
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.FileCabinetItemMapper.FindById(Jenzabar.Portal.Framework.Data.ObjectIdentifier,System.Boolean)">
            <summary>
            Finds a <see cref="T:Jenzabar.Portal.Framework.FileCabinetItem"/> with the specified id.
            </summary>
            <param name="id">The <see cref="T:Jenzabar.Portal.Framework.Data.ObjectIdentifier"/> that uniquly identifies the <see cref="T:Jenzabar.Portal.Framework.FileCabinetItem"/> to find.</param>
            <param name="loadChildren">True to load the child <see cref="T:Jenzabar.Portal.Framework.FileCabinetItem"/>s of the item with the specified id</param>
            <returns>An instance of the <see cref="T:Jenzabar.Portal.Framework.FileCabinetItem"/> class</returns>
        </member>
        <member name="M:Jenzabar.Portal.Framework.FileCabinetItemMapper.FindAllOfType(System.Type,System.Boolean)">
            <summary>
            Finds all of the objects of the specified type for the current user
            </summary>
            <param name="type">The <see cref="T:System.Type"/> for the objects to find</param>
            <param name="loadChildren">True to load child items of the items that are found</param>
            <returns>An array of instances of the <see cref="T:Jenzabar.Portal.Framework.FileCabinetItem"/> class</returns>
        </member>
        <member name="M:Jenzabar.Portal.Framework.FileCabinetItemMapper.LoadFromDataReader(System.Data.IDataReader)">
            <summary>
            creates instances of the <see cref="T:Jenzabar.Portal.Framework.FileCabinetItem"/> class by reading the data returned in the data reader. This method will also create child items if the data reader contains nested items.
            </summary>
            <param name="r">The datareader to create the items from </param>
            <returns>An array of instances of the <see cref="T:Jenzabar.Portal.Framework.FileCabinetItem"/> class created from the datareader</returns>
        </member>
        <member name="M:Jenzabar.Portal.Framework.FileCabinetItemMapper.Insert(Jenzabar.Portal.Framework.FileCabinetItem)">
            <summary>
            Inserts a new instance of the <see cref="T:Jenzabar.Portal.Framework.FileCabinetItem"/> class into the database, deletes and re-adds all of it's properties and saves all children objects if there are any
            </summary>
            <param name="item">The item to insert into the database</param>
        </member>
        <member name="M:Jenzabar.Portal.Framework.FileCabinetItemMapper.Insert(Jenzabar.Portal.Framework.FileCabinetItem,Jenzabar.Portal.Framework.Data.ObjectIdentifier)">
            <summary>
            Inserts a new instance of the <see cref="T:Jenzabar.Portal.Framework.FileCabinetItem"/> class into the database, deletes and re-adds all of it's properties and saves all children objects if there are any
            </summary>
            <param name="item">The item to insert into the database</param>
        </member>
        <member name="M:Jenzabar.Portal.Framework.FileCabinetItemMapper.Update(Jenzabar.Portal.Framework.FileCabinetItem)">
            <summary>
            Updates an existing instance of the <see cref="T:Jenzabar.Portal.Framework.FileCabinetItem"/> class in the database, deletes and re-adds all of it's properties and saves all children objects if there are any
            </summary>
            <param name="item">The item to update in the database</param>
        </member>
        <member name="M:Jenzabar.Portal.Framework.FileCabinetItemMapper.UpdateItem(Jenzabar.Portal.Framework.FileCabinetItem)">
            <summary>
            Updates an existing instance of the <see cref="T:Jenzabar.Portal.Framework.FileCabinetItem"/> class in the database
            </summary>
            <param name="item">The item to upadte in the database</param>
        </member>
        <member name="M:Jenzabar.Portal.Framework.FileCabinetItemMapper.InsertItem(Jenzabar.Portal.Framework.FileCabinetItem)">
            <summary>
            Inserts a new instance of the <see cref="T:Jenzabar.Portal.Framework.FileCabinetItem"/> class into the database
            </summary>
            <param name="item">The item to insert into the database</param>
        </member>
        <member name="M:Jenzabar.Portal.Framework.FileCabinetItemMapper.InsertItem(Jenzabar.Portal.Framework.FileCabinetItem,Jenzabar.Portal.Framework.Data.ObjectIdentifier)">
            <summary>
            Inserts a new instance of the <see cref="T:Jenzabar.Portal.Framework.FileCabinetItem"/> class into the database
            </summary>
            <param name="item">The item to insert into the database</param>
        </member>
        <member name="M:Jenzabar.Portal.Framework.FileCabinetItemMapper.DeleteItemProperties(System.Guid)">
            <summary>
            Removes all of the properties for an object from the database
            </summary>
            <param name="itemId">The id of the item to clear the properties for</param>
        </member>
        <member name="M:Jenzabar.Portal.Framework.FileCabinetItemMapper.InsertItemProperty(System.Guid,System.String,System.String)">
            <summary>
            Inserts a property for an object to the database
            </summary>
            <param name="itemId">The id of the item the property is for</param>
            <param name="propertyName">The name of the property</param>
            <param name="propertyValue">The property converted to a string</param>
        </member>
        <member name="T:Jenzabar.Portal.Framework.FileCabinetFolderMapper">
            <summary>
            Provides reading and writing of <see cref="T:Jenzabar.Portal.Framework.FileCabinetItem"/> instances to a database
            </summary>
        </member>
        <member name="T:Jenzabar.Portal.Framework.FileCabinetSearch">
            <summary>
            Provides functionality to search for objects in the current users file cabinet.
            </summary>
        </member>
        <member name="T:Jenzabar.Portal.Framework.AndCompositeFileCabinetSearchCriteria">
            <summary>
            Matches all criteria that is added as a child of this composite criteria
            </summary>
        </member>
        <member name="T:Jenzabar.Portal.Framework.CompositeFileCabinetSearchCriteria">
            <summary>
            Search criteria that is a list of other criteria grouped together in either an AND or OR type og expression.
            </summary>
        </member>
        <member name="T:Jenzabar.Portal.Framework.FileCabinetSearchCriteria">
            <summary>
            Base class for all search criteria in a FileCabinetSearch
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.FileCabinetSearchCriteria.GetSQL">
            <summary>
            Returns the SQL for this criteria
            </summary>
            <returns>a portion of the SQL where clause that will perform the search</returns>
        </member>
        <member name="M:Jenzabar.Portal.Framework.FileCabinetSearchCriteria.AddParameters(System.Data.SqlClient.SqlCommand)">
            <summary>
            Adds parameters needed by the portion of the sql statement created in the GetSQL mehtod
            </summary>
            <param name="cmd">The command to add the parameters to</param>
        </member>
        <member name="M:Jenzabar.Portal.Framework.CompositeFileCabinetSearchCriteria.AddCriteria(Jenzabar.Portal.Framework.FileCabinetSearchCriteria)">
            <summary>
            Adds a piece of criteria to this search
            </summary>
            <param name="criteria"></param>
        </member>
        <member name="M:Jenzabar.Portal.Framework.CompositeFileCabinetSearchCriteria.GetSQL">
            <summary>
            Returnes a SQL string containing all the child criteria .
            </summary>
            <returns></returns>
        </member>
        <member name="M:Jenzabar.Portal.Framework.CompositeFileCabinetSearchCriteria.AddParameters(System.Data.SqlClient.SqlCommand)">
            <summary>
            Adds all parameters needed by child criteria to the command
            </summary>
            <param name="cmd">The sql command to add the parameters to</param>
        </member>
        <member name="P:Jenzabar.Portal.Framework.CompositeFileCabinetSearchCriteria.Criteria">
            <summary>
            Gets the list of criteria for this composite of criteria
            </summary>
        </member>
        <member name="P:Jenzabar.Portal.Framework.CompositeFileCabinetSearchCriteria.Operator">
            <summary>
            Gets the orerator for this comostie search criteria. This is used to combine the child criteria into a criteria where all child criteria match, or at least one child criteria matches.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.AndCompositeFileCabinetSearchCriteria.#ctor">
            <summary>
            Creates a new instance of the AndCompositeFileCabinetSearchCriteria class with no child criteria to match.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.AndCompositeFileCabinetSearchCriteria.#ctor(Jenzabar.Portal.Framework.FileCabinetSearchCriteria[])">
            <summary>
            Creates a new instance of the AndCompositeFileCabinetSearchCriteria class that will match all the criteria specified
            </summary>
            <param name="criteria"></param>
        </member>
        <member name="P:Jenzabar.Portal.Framework.AndCompositeFileCabinetSearchCriteria.Operator">
            <summary>
            Gets "and" meaning that all of the child criteria must match.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.FileCabinetSearch.#ctor">
            <summary>
            Creates a new instance of the FileCabinetSearch class that will search for objects in the current users File Cabinet
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.FileCabinetSearch.#ctor(System.Type[])">
            <summary>
            Creates a new instance of the FileCabinetSearch
            </summary>
            <param name="objectTypes"></param>
        </member>
        <member name="M:Jenzabar.Portal.Framework.FileCabinetSearch.ExecuteReader">
            <summary>
            Connects to the database, gets the SQL statement from all of the search criteria, populates the command parameters, and executes the statement, returning a data reader that will close the connection when it reaches the end of the results.
            </summary>
            <returns>A datareader for reading the results of the search.</returns>
        </member>
        <member name="M:Jenzabar.Portal.Framework.FileCabinetSearch.FindItems">
            <summary>
            Executes the search using the specified criteria and returns all of the results as FileCabinetItem instances
            </summary>
            <returns>An array of FileCabinetItems in the current users File Cabinet that match the search criteria</returns>
        </member>
        <member name="M:Jenzabar.Portal.Framework.FileCabinetSearch.FindObjects">
            <summary>
            Executes the search using the specified criteria and returns all of the results as instances of domain objects.
            </summary>
            <returns>An array of domain obejcts in the currrent users File Cabinet that match the search criteria</returns>
        </member>
        <member name="M:Jenzabar.Portal.Framework.FileCabinetSearch.GetSQL">
            <summary>
            Creates the SQL statement to be used to locate file cabinet items
            </summary>
            <returns>The SQL statement that wil locate items in the current users file cabinet</returns>
        </member>
        <member name="M:Jenzabar.Portal.Framework.FileCabinetSearch.AddParameters(System.Data.SqlClient.SqlCommand)">
            <summary>
            Adds the @ownerid parameter to the command, and calls the base classes implementation
            </summary>
            <param name="cmd">The sqlcommand to add parameters to</param>
        </member>
        <member name="T:Jenzabar.Portal.Framework.ObjectTypeFileCabinetSearchCriteria">
            <summary>
            Search by object type
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.ObjectTypeFileCabinetSearchCriteria.#ctor(System.Type)">
            <summary>
            Creates a new instance of the ObjectTypeFileCabinetSearchCriteria class that will match the specified type
            </summary>
            <param name="objectType"></param>
        </member>
        <member name="M:Jenzabar.Portal.Framework.ObjectTypeFileCabinetSearchCriteria.GetSQL">
            <summary>
            Creates a where clasuse element for matching a specific type of object.
            </summary>
            <returns>SQL to match a type of object</returns>
        </member>
        <member name="M:Jenzabar.Portal.Framework.ObjectTypeFileCabinetSearchCriteria.AddParameters(System.Data.SqlClient.SqlCommand)">
            <summary>
            Add the type fopr this criteria to the patameters list
            </summary>
            <param name="cmd"></param>
        </member>
        <member name="T:Jenzabar.Portal.Framework.OrCompositeFileCabinetSearchCriteria">
            <summary>
            Matches 1 or more of the criteria that is added as a child of this composite criteria
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.OrCompositeFileCabinetSearchCriteria.#ctor">
            <summary>
            Creates a new instance of the OrCompositeFileCabinetSearchCriteria class with no child criteria to match.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.OrCompositeFileCabinetSearchCriteria.#ctor(Jenzabar.Portal.Framework.FileCabinetSearchCriteria[])">
            <summary>
            Creates a new instance of the OrCompositeFileCabinetSearchCriteria class with the specified child criteria.
            </summary>
            <param name="criteria"></param>
        </member>
        <member name="P:Jenzabar.Portal.Framework.OrCompositeFileCabinetSearchCriteria.Operator">
            <summary>
            Gets "or" meaning that one or more of the child criteria must match for this composite of criteria to match
            </summary>
        </member>
        <member name="T:Jenzabar.Portal.Framework.ItemPropertyFileCabinetSearchCriteria">
            <summary>
            Base class for search criteria that matches a property on a file cabinet item.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.ItemPropertyFileCabinetSearchCriteria.#ctor(System.String,System.String)">
            <summary>
            Creeates a new instance of the ItemPropertyFileCabinetSearchCriteria class for matching the specified property name and value.
            </summary>
            <param name="propertyName"></param>
            <param name="propertyValue"></param>
        </member>
        <member name="M:Jenzabar.Portal.Framework.ItemPropertyFileCabinetSearchCriteria.GetSQL">
            <summary>
            Creates an 'exists' type sub query that will look for objects that match the property name and value criteria.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Jenzabar.Portal.Framework.ItemPropertyFileCabinetSearchCriteria.AddParameters(System.Data.SqlClient.SqlCommand)">
            <summary>
            Adds the @propertyName and @propertyValue parameters to the command
            </summary>
            <param name="cmd"></param>
        </member>
        <member name="P:Jenzabar.Portal.Framework.ItemPropertyFileCabinetSearchCriteria.PropertyName">
            <summary>
            Gets and sets the name of the property to match
            </summary>
        </member>
        <member name="P:Jenzabar.Portal.Framework.ItemPropertyFileCabinetSearchCriteria.PropertyValue">
            <summary>
            Gets and Sets the value of the property to match
            </summary>
        </member>
        <member name="P:Jenzabar.Portal.Framework.ItemPropertyFileCabinetSearchCriteria.PropertyValueForForParameter">
            <summary>
            Gets the value in a format that is can be used in the comparision. Override this if you need to alter the value to match before it is added to the parameter collection, for example in contains type matches, this will return the value surroundeed by '%'
            </summary>
        </member>
        <member name="P:Jenzabar.Portal.Framework.ItemPropertyFileCabinetSearchCriteria.Operator">
            <summary>
            Gets the operator to be used to compare the value of the property to the value specified in this instance
            </summary>
        </member>
        <member name="T:Jenzabar.Portal.Framework.ItemPropertyContainsValueSearchCriteria">
            <summary>
            Matches a string value somewhere within the value of a specified property of a file cabinet item
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.ItemPropertyContainsValueSearchCriteria.#ctor(System.String,System.String)">
            <summary>
            Creates a new instance of the ItemPropertyContainsValueSearchCriteria class that will match objects that have a property with the specified propertyName where the value of that property contains propertyValue somewhere in it.
            </summary>
            <param name="propertyName">The name of the property to look at.</param>
            <param name="propertyValue">The string to match somewhere in the value of the property</param>
        </member>
        <member name="P:Jenzabar.Portal.Framework.ItemPropertyContainsValueSearchCriteria.Operator">
            <summary>
            Gets the 'LIKE' operator
            </summary>
        </member>
        <member name="P:Jenzabar.Portal.Framework.ItemPropertyContainsValueSearchCriteria.PropertyValueForForParameter">
            <summary>
            Gets the value to search for with the adition of '%' before and after it, so that the match contains the search string somewhere in it
            </summary>
        </member>
        <member name="T:Jenzabar.Portal.Framework.ItemPropertyEqualsValueSearchCriteria">
            <summary>
            Matches a property name and it's exact value.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.ItemPropertyEqualsValueSearchCriteria.#ctor(System.String,System.String)">
            <summary>
            Creates a new instance of the ItemPropertyEqualsValueSearchCriteria class that will exactly match a property by its name and it's exact value.
            </summary>
            <param name="propertyName">The name of the property to match</param>
            <param name="propertyValue">The value of the property to match.</param>
        </member>
        <member name="P:Jenzabar.Portal.Framework.ItemPropertyEqualsValueSearchCriteria.Operator">
            <summary>
            Gets the '=' operator making this an exact match
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.ParentPropertyEqualsValueSearchCriteria.#ctor(System.String,System.String)">
            <summary>
            Creates a new instance of the ItemPropertyEqualsValueSearchCriteria class that will exactly match a property by its name and it's exact value.
            </summary>
            <param name="propertyName">The name of the property to match</param>
            <param name="propertyValue">The value of the property to match.</param>
        </member>
        <member name="M:Jenzabar.Portal.Framework.ParentPropertyEqualsValueSearchCriteria.GetSQL">
            <summary>
            Creates an 'exists' type sub query that will look for objects that match the property name and value criteria.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Jenzabar.Portal.Framework.ParentPropertyEqualsValueSearchCriteria.Operator">
            <summary>
            Gets the '=' operator making this an exact match
            </summary>
        </member>
        <member name="T:Jenzabar.Portal.Framework.PortletShortcut">
            <summary>
            A PortletShortcut is a link to a portlet on another page.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.PortletShortcut.Create(Jenzabar.Portal.Framework.PortalPageInfo,Jenzabar.Portal.Framework.Portlet,System.String,System.String,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Create new instance of Portlet shortcut
            </summary>
            <param name="page">parent page</param>
            <param name="portlet">portlet to which shortcut is linked</param>
            <param name="name">name of portlet shortcut</param>
            <param name="displayName">display name</param>
            <param name="column">column (to display on page)</param>
            <param name="order">order (to display on page)</param>
            <param name="changeDuplicatedName">if true - if object with such name exist in ADAM - name will be changed to unique string,
            display name will stay the same; if false - error "object already exists" will be thrown</param>
            <returns>new instance of Portlet shortcut</returns>
        </member>
        <member name="M:Jenzabar.Portal.Framework.PortletShortcut.Delete">
            <summary>
            Permainently removes this shortcut fmom the page.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.PortletShortcut.FindByPortlet(Jenzabar.Portal.Framework.Portlet)">
            <summary>
            Searches for all shortcuts that point to the specified portlet.
            </summary>
            <param name="portlet">portlet to find the shortcuts for</param>
            <returns>An array of portlet shortcuts if found, an empty array otherwise</returns>
        </member>
        <member name="M:Jenzabar.Portal.Framework.PortletShortcut.FindByID(Jenzabar.Portal.Framework.Data.ObjectIdentifier)">
            <summary>
            Searches for a portlet shortcut using it's ObjectIdentifier
            </summary>
            <param name="id">The object identifier for the shortcut to find.</param>
            <returns>A portlet shortcut, or null if no portlet shortcut is found with a matching id.</returns>
        </member>
        <member name="M:Jenzabar.Portal.Framework.PortletShortcut.FindByDN(System.String)">
            <summary>
            Retrieves a portlet shortcut using it's distinguished name.
            </summary>
            <param name="dn">The distincuished name for the portlet shortcut.</param>
            <returns>A portlet shortcut, or null if the distinguished name is invalid or does not point to a portlet shortcut.</returns>
        </member>
        <member name="M:Jenzabar.Portal.Framework.PortletShortcut.FindByPage(Jenzabar.Portal.Framework.PortalPageInfo)">
            <summary>
            Searches for all of the portlet shortcuts on a page.
            </summary>
            <param name="page">The page to find all of the portlet shortcuts on.</param>
            <returns>An array of portlet shortcuts that are on the page passed in. If there are no portlet shortcuts on the page a zero length array will be returned.</returns>
        </member>
        <member name="M:Jenzabar.Portal.Framework.PortletShortcut.FindByPage(Jenzabar.Portal.Framework.PortalPageInfo,System.String)">
            <summary>
            
            </summary>
            <param name="page"></param>
            <param name="shortcutName"></param>
            <returns></returns>
        </member>
        <member name="M:Jenzabar.Portal.Framework.PortletShortcut.AccessCheck(System.String)">
            <summary>
            Checks to see if the user is capable of performing an operation.
            </summary>
            <param name="operation">The string name of the operation. This is not case sensitive</param>
            <returns>tru if the current user is allowed to perform the operation, otherwise false</returns>
            <remarks>The access check will be performed on the actual portlet, since we are not allowing a shortcut to have operations..</remarks>
        </member>
        <member name="P:Jenzabar.Portal.Framework.PortletShortcut.Portlet">
            <summary>
            Gets the portlet that this shortcut points to.
            </summary>
        </member>
        <member name="P:Jenzabar.Portal.Framework.PortletShortcut.PortletTemplate">
            <summary>
            Gets the Template that defines the portlet that is being shortcuted to.
            </summary>
        </member>
        <member name="P:Jenzabar.Portal.Framework.PortletShortcut.UsesOperations">
            <summary>
            false indicating that we do not support operations on PortletShortcuts
            </summary>
        </member>
        <member name="T:Jenzabar.Portal.Framework.Meta.PrincipalCollectionDescriptor">
            <summary>
            Summary description for PrincipalCollectionDescriptor.
            </summary>
        </member>
        <member name="T:Jenzabar.Portal.Framework.FrameworkApplication">
            <summary>
            The framework application class implementation
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.FrameworkApplication.Install">
            <summary>
            Installs the framework schema and default data
            </summary>
        </member>
        <member name="T:Jenzabar.Portal.Framework.Preferences.Mappers.PortletPreferenceDataMapper">
            <summary>
            The object data mapper for the PortletPreference domain object.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Preferences.Mappers.PortletPreferenceDataMapper.FindByID(Jenzabar.Portal.Framework.Data.ObjectIdentifier)">
            <summary>
            Finds the portlet preference data store by a specified object identifier.
            </summary>
            <param name="id">The object identifier for the portlet preference</param>
            <returns>The data from the data source for the domain object</returns>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Preferences.Mappers.PortletPreferenceDataMapper.FindByName(Jenzabar.Portal.Framework.Data.ObjectIdentifier,Jenzabar.Portal.Framework.Data.ObjectIdentifier,Jenzabar.Portal.Framework.Data.ObjectIdentifier,System.String)">
            <summary>
            Finds the portlet preference data store by name.
            </summary>
            <param name="portletID">The object identifier for the portlet object</param>
            <param name="portletInstanceID">The object identifier for the portlet instance object</param>
            <param name="userID">The object identifier for the user object</param>
            <param name="name">The name of the portlet preference</param>
            <returns>The data from the data source for the domain object</returns>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Preferences.Mappers.PortletPreferenceDataMapper.FindPreferencesByPortletInstance(Jenzabar.Portal.Framework.Data.ObjectIdentifier,Jenzabar.Portal.Framework.Data.ObjectIdentifier,Jenzabar.Portal.Framework.Data.ObjectIdentifier)">
            <summary>
            Finds a collection of portlet preference data stores by portlet instance.
            </summary>
            <param name="portletID">The object identifier for the portlet object</param>
            <param name="portletInstanceID">The object identifier for the portlet instance object</param>
            <param name="userID">The object identifier for the user object</param>
            <returns>The data from the data source for the domain object</returns>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Preferences.Mappers.PortletPreferenceDataMapper.FindPreferencesByPortletAndPreferenceName(Jenzabar.Portal.Framework.Data.ObjectIdentifier,Jenzabar.Portal.Framework.Data.ObjectIdentifier,System.String)">
            <summary>
            Finds a collection of portlet preference data stores by portlet and preference name.
            </summary>
            <param name="portletID">The object identifier for the portlet object</param>
            <param name="userID">The object identifier for the user object</param>
            <param name="name">The name of the portlet preference</param>
            <returns>The data from the data source for the domain object</returns>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Preferences.Mappers.PortletPreferenceDataMapper.FindByQuery(Jenzabar.Portal.Framework.Data.Querying.ObjectQuery)">
            <summary>
            Finds a collection of portlet preference data stores by query.
            </summary>
            <param name="query">The query object</param>
        </member>
        <member name="T:Jenzabar.Portal.Framework.PortalPageLayout">
            <summary>
            A page layout
            </summary>
            <remarks>
            This domain object is used to access and manipulate the data for a portal page layout
            
            The layout is used when rendering the page to determine how many columns a page has, and what their widths are
            </remarks>
        </member>
        <member name="F:Jenzabar.Portal.Framework.PortalPageLayout._widths">
            <summary>
            inner storage for the name of this layout.
            </summary>
        </member>
        <member name="F:Jenzabar.Portal.Framework.PortalPageLayout._name">
            <summary>
            inner storage for the name of the layout.
            </summary>
        </member>
        <member name="F:Jenzabar.Portal.Framework.PortalPageLayout._cols">
            <summary>
            Inner storage for the split array of column widths
            </summary>
        </member>
        <member name="F:Jenzabar.Portal.Framework.PortalPageLayout._units">
            <summary>
            inner storage for the paresed list of column widths as instances of the Unit struct, prevents parsing of the string more than once.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.PortalPageLayout.FindAll">
            <summary>
            Finds the all the page layouts
            </summary>
            <returns>An array of layouts found, an empty array if none are found</returns>
        </member>
        <member name="P:Jenzabar.Portal.Framework.PortalPageLayout.Widths">
            <summary>
            Gets or sets the widths text used to determine the number of columns and their widths
            </summary>
            <remarks>
            The widths must be in the format "WIDTH,WIDTH,WIDTH".
            Each width is seperated by a comma
            Each width must be a positive integer, and can be appended with a "%" to make the width relative.
            There must be at least one width specified.
            </remarks>
        </member>
        <member name="P:Jenzabar.Portal.Framework.PortalPageLayout.Name">
            <summary>
            Gets the name of this layout.
            </summary>
        </member>
        <member name="P:Jenzabar.Portal.Framework.PortalPageLayout.DefaultLayout">
            <summary>
            Gets the default layout 50,50, when page is created automaticaly
            </summary>
        </member>
        <member name="P:Jenzabar.Portal.Framework.PortalPageLayout.SingleColumn">
            <summary>
            Gets the layout that is only 1 single column.
            </summary>
        </member>
        <member name="T:Jenzabar.Portal.Framework.PortalRootContext">
            <summary>
            The highest nod in the context tree
            </summary>
        </member>
        <member name="P:Jenzabar.Portal.Framework.PortalRootContext.ShowChildNodesInSideBar">
            <summary>
            Always returns false indicating that child contexts never appear in the sidebar at the root context level.
            </summary>
        </member>
        <member name="T:Jenzabar.Portal.Framework.Security.Authorization.PortletOperationScope">
            <summary>
            The scope of the portlet operation
            </summary>
            <remarks>
            The scope is used to determine where the operation is saved
            Where the operation is saved determines how broad its effect is
            
            For instance, an operation with a scope of PortletOperationScope.PortletShortcut
            only affects that single portlet occurrence, but an operation with a scope
            of PortletOperationScope.Global affects all instances and occurrences of
            that portlet anywhere in the system.
            
            Permissions applied to a operation saved at the global level will be the same
            regardless of what instance or occurrence of the portlet does the access check.
            
            Conversely, permissions applied to an operation at the occurrence or instance
            level are specific to that occurrence or instance, respectively.
            </remarks>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Security.Authorization.PortletOperationScope.PortletShortcut">
            <summary>
            Scopes the operation at the portlet shortcut level
            </summary>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Security.Authorization.PortletOperationScope.Portlet">
            <summary>
            Scopes the operation at the portlet level
            </summary>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Security.Authorization.PortletOperationScope.Global">
            <summary>
            Scopes the operation at the global (portal-wide) level
            </summary>
        </member>
        <member name="T:Jenzabar.Portal.Framework.Security.Authorization.PortletOperationAttribute">
            <summary>
            This attribute can be used to specify what operations a portlet defines.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Security.Authorization.PortletOperationAttribute.#ctor(System.String,System.String,System.String,Jenzabar.Portal.Framework.Security.Authorization.PortletOperationScope)">
            <summary>
            Constructs the attribute
            </summary>
            <param name="name">The name of the operation</param>
            <param name="friendlyName">The friendly name of the operation</param>
            <param name="description">A brief description of the operation</param>
            <param name="scope">The scope of the operation</param>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Security.Authorization.PortletOperationAttribute.Install(Jenzabar.Portal.Framework.Security.SecuredActiveDirectoryObject)">
            <summary>
            creates the entry in AD so that it can be used by the object being installed
            </summary>
            <param name="obj">The object being installed</param>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Security.Authorization.PortletOperationAttribute.Scope">
            <summary>
            Gets the scope of this operation. The scope determines if the operation is global or for an instance of a portlet.
            </summary>
        </member>
        <member name="T:Jenzabar.Portal.Framework.NameValueScope">
            <summary>
            The scope of the name/value pair
            </summary>
        </member>
        <member name="F:Jenzabar.Portal.Framework.NameValueScope.Global">
            <summary>
            Portal wide
            </summary>
        </member>
        <member name="F:Jenzabar.Portal.Framework.NameValueScope.Portlet">
            <summary>
            Portlet specifc
            </summary>
        </member>
        <member name="T:Jenzabar.Portal.Framework.Data.ObjectPersistenceException">
            <summary>
             Exceptions thrown during data persistence
            </summary>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Data.ObjectPersistenceException.Category">
            <summary>
            category of exception, see enum for descriptions
            </summary>
        </member>
        <member name="T:Jenzabar.Portal.Framework.Data.ObjectTypeException">
            <summary>
            ObjectTypeException summary.
            </summary>
        </member>
        <member name="T:Jenzabar.Portal.Framework.Data.ObjectPropertyNotFoundException">
            <summary>
            ObjectPropertyNotFoundException summary.
            </summary>
        </member>
        <member name="T:Jenzabar.Portal.Framework.Data.ObjectDeletedOrNotFound">
            <summary>
            ObjectDeletedOrNotFound summary.
            </summary>
        </member>
        <member name="T:Jenzabar.Portal.Framework.Data.ObjectTableNotFoundException">
            <summary>
            ObjectTableNotFoundException summary.
            </summary>
        </member>
        <member name="T:Jenzabar.Portal.Framework.Data.ObjectConcurrencyException">
            <summary>
            ObjectConcurrencyException summary.
            </summary>
        </member>
        <member name="T:Jenzabar.Portal.Framework.Data.InvalidBatchTokenException">
            <summary>
            InvalidBatchTokenException summary.
            </summary>
        </member>
        <member name="T:Jenzabar.Portal.Framework.Data.PersistenceStoreInaccessibleException">
            <summary>
            PersistenceStoreInaccessibleException summary.
            </summary>
        </member>
        <member name="T:Jenzabar.Portal.Framework.State.SqlServerStateProvider">
            <summary>
            Communicates with SQL Server to save and retrieve state information for portlet occurrances and data being displayed within them.
            </summary>
            <remarks>This is used by the <see cref="T:Jenzabar.Portal.Framework.State.PortletState"/> class to save state in SQL Server. This class is used by the Portal Framework and is not designed to be used directly.</remarks>
        </member>
        <member name="M:Jenzabar.Portal.Framework.State.SqlServerStateProvider.#ctor">
            <summary>
            Creates a new instance of the Jenzabar.Portal.Framework.State.SqlServerStateProvider class.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.State.SqlServerStateProvider.StoreState(System.Guid,System.Guid,System.Guid,System.String,System.String)">
            <summary>
            Saves state information relating to a piece of data being displayed in a portlet occurance for a user in SQL Server.
            </summary>
            <param name="userId">The unique id of the user.</param>
            <param name="portletOccuanceId">The unique id of the portlet occurance.</param>
            <param name="dataId">The unique id of the piece of data that the state relates to.</param>
            <param name="key">The key or name for the state to be stored.</param>
            <param name="value">The state information to be stored.</param>
        </member>
        <member name="M:Jenzabar.Portal.Framework.State.SqlServerStateProvider.StoreState(System.Guid,System.Guid,System.String,System.String)">
            <summary>
            Saves state information relating to a portlet occurance for a user in SQL Server.
            </summary>
            <param name="userId">The unique id of the user.</param>
            <param name="portletOccuanceId">The unique id of the portlet occurance.</param>
            <param name="key">The key or name for the state to be stored.</param>
            <param name="value">The state information to be stored.</param>
        </member>
        <member name="M:Jenzabar.Portal.Framework.State.SqlServerStateProvider.FillState(System.Guid,System.Guid,Jenzabar.Portal.Framework.State.PortletState)">
            <summary>
            Reads all state information from a sqlserver database for a given user and portlet occurance
            </summary>
            <param name="userId">The unique id of the user.</param>
            <param name="portletOccuanceId">The unique id of the portlet occurance.</param>
            <param name="state">The PortletState object that will be filled with state.</param>
        </member>
        <member name="T:Jenzabar.Portal.Framework.FrameworkMessages">
            <summary>
            Messages for framework project.
            </summary>
        </member>
        <member name="T:Jenzabar.Portal.Framework.Data.Querying.ConditionalGroup">
            <summary>
            Represents a grouping of one or more conditionals
            </summary>
            <example>
            A portion of a WHERE clause in SQL such as:
            ("ColumnName = 'SomeValue' and ColumnName2 != 'SomeOtherValue')
            </example>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Data.Querying.ConditionalGroup.#ctor(Jenzabar.Portal.Framework.Data.Querying.ObjectQueryModifier)">
            <summary>
            Constructs an empty conditional group
            </summary>
            <param name="modifier">The modifier to apply to the conditional group</param>
            <remarks>
            In SQL, the modifer would be prepended to the group like: [MODIFIER] (GROUP)
            For instance: AND (...conditionals...)
            </remarks>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Data.Querying.ConditionalGroup.#ctor(Jenzabar.Portal.Framework.Data.Querying.ObjectQuery,Jenzabar.Portal.Framework.Data.Querying.ObjectQueryModifier,Jenzabar.Portal.Framework.Data.Querying.IObjectQueryPart[])">
            <summary>
            Constructs a conditional group and populates it with query parts
            </summary>
            <param name="parentQuery">The parent query for the conditional group</param>
            <param name="modifier">The modifier to apply to the conditional group</param>
            <param name="parts">An array of parts to add to the conditional group</param>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Data.Querying.ConditionalGroup.Init(Jenzabar.Portal.Framework.Data.Querying.ObjectQuery,Jenzabar.Portal.Framework.Data.Querying.ObjectQueryModifier)">
            <summary>
            Used internally to initialize the conditional group
            </summary>
            <param name="parentQuery">The parent query for the conditional group</param>
            <param name="modifier">The modifier to apply to the conditional group</param>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Data.Querying.ConditionalGroup.AddConditional(Jenzabar.Portal.Framework.Data.Querying.ObjectQueryModifier,Jenzabar.Portal.Framework.Data.IPropertyDescriptor,Jenzabar.Portal.Framework.Data.Querying.ObjectQueryOperator,Jenzabar.Portal.Framework.Data.Querying.ConditionalValue)">
            <summary>
            Add a conditional to the conditional group that has an operand which is a conditional value
            </summary>
            <param name="modifier">The modifier to apply to the conditional</param>
            <param name="property">The property of the domain object to evaluate the condition against</param>
            <param name="op">The operator to use for the comparison</param>
            <param name="value">The value evaluate the propery against</param>
            <returns>
            The conditional added to the conditional group
            </returns>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Data.Querying.ConditionalGroup.AddConditional(Jenzabar.Portal.Framework.Data.Querying.ObjectQueryModifier,Jenzabar.Portal.Framework.Data.IPropertyDescriptor,Jenzabar.Portal.Framework.Data.Querying.ObjectQueryOperator,Jenzabar.Portal.Framework.Data.Querying.ConditionalGroup)">
            <summary>
            Add a conditional to the conditional group that has an operand which is another conditional group
            </summary>
            <param name="modifier">The modifier to apply to the conditional</param>
            <param name="property">The property of the domain object to evaluate the condition against</param>
            <param name="op">The operator to use for the comparison</param>
            <param name="group">The conditional group to evaluate the propery against</param>
            <returns>
            The conditional added to the conditional group
            </returns>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Data.Querying.ConditionalGroup.AddConditional(Jenzabar.Portal.Framework.Data.Querying.ObjectQueryModifier,Jenzabar.Portal.Framework.Data.IPropertyDescriptor,Jenzabar.Portal.Framework.Data.Querying.ObjectQueryOperator,Jenzabar.Portal.Framework.Data.Querying.ObjectQuery)">
            <summary>
            Add a conditional to the conditional group that has an operand which is a sub query
            </summary>
            <param name="modifier">The modifier to apply to the conditional</param>
            <param name="property">The property of the domain object to evaluate the condition against</param>
            <param name="op">The operator to use for the comparison</param>
            <param name="subQuery">The sub query to evaluate the property against</param>
            <returns>
            The conditional added to the conditional group
            </returns>
            <remarks>
            Conditionals that have sub queries as the operand are typically used for simulating joins.
            For example, one might add a conditional with a property that represents an ID, an
            operator of ObjectQueryOperator.In, and a sub query that finds a list of IDs.
            </remarks>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Data.Querying.ConditionalGroup.DoAddConditional(Jenzabar.Portal.Framework.Data.Querying.ObjectQueryModifier,Jenzabar.Portal.Framework.Data.IPropertyDescriptor,Jenzabar.Portal.Framework.Data.Querying.ObjectQueryOperator,Jenzabar.Portal.Framework.Data.Querying.IObjectQueryPart)">
            <summary>
            Used internally to add a conditional to the conditional group
            </summary>
            <param name="modifier">The modifier to apply to the conditional</param>
            <param name="property">The property of the domain object to evaluate the condition against</param>
            <param name="op">The operator to use for the comparison</param>
            <param name="part">The query part to evaluate the propery against</param>
            <returns>
            The conditional added to the conditional group
            </returns>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Data.Querying.ConditionalGroup.AddGroup(Jenzabar.Portal.Framework.Data.Querying.ObjectQueryModifier)">
            <summary>
            Adds a conditional group to the conditional group
            </summary>
            <param name="modifier">The modifier to apply to the conditional group</param>
            <returns>The conditional group just added</returns>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Data.Querying.ConditionalGroup.Add(Jenzabar.Portal.Framework.Data.Querying.IObjectQueryPart)">
            <summary>
            Adds a query part to the conditional group
            </summary>
            <param name="part">The query part to add</param>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Data.Querying.ConditionalGroup.Remove(Jenzabar.Portal.Framework.Data.Querying.IObjectQueryPart)">
            <summary>
            Removes a query part from the group
            </summary>
            <param name="part">The query part to remove</param>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Data.Querying.ConditionalGroup.Clear">
            <summary>
            Clears all query parts out of the group
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Data.Querying.ConditionalGroup.Evaluate">
            <summary>
            Evaluates the query part using the parent query's target object's object data mapper
            </summary>
            <returns>
            A string that represents either the results of a query if the query part is a query
            or a query in a form that can be evaluated by the parent query's target object's data mapper
            </returns>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Data.Querying.ConditionalGroup.ToString">
            <summary>
            Gets a plain english representation of the query part
            </summary>
            <returns>
            A plain english version of the query part
            </returns>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Data.Querying.ConditionalGroup.Modifer">
            <summary>
            Gets or sets the modifier for the conditional group
            </summary>
            <remarks>
            The modifier is typically set to ObjectQueryModifier.None when the conditional group is the first conditional added to a query
            </remarks>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Data.Querying.ConditionalGroup.Items">
            <summary>
            Gets an array of query parts that are inside the group
            </summary>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Data.Querying.ConditionalGroup.Type">
            <summary>
            Gets the query part type
            </summary>
            <remarks>
            This will always return ObjectQueryPartType.Grouping for a conditional group
            </remarks>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Data.Querying.ConditionalGroup.ParentQuery">
            <summary>
            Gets or sets the query that contains the conditional
            </summary>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Data.Querying.ConditionalGroup.IsEvaluated">
            <summary>
            Gets whether or not the query part has been evaluated
            </summary>
        </member>
        <member name="T:Jenzabar.Portal.Framework.Mappers.PrincipalCollectionDataMapper">
            <summary>
            Summary description for PrincipalCollectionDataMapper.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Mappers.PrincipalCollectionDataMapper.FindByItem(Jenzabar.Portal.Framework.Data.ObjectIdentifier)">
            <summary>
            Finds a list of Principals for a specific item
            </summary>
            <param name="itemID">Unique ID for the item</param>
            <returns></returns>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Mappers.PrincipalCollectionDataMapper.FindByItem(Jenzabar.Portal.Framework.Data.ObjectIdentifier,System.String)">
            <summary>
            Finds a list of Principals for a specific item
            </summary>
            <param name="itemID">Unique ID for the item</param>
            <param name="itemType">Unique string value for the type of item</param>
            <returns></returns>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Mappers.PrincipalCollectionDataMapper.FindByItem(Jenzabar.Portal.Framework.Data.ObjectIdentifier,System.String,System.Int32)">
            <summary>
            Finds a list of Principals for a specific item
            </summary>
            <param name="itemID">Unique ID for the item</param>
            <param name="itemType">Unique string value for the type of item</param>
            <param name="itemKey">Unique integer for further specifying the item type, can not be negative</param>
            <returns></returns>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Mappers.PrincipalCollectionDataMapper.HasAccessToPrincipal(Jenzabar.Portal.Framework.Data.ObjectIdentifier,Jenzabar.Portal.Framework.Data.ObjectIdentifier,System.String,System.Int32)">
            <summary>
            Returns bool as to whether a user has access to a selected principal
            </summary>
            <param name="itemID">Boolean (can view/can't view)</param>
            <param name="userID">The ID of the user to check access for</param>
            <param name="itemType">The type of principal to check</param>
            <param name="itemKey">The key of the principal to check</param>
            <returns>Boolean as to whether user has access to a selected principal</returns>
        </member>
        <member name="T:Jenzabar.Portal.Framework.Data.Directory.ADUtilities">
            <summary>
            Utilities for working with directory data and objects
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Data.Directory.ADUtilities.GetLongFromLargeInteger(ActiveDs.IADsLargeInteger)">
            <summary>
            Converts a large integer found in ADAM to a long
            </summary>
            <param name="li"></param>
            <returns></returns>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Data.Directory.ADUtilities.IsEntryBound(System.DirectoryServices.DirectoryEntry)">
            <summary>
            Gets whether or not the directory entry is bound
            </summary>
            <param name="entry">The directory entry</param>
            <returns>True if bound, false otherwise</returns>
            <remarks>
            An entry is only bound if it corrisponds to data in the directory
            </remarks>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Data.Directory.ADUtilities.GetSid(Jenzabar.Portal.Framework.Security.ActiveDirectoryObject.ADDataStore)">
            <summary>
            Get the SID for a directory entry, if the SID is not found stirng.Empty is returned.
            </summary>
            <param name="e">The directory entry to get the SID for</param>
            <returns>A SID if one is associated with the directory entry, an empty string otherwise</returns>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Data.Directory.ADUtilities.ConvertStringSidToSid(System.String)">
            <summary>
            Converts a string SID into a SID byte array
            </summary>
            <param name="sid"></param>
            <returns>The SID converted to a byte array</returns>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Data.Directory.ADUtilities.ChildEntryExists(System.String,System.String)">
            <summary>
            return true if CN child entry with such name already exists
            </summary>
            <param name="childEntryName"></param>
            <param name="parentDN">parent object DN</param>
            <returns></returns>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Data.Directory.ADUtilities.ConvertGUIDToHex(System.Guid)">
            <summary>
            Converts a GUID into the hexidecimal version of that GUID. Slash is used to separate byte values
            </summary>
            <param name="g">The GUID to convert</param>
            <returns>The hexidecimal string version of that GUID</returns>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Data.Directory.ADUtilities.ConvertGUIDToHex(System.Guid,System.Boolean)">
            <summary>
            Converts a GUID into the hexidecimal version of that GUID
            </summary>
            <param name="g">The GUID to convert</param>
            <param name="useSlash">flag says if slash should be used before each byte ex (e1a2 or \e1\a2)</param>
            <returns>The hexidecimal string version of that GUID</returns>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Data.Directory.ADUtilities.MapObjectGuidToGuid(System.Byte[])">
            <summary>
            Maps the bytes for a GUID stored in the directory to the bytes used by the GUID constructor
            </summary>
            <param name="objectGuid">The bytes for the GUID in the directory</param>
            <returns>The corrisponding GUID</returns>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Data.Directory.ADUtilities.MapGuidToObjectGuid(System.Byte[])">
            <summary>
            Maps the bytes from a GUID.ToByteArray call to the bytes stored in the directory
            </summary>
            <param name="guid">The bytes from the GUID.ToByteArray call</param>
            <returns>The bytes as stored in the directory</returns>
        </member>
        <member name="T:Jenzabar.Portal.Framework.PortalMyPagesContext">
            <summary>
            A specialized PortalContext for a users "My Pages" section of the site.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.PortalMyPagesContext.#ctor(Jenzabar.Portal.Framework.Security.ActiveDirectoryObject.ADDataStore)">
            <summary>
            Creates a new instance of the PortalMyPagesContext class based on a DirectoryEntry that contains the information about the context.
            </summary>
            <param name="entry"></param>
        </member>
        <member name="P:Jenzabar.Portal.Framework.PortalMyPagesContext.DisableAdminScreen">
            <summary>
            True, meaning that there is no "Admin [this contexts name]" link at the top of the pages for this typ of context.
            </summary>
        </member>
        <member name="P:Jenzabar.Portal.Framework.PortalMyPagesContext.ContextType">
            <summary>
            Gets the type of context that this is. Always returns PortalContextType.Personal. The setter is disabled.
            </summary>
        </member>
        <member name="T:Jenzabar.Portal.Framework.Settings.PortletSetting">
            <summary>
            A setting for a portlet
            </summary>
            <remarks>
            This domain object is used to access and manipulate the data for an portlet setting
            </remarks>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Settings.PortletSetting.#ctor(Jenzabar.Portal.Framework.Portlet,System.String,System.String,Jenzabar.Portal.Framework.NameValueScope)">
            <summary>
            Constructs an application setting
            </summary>
            <param name="portlet">Portlet in which the porlet setting is created</param>
            <param name="settingName">Name of the setting</param>
            <param name="settingValue">Value of the setting</param>
            <param name="scope">Scope of the setting</param>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Settings.PortletSetting.#ctor(Jenzabar.Portal.Framework.Data.ObjectDataStore)">
            <summary>
            Constructs a portlet setting
            </summary>
            <param name="objectData">A portlet setting object data store</param>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Settings.PortletSetting.SetPortletTemplate(Jenzabar.Portal.Framework.PortletTemplate)">
            <summary>
            Used internally to set the portlet
            </summary>
            <param name="template">The portlet template object to set</param>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Settings.PortletSetting.SetPortlet(Jenzabar.Portal.Framework.Portlet)">
            <summary>
            Used internally to set the portlet instance
            </summary>
            <param name="portlet">The portlet to set</param>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Settings.PortletSetting.FindByID(Jenzabar.Portal.Framework.Data.ObjectIdentifier)">
            <summary>
            Finds an portlet setting by ID
            </summary>
            <param name="id">The object identifier of the portlet setting</param>
            <returns>The portlet setting with the specified object identifier</returns>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Settings.PortletSetting.FindByID(Jenzabar.Portal.Framework.Data.ObjectIdentifier,System.Boolean)">
            <summary>
            Finds an portlet setting by ID
            </summary>
            <param name="id">The object identifier of the portlet setting</param>
            <param name="noCache">Obsolete. Not Used. Exists only to support previous interface.</param>
            <returns>The portlet setting with the specified object identifier</returns>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Settings.PortletSetting.FindByQuery(Jenzabar.Portal.Framework.Data.Querying.ObjectQuery)">
            <summary>
            Finds portlet settings by query
            </summary>
            <param name="query">The query for the portlet settings</param>
            <returns>The portlet settings that match the specified query</returns>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Settings.PortletSetting.FindByName(Jenzabar.Portal.Framework.PortletTemplate,Jenzabar.Portal.Framework.Portlet,System.String)">
            <summary>
            Returns the portlet setting by name.
            </summary>
            <param name="template">The portlet template object</param>
            <param name="portlet">The portlet in which the portlet setting exists</param>
            <param name="name">The name of the portlet setting</param>
            <returns>The portlet setting by name</returns>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Settings.PortletSetting.FindByName(Jenzabar.Portal.Framework.PortletTemplate,Jenzabar.Portal.Framework.Portlet,System.String,System.Boolean)">
            <summary>
            Returns the portlet setting by name.
            </summary>
            <param name="template">The portlet template object</param>
            <param name="portlet">The portlet in which the portlet setting exists</param>
            <param name="name">The name of the portlet setting</param>
            <param name="noCache">Obsolete. Not Used. Exists only to support previous interface.</param>
            <returns>The portlet setting by name</returns>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Settings.PortletSetting.FindSettingsByPortletInstance(Jenzabar.Portal.Framework.PortletTemplate,Jenzabar.Portal.Framework.Portlet)">
            <summary>
            Returns the portlet settings for a given portlet instance.
            </summary>
            <param name="template">The portlet template object</param>
            <param name="portlet">The portlet in which the portlet setting exists</param>
            <returns>The portlet settings for a given portlet instance</returns>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Settings.PortletSetting.FindSettingsByPortletAndSettingName(Jenzabar.Portal.Framework.PortletTemplate,System.String)">
            <summary>
            Returns the application settings for a given setting name.
            </summary>
            <param name="template">The portlet template object</param>
            <param name="name">The name of the application setting</param>
            <returns>The application settings for a given setting name</returns>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Settings.PortletSetting.Create(Jenzabar.Portal.Framework.Portlet,System.String,System.String,Jenzabar.Portal.Framework.NameValueScope)">
            <summary>
            Creates an application setting.
            </summary>
            <param name="portlet">The portlet in which the portlet setting exists</param>
            <param name="settingName">The name of the portlet setting</param>
            <param name="settingValue">The value of the portlet setting</param>
            <param name="scope">Denotes the scope of the portlet setting</param>
            <returns>An portlet setting with the given input parameters</returns>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Settings.PortletSetting.ChangeScope(Jenzabar.Portal.Framework.Settings.PortletSetting,Jenzabar.Portal.Framework.Portlet,Jenzabar.Portal.Framework.ScopeChangeType)">
            <summary>
            Updates the scope of a portlet setting
            </summary>
            <param name="portletSetting">The portlet setting whose scope is being changed</param>
            <param name="portlet">The portlet the setting exists in</param>
            <param name="scopeChangeType">Denotes the change in scope for the portlet setting</param>
            <returns>A portlet setting with the appropriately changed scope</returns>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Settings.PortletSetting.CreateArray(Jenzabar.Portal.Framework.Data.ObjectDataStore[])">
            <summary>
            Used internally to create an array of domain objects from an array of ObjectDataStores
            </summary>
            <param name="portletSettingDataStores">The object data stores to create domain objects from</param>
            <returns>An array of domain objects</returns>	
        </member>
        <member name="P:Jenzabar.Portal.Framework.Settings.PortletSetting.ID">
            <summary>
            Gets the object identifer for the setting
            </summary>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Settings.PortletSetting.PortletTemplate">
            <summary>
            Gets the portlet for the setting
            </summary>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Settings.PortletSetting.Portlet">
            <summary>
            Gets the portlet instance for the setting
            </summary>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Settings.PortletSetting.Name">
            <summary>
            Gets the name of the setting
            </summary>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Settings.PortletSetting.Value">
            <summary>
            Gets the value of the setting
            </summary>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Settings.PortletSetting.Scope">
            <summary>
            Gets the scope of the setting
            </summary>
        </member>
        <member name="T:Jenzabar.Portal.Framework.Meta.LoginRedirectDescriptor">
            <summary>
            Login redirect Descriptor.
            </summary>
        </member>
        <member name="T:Jenzabar.Portal.Framework.Security.UserCredentials">
            <summary>
            The security information for a user
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Security.UserCredentials.#ctor(System.String,System.String,System.Boolean)">
            <summary>
            Constructs a credentials object
            </summary>
            <param name="username">The username of the user</param>
            <param name="password">The password for the user</param>
            <param name="isAuthenticated">Whether or not the user has been authenticated</param>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Security.UserCredentials.#ctor(System.String)">
            <summary>
            Constructs a credentials object
            </summary>
            <param name="username">The username of the user</param>
            <remarks>
            Creates a non-authenticated user credentials instance
            </remarks>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Security.UserCredentials.Equals(System.Object)">
            <summary>
            Determines if these UserCredentials are equal to another object.
            </summary>
            <param name="obj">The object to compare this to.</param>
            <returns>True if the other object is a UserCredentials object for the same user.</returns>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Security.UserCredentials.Equals(Jenzabar.Portal.Framework.Security.UserCredentials)">
            <summary>
            Determines if these UserCredentials are the same as another set of UserCredentials.
            </summary>
            <param name="uc">The UserCredentials to compare these to.</param>
            <returns>True if UserCredentials is not null, and is for the same user.</returns>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Security.UserCredentials.GetHashCode">
            <summary>
            Gets the hashcode for this object
            </summary>
            <returns>The hashcode of this object</returns>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Security.UserCredentials.GetUserNameFromDN(System.String)">
            <summary>
            returns username from given DN; if DN format is wrong - returns empty string
            </summary>
            <param name="dn">user object DN</param>
            <returns>user name</returns>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Security.UserCredentials.Username">
            <summary>
            Gets the username for the credentials
            </summary>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Security.UserCredentials.Password">
            <summary>
            Used internally to get the password for the user
            </summary>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Security.UserCredentials.IsAuthenticated">
            <summary>
            Returns true if the user has been authenticated, false otheriwse
            </summary>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Security.UserCredentials.User">
            <summary>
            Gets the user domain object that corrisponds to the current user credentials information
            </summary>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Security.UserCredentials.SID">
            <summary>
            Gets the SID for the current user credentials
            </summary>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Security.UserCredentials.UserDN">
            <summary>
            Gets the distinguished name for the user, this is used when connecting to active directory to read objects.
            </summary>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Security.UserCredentials.Guest">
            <summary>
            Gets the UserCredentials that are used to users that are not logged into the site.
            </summary>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Security.UserCredentials.HighPrivs">
            <summary>
            Gets the UserCredentials for full access to the site
            </summary>
        </member>
        <member name="T:Jenzabar.Portal.Framework.Settings.Meta.SiteSettingDescriptor">
            <summary>
            SiteSetting Descriptor.
            </summary>
        </member>
        <member name="T:Jenzabar.Framework.Licensing.LicenseKeyFormatterBase">
            <summary>
            Summary description for LicenseKeyFormatterBase.
            </summary>
        </member>
        <member name="P:Jenzabar.Portal.Framework.OnlineHelp.ID">
            <summary>
            Unique ID of object that can't be modified.
            </summary>
        </member>
        <member name="T:Jenzabar.Portal.Framework.GroupMembership">
            <summary>
            Set of static functions to work with GroupMembership.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.GroupMembership.GroupDeleteMember(System.Guid,System.Guid)">
            <summary>
            delete member from group
            </summary>
            <param name="memberID"></param>
            <param name="groupID"></param>
        </member>
        <member name="M:Jenzabar.Portal.Framework.GroupMembership.GroupAddMember(System.Guid,System.Guid)">
            <summary>
            add member to group 
            </summary>
            <param name="memberID"></param>
            <param name="groupID"></param>
        </member>
        <member name="M:Jenzabar.Portal.Framework.GroupMembership.DeleteMember(System.Guid)">
            <summary>
            delete all entries for given member
            </summary>
            <param name="memberID"></param>
        </member>
        <member name="M:Jenzabar.Portal.Framework.GroupMembership.DeleteGroup(System.Guid)">
            <summary>
            delete all entries for given group (as parent)
            </summary>
            <param name="groupID">group id</param>
        </member>
        <member name="M:Jenzabar.Portal.Framework.GroupMembership.GroupHasUsers(System.Guid)">
            <summary>
            return true if group or any subgroup has users, false othervise;
            The same functionality can be achieved by using PortalUser, PortalGroup object
            but this function has much better performance
            </summary>
            <param name="groupID">group id</param>
        </member>
        <member name="M:Jenzabar.Portal.Framework.GroupMembership.IsMemberOfGroup(System.Guid,System.Guid)">
            <summary>
            return true if mebper is member of a group.
            The same functionality can be achieved by using PortalUser, PortalGroup object
            but this function has much better performance
            </summary>
            <param name="groupID">group id</param>
            <param name="memberID">member id to ccheck</param>
        </member>
        <member name="M:Jenzabar.Portal.Framework.GroupMembership.Synchronize">
            <summary>
            Synchronize group membership for all users; can throw exception
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.GroupMembership.GetBaseGroupMembership(System.Guid)">
            <summary>
            returns base groups which user is member of -directly or indirectly;
            </summary>
            <returns></returns>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Licensing.LicenseInfo.ID">
            <summary>
            Unique ID of object that can't be modified.
            </summary>
        </member>
        <member name="T:Jenzabar.Portal.Framework.Security.AccessType">
            <summary>
            The level of access that a Role (PortalGroup) has to an object.
            </summary>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Security.AccessType.NoAccess">
            <summary>
            The User is not allowed to access the object.
            </summary>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Security.AccessType.View">
            <summary>
            The Role has access to view the object for Portlets and Pages. For Operations the Role will be able to perform the operation. 
            </summary>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Security.AccessType.Administer">
            <summary>
            The Role can view the object and all children, as well as perform all operations. This can only be assigned at the context level. This added as an inherited permission and will make the Role and Admin of all sub Contexts.
            </summary>
        </member>
        <member name="T:Jenzabar.Portal.Framework.Security.ObjectPermissionCollection">
            <summary>
            A list of the permissions given on an object. A role cannot have more than 1 entry in this list.
            </summary>
            <remarks>Internaly this is a wraper around the Active Directory Access Control List (ACL) object. </remarks>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Security.ObjectPermissionCollection.#ctor(ActiveDs.IADsAccessControlList)">
            <summary>
            Creates a new instance of the ObjectPermissionCollection from an active directory Access Control List
            </summary>
            <param name="acl">The Access Control List to base the ObjectPermissionCollection on.</param>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Security.ObjectPermissionCollection.SetDirty">
            <summary>
            marks this list of permissions as changed in some way, indicating that it needs to be committed
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Security.ObjectPermissionCollection.ClearDirty">
            <summary>
            Removes the dirty flag, this should be called when the security changes are committed
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Security.ObjectPermissionCollection.Add(Jenzabar.Portal.Framework.PortalGroup,Jenzabar.Portal.Framework.Security.AccessType)">
            <summary>
            Tries to locate an ObjectPermission in the list for the same role passed in and set the access on the permission entry. If an ObjectPermission  allowed to that Adds an ObjectPermission to the list
            </summary>
            <param name="role">The Role (PortalGroup) that the permission on the object is for.</param>
            <param name="access">The level of access that should be given to the role.</param>
            <returns>An existing ObejctPermission if found, or the newly added ObjectPermission.</returns>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Security.ObjectPermissionCollection.Add(Jenzabar.Portal.Framework.PortalGroup)">
            <summary>
            Tries to locate an ObjectPermission in the list for the role passed in. If the ObjectPermission is not found then a new one is added with Access of AccessType.NoAccess.
            </summary>
            <param name="role">The Role (PortalGroup) to locate or add an ObjectPermission for.</param>
            <returns>The existing or new ObjectPermision.</returns>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Security.ObjectPermissionCollection.Item(System.Int32)">
            <summary>
            Gets the permission information from the list based on it's index.
            </summary>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Security.ObjectPermissionCollection.Item(Jenzabar.Portal.Framework.PortalGroup)">
            <summary>
            gets the permission information for a role
            </summary>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Security.ObjectPermissionCollection.IsDirty">
            <summary>
            true if there have been changes to the security, otherwise false.
            </summary>
        </member>
        <member name="T:Jenzabar.Portal.Framework.Security.ObjectPermission">
            <summary>
            represents a role's rights to an object.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Security.ObjectPermission.#ctor(ActiveDs.IADsAccessControlEntry,Jenzabar.Portal.Framework.PortalGroup,Jenzabar.Portal.Framework.Security.ObjectPermissionCollection)">
            <summary>
            Creates a new instance of the ObjectPermission class for an ace
            </summary>
            <param name="ace">The internal Active Directory Access Control Entry to base the permissions on.</param>
            <param name="role">The Role (PortalGroup) that is granted permission.</param>
            <param name="owner">The list that this is a member of.</param>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Security.ObjectPermission.Role">
            <summary>
            Gets the group that is granted this access on the object.
            </summary>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Security.ObjectPermission.Access">
            <summary>
            Gets and sets the level of acces that the trustees have on this object.
            </summary>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Security.ObjectPermission.CanView">
            <summary>
            True if the trustee can view the object, otherwise false.
            </summary>
            <remarks>To change the this set the Access for this ObjectParmission to one of the AccessType enumeration values.</remarks>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Security.ObjectPermission.CanAdminister">
            <summary>
            True if the trustees can administer the object, otherwise false.
            </summary>
            <remarks>To change the this set the Access for this ObjectParmission to one of the AccessType enumeration values.</remarks>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Security.ObjectPermission.Inherited">
            <summary>
            True if the permission was inherited from an administrator grant on a parent object.
            </summary>
        </member>
        <member name="T:Jenzabar.Portal.Framework.Security.AdamSecurityHelper">
            <summary>
            Static methods to help in editing adam security
            </summary>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Security.AdamSecurityHelper.ADRightsRead">
            <summary>
            A combination of active directory rights flags that together indicate that a user or group is given read access to an object.
            </summary>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Security.AdamSecurityHelper.ADRightsNoAccess">
            <summary>
            A combination of active directory rights flags that together indicate that a user or group is given no access to an object.
            </summary>
            <remarks>This is needed since we do not want to remove the ace and re-add it later, very slow to do that!!!!</remarks>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Security.AdamSecurityHelper.ADRightsAdmin">
            <summary>
            A combination of active directory rights flags that together indicate that a user or group is given administrator access to an object.
            </summary>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Security.AdamSecurityHelper.ADAceFlagsInherit">
            <summary>
            The ace flags that need to be present to signify that the user can access the Administer Operation.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Security.AdamSecurityHelper.GetSecurityDescriptor(System.DirectoryServices.DirectoryEntry)">
            <summary>
            returns the security descriptor for a directory entry
            </summary>
            <param name="entry">The DirectoryEntry to get the security descriptor for</param>
            <returns>The security descriptor for the directory entry</returns>
        </member>
        <member name="T:Jenzabar.Portal.Framework.Security.ADAMSearchRules">
            <summary>
            class to describe some complex ADAM search rules
            search format: ([NOT]#fieldname#[Rule]=#value#))"
            </summary>
        </member>
        <member name="T:Jenzabar.Framework.Licensing.LicenseKeyFormatter_Hex4444">
            <summary>
            Summary description for LicenseKeyFormat.
            </summary>
        </member>
        <member name="T:Jenzabar.Portal.Framework.Data.Querying.ConditionalValue">
            <summary>
            Represents a value used in a conditional
            </summary>
            <remarks>
            The value can be any object which can be converted to a string
            The conversion is handled differently depending on the kind of
            data mapper evaluating the ConditionalValue.
            </remarks>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Data.Querying.ConditionalValue.#ctor(System.Object)">
            <summary>
            Constructs a conditional value
            </summary>
            <param name="value">The value</param>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Data.Querying.ConditionalValue.Evaluate">
            <summary>
            Evaluates the query part using the parent query's target object's object data mapper
            </summary>
            <returns>
            A string that represents either the results of a query if the query part is a query
            or a query in a form that can be evaluated by the parent query's target object's data mapper
            </returns>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Data.Querying.ConditionalValue.ToString">
            <summary>
            Gets a plain english representation of the query part
            </summary>
            <returns>
            A plain english version of the query part
            </returns>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Data.Querying.ConditionalValue.Value">
            <summary>
            Gets or sets the conditional value
            </summary>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Data.Querying.ConditionalValue.Type">
            <summary>
            Gets the query part type
            </summary>
            <remarks>
            This will always return ObjectQueryPartType.Value for a conditional value
            </remarks>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Data.Querying.ConditionalValue.ParentQuery">
            <summary>
            Gets or sets the query that contains the conditional
            </summary>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Data.Querying.ConditionalValue.IsEvaluated">
            <summary>
            Gets whether or not the query part has been evaluated
            </summary>
        </member>
        <member name="T:Jenzabar.Portal.Framework.Data.Querying.ObjectQueryOperator">
            <summary>
            A logical operator that represents the type of comparison to do between a property and an operand
            </summary>
        </member>
        <member name="T:Jenzabar.Portal.Framework.Data.Querying.ObjectQueryOperatorStringConverter">
            <summary>
            Used internally to convert an operator into a plain english string
            </summary>
        </member>
        <member name="T:Jenzabar.Portal.Framework.Data.Querying.ObjectQueryModifier">
            <summary>
            The type of modifier to use when evaluating a conditional or a grouping
            </summary>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Data.Querying.ObjectQueryModifier.None">
            <summary>
            No modifier
            </summary>
            <remarks>
            None is typically used when the conditional or grouping is the first added to a query
            </remarks>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Data.Querying.ObjectQueryModifier.And">
            <summary>
            The And modifier
            </summary>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Data.Querying.ObjectQueryModifier.Or">
            <summary>
            The Or modifier
            </summary>
        </member>
        <member name="T:Jenzabar.Portal.Framework.Data.Querying.ObjectQuerySortOrder">
            <summary>
            The sort order to use when sorting query results
            </summary>
        </member>
        <member name="T:Jenzabar.Portal.Framework.Data.Querying.ObjectQueryType">
            <summary>
            The type of object query
            </summary>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Data.Querying.ObjectQueryType.Full">
            <summary>
            A full query is one that returns the data for one or more complete domain object
            </summary>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Data.Querying.ObjectQueryType.Partial">
            <summary>
            A partial query is one that results a subset of the properties of a domain object
            </summary>
            <remarks>
            Partial queries cannot be used to populate domain objects, but can be useful for retrieving subsets of domain object data
            </remarks>
            <example>
            A partial query might be used to return the first and last name of a user, instead of all the properties that make up a user
            </example>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Data.Querying.ObjectQueryType.Sub">
            <summary>
            A sub query is a query that returns only a single property and is typically embedded directly in a parent query
            </summary>
            <remarks>
            Sub queries are used to simulate joins by using a combination of a query that returns a list of IDs and the IN operator
            </remarks>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Data.Querying.ObjectQueryPartType.Subject">
            <summary>
            The object query itself
            </summary>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Data.Querying.ObjectQueryPartType.Conditional">
            <summary>
            A conditional that filters the results of an object query
            </summary>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Data.Querying.ObjectQueryPartType.Grouping">
            <summary>
            A grouping of one or more conditionals so that a single modifier can be applied to all
            </summary>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Data.Querying.ObjectQueryPartType.Value">
            <summary>
            A value to be used in a conditional
            </summary>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Data.Querying.ObjectQueryPartType.Result">
            <summary>
            A partial query result that encapsulates the results from a partial or sub query
            </summary>
        </member>
        <member name="T:Jenzabar.Portal.Framework.FrameworkConstants">
            <summary>
            Framework Constants.
            </summary>
        </member>
        <member name="T:Jenzabar.Portal.Framework.Data.Querying.ObjectSortOrderList">
            <summary>
            This class is not yet implemented.
            </summary>
        </member>
        <member name="T:Jenzabar.Portal.Framework.Data.Querying.ObjectSortOrder">
            <summary>
            This class is not yet implemented.
            </summary>
        </member>
        <member name="T:Jenzabar.Portal.Framework.Data.Directory.ADException">
            <summary>
            Provides understandable error messages for the generic COM exceptions that are thrown by the Microsoft System.DirectoryServices classes.
            </summary>
            <remarks>
            This can be used as a wrapper around the nasty little COMExceptions that tell you nothing about what happened to cause the error.
            
            <list type="table">
            <listheader><term>COM Error Code</term><description>Error Code Description</description></listheader>
            <item><term>0x80005000</term><description>An invalid ADSI path name was passed</description></item> 
            <item><term>0x80005001</term><description>An unknown ADSI domain object was requested</description></item> 
            <item><term>0x80005002</term><description>An unknown ADSI user object was requested</description></item> 
            <item><term>0x80005003</term><description>An unknown ADSI computer object was requested</description></item> 
            <item><term>0x80005004</term><description>An unknown ADSI object was requested</description></item> 
            <item><term>0x80005005</term><description>The specified ADSI property was not set</description></item> 
            <item><term>0x80005006</term><description>The specified ADSI property is not supported</description></item> 
            <item><term>0x80005007</term><description>The specified ADSI property is invalid</description></item>
            <item><term>0x80005008</term><description>One or more input parameters are invalid</description></item> 
            <item><term>0x80005009</term><description>The specified ADSI object is not bound to a remote resource</description></item> 
            <item><term>0x8000500A</term><description>The specified ADSI object has not been modified</description></item> 
            <item><term>0x8000500B</term><description>The specified ADSI object has been modified</description></item> 
            <item><term>0x8000500C</term><description>The ADSI data type cannot be converted to/from a native DS data type</description></item> 
            <item><term>0x8000500D</term><description>The ADSI property cannot be found in the cache</description></item> 
            <item><term>0x8000500E</term><description>The ADSI object exists</description></item> 
            <item><term>0x8000500F</term><description>The attempted action violates the directory service schema rules</description></item> 
            <item><term>0x80005010</term><description>The specified column in the ADSI was not set</description></item> 
            <item><term>0x00005011</term><description>One or more errors occurred</description></item> 
            <item><term>0x00005012</term><description>The search operation has reached the last row</description></item> 
            <item><term>0x00005013</term><description>The search operation has reached the last column for the current row</description></item> 
            <item><term>0x80005014</term><description>The specified search filter is invalid</description></item> 
            </list>
            </remarks>
            <example>Using the exception to transform the meaningless hex values that the System.DirectoryServices classes throw:
            <code>
            // using Jenzabar.Portal.Framework.Data.Directory
            try
            {
            	// Do stuff with AcitveDirectory
            }
            catch( System.Runtime.InteropServices.COMException cx ) // Trap COMException this is the exception that is thrown by AD
            {
            	// Check to see that the error being trapped is an Active Directory exception
            	if( ADException.IsADError(cx) )
            	{
            		// THe exception is from active directory, create a new ADException, and throw that.
            		throw new ADException( cx );
            	}
            	else
            	{
            		// The exception is not from active directory, re-throw it
            		throw cx;
            	}
            }
            </code>
            </example>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Data.Directory.ADException.IsADError(System.Runtime.InteropServices.COMException)">
            <summary>
            Evaluates a <see cref="T:System.Runtime.InteropServices.COMException"/> to see if it was thrown from Active Directory.
            </summary>
            <param name="ex">The <see cref="T:System.Runtime.InteropServices.COMException"/> to be checked to see if it was thrown by Active Directory.</param>
            <returns>True if the exception was thrown from AD otherwise false.</returns>
            <remarks>For an overview of how to throw an exception of this type see the documentation on <see cref="T:Jenzabar.Portal.Framework.Data.Directory.ADException"/> class.</remarks>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Data.Directory.ADException.IsADError(System.Int32)">
            <summary>
            Evaluates a <see cref="T:System.Runtime.InteropServices.COMException"/> error code to see if it is in the range of error codes reserved for Active Directory
            </summary>
            <param name="errorCode">The error code to be evaluated.</param>
            <returns>true if the error code is an active directory error code, otherwise </returns>
            <remarks>For an overview of how to throw an exception of this type see the documentation on <see cref="T:Jenzabar.Portal.Framework.Data.Directory.ADException"/> class.</remarks>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Data.Directory.ADException.GetADErrorMessage(System.Runtime.InteropServices.COMException)">
            <summary>
            return descriptive message for given COM error
            </summary>
            <param name="ex"></param>
            <returns></returns>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Data.Directory.ADException.GetADErrorMessage(System.Int32)">
            <summary>
            return descriptive message for given COM exception error code
            </summary>
            <param name="errorCode">The COM error code for the exception that was thrown.</param>
            <returns></returns>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Data.Directory.ADException.#ctor(System.String)">
            <summary>
            Constructs the exception
            </summary>
            <param name="message">The message to be stored in the exception</param>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Data.Directory.ADException.#ctor(System.String,System.Exception)">
            <summary>
            Constructs the exception
            </summary>
            <param name="message">The message to be stored in the exception</param>
            <param name="innerException">The intial exception to be wrapped by </param>
        </member>
        <member name="M:Jenzabar.Portal.Framework.Data.Directory.ADException.#ctor(System.Runtime.InteropServices.COMException)">
            <summary>
            Creates a new instance of the ADException class that will provide more information about the <see cref="T:System.Runtime.InteropServices.COMException"/> that was returned from Active Directory and populates it with information about the specified <see cref="T:System.Runtime.InteropServices.COMException"/>.
            </summary>
            <param name="ex">The <see cref="T:System.Runtime.InteropServices.COMException"/> that triggered the error handeling.</param>
        </member>
        <member name="F:Jenzabar.Portal.Framework.Data.Directory.ADException._comMessage">
            <summary>
            Gets the original message associated with the <see cref="T:System.Runtime.InteropServices.COMException"/> that triggered the creation of this ADException.
            </summary>
            <remarks>This will always return the original message from the <see cref="T:System.Runtime.InteropServices.COMException"/>  that was used to create this.</remarks>
        </member>
        <member name="P:Jenzabar.Portal.Framework.Data.Directory.ADException.Category">
            <summary>
            category of exception, see enum for descriptions
            </summary>
        </member>
        <member name="T:Jenzabar.Portal.Framework.PortletOperation">
            <summary>
            Summary description for PortletOperation.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.PortletOperation.#ctor(Jenzabar.Portal.Framework.Security.ActiveDirectoryObject.ADDataStore)">
            <summary>
            Creates a new instance of the PortletOperation class
            </summary>
            <param name="entry">The DirectoryEntry that is used to store this objects information</param>
        </member>
        <member name="M:Jenzabar.Portal.Framework.PortletOperation.FindByPortlet(Jenzabar.Portal.Framework.Portlet)">
            <summary>
            Finds the operations for a portlet
            </summary>
            <param name="portlet">The Portlet to find operations for</param>
            <returns>A list of the operations for the Portlet</returns>
        </member>
        <member name="M:Jenzabar.Portal.Framework.PortletOperation.FindByPortlet(Jenzabar.Portal.Framework.Portlet,System.String)">
            <summary>
            Finds a portlet's operation by it's name.
            </summary>
            <param name="portlet">The portlet to find the operation for</param>
            <param name="operationName">The name of the operation to find</param>
            <returns>A instance of the operation, or </returns>
        </member>
        <member name="M:Jenzabar.Portal.Framework.PortletOperation.FindByPortletTemplate(Jenzabar.Portal.Framework.PortletTemplate)">
            <summary>
            Finds the operations for a portlet template
            </summary>
            <param name="template">The Portlet template to find operations for</param>
            <returns>A list of the operations for the Portlet template</returns>
        </member>
        <member name="M:Jenzabar.Portal.Framework.PortletOperation.FindByADObject(Jenzabar.Portal.Framework.Security.ActiveDirectoryObject)">
            <summary>
            Finds the operations for an active directory object
            </summary>
            <param name="adObject">the object </param>
            <returns>A list of the operations for the object</returns>
        </member>
        <member name="M:Jenzabar.Portal.Framework.PortletOperation.FindByDn(System.String)">
            <summary>
            Retrieves a PortletOpertaion using it's distinguished name.
            </summary>
            <param name="dn"></param>
            <returns></returns>
        </member>
        <member name="T:Jenzabar.Portal.Framework.LoginRedirect">
            <summary>
            Summary description for LoginRedirect.
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.LoginRedirect.#ctor(Jenzabar.Portal.Framework.Data.ObjectDataStore)">
            <summary>
            Constructs a login redirect
            </summary>
            <param name="objectData">A login redirect object data store</param>
        </member>
        <member name="M:Jenzabar.Portal.Framework.LoginRedirect.FindByID(Jenzabar.Portal.Framework.Data.ObjectIdentifier)">
            <summary>
            Finds an item by ID
            </summary>
            <param name="id">The object identifier of the login redirect entry</param>
            <returns>The login redirect object with the specified object identifier</returns>
        </member>
        <member name="M:Jenzabar.Portal.Framework.LoginRedirect.FindByQuery(Jenzabar.Portal.Framework.Data.Querying.ObjectQuery)">
            <summary>
            Finds login redirects by query
            </summary>
            <param name="query">The query for the login redirects</param>
            <returns>The login redirects that match the specified query</returns>
        </member>
        <member name="M:Jenzabar.Portal.Framework.LoginRedirect.FindByType(Jenzabar.Portal.Framework.RedirectType)">
            <summary>
            Returns the login redirect type.
            </summary>
            <param name="rtype">Redirect type</param>
            <returns>The login redirect object</returns>
        </member>
        <member name="M:Jenzabar.Portal.Framework.LoginRedirect.FindActive">
            <summary>
            Returns the active (current) login redirects for a site.
            </summary>
            <returns>The login redirects for a site</returns>
        </member>
        <member name="M:Jenzabar.Portal.Framework.LoginRedirect.FindAll">
            <summary>
            Returns the login redirects for site.
            </summary>
            <returns>The login redirects</returns>
        </member>
        <member name="M:Jenzabar.Portal.Framework.LoginRedirect.CreateAllEntries">
            <summary>
            Create/override all entries in DB for site
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.LoginRedirect.DeleteAllEntries">
            <summary>
            delete all entries in DB for site
            </summary>
        </member>
        <member name="M:Jenzabar.Portal.Framework.LoginRedirect.CreateArray(Jenzabar.Portal.Framework.Data.ObjectDataStore[])">
            <summary>
            Used internally to create an array of domain objects from an array of ObjectDataStores
            </summary>
            <param name="LoginRedirectDataStores">The object data stores to create domain objects from</param>
            <returns>An array of domain objects</returns>	
        </member>
        <member name="P:Jenzabar.Portal.Framework.LoginRedirect.ID">
            <summary>
            Gets the object identifer for the preference
            </summary>
        </member>
        <member name="P:Jenzabar.Portal.Framework.LoginRedirect.URL">
            <summary>
            Gets the name of the preference
            </summary>
        </member>
        <member name="P:Jenzabar.Portal.Framework.LoginRedirect.Type">
            <summary>
            Gets the value of the type
            </summary>
        </member>
        <member name="P:Jenzabar.Portal.Framework.LoginRedirect.IsActive">
            <summary>
            Gets the value of the type
            </summary>
        </member>
    </members>
</doc>
